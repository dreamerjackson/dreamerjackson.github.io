<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jonson</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://dreamerjonson.com/"/>
  <updated>2019-10-28T06:19:26.254Z</updated>
  <id>https://dreamerjonson.com/</id>
  
  <author>
    <name>Jonson</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>golang[99]-mapReduce</title>
    <link href="https://dreamerjonson.com/2019/10/28/golang-99-mapReduce/"/>
    <id>https://dreamerjonson.com/2019/10/28/golang-99-mapReduce/</id>
    <published>2019-10-28T04:09:25.000Z</published>
    <updated>2019-10-28T06:19:26.254Z</updated>
    
    <content type="html"><![CDATA[<h2 id="mapreduce简介"><a class="markdownIt-Anchor" href="#mapreduce简介"></a> mapReduce简介</h2><p>MapReduce是Google提出的一个软件架构，用于大规模数据集（大于1TB）的并行运算。概念“Map（映射）”和“Reduce（归纳）”，及他们的主要思想，都是从函数式编程语言借来的，还有从矢量编程语言借来的特性。<br>当前的软件实现是指定一个Map（映射）函数，用来把一组键值对映射成一组新的键值对，指定并发的Reduce（归纳）函数，用来保证所有映射的键值对中的每一个共享相同的键组。</p><p>上面的说法来自维基百科，mapReduce作为一个成熟、可靠、简单、高效的分布式架构，可以在并行计算上提供超强悍的性能。</p><h2 id="抽象表示"><a class="markdownIt-Anchor" href="#抽象表示"></a> 抽象表示</h2><p>map (k1,v1) → list(k2,v2)<br>reduce (k2,list(v2)) → list(v2)</p><h2 id="示意图"><a class="markdownIt-Anchor" href="#示意图"></a> 示意图</h2><img src="/2019/10/28/golang-99-mapReduce/mapreduce.png" title="deploy"><p>如上图所示是一个mapReduce模型的示意图，Input files 代表原始数据， Output files 代表最后输出的数据。<br>worker 既可以执行map,也可以执行reduce,具体依赖master的分配。<br>在输入输出之间，经历了两个过程。一个是map  一个是reduce。<br>map的过程是将一个复杂的问题 处理后转换为许多个小文件。例如map是对原始数据按照某种规律进行分类。 a类一个文件，b类一个文件…<br>reduce是对一个分类的问题进行计算的过程。<br>master是主调度器，例如将map生成的a类文件交由reduce worker去处理。而reduce函数处理的可能就是对a类文件中所有数据进行汇总。</p><h2 id="example-伪代码"><a class="markdownIt-Anchor" href="#example-伪代码"></a> example 伪代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">map(String key, String value):</span><br><span class="line">// key: document name</span><br><span class="line">// value: document contents</span><br><span class="line">for each word w in value:</span><br><span class="line">EmitIntermediate(w, &quot;1&quot;);</span><br><span class="line">reduce(String key, Iterator values):</span><br><span class="line">// key: a word</span><br><span class="line">// values: a list of counts</span><br><span class="line">int result = 0;</span><br><span class="line">for each v in values:</span><br><span class="line">result += ParseInt(v);</span><br><span class="line">Emit(AsString(result));</span><br></pre></td></tr></table></figure><h2 id="golang简单实现"><a class="markdownIt-Anchor" href="#golang简单实现"></a> golang简单实现</h2><h3 id="master"><a class="markdownIt-Anchor" href="#master"></a> master</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Master holds all the state that the master needs to keep track of.</span></span><br><span class="line"><span class="keyword">type</span> Master <span class="keyword">struct</span> &#123;</span><br><span class="line">sync.Mutex</span><br><span class="line"></span><br><span class="line">address     <span class="keyword">string</span></span><br><span class="line">doneChannel <span class="keyword">chan</span> <span class="keyword">bool</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// protected by the mutex</span></span><br><span class="line">newCond *sync.Cond <span class="comment">// signals when Register() adds to workers[]</span></span><br><span class="line">workers []<span class="keyword">string</span>   <span class="comment">// each worker's UNIX-domain socket name -- its RPC address</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Per-task information</span></span><br><span class="line">jobName <span class="keyword">string</span>   <span class="comment">// Name of currently executing job</span></span><br><span class="line">files   []<span class="keyword">string</span> <span class="comment">// Input files</span></span><br><span class="line">nReduce <span class="keyword">int</span>      <span class="comment">// Number of reduce partitions</span></span><br><span class="line"></span><br><span class="line">shutdown <span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line">l        net.Listener</span><br><span class="line">stats    []<span class="keyword">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="master的-rpc方法-注册worker"><a class="markdownIt-Anchor" href="#master的-rpc方法-注册worker"></a> master的 rpc方法 注册worker</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Register is an RPC method that is called by workers after they have started</span></span><br><span class="line"><span class="comment">// up to report that they are ready to receive tasks.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(mr *Master)</span> <span class="title">Register</span><span class="params">(args *RegisterArgs, _ *<span class="keyword">struct</span>&#123;&#125;)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">mr.Lock()</span><br><span class="line"><span class="keyword">defer</span> mr.Unlock()</span><br><span class="line">debug(<span class="string">"Register: worker %s\n"</span>, args.Worker)</span><br><span class="line">mr.workers = <span class="built_in">append</span>(mr.workers, args.Worker)</span><br><span class="line"></span><br><span class="line"><span class="comment">// tell forwardRegistrations() that there's a new workers[] entry.</span></span><br><span class="line">mr.newCond.Broadcast()</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="master-schedule-调度"><a class="markdownIt-Anchor" href="#master-schedule-调度"></a> master schedule 调度。</h3><p>1、维护是否有任务 以及 空闲worker<br>2、调用失败会分配给其他worker</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// schedule() starts and waits for all tasks in the given phase (Map</span></span><br><span class="line"><span class="comment">// or Reduce). the mapFiles argument holds the names of the files that</span></span><br><span class="line"><span class="comment">// are the inputs to the map phase, one per map task. nReduce is the</span></span><br><span class="line"><span class="comment">// number of reduce tasks. the registerChan argument yields a stream</span></span><br><span class="line"><span class="comment">// of registered workers; each item is the worker's RPC address,</span></span><br><span class="line"><span class="comment">// suitable for passing to call(). registerChan will yield all</span></span><br><span class="line"><span class="comment">// existing registered workers (if any) and new ones as they register.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">schedule</span><span class="params">(jobName <span class="keyword">string</span>, mapFiles []<span class="keyword">string</span>, nReduce <span class="keyword">int</span>, phase jobPhase, registerChan <span class="keyword">chan</span> <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> ntasks <span class="keyword">int</span></span><br><span class="line"><span class="keyword">var</span> n_other <span class="keyword">int</span> <span class="comment">// number of inputs (for reduce) or outputs (for map)</span></span><br><span class="line"><span class="keyword">switch</span> phase &#123;</span><br><span class="line"><span class="keyword">case</span> mapPhase:</span><br><span class="line">ntasks = <span class="built_in">len</span>(mapFiles)</span><br><span class="line">n_other = nReduce</span><br><span class="line"><span class="keyword">case</span> reducePhase:</span><br><span class="line">ntasks = nReduce</span><br><span class="line">n_other = <span class="built_in">len</span>(mapFiles)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"Schedule: %v %v tasks (%d I/Os)\n"</span>, ntasks, phase, n_other)</span><br><span class="line"></span><br><span class="line"><span class="comment">// All ntasks tasks have to be scheduled on workers, and only once all of</span></span><br><span class="line"><span class="comment">// them have been completed successfully should the function return.</span></span><br><span class="line"><span class="comment">// Remember that workers may fail, and that any given worker may finish</span></span><br><span class="line"><span class="comment">// multiple tasks.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// schedule will wait until all worker has done their jobs</span></span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"></span><br><span class="line"><span class="comment">// RPC call parameter</span></span><br><span class="line"><span class="keyword">var</span> task DoTaskArgs</span><br><span class="line">task.JobName = jobName</span><br><span class="line">task.NumOtherPhase = n_other</span><br><span class="line">task.Phase = phase</span><br><span class="line"></span><br><span class="line"><span class="comment">// task id will get from this channel</span></span><br><span class="line"><span class="keyword">var</span> taskChan = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; ntasks; i++ &#123;</span><br><span class="line">wg.Add(<span class="number">1</span>)</span><br><span class="line">taskChan &lt;- i</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// wait all workers have done their job, then close taskChan</span></span><br><span class="line">wg.Wait()</span><br><span class="line"><span class="built_in">close</span>(taskChan)</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="comment">// assign all task to worker</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> taskChan &#123;</span><br><span class="line"><span class="comment">// get a worker from register channel</span></span><br><span class="line">worker := &lt;-registerChan</span><br><span class="line"></span><br><span class="line">task.TaskNumber = i</span><br><span class="line"><span class="keyword">if</span> phase == mapPhase &#123;</span><br><span class="line">task.File = mapFiles[i]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Note: must use parameter</span></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(worker <span class="keyword">string</span>, task DoTaskArgs)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> call(worker, <span class="string">"Worker.DoTask"</span>, &amp;task, <span class="literal">nil</span>) &#123;</span><br><span class="line"><span class="comment">// only successful call will call wg.Done()</span></span><br><span class="line">wg.Done()</span><br><span class="line"></span><br><span class="line"><span class="comment">// put idle worker back to register channel</span></span><br><span class="line">registerChan &lt;- worker;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">log.Printf(<span class="string">"Schedule: assign %s task %v to %s failed"</span>, phase,</span><br><span class="line">task.TaskNumber, worker)</span><br><span class="line"></span><br><span class="line"><span class="comment">// put failed task back to task channel</span></span><br><span class="line">taskChan &lt;- task.TaskNumber</span><br><span class="line">&#125;</span><br><span class="line">&#125;(worker, task)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">"Schedule: %v phase done\n"</span>, phase)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="worker"><a class="markdownIt-Anchor" href="#worker"></a> worker</h3><p>worker是一个rpc服务，DoTask is called by the master when a new task is being scheduled on this worker.<br>worker可以是map worker  也可以是reduce worker</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">// Worker holds the state for a server waiting for DoTask or Shutdown RPCs</span><br><span class="line">type Worker struct &#123;</span><br><span class="line">sync.Mutex</span><br><span class="line"></span><br><span class="line">name       string</span><br><span class="line">Map        func(string, string) []KeyValue</span><br><span class="line">Reduce     func(string, []string) string</span><br><span class="line">nRPC       int // quit after this many RPCs; protected by mutex</span><br><span class="line">nTasks     int // total tasks executed; protected by mutex</span><br><span class="line">concurrent int // number of parallel DoTasks in this worker; mutex</span><br><span class="line">l          net.Listener</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// DoTask is called by the master when a new task is being scheduled on this</span><br><span class="line">// worker.</span><br><span class="line">func (wk *Worker) DoTask(arg *DoTaskArgs, _ *struct&#123;&#125;) error &#123;</span><br><span class="line">fmt.Printf(&quot;%s: given %v task #%d on file %s (nios: %d)\n&quot;,</span><br><span class="line">wk.name, arg.Phase, arg.TaskNumber, arg.File, arg.NumOtherPhase)</span><br><span class="line"></span><br><span class="line">wk.Lock()</span><br><span class="line">wk.nTasks += 1</span><br><span class="line">wk.concurrent += 1</span><br><span class="line">nc := wk.concurrent</span><br><span class="line">wk.Unlock()</span><br><span class="line"></span><br><span class="line">if nc &gt; 1 &#123;</span><br><span class="line">// schedule() should never issue more than one RPC at a</span><br><span class="line">// time to a given worker.</span><br><span class="line">log.Fatal(&quot;Worker.DoTask: more than one DoTask sent concurrently to a single worker\n&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">switch arg.Phase &#123;</span><br><span class="line">case mapPhase:</span><br><span class="line">doMap(arg.JobName, arg.TaskNumber, arg.File, arg.NumOtherPhase, wk.Map)</span><br><span class="line">case reducePhase:</span><br><span class="line">doReduce(arg.JobName, arg.TaskNumber, mergeName(arg.JobName, arg.TaskNumber), arg.NumOtherPhase, wk.Reduce)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">wk.Lock()</span><br><span class="line">wk.concurrent -= 1</span><br><span class="line">wk.Unlock()</span><br><span class="line"></span><br><span class="line">fmt.Printf(&quot;%s: %v task #%d done\n&quot;, wk.name, arg.Phase, arg.TaskNumber)</span><br><span class="line">return nil</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="简单的mapreduce实现"><a class="markdownIt-Anchor" href="#简单的mapreduce实现"></a> 简单的mapreduce实现</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// reduceName constructs the name of the intermediate file which map task</span></span><br><span class="line"><span class="comment">// &lt;mapTask&gt; produces for reduce task &lt;reduceTask&gt;.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reduceName</span><span class="params">(jobName <span class="keyword">string</span>, mapTask <span class="keyword">int</span>, reduceTask <span class="keyword">int</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"mrtmp."</span> + jobName + <span class="string">"-"</span> + strconv.Itoa(mapTask) + <span class="string">"-"</span> + strconv.Itoa(reduceTask)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// mergeName constructs the name of the output file of reduce task &lt;reduceTask&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mergeName</span><span class="params">(jobName <span class="keyword">string</span>, reduceTask <span class="keyword">int</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"mrtmp."</span> + jobName + <span class="string">"-res-"</span> + strconv.Itoa(reduceTask)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="map"><a class="markdownIt-Anchor" href="#map"></a> map</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// doMap manages one map task: it reads one of the input files</span></span><br><span class="line"><span class="comment">// (inFile), calls the user-defined map function (mapF) for that file's</span></span><br><span class="line"><span class="comment">// contents, and partitions the output into nReduce intermediate files.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">doMap</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">jobName <span class="keyword">string</span>,    // the name of the MapReduce job</span></span></span><br><span class="line"><span class="function"><span class="params">mapTaskNumber <span class="keyword">int</span>, // which <span class="keyword">map</span> task this is</span></span></span><br><span class="line"><span class="function"><span class="params">inFile <span class="keyword">string</span>,</span></span></span><br><span class="line">nReduce int, // the number of reduce task that will be run ("R" in the paper)</span><br><span class="line">mapF <span class="function"><span class="keyword">func</span><span class="params">(file <span class="keyword">string</span>, contents <span class="keyword">string</span>)</span> []<span class="title">KeyValue</span>,</span></span><br><span class="line"><span class="function">)</span> &#123;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// You will need to write this function.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// The intermediate output of a map task is stored as multiple</span></span><br><span class="line"><span class="comment">// files, one per destination reduce task. The file name includes</span></span><br><span class="line"><span class="comment">// both the map task number and the reduce task number. Use the</span></span><br><span class="line"><span class="comment">// filename generated by reduceName(jobName, mapTaskNumber, r) as</span></span><br><span class="line"><span class="comment">// the intermediate file for reduce task r. Call ihash() (see below)</span></span><br><span class="line"><span class="comment">// on each key, mod nReduce, to pick r for a key/value pair.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// mapF() is the map function provided by the application. The first</span></span><br><span class="line"><span class="comment">// argument should be the input file name, though the map function</span></span><br><span class="line"><span class="comment">// typically ignores it. The second argument should be the entire</span></span><br><span class="line"><span class="comment">// input file contents. mapF() returns a slice containing the</span></span><br><span class="line"><span class="comment">// key/value pairs for reduce; see common.go for the definition of</span></span><br><span class="line"><span class="comment">// KeyValue.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Look at Go's ioutil and os packages for functions to read</span></span><br><span class="line"><span class="comment">// and write files.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Coming up with a scheme for how to format the key/value pairs on</span></span><br><span class="line"><span class="comment">// disk can be tricky, especially when taking into account that both</span></span><br><span class="line"><span class="comment">// keys and values could contain newlines, quotes, and any other</span></span><br><span class="line"><span class="comment">// character you can think of.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// One format often used for serializing data to a byte stream that the</span></span><br><span class="line"><span class="comment">// other end can correctly reconstruct is JSON. You are not required to</span></span><br><span class="line"><span class="comment">// use JSON, but as the output of the reduce tasks *must* be JSON,</span></span><br><span class="line"><span class="comment">// familiarizing yourself with it here may prove useful. You can write</span></span><br><span class="line"><span class="comment">// out a data structure as a JSON string to a file using the commented</span></span><br><span class="line"><span class="comment">// code below. The corresponding decoding functions can be found in</span></span><br><span class="line"><span class="comment">// common_reduce.go.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//   enc := json.NewEncoder(file)</span></span><br><span class="line"><span class="comment">//   for _, kv := ... &#123;</span></span><br><span class="line"><span class="comment">//     err := enc.Encode(&amp;kv)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Remember to close the file after you have written all the values!</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">contents, err := ioutil.ReadFile(inFile)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Printf(<span class="string">"read file %s failed"</span>, inFile)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">kvs := mapF(inFile, <span class="keyword">string</span>(contents))</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> imm = <span class="built_in">make</span>([]*os.File, nReduce)</span><br><span class="line"><span class="keyword">var</span> enc = <span class="built_in">make</span>([]*json.Encoder, nReduce)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; nReduce; i++ &#123;</span><br><span class="line"><span class="keyword">if</span> f, err := os.Create(reduceName(jobName, mapTaskNumber, i)); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Printf(<span class="string">"create file %s failed"</span>, reduceName(jobName, mapTaskNumber, i))</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">imm[i] = f</span><br><span class="line">enc[i] = json.NewEncoder(f)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, kv := <span class="keyword">range</span> kvs &#123;</span><br><span class="line">r := ihash(kv.Key) % nReduce</span><br><span class="line"><span class="keyword">if</span> enc[r] != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> err := enc[r].Encode(&amp;kv); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Printf(<span class="string">"wirte %v to file %s failed"</span>, kv, reduceName(jobName, mapTaskNumber, r))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// close immediate files</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; nReduce; i++ &#123;</span><br><span class="line"><span class="keyword">if</span> imm[i] != <span class="literal">nil</span> &#123;</span><br><span class="line">imm[i].Close()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ihash</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">h := fnv.New32a()</span><br><span class="line">h.Write([]<span class="keyword">byte</span>(s))</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">int</span>(h.Sum32() &amp; <span class="number">0x7fffffff</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="reduce"><a class="markdownIt-Anchor" href="#reduce"></a> reduce</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// doReduce manages one reduce task: it reads the intermediate</span></span><br><span class="line"><span class="comment">// key/value pairs (produced by the map phase) for this task, sorts the</span></span><br><span class="line"><span class="comment">// intermediate key/value pairs by key, calls the user-defined reduce function</span></span><br><span class="line"><span class="comment">// (reduceF) for each key, and writes the output to disk.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">doReduce</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">jobName <span class="keyword">string</span>,       // the name of the whole MapReduce job</span></span></span><br><span class="line"><span class="function"><span class="params">reduceTaskNumber <span class="keyword">int</span>, // which reduce task this is</span></span></span><br><span class="line"><span class="function"><span class="params">outFile <span class="keyword">string</span>,       // write the output here</span></span></span><br><span class="line">nMap int,             // the number of map tasks that were run ("M" in the paper)</span><br><span class="line">reduceF <span class="function"><span class="keyword">func</span><span class="params">(key <span class="keyword">string</span>, values []<span class="keyword">string</span>)</span> <span class="title">string</span>,</span></span><br><span class="line"><span class="function">)</span> &#123;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// You will need to write this function.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// You'll need to read one intermediate file from each map task;</span></span><br><span class="line"><span class="comment">// reduceName(jobName, m, reduceTaskNumber) yields the file</span></span><br><span class="line"><span class="comment">// name from map task m.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Your doMap() encoded the key/value pairs in the intermediate</span></span><br><span class="line"><span class="comment">// files, so you will need to decode them. If you used JSON, you can</span></span><br><span class="line"><span class="comment">// read and decode by creating a decoder and repeatedly calling</span></span><br><span class="line"><span class="comment">// .Decode(&amp;kv) on it until it returns an error.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// You may find the first example in the golang sort package</span></span><br><span class="line"><span class="comment">// documentation useful.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// reduceF() is the application's reduce function. You should</span></span><br><span class="line"><span class="comment">// call it once per distinct key, with a slice of all the values</span></span><br><span class="line"><span class="comment">// for that key. reduceF() returns the reduced value for that key.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// You should write the reduce output as JSON encoded KeyValue</span></span><br><span class="line"><span class="comment">// objects to the file named outFile. We require you to use JSON</span></span><br><span class="line"><span class="comment">// because that is what the merger than combines the output</span></span><br><span class="line"><span class="comment">// from all the reduce tasks expects. There is nothing special about</span></span><br><span class="line"><span class="comment">// JSON -- it is just the marshalling format we chose to use. Your</span></span><br><span class="line"><span class="comment">// output code will look something like this:</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// enc := json.NewEncoder(file)</span></span><br><span class="line"><span class="comment">// for key := ... &#123;</span></span><br><span class="line"><span class="comment">// enc.Encode(KeyValue&#123;key, reduceF(...)&#125;)</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// file.Close()</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">var</span> keys []<span class="keyword">string</span>                   <span class="comment">// store all keys in this partition</span></span><br><span class="line"><span class="keyword">var</span> kvs = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>][]<span class="keyword">string</span>) <span class="comment">// store all key-value pairs from nMap imm files</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// read nMap imm files from map workers</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; nMap; i++ &#123;</span><br><span class="line">fn := reduceName(jobName, i, reduceTaskNumber)</span><br><span class="line">fmt.Println(<span class="string">"reduce fn"</span>,fn)</span><br><span class="line">imm, err := os.Open(fn)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Printf(<span class="string">"open immediate file %s failed"</span>, fn)</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> kv KeyValue</span><br><span class="line">dec := json.NewDecoder(imm)</span><br><span class="line">err = dec.Decode(&amp;kv)</span><br><span class="line"><span class="keyword">for</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// is this key seen?</span></span><br><span class="line"><span class="keyword">if</span> _, ok := kvs[kv.Key]; !ok &#123;</span><br><span class="line">keys = <span class="built_in">append</span>(keys, kv.Key)</span><br><span class="line">&#125;</span><br><span class="line">kvs[kv.Key] = <span class="built_in">append</span>(kvs[kv.Key], kv.Value)</span><br><span class="line"></span><br><span class="line"><span class="comment">// decode repeatedly until an error</span></span><br><span class="line">err = dec.Decode(&amp;kv)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Original MapReduce Paper 4.2 Ordering Guarantees</span></span><br><span class="line"><span class="comment">// Keys in one partition are processed in increasing key order</span></span><br><span class="line">sort.Strings(keys)</span><br><span class="line">out, err := os.Create(outFile)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Printf(<span class="string">"create output file %s failed"</span>, outFile)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">enc := json.NewEncoder(out)</span><br><span class="line"><span class="keyword">for</span> _, key := <span class="keyword">range</span> keys &#123;</span><br><span class="line"><span class="keyword">if</span> err = enc.Encode(KeyValue&#123;key, reduceF(key, kvs[key])&#125;); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Printf(<span class="string">"write [key: %s] to file %s failed"</span>, key, outFile)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">out.Close()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="完整例子"><a class="markdownIt-Anchor" href="#完整例子"></a> 完整例子</h2><p><a href="https://github.com/dreamerjackson/theWayToGolang" target="_blank" rel="noopener">https://github.com/dreamerjackson/theWayToGolang</a></p><h2 id="原始论文-参考资料"><a class="markdownIt-Anchor" href="#原始论文-参考资料"></a> 原始论文 参考资料</h2><p><a href="https://static.googleusercontent.com/media/research.google.com/zh-CN//archive/mapreduce-osdi04.pdf" target="_blank" rel="noopener">https://static.googleusercontent.com/media/research.google.com/zh-CN//archive/mapreduce-osdi04.pdf</a><br><a href="https://pdos.csail.mit.edu/6.824/labs/lab-1.html" target="_blank" rel="noopener">https://pdos.csail.mit.edu/6.824/labs/lab-1.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;mapreduce简介&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#mapreduce简介&quot;&gt;&lt;/a&gt; mapReduce简介&lt;/h2&gt;
&lt;p&gt;MapReduce是Google提出的一个软件架构，用于大规模数据集（大于1TB）的并行运
      
    
    </summary>
    
      <category term="go" scheme="https://dreamerjonson.com/categories/go/"/>
    
    
      <category term="go" scheme="https://dreamerjonson.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>golang[98]-拉取gitlab中的merge代码</title>
    <link href="https://dreamerjonson.com/2019/10/25/golang-98-%E6%8B%89%E5%8F%96gitlab%E4%B8%AD%E7%9A%84merge%E4%BB%A3%E7%A0%81/"/>
    <id>https://dreamerjonson.com/2019/10/25/golang-98-拉取gitlab中的merge代码/</id>
    <published>2019-10-25T07:15:06.000Z</published>
    <updated>2019-10-28T04:07:56.913Z</updated>
    
    <content type="html"><![CDATA[<p>有时候，需要拉取gitlab上的merge代码。而这些merge常常是私人分支合并过来的，不能直接拉取。那么如何在本地pull这些分支的代码呢？</p><p>例如PR是/merge_requests/6 那么git pull remote refs/merge-requests/6/head 即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;有时候，需要拉取gitlab上的merge代码。而这些merge常常是私人分支合并过来的，不能直接拉取。那么如何在本地pull这些分支的代码呢？&lt;/p&gt;
&lt;p&gt;例如PR是/merge_requests/6 那么git pull remote refs/merge-reque
      
    
    </summary>
    
      <category term="go" scheme="https://dreamerjonson.com/categories/go/"/>
    
    
      <category term="go" scheme="https://dreamerjonson.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>golang[97]-http-client-keeplive</title>
    <link href="https://dreamerjonson.com/2019/10/20/golang-97-http-client-keeplive/"/>
    <id>https://dreamerjonson.com/2019/10/20/golang-97-http-client-keeplive/</id>
    <published>2019-10-20T06:04:27.000Z</published>
    <updated>2019-10-20T06:08:45.937Z</updated>
    
    <content type="html"><![CDATA[<h2 id="go-http-client-持久连接"><a class="markdownIt-Anchor" href="#go-http-client-持久连接"></a> Go HTTP Client 持久连接</h2><p>调用 Go 的 HTTP Client 的 Get\Post 之类的方法时，默认是开启 HTTP keepalive 的，不过直接使用还是会遇到一些情况导致持久连接失效。首先，Client 构造好 HTTP 请求后，利用 Transport 来发送请求并等待结果，默认使用 DefaultTransport 来实现，大多数情况下，自定义 Client 时，配置一下自带的 Transport 即可。</p><p>transport 主要围绕着 persistConn 来实现，通过当前请求的 proxy, scheme, addr 作为 Key，对已经建立的连接进行缓存，新的请求来时，先从缓存中取一个连接，如果没有，再新发起一个连接。按照 Go 的基本法，毫无疑问会有两个 goroutine 来分别处理连接上的读和写，然后各种 channel 就开始飞来飞去，于是便让人深思这真的会比基于事件回调的实现简单吗。</p><p>好了，这里还是简单写点代码浅显的试验一下可能会导致持久连接失效的一些情况。</p><h2 id="准备工作"><a class="markdownIt-Anchor" href="#准备工作"></a> 准备工作</h2><p>在发送请求建立 TCP 连接时输出一些提示消息，这样便可以确定是否发起了新连接。自定义一个 Transport 的 Dial 方法就好了。这里输出连接的 LocalAddr，代码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">PrintLocalDial</span><span class="params">(network, addr <span class="keyword">string</span>)</span> <span class="params">(net.Conn, error)</span></span> &#123;</span><br><span class="line">    dial := net.Dialer&#123;</span><br><span class="line">        Timeout:   <span class="number">30</span> * time.Second,</span><br><span class="line">        KeepAlive: <span class="number">30</span> * time.Second,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    conn, err := dial.Dial(network, addr)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> conn, err</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">"connect done, use"</span>, conn.LocalAddr().String())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> conn, err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本地起了个在 8888 端口监听的 Web Server。好了，现在使用的 http.Client 如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">client := &amp;http.Client&#123;</span><br><span class="line">    Transport: &amp;http.Transport&#123;</span><br><span class="line">        Dial: PrintLocalDial,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发起请求<br>一个三观正确的，具有普遍意义的请求步骤如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">func doGet(client *http.Client, url string, id int) &#123;</span><br><span class="line">    resp, err := client.Get(url)</span><br><span class="line">    if err != nil &#123;</span><br><span class="line">        fmt.Println(err)</span><br><span class="line">        return</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    buf, err := ioutil.ReadAll(resp.Body)</span><br><span class="line">    fmt.Printf(&quot;%d: %s -- %v\n&quot;, id, string(buf), err)</span><br><span class="line">    if err := resp.Body.Close(); err != nil &#123;</span><br><span class="line">        fmt.Println(err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用 Get 进入 RoundTrip，首先会找到个 persistConn (从缓存中找个已经存在的或者新建一个)，再调用它的 roundTrip，这时会把这个请求发送到 writeLoop，然后等待响应的到来，当 readLoop 中读到响应数据时，便会把响应 Response 发到 roundTrip，自此，Get 方法返回，不过事情还没有结束，响应的 Body 还没有读取，readLoop 会一直阻塞等待读取数据，也就是当前这个 persistConn 一直被占用着，当读取完 resp.Body，readLoop 就会把 persistConn 放回连接缓存中，以便下个请求继续使用。</p><p>持续发几个请求试试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const URL = &quot;http://localhost:8888/&quot;</span><br><span class="line"></span><br><span class="line">for &#123;</span><br><span class="line">    go doGet(client, URL, 1)</span><br><span class="line">    go doGet(client, URL, 2)</span><br><span class="line">    time.Sleep(2 * time.Second)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每次同时发送两个请求，并等待请求完成，输出结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ go run client.go</span><br><span class="line">connect done, use [::1]:57571</span><br><span class="line">connect done, use [::1]:57570</span><br><span class="line">2: Hello, world -- &lt;nil&gt;</span><br><span class="line">1: Hello, world -- &lt;nil&gt;</span><br><span class="line">2: Hello, world -- &lt;nil&gt;</span><br><span class="line">1: Hello, world -- &lt;nil&gt;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>可见此时建立了两条 TCP 持久连接，后面的请求都复用了一开始建立好的连接。如果再加一个请求呢，每次同时发送三个请求，输出结果如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">go</span> run client.<span class="keyword">go</span></span><br><span class="line">connect done, use [::<span class="number">1</span>]:<span class="number">57582</span></span><br><span class="line">connect done, use [::<span class="number">1</span>]:<span class="number">57583</span></span><br><span class="line">connect done, use [::<span class="number">1</span>]:<span class="number">57584</span></span><br><span class="line"><span class="number">2</span>: Hello, world -- &lt;<span class="literal">nil</span>&gt;</span><br><span class="line"><span class="number">1</span>: Hello, world -- &lt;<span class="literal">nil</span>&gt;</span><br><span class="line"><span class="number">3</span>: Hello, world -- &lt;<span class="literal">nil</span>&gt;</span><br><span class="line">connect done, use [::<span class="number">1</span>]:<span class="number">57585</span></span><br><span class="line"><span class="number">2</span>: Hello, world -- &lt;<span class="literal">nil</span>&gt;</span><br><span class="line"><span class="number">1</span>: Hello, world -- &lt;<span class="literal">nil</span>&gt;</span><br><span class="line"><span class="number">3</span>: Hello, world -- &lt;<span class="literal">nil</span>&gt;</span><br><span class="line">connect done, use [::<span class="number">1</span>]:<span class="number">57586</span></span><br><span class="line"><span class="number">1</span>: Hello, world -- &lt;<span class="literal">nil</span>&gt;</span><br><span class="line"><span class="number">2</span>: Hello, world -- &lt;<span class="literal">nil</span>&gt;</span><br><span class="line"><span class="number">3</span>: Hello, world -- &lt;<span class="literal">nil</span>&gt;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>可见每次都会有一个请求是新建了个 TCP 连接的，也就是说默认只保持两条持久连接，这是因为这里自定义的的 http.Transport 没有设置 MaxIdleConnsPerHost，于是便采用了默认的 DefaultMaxIdleConnsPerHost，这个值是 2，这是 RFC2616 建议的单个客户端发起的持久连接数，不过在大部分情况下，这个值有点过于保守了。如果把 MaxIdleConnsPerHost 设置为 3，结果便和第一种情况一样。</p><h2 id="三观不正的请求"><a class="markdownIt-Anchor" href="#三观不正的请求"></a> 三观不正的请求</h2><p>这里来一个三观不正的请求：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">func doGet(client *http.Client, url string, id int) &#123;</span><br><span class="line">    resp, err := client.Get(url)</span><br><span class="line">    if err != nil &#123;</span><br><span class="line">        fmt.Println(err)</span><br><span class="line">        return</span><br><span class="line">    &#125;</span><br><span class="line">    if err := resp.Body.Close(); err != nil &#123;</span><br><span class="line">        fmt.Println(err)</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(&quot;%d: done\n&quot;, id)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里并不读取 resp.Body，因为读来也没用，但是也没法用 HEAD 请求(当然，这只是示例)。每次同时发送两个请求，结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ go run client.go</span><br><span class="line">connect done, use [::1]:57974</span><br><span class="line">connect done, use [::1]:57973</span><br><span class="line">2: done</span><br><span class="line">1: done</span><br><span class="line">connect done, use [::1]:57975</span><br><span class="line">connect done, use [::1]:57976</span><br><span class="line">2: done</span><br><span class="line">1: done</span><br><span class="line">connect done, use [::1]:57978</span><br><span class="line">connect done, use [::1]:57977</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>额，每次都是新建的 TCP 连接，看来持久连接没用上。考虑到 TCP 接收到的数据，应用层并没有主动去读取，如果再次复用这个连接发送数据，那么上一次的数据要怎么处理？要么 Go 在库里默默的给读了，要么直接断开连接新建一条。在 Go 1.0 中就是在库里默默的读，想象一下正在 Get 的是几个 G 的东西，调用 Close 的时候… 所以最好的方法还是断开这个没有读取 Body 就直接 Close 的连接。</p><p>这里实现上利用 bodyEOFSignal 这个数据类型来包装 readLoop 生成的响应 Body，并设置回调函数 earlyCloseFn，如果 Body 并没有读取完便 Close，这个函数将执行并通知 readLoop，然后 readLoop 关闭连接并退出。所以如果想要使用持久连接，还得处理掉 Body，这就看应用的取舍了，尽量使用 HEAD 代替，也可以读取来丢弃掉。</p><p>n, err := io.Copy(ioutil.Discard, resp.Body)<br>后话<br>当然，可以设置 http.Transport 的 DisableKeepAlives 来禁用掉持久连接。前面废话说的有点多，总结一下无非就下面几条：</p><p>Web Server 得支持持久连接<br>如果有需要，加大 DefaultMaxIdleConnsPerHost 或者设置 MaxIdleConnsPerHost<br>读完 Response Body 再 Close</p><h2 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h2><p><a href="https://serholiu.com/go-http-client-keepalive" target="_blank" rel="noopener">https://serholiu.com/go-http-client-keepalive</a><br><a href="https://www.cnblogs.com/gaorong/p/10887021.html" target="_blank" rel="noopener">https://www.cnblogs.com/gaorong/p/10887021.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;go-http-client-持久连接&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#go-http-client-持久连接&quot;&gt;&lt;/a&gt; Go HTTP Client 持久连接&lt;/h2&gt;
&lt;p&gt;调用 Go 的 HTTP Client 的
      
    
    </summary>
    
      <category term="go" scheme="https://dreamerjonson.com/categories/go/"/>
    
    
      <category term="go" scheme="https://dreamerjonson.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>golang[96]-http.RoundTripper</title>
    <link href="https://dreamerjonson.com/2019/10/19/golang-96-http-RoundTripper/"/>
    <id>https://dreamerjonson.com/2019/10/19/golang-96-http-RoundTripper/</id>
    <published>2019-10-19T07:54:47.000Z</published>
    <updated>2019-10-19T07:59:51.052Z</updated>
    
    <content type="html"><![CDATA[<p>I have written quite a bit on HTTP. And this blog post is just yet another one that talks about another interesting concept in the way Go deals with HTTP and how it makes HTTP related stuffs even much more fun.</p><p>In this post, I would be covering what Round tripping is, it’s applicable usecases and a tiny demo that shows it’s application.</p><p>This concept I want to talk about is called Round tripping or as the godoc describes it the ability to execute a single HTTP transaction, obtaining the Response for a given Request. Basically, what this means is being able to hook into what happens between making an HTTP request and receiving a response. In lay man terms, it’s like middleware but for an http.Client. I say this since round tripping occurs before the request is actually sent.</p><p>Although, it is possible to do anything within the RoundTrip method (as in like middleware for your HTTP handlers), it is recommended you don’t inspect the response, return an error (nil or non nil) and shouldn’t do stuffs like user auth (or cookies handling)…</p><p>Since http.RoundTripper is an interface. All you have to do to get this functionality is implement RoundTrip</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">type SomeClient struct &#123;&#125;</span><br><span class="line"></span><br><span class="line">func (s *SomeClient) RoundTrip(r *http.Request)(*Response, error) &#123;</span><br><span class="line">//Something comes here...Maybe</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And this is just keeping in line with other one method interfaces in the stdlib… Small and concise.</p><h2 id="usecases"><a class="markdownIt-Anchor" href="#usecases"></a> Usecases</h2><p>Caching http responses. For example, your web app has to connect to Github’s API in other to fetch stuffs (with the trending repos one of it). In real life, this changes quite often but let’s assume they rebuild that trending board once every 30 minutes and your app has tons of users. You obviously don’t want to have to hit the api every time to request for the trending leaderboard. since it is always the same in a 30 minutes window and also considering the fact that API calls are rate limited and due to the high usage of your app, you almost always hit / cross the limit.<br>A solution to this is to make use of http.RoundTripper. You could configure your http.Client with a RoundTripper that does the following :<br>Does the cache store have this item ?<br>Don’t make the HTTP request.<br>Return a new response by reading the data from the cache into the body of the response.<br>The cache store doesn’t have this item (probably because the cache is invalidated every 31 minutes)<br>Make the HTTP request to the api.<br>Cache the data received from the api.<br>You don’t have to make use of a RoundTripper for this as (inside a handler) you can check the cache for the existence of an item before you make the HTTP request at all. But with a RoundTripper implementation, you are probably distributing responsibilities properly[0]</p><p>Adding appropriate (authorization) headers to the request as need be… An example that readily comes to mind is google/go-github, a Golang client for Github’s api. Some part of Github’s api require the request be authenticated, some don’t. By default, the library doesn’t handle authentication, it uses a default HTTP client, if you need to be able to access authenticated sections of the api, you bring your own HTTP client along, for example with oauth2 protected endpoints… So how does this concern Round tripping, there is this ghinstallation that allows you authenticate Github apps with go-github. If you look at it’s codebase, all it does is provide an http.Client that implements http.RoundTripper. After which it set the appropriate headers (and values) in the RoundTrip method.</p><p>Rate limiting. This is quite similar to the above, maybe you have a bucket where you keep the number of connections you have made recently. You check if you are still in acceptable standing with the API and decide if you should make the request, pull back from making the request or scheduling it to run in future.</p><p>Whatever have you… Maybe not.</p><h2 id="real-world-usage"><a class="markdownIt-Anchor" href="#real-world-usage"></a> Real world usage</h2><p>We would be looking at caching HTTP responses with an implementation of http.RoundTripper. We would be creating a server that responds to just one route, then a client package that connects to that server. THe client would make use of it’s own implementation of http.Client so we can be able to provide our own RoundTripper, since we are trying to cache responses.</p><p>So here is what it is going to look like,</p><p>The client makes a request to the server.<br>If the response for that url exists in the cache store ?<br>Don’t make the call to the server.<br>Fetch the item from the store.<br>Write it into the response and return it straight off.<br>If the response for that url does not exist in the cache store<br>Make the request to the server.<br>Write the body of the response into the cache store.<br>Return the response.</p><p>We would be building the server first since it’s implementation is quite simple</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;net/http&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line"></span><br><span class="line">// server/main.go</span><br><span class="line"></span><br><span class="line">mux := http.NewServeMux()</span><br><span class="line"></span><br><span class="line">mux.HandleFunc(&quot;/&quot;, func(w http.ResponseWriter, r *http.Request) &#123;</span><br><span class="line">// This is here so we can actually see that the responses that have been cached don&apos;t get here</span><br><span class="line">fmt.Println(&quot;The request actually got here&quot;)</span><br><span class="line"></span><br><span class="line">w.Write([]byte(&quot;You got here&quot;))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">http.ListenAndServe(&quot;:8000&quot;, mux)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then we would build the client package. This is the most interesting part, while it is quite long (130+ LOCs), It should be relatively easy to follow.I highly recommend you head to the github repo.</p><p>First of all, we would need a cache store. Since this is a minimal project, a dictionary/map can help us get away ASAP. We would create a http.Transport that implements http.RoundTripper but is also a cache store.</p><p>In real life you’d want to separate them from each other though.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">cacheKey</span><span class="params">(r *http.Request)</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> r.URL.String()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> cacheTransport <span class="keyword">struct</span> &#123;</span><br><span class="line">data              <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span></span><br><span class="line">mu                sync.RWMutex</span><br><span class="line">originalTransport http.RoundTripper</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *cacheTransport)</span> <span class="title">Set</span><span class="params">(r *http.Request, value <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">c.mu.Lock()</span><br><span class="line"><span class="keyword">defer</span> c.mu.Unlock()</span><br><span class="line">c.data[cacheKey(r)] = value</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *cacheTransport)</span> <span class="title">Get</span><span class="params">(r *http.Request)</span> <span class="params">(<span class="keyword">string</span>, error)</span></span> &#123;</span><br><span class="line">c.mu.RLock()</span><br><span class="line"><span class="keyword">defer</span> c.mu.RUnlock()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> val, ok := c.data[cacheKey(r)]; ok &#123;</span><br><span class="line"><span class="keyword">return</span> val, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="string">""</span>, errors.New(<span class="string">"key not found in cache"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Here is the main functionality</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *cacheTransport)</span> <span class="title">RoundTrip</span><span class="params">(r *http.Request)</span> <span class="params">(*http.Response, error)</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check if we have the response cached..</span></span><br><span class="line"><span class="comment">// If yes, we don't have to hit the server</span></span><br><span class="line"><span class="comment">// We just return it as is from the cache store.</span></span><br><span class="line"><span class="keyword">if</span> val, err := c.Get(r); err == <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Fetching the response from the cache"</span>)</span><br><span class="line"><span class="keyword">return</span> cachedResponse([]<span class="keyword">byte</span>(val), r)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Ok, we don't have the response cached, the store was probably cleared.</span></span><br><span class="line"><span class="comment">// Make the request to the server.</span></span><br><span class="line">resp, err := c.originalTransport.RoundTrip(r)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get the body of the response so we can save it in the cache for the next request.</span></span><br><span class="line">buf, err := httputil.DumpResponse(resp, <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Saving it to the cache store</span></span><br><span class="line">c.Set(r, <span class="keyword">string</span>(buf))</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"Fetching the data from the real source"</span>)</span><br><span class="line"><span class="keyword">return</span> resp, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *cacheTransport)</span> <span class="title">Clear</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">c.mu.Lock()</span><br><span class="line"><span class="keyword">defer</span> c.mu.Unlock()</span><br><span class="line"></span><br><span class="line">c.data = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">cachedResponse</span><span class="params">(b []<span class="keyword">byte</span>, r *http.Request)</span> <span class="params">(*http.Response, error)</span></span> &#123;</span><br><span class="line">buf := bytes.NewBuffer(b)</span><br><span class="line"><span class="keyword">return</span> http.ReadResponse(bufio.NewReader(buf), r)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then the main function where we bootstrap the program. We would set a timer to clear out the cache store, so we can make requests to the server, this is to enable us view which requests are being served from the cache or the original server.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//client/main/go</span></span><br><span class="line"></span><br><span class="line">cachedTransport := newTransport()</span><br><span class="line"></span><br><span class="line"><span class="comment">//Create a custom client so we can make use of our RoundTripper</span></span><br><span class="line"><span class="comment">//If you make use of http.Get(), the default http client located at http.DefaultClient is used instead</span></span><br><span class="line"><span class="comment">//Since we have special needs, we have to make use of our own http.RoundTripper implementation</span></span><br><span class="line">client := &amp;http.Client&#123;</span><br><span class="line">Transport: cachedTransport,</span><br><span class="line">Timeout:   time.Second * <span class="number">5</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Time to clear the cache store so we can make request to the original server rather than fetch from the cache store</span></span><br><span class="line"><span class="comment">// This is to replicate real expiration of data in a cache store</span></span><br><span class="line">cacheClearTicker := time.NewTicker(time.Second * <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//Make a new request every second</span></span><br><span class="line"><span class="comment">//This would help demonstrate if the response is coming from the real server or the cache</span></span><br><span class="line">reqTicker := time.NewTicker(time.Second * <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">terminateChannel := <span class="built_in">make</span>(<span class="keyword">chan</span> os.Signal, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">signal.Notify(terminateChannel, syscall.SIGTERM, syscall.SIGHUP)</span><br><span class="line"></span><br><span class="line">req, err := http.NewRequest(http.MethodGet, <span class="string">"http://localhost:8000"</span>, strings.NewReader(<span class="string">""</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">"Whoops"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> &lt;-cacheClearTicker.C:</span><br><span class="line"><span class="comment">// Clear the cache so we can hit the original server</span></span><br><span class="line">cachedTransport.Clear()</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> &lt;-terminateChannel:</span><br><span class="line">cacheClearTicker.Stop()</span><br><span class="line">reqTicker.Stop()</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> &lt;-reqTicker.C:</span><br><span class="line"></span><br><span class="line">resp, err := client.Do(req)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Printf(<span class="string">"An error occurred.... %v"</span>, err)</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">buf, err := ioutil.ReadAll(resp.Body)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Printf(<span class="string">"An error occurred.... %v"</span>, err)</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"The body of the response is \"%s\" \n\n"</span>, <span class="keyword">string</span>(buf))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h2><p><a href="https://lanre.wtf/blog/2017/07/24/roundtripper-go/" target="_blank" rel="noopener">https://lanre.wtf/blog/2017/07/24/roundtripper-go/</a></p><h2 id="源代码"><a class="markdownIt-Anchor" href="#源代码"></a> 源代码</h2><p><a href="https://github.com/dreamerjackson/rounder" target="_blank" rel="noopener">https://github.com/dreamerjackson/rounder</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I have written quite a bit on HTTP. And this blog post is just yet another one that talks about another interesting concept in the way Go
      
    
    </summary>
    
      <category term="go" scheme="https://dreamerjonson.com/categories/go/"/>
    
    
      <category term="go" scheme="https://dreamerjonson.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>golang[95]-golang-优秀代码赏析-检测goroutine溢出</title>
    <link href="https://dreamerjonson.com/2019/10/12/golang-95-golang-%E4%BC%98%E7%A7%80%E4%BB%A3%E7%A0%81%E8%B5%8F%E6%9E%90-%E6%A3%80%E6%B5%8Bgoroutine%E6%BA%A2%E5%87%BA/"/>
    <id>https://dreamerjonson.com/2019/10/12/golang-95-golang-优秀代码赏析-检测goroutine溢出/</id>
    <published>2019-10-12T09:12:28.000Z</published>
    <updated>2019-10-12T09:16:36.781Z</updated>
    
    <content type="html"><![CDATA[<p>在latern中看到了这段代码，防止协程溢出。</p><p>原理是利用了pprof.lookup()  此会将存在的goroutine的stacktrace打印出来。</p><p>通过对比代码前与代码后的goroutine number。  即可得知是否有新的goroutine创建出来。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Package grtrack provides a utility that helps check for goroutine leaks.</span></span><br><span class="line"><span class="keyword">package</span> grtrack</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"bytes"</span></span><br><span class="line"><span class="string">"regexp"</span></span><br><span class="line"><span class="string">"runtime/pprof"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line"><span class="string">"testing"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/stretchr/testify/assert"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">goroutineNumber = regexp.MustCompile(<span class="string">`goroutine ([0-9]+)`</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Object that can be used to check whether goroutines have leaked at any point</span></span><br><span class="line"><span class="comment">// in time.</span></span><br><span class="line"><span class="keyword">type</span> Checker <span class="keyword">interface</span> &#123;</span><br><span class="line"><span class="comment">// Check immediately checks whether there's been a leak</span></span><br><span class="line">Check(t *testing.T)</span><br><span class="line"></span><br><span class="line"><span class="comment">// CheckAfter waits wait and then checks</span></span><br><span class="line">CheckAfter(t *testing.T, wait time.Duration)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> checker <span class="keyword">struct</span> &#123;</span><br><span class="line">check <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">func</span> <span class="title">Start</span><span class="params">()</span> <span class="title">Checker</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> buf bytes.Buffer</span><br><span class="line">_ = pprof.Lookup(<span class="string">"goroutine"</span>).WriteTo(&amp;buf, <span class="number">2</span>)</span><br><span class="line">before := buf.String()</span><br><span class="line"></span><br><span class="line">check := <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> buf bytes.Buffer</span><br><span class="line">_ = pprof.Lookup(<span class="string">"goroutine"</span>).WriteTo(&amp;buf, <span class="number">2</span>)</span><br><span class="line">after := buf.String()</span><br><span class="line"></span><br><span class="line">beforeGoroutines := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">bool</span>)</span><br><span class="line">beforeMatches := goroutineNumber.FindAllStringSubmatch(before, <span class="number">-1</span>)</span><br><span class="line"><span class="keyword">for</span> _, match := <span class="keyword">range</span> beforeMatches &#123;</span><br><span class="line">beforeGoroutines[match[<span class="number">1</span>]] = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">afterMatches := goroutineNumber.FindAllStringSubmatchIndex(after, <span class="number">-1</span>)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(afterMatches); i++ &#123;</span><br><span class="line">idx := afterMatches[i][<span class="number">0</span>]</span><br><span class="line">nextIdx := <span class="built_in">len</span>(after)</span><br><span class="line">last := i == <span class="built_in">len</span>(afterMatches)<span class="number">-1</span></span><br><span class="line"><span class="keyword">if</span> !last &#123;</span><br><span class="line">nextIdx = afterMatches[i+<span class="number">1</span>][<span class="number">0</span>]</span><br><span class="line">&#125;</span><br><span class="line">matches := goroutineNumber.FindAllStringSubmatch(after[idx:], <span class="number">1</span>)</span><br><span class="line">num := matches[<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line">_, exists := beforeGoroutines[num]</span><br><span class="line"><span class="keyword">if</span> !exists &#123;</span><br><span class="line">delta := after[idx:nextIdx]</span><br><span class="line"><span class="keyword">if</span> !strings.Contains(delta, <span class="string">"net/http/server.go"</span>) &#123;</span><br><span class="line">assert.Fail(t, <span class="string">"Leaked Goroutine"</span>, delta)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> &amp;checker&#123;check&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *checker)</span> <span class="title">Check</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">c.check(t)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *checker)</span> <span class="title">CheckAfter</span><span class="params">(t *testing.T, wait time.Duration)</span></span> &#123;</span><br><span class="line">time.Sleep(wait)</span><br><span class="line">c.check(t)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在latern中看到了这段代码，防止协程溢出。&lt;/p&gt;
&lt;p&gt;原理是利用了pprof.lookup()  此会将存在的goroutine的stacktrace打印出来。&lt;/p&gt;
&lt;p&gt;通过对比代码前与代码后的goroutine number。  即可得知是否有新的gorou
      
    
    </summary>
    
      <category term="go" scheme="https://dreamerjonson.com/categories/go/"/>
    
    
      <category term="go" scheme="https://dreamerjonson.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>golang[94]-golang-优秀代码赏析-eventually等待获取最后存储起来的value</title>
    <link href="https://dreamerjonson.com/2019/10/11/golang-94-golang-%E4%BC%98%E7%A7%80%E4%BB%A3%E7%A0%81%E8%B5%8F%E6%9E%90/"/>
    <id>https://dreamerjonson.com/2019/10/11/golang-94-golang-优秀代码赏析/</id>
    <published>2019-10-11T08:36:18.000Z</published>
    <updated>2019-10-12T09:10:53.029Z</updated>
    
    <content type="html"><![CDATA[<h2 id="并发获取最后存储起来的value如果获取不到就会陷入等待一段时间"><a class="markdownIt-Anchor" href="#并发获取最后存储起来的value如果获取不到就会陷入等待一段时间"></a> 并发获取最后存储起来的value，如果获取不到就会陷入等待一段时间。</h2><h2 id="source-源码"><a class="markdownIt-Anchor" href="#source-源码"></a> source 源码</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Package eventual provides values that eventually have a value.</span></span><br><span class="line"><span class="keyword">package</span> eventual</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"math"</span></span><br><span class="line"><span class="string">"sync"</span></span><br><span class="line"><span class="string">"sync/atomic"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Value is an eventual value, meaning that callers wishing to access the value</span></span><br><span class="line"><span class="comment">// block until the value is available.</span></span><br><span class="line"><span class="keyword">type</span> Value <span class="keyword">interface</span> &#123;</span><br><span class="line"><span class="comment">// Set sets this Value to the given val.</span></span><br><span class="line">Set(val <span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get waits up to timeout for the value to be set and returns it, or returns</span></span><br><span class="line"><span class="comment">// nil if it times out or Cancel() is called. valid will be false in latter</span></span><br><span class="line"><span class="comment">// case. If timeout is 0, Get won't wait. If timeout is -1, Get will wait</span></span><br><span class="line"><span class="comment">// forever.</span></span><br><span class="line">Get(timeout time.Duration) (ret <span class="keyword">interface</span>&#123;&#125;, valid <span class="keyword">bool</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Cancel cancels this value, signaling any waiting calls to Get() that no</span></span><br><span class="line"><span class="comment">// value is coming. If no value was set before Cancel() was called, all future</span></span><br><span class="line"><span class="comment">// calls to Get() will return nil, false. Subsequent calls to Set after Cancel</span></span><br><span class="line"><span class="comment">// have no effect.</span></span><br><span class="line">Cancel()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Getter is a functional interface for the Value.Get function</span></span><br><span class="line"><span class="keyword">type</span> Getter <span class="function"><span class="keyword">func</span><span class="params">(time.Duration)</span> <span class="params">(<span class="keyword">interface</span>&#123;&#125;, <span class="keyword">bool</span>)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">type</span> <span class="title">value</span> <span class="title">struct</span></span> &#123;</span><br><span class="line">state   atomic.Value</span><br><span class="line">waiters []<span class="keyword">chan</span> <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">mutex   sync.Mutex</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> stateholder <span class="keyword">struct</span> &#123;</span><br><span class="line">val      <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">set      <span class="keyword">bool</span></span><br><span class="line">canceled <span class="keyword">bool</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NewValue creates a new Value.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewValue</span><span class="params">()</span> <span class="title">Value</span></span> &#123;</span><br><span class="line">result := &amp;value&#123;waiters: <span class="built_in">make</span>([]<span class="keyword">chan</span> <span class="keyword">interface</span>&#123;&#125;, <span class="number">0</span>)&#125;</span><br><span class="line">result.state.Store(&amp;stateholder&#123;&#125;)</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DefaultGetter builds a Getter that always returns the supplied value.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DefaultGetter</span><span class="params">(val <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">Getter</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(time.Duration)</span> <span class="params">(<span class="keyword">interface</span>&#123;&#125;, <span class="keyword">bool</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> val, <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DefaultUnsetGetter builds a Getter that always !ok.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DefaultUnsetGetter</span><span class="params">()</span> <span class="title">Getter</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(time.Duration)</span> <span class="params">(<span class="keyword">interface</span>&#123;&#125;, <span class="keyword">bool</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v *value)</span> <span class="title">Set</span><span class="params">(val <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">v.mutex.Lock()</span><br><span class="line"><span class="keyword">defer</span> v.mutex.Unlock()</span><br><span class="line"></span><br><span class="line">state := v.getState()</span><br><span class="line">settable := !state.canceled</span><br><span class="line"><span class="keyword">if</span> settable &#123;</span><br><span class="line">v.setState(&amp;stateholder&#123;</span><br><span class="line">val:      val,</span><br><span class="line">set:      <span class="literal">true</span>,</span><br><span class="line">canceled: <span class="literal">false</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> v.waiters != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// Notify anyone waiting for value</span></span><br><span class="line"><span class="keyword">for</span> _, waiter := <span class="keyword">range</span> v.waiters &#123;</span><br><span class="line">waiter &lt;- val</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Clear waiters</span></span><br><span class="line">v.waiters = <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v *value)</span> <span class="title">Cancel</span><span class="params">()</span></span> &#123;</span><br><span class="line">v.mutex.Lock()</span><br><span class="line"><span class="keyword">defer</span> v.mutex.Unlock()</span><br><span class="line"></span><br><span class="line">state := v.getState()</span><br><span class="line">v.setState(&amp;stateholder&#123;</span><br><span class="line">val:      state.val,</span><br><span class="line">set:      state.set,</span><br><span class="line">canceled: <span class="literal">true</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> v.waiters != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// Notify anyone waiting for value</span></span><br><span class="line"><span class="keyword">for</span> _, waiter := <span class="keyword">range</span> v.waiters &#123;</span><br><span class="line"><span class="built_in">close</span>(waiter)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Clear waiters</span></span><br><span class="line">v.waiters = <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v *value)</span> <span class="title">Get</span><span class="params">(timeout time.Duration)</span> <span class="params">(ret <span class="keyword">interface</span>&#123;&#125;, valid <span class="keyword">bool</span>)</span></span> &#123;</span><br><span class="line">state := v.getState()</span><br><span class="line"></span><br><span class="line"><span class="comment">// First check for existing value using atomic operations (for speed)</span></span><br><span class="line"><span class="keyword">if</span> state.set &#123;</span><br><span class="line"><span class="comment">// Value found, use it</span></span><br><span class="line"><span class="keyword">return</span> state.val, <span class="literal">true</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> state.canceled &#123;</span><br><span class="line"><span class="comment">// Value was canceled, return false</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> timeout == <span class="number">0</span> &#123;</span><br><span class="line"><span class="comment">// Don't wait</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// If we didn't find an existing value, try again but this time using locking</span></span><br><span class="line">v.mutex.Lock()</span><br><span class="line">state = v.getState()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> state.set &#123;</span><br><span class="line"><span class="comment">// Value found, use it</span></span><br><span class="line">v.mutex.Unlock()</span><br><span class="line"><span class="keyword">return</span> state.val, <span class="literal">true</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> state.canceled &#123;</span><br><span class="line"><span class="comment">// Value was canceled, return false</span></span><br><span class="line">v.mutex.Unlock()</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> timeout == <span class="number">-1</span> &#123;</span><br><span class="line"><span class="comment">// Wait essentially forever</span></span><br><span class="line">timeout = time.Duration(math.MaxInt64)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Value not found, register to be notified once value is set</span></span><br><span class="line">valCh := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">interface</span>&#123;&#125;, <span class="number">1</span>)</span><br><span class="line">v.waiters = <span class="built_in">append</span>(v.waiters, valCh)</span><br><span class="line">v.mutex.Unlock()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Wait up to timeout for value to get set</span></span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> v, ok := &lt;-valCh:</span><br><span class="line"><span class="keyword">return</span> v, ok</span><br><span class="line"><span class="keyword">case</span> &lt;-time.After(timeout):</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v *value)</span> <span class="title">getState</span><span class="params">()</span> *<span class="title">stateholder</span></span> &#123;</span><br><span class="line">state := v.state.Load()</span><br><span class="line"><span class="keyword">if</span> state == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> state.(*stateholder)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v *value)</span> <span class="title">setState</span><span class="params">(state *stateholder)</span></span> &#123;</span><br><span class="line">v.state.Store(state)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="test"><a class="markdownIt-Anchor" href="#test"></a> test</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> eventual</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"sync"</span></span><br><span class="line"><span class="string">"sync/atomic"</span></span><br><span class="line"><span class="string">"testing"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/getlantern/grtrack"</span></span><br><span class="line"><span class="string">"github.com/stretchr/testify/assert"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">concurrency = <span class="number">200</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestSingle</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">goroutines := grtrack.Start()</span><br><span class="line">v := NewValue()</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">time.Sleep(<span class="number">20</span> * time.Millisecond)</span><br><span class="line">v.Set(<span class="string">"hi"</span>)</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">r, ok := v.Get(<span class="number">0</span>)</span><br><span class="line">assert.False(t, ok, <span class="string">"Get with no timeout should have failed"</span>)</span><br><span class="line"></span><br><span class="line">r, ok = v.Get(<span class="number">10</span> * time.Millisecond)</span><br><span class="line">assert.False(t, ok, <span class="string">"Get with short timeout should have timed out"</span>)</span><br><span class="line"></span><br><span class="line">r, ok = v.Get(<span class="number">-1</span>)</span><br><span class="line">assert.True(t, ok, <span class="string">"Get with really long timeout should have succeeded"</span>)</span><br><span class="line">assert.Equal(t, <span class="string">"hi"</span>, r, <span class="string">"Wrong result"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Set a different value</span></span><br><span class="line">v.Set(<span class="string">"bye"</span>)</span><br><span class="line">r, ok = v.Get(<span class="number">0</span>)</span><br><span class="line">assert.True(t, ok, <span class="string">"Subsequent get with no timeout should have succeeded"</span>)</span><br><span class="line">assert.Equal(t, <span class="string">"bye"</span>, r, <span class="string">"Value should have changed"</span>)</span><br><span class="line"></span><br><span class="line">goroutines.CheckAfter(t, <span class="number">50</span>*time.Millisecond)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestNoSet</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">goroutines := grtrack.Start()</span><br><span class="line">v := NewValue()</span><br><span class="line"></span><br><span class="line">_, ok := v.Get(<span class="number">10</span> * time.Millisecond)</span><br><span class="line">assert.False(t, ok, <span class="string">"Get before setting value should not be okay"</span>)</span><br><span class="line"></span><br><span class="line">goroutines.CheckAfter(t, <span class="number">50</span>*time.Millisecond)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestCancelImmediate</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">v := NewValue()</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">time.Sleep(<span class="number">10</span> * time.Millisecond)</span><br><span class="line">v.Cancel()</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">_, ok := v.Get(<span class="number">200</span> * time.Millisecond)</span><br><span class="line">assert.False(t, ok, <span class="string">"Get after cancel should have failed"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestCancelAfterSet</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">v := NewValue()</span><br><span class="line">v.Set(<span class="number">5</span>)</span><br><span class="line">r, ok := v.Get(<span class="number">10</span> * time.Millisecond)</span><br><span class="line">assert.True(t, ok, <span class="string">"Get before cancel should have succeeded"</span>)</span><br><span class="line">assert.Equal(t, <span class="number">5</span>, r, <span class="string">"Get got wrong value before cancel"</span>)</span><br><span class="line"></span><br><span class="line">v.Cancel()</span><br><span class="line">r, ok = v.Get(<span class="number">0</span>)</span><br><span class="line">assert.True(t, ok, <span class="string">"Get after cancel should have succeeded"</span>)</span><br><span class="line">assert.Equal(t, <span class="number">5</span>, r, <span class="string">"Get got wrong value after cancel"</span>)</span><br><span class="line"></span><br><span class="line">v.Set(<span class="number">10</span>)</span><br><span class="line">r, _ = v.Get(<span class="number">0</span>)</span><br><span class="line">assert.Equal(t, <span class="number">5</span>, r, <span class="string">"Set after cancel should have no effect"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkGet</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">v := NewValue()</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">time.Sleep(<span class="number">20</span> * time.Millisecond)</span><br><span class="line">v.Set(<span class="string">"hi"</span>)</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; b.N; i++ &#123;</span><br><span class="line">v.Get(<span class="number">20</span> * time.Millisecond)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestConcurrent</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">goroutines := grtrack.Start()</span><br><span class="line">v := NewValue()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sets <span class="keyword">int32</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line">wg.Add(<span class="number">1</span>)</span><br><span class="line"><span class="comment">// Do some concurrent setting to make sure that it works</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; concurrency; i++ &#123;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// Wait for waitGroup so that all goroutines run at basically the same</span></span><br><span class="line"><span class="comment">// time.</span></span><br><span class="line">wg.Wait()</span><br><span class="line">v.Set(<span class="string">"hi"</span>)</span><br><span class="line">atomic.AddInt32(&amp;sets, <span class="number">1</span>)</span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br><span class="line">wg.Done()</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; concurrency; i++ &#123;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">r, ok := v.Get(<span class="number">200</span> * time.Millisecond)</span><br><span class="line">assert.True(t, ok, <span class="string">"Get should have succeed"</span>)</span><br><span class="line">assert.Equal(t, <span class="string">"hi"</span>, r, <span class="string">"Wrong result"</span>)</span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">goroutines.CheckAfter(t, <span class="number">50</span>*time.Millisecond)</span><br><span class="line">assert.EqualValues(t, concurrency, atomic.LoadInt32(&amp;sets), <span class="string">"Wrong number of successful Sets"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;并发获取最后存储起来的value如果获取不到就会陷入等待一段时间&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#并发获取最后存储起来的value如果获取不到就会陷入等待一段时间&quot;&gt;&lt;/a&gt; 并发获取最后存储起来的value，如果获取不到
      
    
    </summary>
    
      <category term="go" scheme="https://dreamerjonson.com/categories/go/"/>
    
    
      <category term="go" scheme="https://dreamerjonson.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>golang[93]-golang-link</title>
    <link href="https://dreamerjonson.com/2019/10/10/golang-93-golang-link/"/>
    <id>https://dreamerjonson.com/2019/10/10/golang-93-golang-link/</id>
    <published>2019-10-10T13:34:57.000Z</published>
    <updated>2019-10-10T13:35:29.098Z</updated>
    
    <content type="html"><![CDATA[<p>Link, typically invoked as “go tool link,” reads the Go archive or object for a package main, along with its dependencies, and combines them into an executable binary.</p><p>Command Line<br>Usage:</p><p>go tool link [flags] main.a<br>Flags:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line">-B note</span><br><span class="line">Add an ELF_NT_GNU_BUILD_ID note when using ELF.</span><br><span class="line">The value should start with 0x and be an even number of hex digits.</span><br><span class="line">-D address</span><br><span class="line">Set data segment address.</span><br><span class="line">-E entry</span><br><span class="line">Set entry symbol name.</span><br><span class="line">-H type</span><br><span class="line">Set executable format type.</span><br><span class="line">The default format is inferred from GOOS and GOARCH.</span><br><span class="line">On Windows, -H windowsgui writes a &quot;GUI binary&quot; instead of a &quot;console binary.&quot;</span><br><span class="line">-I interpreter</span><br><span class="line">Set the ELF dynamic linker to use.</span><br><span class="line">-L dir1 -L dir2</span><br><span class="line">Search for imported packages in dir1, dir2, etc,</span><br><span class="line">after consulting $GOROOT/pkg/$GOOS_$GOARCH.</span><br><span class="line">-R quantum</span><br><span class="line">Set address rounding quantum.</span><br><span class="line">-T address</span><br><span class="line">Set text segment address.</span><br><span class="line">-V</span><br><span class="line">Print linker version and exit.</span><br><span class="line">-X importpath.name=value</span><br><span class="line">Set the value of the string variable in importpath named name to value.</span><br><span class="line">This is only effective if the variable is declared in the source code either uninitialized</span><br><span class="line">or initialized to a constant string expression. -X will not work if the initializer makes</span><br><span class="line">a function call or refers to other variables.</span><br><span class="line">Note that before Go 1.5 this option took two separate arguments.</span><br><span class="line">-a</span><br><span class="line">Disassemble output.</span><br><span class="line">-buildid id</span><br><span class="line">Record id as Go toolchain build id.</span><br><span class="line">-buildmode mode</span><br><span class="line">Set build mode (default exe).</span><br><span class="line">-c</span><br><span class="line">Dump call graphs.</span><br><span class="line">-compressdwarf</span><br><span class="line">Compress DWARF if possible (default true).</span><br><span class="line">-cpuprofile file</span><br><span class="line">Write CPU profile to file.</span><br><span class="line">-d</span><br><span class="line">Disable generation of dynamic executables.</span><br><span class="line">The emitted code is the same in either case; the option</span><br><span class="line">controls only whether a dynamic header is included.</span><br><span class="line">The dynamic header is on by default, even without any</span><br><span class="line">references to dynamic libraries, because many common</span><br><span class="line">system tools now assume the presence of the header.</span><br><span class="line">-debugtramp int</span><br><span class="line">Debug trampolines.</span><br><span class="line">-dumpdep</span><br><span class="line">Dump symbol dependency graph.</span><br><span class="line">-extar ar</span><br><span class="line">Set the external archive program (default &quot;ar&quot;).</span><br><span class="line">Used only for -buildmode=c-archive.</span><br><span class="line">-extld linker</span><br><span class="line">Set the external linker (default &quot;clang&quot; or &quot;gcc&quot;).</span><br><span class="line">-extldflags flags</span><br><span class="line">Set space-separated flags to pass to the external linker.</span><br><span class="line">-f</span><br><span class="line">Ignore version mismatch in the linked archives.</span><br><span class="line">-g</span><br><span class="line">Disable Go package data checks.</span><br><span class="line">-importcfg file</span><br><span class="line">Read import configuration from file.</span><br><span class="line">In the file, set packagefile, packageshlib to specify import resolution.</span><br><span class="line">-installsuffix suffix</span><br><span class="line">Look for packages in $GOROOT/pkg/$GOOS_$GOARCH_suffix</span><br><span class="line">instead of $GOROOT/pkg/$GOOS_$GOARCH.</span><br><span class="line">-k symbol</span><br><span class="line">Set field tracking symbol. Use this flag when GOEXPERIMENT=fieldtrack is set.</span><br><span class="line">-libgcc file</span><br><span class="line">Set name of compiler support library.</span><br><span class="line">This is only used in internal link mode.</span><br><span class="line">If not set, default value comes from running the compiler,</span><br><span class="line">which may be set by the -extld option.</span><br><span class="line">Set to &quot;none&quot; to use no support library.</span><br><span class="line">-linkmode mode</span><br><span class="line">Set link mode (internal, external, auto).</span><br><span class="line">This sets the linking mode as described in cmd/cgo/doc.go.</span><br><span class="line">-linkshared</span><br><span class="line">Link against installed Go shared libraries (experimental).</span><br><span class="line">-memprofile file</span><br><span class="line">Write memory profile to file.</span><br><span class="line">-memprofilerate rate</span><br><span class="line">Set runtime.MemProfileRate to rate.</span><br><span class="line">-msan</span><br><span class="line">Link with C/C++ memory sanitizer support.</span><br><span class="line">-n</span><br><span class="line">Dump symbol table.</span><br><span class="line">-o file</span><br><span class="line">Write output to file (default a.out, or a.out.exe on Windows).</span><br><span class="line">-pluginpath path</span><br><span class="line">The path name used to prefix exported plugin symbols.</span><br><span class="line">-r dir1:dir2:...</span><br><span class="line">Set the ELF dynamic linker search path.</span><br><span class="line">-race</span><br><span class="line">Link with race detection libraries.</span><br><span class="line">-s</span><br><span class="line">Omit the symbol table and debug information.</span><br><span class="line">-shared</span><br><span class="line">Generated shared object (implies -linkmode external; experimental).</span><br><span class="line">-tmpdir dir</span><br><span class="line">Write temporary files to dir.</span><br><span class="line">Temporary files are only used in external linking mode.</span><br><span class="line">-u</span><br><span class="line">Reject unsafe packages.</span><br><span class="line">-v</span><br><span class="line">Print trace of linker operations.</span><br><span class="line">-w</span><br><span class="line">Omit the DWARF symbol table.</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Link, typically invoked as “go tool link,” reads the Go archive or object for a package main, along with its dependencies, and combines t
      
    
    </summary>
    
      <category term="go" scheme="https://dreamerjonson.com/categories/go/"/>
    
    
      <category term="go" scheme="https://dreamerjonson.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>golang[92]-golang-实现反向代理</title>
    <link href="https://dreamerjonson.com/2019/10/07/golang-92-golang-reverse-proxy/"/>
    <id>https://dreamerjonson.com/2019/10/07/golang-92-golang-reverse-proxy/</id>
    <published>2019-10-07T07:00:26.000Z</published>
    <updated>2019-10-12T14:21:05.854Z</updated>
    
    <content type="html"><![CDATA[<h2 id="反向代理"><a class="markdownIt-Anchor" href="#反向代理"></a> 反向代理</h2><p>反向代理在计算机网络中是代理服务器的一种。服务器根据客户端的请求，从其关系的一组或多组后端服务器（如Web服务器）上获取资源，然后再将这些资源返回给客户端，客户端只会得知反向代理的IP地址，而不知道在代理服务器后面的服务器集群的存在</p><h2 id="golang最简单实现反向代理"><a class="markdownIt-Anchor" href="#golang最简单实现反向代理"></a> golang最简单实现反向代理</h2><p>golang源码httputils中有对于反向代理的实现，最简单的代理甚至可以一行代码实现。</p><p>1、我们首先开启一个web服务器监听127.0.0.1:8999端口</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"log"</span></span><br><span class="line">_ <span class="string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *handle)</span> <span class="title">ServeHTTP</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line"> fmt.Fprint(w, <span class="string">"Welcome!"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">startServer</span><span class="params">()</span></span> &#123;</span><br><span class="line">err := http.ListenAndServe(<span class="string">":8999"</span>, h)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(<span class="string">"ListenAndServe: "</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">startServer()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、实现一个简单的代理服务器<br>下面的程序仍然是一个web服务器，监听8888端口，但是其使用了反向代理，因此对:8888的访问都会转发到:8999，输出“Welcome！”。<br>核心的操作在于httputil.NewSingleHostReverseProxy 具有serveHttp方法，此方法对request请求进行了重新封装，并且proxy将得到的response转发给client。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line"><span class="string">"net/http/httputil"</span></span><br><span class="line"><span class="string">"net/url"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> handle <span class="keyword">struct</span> &#123;</span><br><span class="line">host <span class="keyword">string</span></span><br><span class="line">port <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *handle)</span> <span class="title">ServeHTTP</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"url:%+v\n"</span>,r.URL)</span><br><span class="line">remote, err := url.Parse(<span class="string">"http://"</span> + this.host + <span class="string">":"</span> + this.port)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"hosr::"</span>,remote.Host)</span><br><span class="line">proxy := httputil.NewSingleHostReverseProxy(remote)</span><br><span class="line">proxy.ServeHTTP(w, r)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">startServer</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//被代理的服务器host和port</span></span><br><span class="line">h := &amp;handle&#123;host: <span class="string">"127.0.0.1"</span>, port: <span class="string">"8999"</span>&#125;</span><br><span class="line">err := http.ListenAndServe(<span class="string">":8888"</span>, h)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(<span class="string">"ListenAndServe: "</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">startServer()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;反向代理&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#反向代理&quot;&gt;&lt;/a&gt; 反向代理&lt;/h2&gt;
&lt;p&gt;反向代理在计算机网络中是代理服务器的一种。服务器根据客户端的请求，从其关系的一组或多组后端服务器（如Web服务器）上获取资源，然后再
      
    
    </summary>
    
      <category term="go" scheme="https://dreamerjonson.com/categories/go/"/>
    
    
      <category term="go" scheme="https://dreamerjonson.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>xargs命令详解，xargs与管道的区别</title>
    <link href="https://dreamerjonson.com/2019/09/22/xargs%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3%EF%BC%8Cxargs%E4%B8%8E%E7%AE%A1%E9%81%93%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://dreamerjonson.com/2019/09/22/xargs命令详解，xargs与管道的区别/</id>
    <published>2019-09-22T15:33:30.000Z</published>
    <updated>2019-09-22T15:37:57.836Z</updated>
    
    <content type="html"><![CDATA[<h1 id="阅读目录"><a class="markdownIt-Anchor" href="#阅读目录"></a> 阅读目录</h1><ul><li>为什么要用xargs，问题的来源</li><li>xargs是什么，与管道有什么不同</li><li>xargs的一些有用的选项</li></ul><h2 id="为什么要用xargs问题的来源"><a class="markdownIt-Anchor" href="#为什么要用xargs问题的来源"></a> 为什么要用xargs，问题的来源</h2><p>在工作中经常会接触到xargs命令，特别是在别人写的脚本里面也经常会遇到，但是却很容易与管道搞混淆，本篇会详细讲解到底什么是xargs命令，为什么要用xargs命令以及与管道的区别。为什么要用xargs呢，我们知道，linux命令可以从两个地方读取要处理的内容，一个是通过命令行参数，一个是标准输入。例如cat、grep就是这样的命令，举个例子：</p><p>echo ‘main’ | cat test.cpp<br>这种情况下cat会输出test.cpp的内容，而不是’main’字符串，如果test.cpp不存在则cat命令报告该文件不存在，并不会尝试从标准输入中读取。echo ‘main’ | 会通过管道将 echo 的标准输出(也就是字符串’main’)导入到 cat 的标准输入，也就是说此时cat的标准输入中是有内容的，其内容就是字符串’main’但是上面的内容中cat不会从它的标准输入中读入要处理的内容。(注:标准输入是有一个缓冲区的，就像我们在程序中使用scanf函数从标准输入中读取一样，实际上是从标准输入的缓冲区中读取的)。其实基本上linux的命令中很多的命令的设计是先从命令行参数中获取参数，然后从标准输入中读取，反映在程序上，命令行参数是通过main函数 int main(int argc,char*argv[]) 的函数参数获得的，而标准输入则是通过标准输入函数例如C语言中的scanf读取到的。他们获取的地方是不一样的。例如：</p><p>echo ‘main’ | cat<br>这条命令中cat会从其标准输入中读取内容并处理，也就是会输出 ‘main’ 字符串。echo命令将其标准输出的内容 ‘main’ 通过管道定向到 cat 的标准输入中。</p><p>cat<br>如果仅仅输入cat并回车，则该程序会等待输入，我们需要从键盘输入要处理的内容给cat，此时cat也是从标准输入中得到要处理的内容的，因为我们的cat命令行中也没有指定要处理的文件名。大多数命令有一个参数  -  如果直接在命令的最后指定 -  则表示从标准输入中读取，例如：</p><p>echo ‘main’ | cat -<br>这样也是可行的，会显示 ‘main’ 字符串，同样输入 cat - 直接回车与输入 cat 直接回车的效果也一样，但是如果这样呢：</p><p>echo ‘main’ | cat test.cpp -<br>同时指定test.cpp 和 - 参数，此时cat程序会先输出test.cpp的内容，然后输出标准输入’main’字符串，如果换一下顺序变成这样：</p><p>echo ‘main’ | cat - test.cpp<br>则会先输出标准输入’main’字符串，然后输出test.cpp文件的内容。如果去掉这里的 - 参数，则cat只会输出test.cpp文件的内容。另外如果同时传递标准输入和文件名，grep也会同时处理这两个输入，例如：</p><p>echo ‘main’ | grep ‘main’ test.cpp -<br>该命令的输出结果是:<br>test.cpp:int main()<br>(standard input):main</p><p>此时grep也会同时处理标准输入和文件test.cpp中的内容，也就是说会在标准输入中搜索 ‘main’ 也会在文件 test.cpp (该文件名从grep命令行参数中获得)中搜索 ‘main’。也就是说我们看到当命令行参数与标准输入同时存在的时候grep和cat是会同时处理这两个输入的，但是有很多命令并不是都处理。大多命令一般情况下是首先在命令行中查找要处理的内容的来源(是从文件还是从标准输入，还是都有)，如果在命令行中找不到与要处理的内容的来源相关的参数则默认从标准输入中读取要处理的内容了，当然这取决于命令程序的内部实现，就像cat命令，加不加 - 参数他的表现又不同。</p><p>另外很多程序是不处理标准输入的，例如 kill , rm 这些程序如果命令行参数中没有指定要处理的内容则不会默认从标准输入中读取。所以：</p><p>1<br>echo ‘516’ | kill<br>这种命里是不能执行的。</p><p>1<br>echo ‘test’ | rm -f<br>这种也是没有效果的。</p><p>这两个命令只接受命令行参数中指定的处理内容，不从标准输入中获取处理内容。想想也很正常，kill 是结束进程，rm是删除文件，如果要结束的进程pid和要删除的文件名需要从标准输入中读取，这个也很怪异吧。 但是像 cat与grep这些文字处理工具从标准输入中读取待处理的内容则很自然。</p><p>但是有时候我们的脚本却需要 echo ‘516’ | kill 这样的效果，例如 ps -ef | grep ‘ddd’ | kill 这样的效果，筛选出符合某条件的进程pid然后结束。这种需求对于我们来说是理所当然而且是很常见的，那么应该怎样达到这样的效果呢。有几个解决办法：</p><ol><li><p>通过 kill <code>ps -ef | grep 'ddd'</code><br>这种形式，这个时候实际上等同于拼接字符串得到的命令，其效果类似于  kill $pid</p></li><li><p>for procid in $(ps -aux | grep “some search” | awk ‘{print $2}’); do kill -9 $procid; done<br>其实与第一种原理一样，只不过需要多次kill的时候是循环处理的，每次处理一个</p></li><li><p>ps -ef | grep ‘ddd’ | xargs kill<br>OK，使用了xargs命令，铺垫了这么久终于铺到了主题上。xargs命令可以通过管道接受字符串，并将接收到的字符串通过空格分割成许多参数(默认情况下是通过空格分割) 然后将参数传递给其后面的命令，作为后面命令的命令行参数</p></li></ol><p>xargs是什么，与管道有什么不同<br>xargs与管道有什么不同呢，这是两个很容易混淆的东西，看了上面的xargs的例子还是有点云里雾里的话，我们来看下面的例子弄清楚为什么需要xargs：</p><p>echo ‘–help’ | cat<br>输出：<br>–help</p><p>echo ‘–help’ | xargs cat</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">输出：</span><br><span class="line"></span><br><span class="line">Usage: cat [OPTION]... [FILE]...</span><br><span class="line">Concatenate FILE(s), or standard input, to standard output.</span><br><span class="line"></span><br><span class="line">  -A, --show-all           equivalent to -vET</span><br><span class="line">  -b, --number-nonblank    number nonempty output lines</span><br><span class="line">  -e                       equivalent to -vE</span><br><span class="line">  -E, --show-ends          display $ at end of each line</span><br><span class="line">  -n, --number             number all output lines</span><br><span class="line">  -s, --squeeze-blank      suppress repeated empty output lines</span><br><span class="line">  -t                       equivalent to -vT</span><br><span class="line">  -T, --show-tabs          display TAB characters as ^I</span><br><span class="line">  -u                       (ignored)</span><br><span class="line">  -v, --show-nonprinting   use ^ and M- notation, except for LFD and TAB</span><br><span class="line">      --help     display this help and exit</span><br><span class="line">      --version  output version information and exit</span><br><span class="line"></span><br><span class="line">With no FILE, or when FILE is -, read standard input.</span><br><span class="line"></span><br><span class="line">Examples:</span><br><span class="line">  cat f - g  Output f&apos;s contents, then standard input, then g&apos;s contents.</span><br><span class="line">  cat        Copy standard input to standard output.</span><br><span class="line"></span><br><span class="line">Report cat bugs to bug-coreutils@gnu.org</span><br><span class="line">GNU coreutils home page: &lt;http://www.gnu.org/software/coreutils/&gt;</span><br><span class="line">General help using GNU software: &lt;http://www.gnu.org/gethelp/&gt;</span><br><span class="line">For complete documentation, run: info coreutils &apos;cat invocation&apos;</span><br><span class="line">可以看到 echo &apos;--help&apos; | cat   该命令输出的是echo的内容，也就是说将echo的内容当作cat处理的文件内容了，实际上就是echo命令的输出通过管道定向到cat的输入了。然后cat从其标准输入中读取待处理的文本内容。这等价于在test.txt文件中有一行字符 &apos;--help&apos; 然后运行  cat test.txt 的效果。</span><br><span class="line"></span><br><span class="line">而 echo &apos;--help&apos; | xargs cat 等价于 cat --help 什么意思呢，就是xargs将其接受的字符串 --help 做成cat的一个命令参数来运行cat命令，同样  echo &apos;test.c test.cpp&apos; | xargs cat 等价于 cat test.c test.cpp 此时会将test.c和test.cpp的内容都显示出来。</span><br></pre></td></tr></table></figure><h2 id="xargs的一些有用的选项"><a class="markdownIt-Anchor" href="#xargs的一些有用的选项"></a> xargs的一些有用的选项</h2><p>相信到这里应该都知道xargs的作用了，那么我们看看xargs还有一些有用的选项：</p><ol><li>-d 选项<br>默认情况下xargs将其标准输入中的内容以空白(包括空格、Tab、回车换行等)分割成多个之后当作命令行参数传递给其后面的命令，并运行之，我们可以使用 -d 命令指定分隔符，例如：<br>echo ‘11@22@33’ | xargs echo<br>输出：<br>11@22@33<br>默认情况下以空白分割，那么11@22@33这个字符串中没有空白，所以实际上等价于 echo 11@22@33 其中字符串 ‘11@22@33’ 被当作echo命令的一个命令行参数</li></ol><p>echo ‘11@22@33’ | xargs -d ‘@’ echo<br>输出：<br>11 22 33<br>指定以@符号分割参数，所以等价于 echo 11 22 33 相当于给echo传递了3个参数，分别是11、22、33</p><ol start="2"><li><p>-p 选项<br>使用该选项之后xargs并不会马上执行其后面的命令，而是输出即将要执行的完整的命令(包括命令以及传递给命令的命令行参数)，询问是否执行，输入 y 才继续执行，否则不执行。这种方式可以清楚的看到执行的命令是什么样子，也就是xargs传递给命令的参数是什么，例如：<br>echo ‘11@22@33’ | xargs -p -d ‘@’  echo<br>输出：<br>echo 11 22 33<br>?..y      ==&gt;这里询问是否执行命令 echo 11 22 33 输入y并回车，则显示执行结果，否则不执行<br>11 22 33   ==&gt;执行结果</p></li><li><p>-n 选项<br>该选项表示将xargs生成的命令行参数，每次传递几个参数给其后面的命令执行，例如如果xargs从标准输入中读入内容，然后以分隔符分割之后生成的命令行参数有10个，使用 -n 3 之后表示一次传递给xargs后面的命令是3个参数，因为一共有10个参数，所以要执行4次，才能将参数用完。例如：</p></li></ol><p>echo ‘11@22@33@44@55@66@77@88@99@00’ | xargs -d ‘@’ -n 3 echo<br>输出结果：<br>11 22 33<br>44 55 66<br>77 88 99<br>00<br>等价于：<br>echo 11 22 33<br>echo 44 55 66<br>echo 77 88 99<br>echo 00<br>实际上运行了4次，每次传递3个参数，最后还剩一个，就直接传递一个参数。</p><ol start="4"><li>-E 选项，有的系统的xargs版本可能是-e  eof-str<br>该选项指定一个字符串，当xargs解析出多个命令行参数的时候，如果搜索到-e指定的命令行参数，则只会将-e指定的命令行参数之前的参数(不包括-e指定的这个参数)传递给xargs后面的命令<br>echo ‘11 22 33’ | xargs -E ‘33’ echo<br>输出：<br>11 22</li></ol><p>可以看到正常情况下有3个命令行参数 11、22、33 由于使用了-E ‘33’ 表示在将命令行参数 33 之前的参数传递给执行的命令，33本身不传递。等价于 echo 11 22 这里-E实际上有搜索的作用，表示只取xargs读到的命令行参数前面的某些部分给命令执行。</p><p>注意：-E只有在xargs不指定-d的时候有效，如果指定了-d则不起作用，而不管-d指定的是什么字符，空格也不行。</p><p>echo ‘11 22 33’ | xargs -d ’ ’ -E ‘33’ echo  =&gt; 输出 11 22 33<br>echo ‘11@22@33@44@55@66@77@88@99@00 aa 33 bb’ | xargs -E ‘33’ -d ‘@’ -p  echo  =&gt; 输出 11 22 33 44 55 66 77 88 99 00 aa 33 bb</p><h2 id="-0-选项表示以-0-为分隔符一般与find结合使用"><a class="markdownIt-Anchor" href="#-0-选项表示以-0-为分隔符一般与find结合使用"></a> -0 选项表示以 ‘\0’ 为分隔符，一般与find结合使用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">find . -name &quot;*.txt&quot;</span><br><span class="line">输出：</span><br><span class="line">./2.txt</span><br><span class="line">./3.txt</span><br><span class="line">./1.txt     =&gt; 默认情况下find的输出结果是每条记录后面加上换行，也就是每条记录是一个新行</span><br><span class="line"></span><br><span class="line">find . -name &quot;*.txt&quot; -print0</span><br><span class="line">输出：</span><br><span class="line">./2.txt./3.txt./1.txt     =&gt; 加上 -print0 参数表示find输出的每条结果后面加上 &apos;\0&apos; 而不是换行</span><br><span class="line"></span><br><span class="line">find . -name &quot;*.txt&quot; -print0 | xargs -0 echo</span><br><span class="line">输出：</span><br><span class="line">./2.txt ./3.txt ./1.txt</span><br><span class="line"></span><br><span class="line">find . -name &quot;*.txt&quot; -print0 | xargs -d &apos;\0&apos; echo</span><br><span class="line">输出：</span><br><span class="line">./2.txt ./3.txt ./1.txt</span><br><span class="line"></span><br><span class="line">xargs的 -0 和 -d &apos;\0&apos; 表示其从标准输入中读取的内容使用 &apos;\0&apos; 来分割，由于 find 的结果是使用 &apos;\0&apos; 分隔的，所以xargs使用 &apos;\0&apos; 将 find的结果分隔之后得到3个参数： ./2.txt ./3.txt ./1.txt  注意中间是有空格的。上面的结果就等价于 echo ./2.txt ./3.txt ./1.txt</span><br><span class="line"></span><br><span class="line">实际上使用xargs默认的空白分隔符也是可以的  find . -name &quot;*.txt&quot;  | xargs  echo   因为换行符也是xargs的默认空白符的一种。find命令如果不加-print0其搜索结果的每一条字符串后面实际上是加了换行</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;阅读目录&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#阅读目录&quot;&gt;&lt;/a&gt; 阅读目录&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;为什么要用xargs，问题的来源&lt;/li&gt;
&lt;li&gt;xargs是什么，与管道有什么不同&lt;/li&gt;
&lt;li&gt;xargs的一
      
    
    </summary>
    
      <category term="linux" scheme="https://dreamerjonson.com/categories/linux/"/>
    
    
      <category term="linux" scheme="https://dreamerjonson.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>golang[91]-复杂的json转换为结构体</title>
    <link href="https://dreamerjonson.com/2019/09/21/golang-91-%E5%A4%8D%E6%9D%82%E7%9A%84json%E8%BD%AC%E6%8D%A2%E4%B8%BA%E7%BB%93%E6%9E%84%E4%BD%93/"/>
    <id>https://dreamerjonson.com/2019/09/21/golang-91-复杂的json转换为结构体/</id>
    <published>2019-09-21T09:57:29.000Z</published>
    <updated>2019-09-21T10:07:45.099Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">type MultiTransData struct &#123;</span><br><span class="line">AccountDetailsMap map[string][]struct &#123;</span><br><span class="line">Account int</span><br><span class="line">Stretegy int</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">to</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">&quot;AccountDetailsMap&quot;:&#123;</span><br><span class="line">        &quot;GOLD:&quot;:[ &#123;&quot;Account&quot;:1,&quot;Stretegy&quot;:2&#125;,&#123;&quot;Account&quot;:5,&quot;Stretegy&quot;:6&#125; ],</span><br><span class="line">        &quot;WTI:&quot;:[&#123;&quot;Account&quot;:3,&quot;Stretegy&quot;:4&#125;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">type BackTestRequest struct &#123;</span><br><span class="line">StrategyName string</span><br><span class="line">Table        string</span><br><span class="line">Direction    int32</span><br><span class="line">Way          int32</span><br><span class="line">TradeNum     int32</span><br><span class="line">TP           int32</span><br><span class="line">SL           int32</span><br><span class="line">SLTPIndex    int32</span><br><span class="line">Capital      float64</span><br><span class="line">StartTime    Time</span><br><span class="line">EndTime      Time</span><br><span class="line">RequestId    string</span><br><span class="line">Callback     string</span><br><span class="line">SpreadMap    map[string]Spread `json:&quot;spread_list&quot;`</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type Spread struct &#123;</span><br><span class="line">OriginalSpread int32</span><br><span class="line">StrategySpread int32</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">to</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"> &quot;StrategyName&quot;: &quot;backtest_12&quot;,</span><br><span class="line"> &quot;Table&quot;: &quot;backtest_12&quot;,</span><br><span class="line"> &quot;Direction&quot;: 1,</span><br><span class="line"> &quot;Way&quot;: 2,</span><br><span class="line"> &quot;TradeNum&quot;: 3,</span><br><span class="line"> &quot;TP&quot;: 4,</span><br><span class="line"> &quot;SL&quot;: 5,</span><br><span class="line"> &quot;SLTPIndex&quot;: 6,</span><br><span class="line"> &quot;Capital&quot;: 7,</span><br><span class="line"> &quot;StartTime&quot;: &quot;0001-01-01T00:00:00Z&quot;,</span><br><span class="line"> &quot;EndTime&quot;: &quot;0001-01-01T00:00:00Z&quot;,</span><br><span class="line"> &quot;RequestId&quot;: &quot;&quot;,</span><br><span class="line"> &quot;Callback&quot;: &quot;&quot;,</span><br><span class="line">  &quot;spread_list&quot;:&#123;</span><br><span class="line">        &quot;GOLD:&quot;:&#123;</span><br><span class="line">            &quot;OriginalSpread&quot;:1,</span><br><span class="line">            &quot;StrategySpread&quot;:2</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;WTI:&quot;:&#123;</span><br><span class="line">            &quot;OriginalSpread&quot;:3,</span><br><span class="line">            &quot;StrategySpread&quot;:4</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
      <category term="go" scheme="https://dreamerjonson.com/categories/go/"/>
    
    
      <category term="go" scheme="https://dreamerjonson.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>golang[90]-使用wine在linux平台操作windows</title>
    <link href="https://dreamerjonson.com/2019/09/21/golang-90-%E4%BD%BF%E7%94%A8wine%E5%9C%A8linux%E5%B9%B3%E5%8F%B0%E6%93%8D%E4%BD%9Cwindows/"/>
    <id>https://dreamerjonson.com/2019/09/21/golang-90-使用wine在linux平台操作windows/</id>
    <published>2019-09-21T09:50:43.000Z</published>
    <updated>2019-09-22T04:01:50.842Z</updated>
    
    <content type="html"><![CDATA[<h2 id="wine镜像1"><a class="markdownIt-Anchor" href="#wine镜像1"></a> wine镜像1:</h2><h3 id="dockerfile"><a class="markdownIt-Anchor" href="#dockerfile"></a> Dockerfile</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">FROM debian:stretch-slim</span><br><span class="line"></span><br><span class="line">ENV TZ=Asia/Shanghai</span><br><span class="line">ENV GOROOT=z:\\go</span><br><span class="line"></span><br><span class="line">COPY ./sources.list /etc/apt/</span><br><span class="line"># COPY ./go /go</span><br><span class="line"></span><br><span class="line">RUN dpkg --add-architecture i386 &amp;&amp; \</span><br><span class="line">    apt-get update &amp;&amp; \</span><br><span class="line">    apt-get install -y --no-install-recommends \</span><br><span class="line">      wine32 \</span><br><span class="line">      wine \</span><br><span class="line">      ca-certificates &amp;&amp; \</span><br><span class="line">    rm -rf /var/lib/apt/lists/*</span><br><span class="line"></span><br><span class="line">RUN wine --version</span><br><span class="line"></span><br><span class="line">WORKDIR /app</span><br></pre></td></tr></table></figure><h3 id="makefile"><a class="markdownIt-Anchor" href="#makefile"></a> makefile</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">all: wine-download wine-unzip wine-build wine-clear wine-push</span><br><span class="line"></span><br><span class="line">wine-download:</span><br><span class="line">wget https://dl.google.com/go/go1.11.linux-amd64.tar.gz</span><br><span class="line"></span><br><span class="line">wine-unzip:</span><br><span class="line">tar zxvf go1.11.linux-amd64.tar.gz</span><br><span class="line"></span><br><span class="line">wine-build:</span><br><span class="line">docker build -t i.wannamake.love/library/wine .</span><br><span class="line"></span><br><span class="line">wine-clear:</span><br><span class="line">rm -rf go go1.11.linux-amd64.tar.gz</span><br><span class="line"></span><br><span class="line">wine-push:</span><br><span class="line">docker push i.wannamake.love/library/wine</span><br><span class="line"></span><br><span class="line">.PHONY: all</span><br></pre></td></tr></table></figure><h3 id="sourceslist"><a class="markdownIt-Anchor" href="#sourceslist"></a> sources.list</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">deb http://mirrors.ustc.edu.cn/debian/ stretch main contrib non-free</span><br><span class="line">deb-src http://mirrors.ustc.edu.cn/debian/ stretch main contrib non-free</span><br><span class="line"></span><br><span class="line">deb http://mirrors.ustc.edu.cn/debian/ stretch-updates main contrib non-free</span><br><span class="line">deb-src http://mirrors.ustc.edu.cn/debian/ stretch-updates main contrib non-free</span><br><span class="line"></span><br><span class="line">deb http://mirrors.ustc.edu.cn/debian/ stretch-backports main contrib non-free</span><br><span class="line">deb-src http://mirrors.ustc.edu.cn/debian/ stretch-backports main contrib non-free</span><br><span class="line"></span><br><span class="line">deb http://mirrors.ustc.edu.cn/debian-security/ stretch/updates main contrib non-free</span><br><span class="line">deb-src http://mirrors.ustc.edu.cn/debian-security/ stretch/updates main contrib non-free</span><br></pre></td></tr></table></figure><h2 id="wine镜像2"><a class="markdownIt-Anchor" href="#wine镜像2"></a> wine镜像2</h2><p>直接使用外部优秀的镜像：</p><h2 id="dockerfile-2"><a class="markdownIt-Anchor" href="#dockerfile-2"></a> Dockerfile</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">FROM scottyhardy/docker-wine:latest</span><br><span class="line"></span><br><span class="line">RUN wine --version</span><br><span class="line">COPY ./docker-entrypoint.sh /usr/local/bin/</span><br><span class="line">COPY ./followquant_api.exe /app/bin/</span><br><span class="line">COPY ./mtmanapi.dll /app/bin/</span><br><span class="line">COPY ./config.json /app/</span><br><span class="line">WORKDIR /app</span><br><span class="line">RUN chmod 777 /usr/local/bin/docker-entrypoint.sh \</span><br><span class="line">    &amp;&amp; chmod 777 /app/config.json \</span><br><span class="line">    &amp;&amp; ln -s /usr/local/bin/docker-entrypoint.sh /</span><br><span class="line"></span><br><span class="line">ENTRYPOINT [&quot;docker-entrypoint.sh&quot;]</span><br></pre></td></tr></table></figure><h2 id="docker-entrypointsh"><a class="markdownIt-Anchor" href="#docker-entrypointsh"></a> <a href="http://docker-entrypoint.sh" target="_blank" rel="noopener">docker-entrypoint.sh</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">set -e</span><br><span class="line">echo &quot;123&quot;</span><br><span class="line">exec wine ./bin/followquant_api.exe</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h2><p><a href="https://forum.winehq.org/viewtopic.php?t=28797" target="_blank" rel="noopener">https://forum.winehq.org/viewtopic.php?t=28797</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;wine镜像1&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#wine镜像1&quot;&gt;&lt;/a&gt; wine镜像1:&lt;/h2&gt;
&lt;h3 id=&quot;dockerfile&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#doc
      
    
    </summary>
    
      <category term="go" scheme="https://dreamerjonson.com/categories/go/"/>
    
    
      <category term="go" scheme="https://dreamerjonson.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>golang[89]-操作docker容器获取proto的go文件</title>
    <link href="https://dreamerjonson.com/2019/09/20/golang-89-%E6%93%8D%E4%BD%9Cdocker%E5%AE%B9%E5%99%A8%E8%8E%B7%E5%8F%96proto%E7%9A%84go%E6%96%87%E4%BB%B6/"/>
    <id>https://dreamerjonson.com/2019/09/20/golang-89-操作docker容器获取proto的go文件/</id>
    <published>2019-09-20T06:41:20.000Z</published>
    <updated>2019-09-21T06:46:23.477Z</updated>
    
    <content type="html"><![CDATA[<p>公司用的是比较旧的protoc、protoc-gen-go 、micro插件。所以一种办法是直接操作容器，在容器中去生成特定版本的proto文件</p><p>docker中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run -idt dockerhub.followme-internal.com/library/golang-builder:alpine</span><br><span class="line">docker exec -it 6c76c145fe71 /bin/sh</span><br><span class="line">cd /tmp</span><br><span class="line">protoc --micro_out=. --go_out=plugins=grpc:. ./guard.proto</span><br></pre></td></tr></table></figure><p>外部：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">docker cp guard.proto  6c76c145fe71:/tmp/</span><br><span class="line"></span><br><span class="line">docker cp   6c76c145fe71:/tmp/ .</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;公司用的是比较旧的protoc、protoc-gen-go 、micro插件。所以一种办法是直接操作容器，在容器中去生成特定版本的proto文件&lt;/p&gt;
&lt;p&gt;docker中：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;
      
    
    </summary>
    
      <category term="go" scheme="https://dreamerjonson.com/categories/go/"/>
    
    
      <category term="go" scheme="https://dreamerjonson.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>TCPIP-学习笔记</title>
    <link href="https://dreamerjonson.com/2019/09/16/TCPIP-studynode/"/>
    <id>https://dreamerjonson.com/2019/09/16/TCPIP-studynode/</id>
    <published>2019-09-16T06:25:02.000Z</published>
    <updated>2019-09-17T13:22:51.123Z</updated>
    
    <content type="html"><![CDATA[<p>On a Linux system, use the route command with the -n option to display the routing<br>table.* The -n option prevents route from converting IP addresses to hostnames,<br>which gives a clearer display. Here is a routing table from a sample Red Hat system:</p><h1 id="route-n"><a class="markdownIt-Anchor" href="#route-n"></a> route -n</h1><img src="/2019/09/16/TCPIP-studynode/routen.png" title="route-table"><p>Destination 要访问的目标地址<br>gateway     要到达目标地址 需要中转的地址</p><p>mac :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">netstat -nr</span><br><span class="line"></span><br><span class="line">Routing tables</span><br><span class="line"></span><br><span class="line">Internet:</span><br><span class="line">Destination        Gateway            Flags        Refs      Use   Netif Expire</span><br><span class="line">default            192.168.1.1        UGSc           73        0     en7</span><br><span class="line">127                127.0.0.1          UCS             0        0     lo0</span><br><span class="line">127.0.0.1          127.0.0.1          UH             14  6969684     lo0</span><br><span class="line">169.254            link#19            UCS             1        0     en7      !</span><br><span class="line">192.168.1          link#19            UCS             2        0     en7      !</span><br><span class="line">192.168.1.1/32     link#19            UCS             1        0     en7      !</span><br><span class="line">192.168.1.1        38:ad:be:c2:56:fa  UHLWIir         9        0     en7   1200</span><br><span class="line">192.168.1.3/32     link#19            UCS             0        0     en7      !</span><br><span class="line">192.168.1.7        98:5a:eb:d8:5f:af  UHLWI           0        0     en7    911</span><br><span class="line">192.168.1.25       e8:6a:64:9:4f:5e   UHLWI           0        0     en7    698</span><br><span class="line">224.0.0/4          link#19            UmCS            2        0     en7      !</span><br><span class="line">224.0.0.251        1:0:5e:0:0:fb      UHmLWI          0        7     en7</span><br><span class="line">239.255.255.250    1:0:5e:7f:ff:fa    UHmLWI          0       96     en7</span><br><span class="line">255.255.255.255/32 link#19            UCS             0        0     en7      !</span><br></pre></td></tr></table></figure><h2 id="route-cache"><a class="markdownIt-Anchor" href="#route-cache"></a> route cache</h2><p>IP uses the information from the routing table (the forwarding table) to construct the<br>routes used for active connections. The routes associated with active connections are<br>stored in the routing cache. On Linux systems, the routing cache can be examined by<br>adding the -C argument to the route command line:</p><p>The routing cache is different from the routing table because the cache shows established<br>routes. The routing table is used to make routing decisions; the routing cache<br>is used after the decision is made. The routing cache shows the source and destination<br>of a network connection and the gateway and interface used to make that connection.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">route -Cn</span><br></pre></td></tr></table></figure><img src="/2019/09/16/TCPIP-studynode/routecn.png" title="route-table"><h2 id="phys-addr"><a class="markdownIt-Anchor" href="#phys-addr"></a> Phys Addr</h2><p>arp -a</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(172.24.0.4) at 02:42:ac:18:00:04 [ether] on br-0e67b8dd25a6</span><br><span class="line">? (172.22.0.2) at 02:42:ac:16:00:02 [ether] on br-56ca89db6d16</span><br><span class="line">? (192.168.16.2) at 02:42:c0:a8:10:02 [ether] on br-28e79d560103</span><br><span class="line">? (192.168.8.11) at 00:0c:29:74:4e:c9 [ether] on eth0</span><br><span class="line">? (192.168.8.14) at 00:0c:29:00:b3:7f [ether] on eth0</span><br><span class="line">? (192.168.8.13) at 00:0c:29:d6:b7:bf [ether] on eth0</span><br><span class="line">? (192.168.8.9) at 00:0c:29:1b:54:94 [ether] on eth0</span><br><span class="line">? (192.168.8.34) at 00:0c:29:2b:ba:43 [ether] on eth0</span><br><span class="line">? (192.168.8.12) at 00:0c:29:d2:41:d7 [ether] on eth0</span><br></pre></td></tr></table></figure><h2 id="protocols"><a class="markdownIt-Anchor" href="#protocols"></a> protocols</h2><p>处理如何解析数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line">$ cat /etc/protocols</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"># Internet protocols</span><br><span class="line">#</span><br><span class="line"># $FreeBSD$</span><br><span class="line">#from: @(#)protocols5.1 (Berkeley) 4/17/89</span><br><span class="line">#</span><br><span class="line"># See also http://www.iana.org/assignments/protocol-numbers</span><br><span class="line">#</span><br><span class="line">ip0IP# internet protocol, pseudo protocol number</span><br><span class="line">#hopopt0HOPOPT# hop-by-hop options for ipv6</span><br><span class="line">icmp1ICMP# internet control message protocol</span><br><span class="line">igmp2IGMP# internet group management protocol</span><br><span class="line">ggp3GGP# gateway-gateway protocol</span><br><span class="line">ipencap4IP-ENCAP# IP encapsulated in IP (officially ``IP&apos;&apos;)</span><br><span class="line">st25ST2# ST2 datagram mode (RFC 1819) (officially ``ST&apos;&apos;)</span><br><span class="line">tcp6TCP# transmission control protocol</span><br><span class="line">cbt7CBT# CBT, Tony Ballardie &lt;A.Ballardie@cs.ucl.ac.uk&gt;</span><br><span class="line">egp8EGP# exterior gateway protocol</span><br><span class="line">igp9IGP# any private interior gateway (Cisco: for IGRP)</span><br><span class="line">bbn-rcc10BBN-RCC-MON# BBN RCC Monitoring</span><br><span class="line">nvp11NVP-II# Network Voice Protocol</span><br><span class="line">pup12PUP# PARC universal packet protocol</span><br><span class="line">argus13ARGUS# ARGUS</span><br><span class="line">emcon14EMCON# EMCON</span><br><span class="line">xnet15XNET# Cross Net Debugger</span><br><span class="line">chaos16CHAOS# Chaos</span><br><span class="line">udp17UDP# user datagram protocol</span><br><span class="line">mux18MUX# Multiplexing protocol</span><br><span class="line">dcn19DCN-MEAS# DCN Measurement Subsystems</span><br><span class="line">hmp20HMP# host monitoring protocol</span><br><span class="line">prm21PRM# packet radio measurement protocol</span><br><span class="line">xns-idp22XNS-IDP# Xerox NS IDP</span><br><span class="line">trunk-123TRUNK-1# Trunk-1</span><br><span class="line">trunk-224TRUNK-2# Trunk-2</span><br><span class="line">leaf-125LEAF-1# Leaf-1</span><br><span class="line">leaf-226LEAF-2# Leaf-2</span><br><span class="line">rdp27RDP# &quot;reliable datagram&quot; protocol</span><br><span class="line">irtp28IRTP# Internet Reliable Transaction Protocol</span><br><span class="line">iso-tp429ISO-TP4# ISO Transport Protocol Class 4</span><br><span class="line">netblt30NETBLT# Bulk Data Transfer Protocol</span><br><span class="line">mfe-nsp31MFE-NSP# MFE Network Services Protocol</span><br><span class="line">merit-inp32MERIT-INP# MERIT Internodal Protocol</span><br><span class="line">dccp33DCCP# Datagram Congestion Control Protocol</span><br><span class="line">3pc343PC# Third Party Connect Protocol</span><br><span class="line">idpr35IDPR# Inter-Domain Policy Routing Protocol</span><br><span class="line">xtp36XTP# Xpress Tranfer Protocol</span><br><span class="line">ddp37DDP# Datagram Delivery Protocol</span><br><span class="line">idpr-cmtp38IDPR-CMTP# IDPR Control Message Transport Proto</span><br><span class="line">tp++39TP++# TP++ Transport Protocol</span><br><span class="line">il40IL# IL Transport Protocol</span><br><span class="line">ipv641IPV6# ipv6</span><br><span class="line">sdrp42SDRP# Source Demand Routing Protocol</span><br><span class="line">ipv6-route43IPV6-ROUTE# routing header for ipv6</span><br><span class="line">ipv6-frag44IPV6-FRAG# fragment header for ipv6</span><br><span class="line">idrp45IDRP# Inter-Domain Routing Protocol</span><br><span class="line">rsvp46RSVP# Resource ReSerVation Protocol</span><br><span class="line">gre47GRE# Generic Routing Encapsulation</span><br><span class="line">dsr48DSR# Dynamic Source Routing Protocol</span><br><span class="line">bna49BNA# BNA</span><br><span class="line">esp50ESP# encapsulating security payload</span><br><span class="line">ah51AH# authentication header</span><br><span class="line">i-nlsp52I-NLSP# Integrated Net Layer Security TUBA</span><br><span class="line">swipe53SWIPE# IP with Encryption</span><br><span class="line">narp54NARP# NBMA Address Resolution Protocol</span><br><span class="line">mobile55MOBILE# IP Mobility</span><br><span class="line">tlsp56TLSP# Transport Layer Security Protocol</span><br><span class="line">skip57SKIP# SKIP</span><br><span class="line">ipv6-icmp58IPV6-ICMPicmp6# ICMP for IPv6</span><br><span class="line">ipv6-nonxt59IPV6-NONXT# no next header for ipv6</span><br><span class="line">ipv6-opts60IPV6-OPTS# destination options for ipv6</span><br><span class="line">#61# any host internal protocol</span><br><span class="line">cftp62CFTP# CFTP</span><br><span class="line">#63# any local network</span><br><span class="line">sat-expak64SAT-EXPAK# SATNET and Backroom EXPAK</span><br><span class="line">kryptolan65KRYPTOLAN# Kryptolan</span><br><span class="line">rvd66RVD# MIT Remote Virtual Disk Protocol</span><br><span class="line">ippc67IPPC# Internet Pluribus Packet Core</span><br><span class="line">#68# any distributed filesystem</span><br><span class="line">sat-mon69SAT-MON# SATNET Monitoring</span><br><span class="line">visa70VISA# VISA Protocol</span><br><span class="line">ipcv71IPCV# Internet Packet Core Utility</span><br><span class="line">cpnx72CPNX# Computer Protocol Network Executive</span><br><span class="line">cphb73CPHB# Computer Protocol Heart Beat</span><br><span class="line">wsn74WSN# Wang Span Network</span><br><span class="line">pvp75PVP# Packet Video Protocol</span><br><span class="line">br-sat-mon76BR-SAT-MON# Backroom SATNET Monitoring</span><br><span class="line">sun-nd77SUN-ND# SUN ND PROTOCOL-Temporary</span><br><span class="line">wb-mon78WB-MON# WIDEBAND Monitoring</span><br><span class="line">wb-expak79WB-EXPAK# WIDEBAND EXPAK</span><br><span class="line">iso-ip80ISO-IP# ISO Internet Protocol</span><br><span class="line">vmtp81VMTP# Versatile Message Transport</span><br><span class="line">secure-vmtp82SECURE-VMTP# SECURE-VMTP</span><br><span class="line">vines83VINES# VINES</span><br><span class="line">ttp84TTP# TTP</span><br><span class="line">#iptm84IPTM# Protocol Internet Protocol Traffic</span><br><span class="line">nsfnet-igp85NSFNET-IGP# NSFNET-IGP</span><br><span class="line">dgp86DGP# Dissimilar Gateway Protocol</span><br><span class="line">tcf87TCF# TCF</span><br><span class="line">eigrp88EIGRP# Enhanced Interior Routing Protocol (Cisco)</span><br><span class="line">ospf89OSPFIGP# Open Shortest Path First IGP</span><br><span class="line">sprite-rpc90Sprite-RPC# Sprite RPC Protocol</span><br><span class="line">larp91LARP# Locus Address Resolution Protocol</span><br><span class="line">mtp92MTP# Multicast Transport Protocol</span><br><span class="line">ax.2593AX.25# AX.25 Frames</span><br><span class="line">ipip94IPIP# Yet Another IP encapsulation</span><br><span class="line">micp95MICP# Mobile Internetworking Control Pro.</span><br><span class="line">scc-sp96SCC-SP# Semaphore Communications Sec. Pro.</span><br><span class="line">etherip97ETHERIP# Ethernet-within-IP Encapsulation</span><br><span class="line">encap98ENCAP# Yet Another IP encapsulation</span><br><span class="line">#99# any private encryption scheme</span><br><span class="line">gmtp100GMTP# GMTP</span><br><span class="line">ifmp101IFMP# Ipsilon Flow Management Protocol</span><br><span class="line">pnni102PNNI# PNNI over IP</span><br><span class="line">pim103PIM# Protocol Independent Multicast</span><br><span class="line">aris104ARIS# ARIS</span><br><span class="line">scps105SCPS# SCPS</span><br><span class="line">qnx106QNX# QNX</span><br><span class="line">a/n107A/N# Active Networks</span><br><span class="line">ipcomp108IPComp# IP Payload Compression Protocol</span><br><span class="line">snp109SNP# Sitara Networks Protocol</span><br><span class="line">compaq-peer110Compaq-Peer# Compaq Peer Protocol</span><br><span class="line">ipx-in-ip111IPX-in-IP# IPX in IP</span><br><span class="line">carp112CARPvrrp# Common Address Redundancy Protocol</span><br><span class="line">pgm113PGM# PGM Reliable Transport Protocol</span><br><span class="line">#114# any 0-hop protocol</span><br><span class="line">l2tp115L2TP# Layer Two Tunneling Protocol</span><br><span class="line">ddx116DDX# D-II Data Exchange</span><br><span class="line">iatp117IATP# Interactive Agent Transfer Protocol</span><br><span class="line">stp118STP# Schedule Transfer Protocol</span><br><span class="line">srp119SRP# SpectraLink Radio Protocol</span><br><span class="line">uti120UTI# UTI</span><br><span class="line">smp121SMP# Simple Message Protocol</span><br><span class="line">sm122SM# SM</span><br><span class="line">ptp123PTP# Performance Transparency Protocol</span><br><span class="line">isis124ISIS# ISIS over IPv4</span><br><span class="line">fire125FIRE</span><br><span class="line">crtp126CRTP# Combat Radio Transport Protocol</span><br><span class="line">crudp127CRUDP# Combat Radio User Datagram</span><br><span class="line">sscopmce128SSCOPMCE</span><br><span class="line">iplt129IPLT</span><br><span class="line">sps130SPS# Secure Packet Shield</span><br><span class="line">pipe131PIPE# Private IP Encapsulation within IP</span><br><span class="line">sctp132SCTP# Stream Control Transmission Protocol</span><br><span class="line">fc133FC# Fibre Channel</span><br><span class="line">rsvp-e2e-ignore134RSVP-E2E-IGNORE# Aggregation of RSVP for IP reservations</span><br><span class="line">mobility-header135Mobility-Header# Mobility Support in IPv6</span><br><span class="line">udplite136UDPLite# The UDP-Lite Protocol</span><br><span class="line">mpls-in-ip137MPLS-IN-IP# Encapsulating MPLS in IP</span><br><span class="line">manet138MANET# MANET Protocols (RFC5498)</span><br><span class="line">hip139HIP# Host Identity Protocol (RFC5201)</span><br><span class="line">shim6140SHIM6# Shim6 Protocol (RFC5533)</span><br><span class="line">wesp141WESP# Wrapped Encapsulating Security Payload (RFC5840)</span><br><span class="line">rohc142ROHC# Robust Header Compression (RFC5858)</span><br><span class="line">#138-254# Unassigned</span><br><span class="line">pfsync240PFSYNC# PF Synchronization</span><br><span class="line">#253-254# Use for experimentation and testing (RFC3692)</span><br><span class="line">#255# Reserved</span><br><span class="line">divert258DIVERT# Divert pseudo-protocol [non IANA]</span><br></pre></td></tr></table></figure><h2 id="port"><a class="markdownIt-Anchor" href="#port"></a> port</h2><p>为知名的程序保留了端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># head -22 /etc/services</span><br><span class="line"># Network services, Internet style</span><br><span class="line">#</span><br><span class="line"># Note that it is presently the policy of IANA to assign a single well-known</span><br><span class="line"># port number for both TCP and UDP; hence, officially ports have two entries</span><br><span class="line"># even if the protocol doesn&apos;t support UDP operations.</span><br><span class="line">#</span><br><span class="line"># Updated from http://www.iana.org/assignments/port-numbers and other</span><br><span class="line"># sources like http://www.freebsd.org/cgi/cvsweb.cgi/src/etc/services .</span><br><span class="line"># New ports will be added on request if they have been officially assigned</span><br><span class="line"># by IANA and used in the real-world or are needed by a debian package.</span><br><span class="line"># If you need a huge list of used numbers please install the nmap package.</span><br><span class="line"></span><br><span class="line">tcpmux1/tcp# TCP port service multiplexer</span><br><span class="line">echo  7/tcp</span><br><span class="line">echo  7/udp</span><br><span class="line">discard9/tcpsink null</span><br><span class="line">discard9/udpsink null</span><br><span class="line">systat11/tcpusers</span><br><span class="line">daytime13/tcp</span><br><span class="line">daytime13/udp</span><br><span class="line">netstat15/tcp</span><br><span class="line">qotd   17/tcpquote</span><br></pre></td></tr></table></figure><h2 id="the-host-table"><a class="markdownIt-Anchor" href="#the-host-table"></a> The Host Table</h2><p>The host table is a simple text file that associates IP addresses with hostnames. On<br>most Unix systems, the table is in the file /etc/hosts. Each table entry in /etc/hosts contains<br>an IP address separated by whitespace from a list of hostnames associated with<br>that address. Comments begin with #.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">head -22 /etc/hosts</span><br><span class="line">##</span><br><span class="line"># Host Database</span><br><span class="line">#</span><br><span class="line"># localhost is used to configure the loopback interface</span><br><span class="line"># when the system is booting.  Do not change this entry.</span><br><span class="line">##</span><br><span class="line">127.0.0.1localhost</span><br><span class="line">255.255.255.255broadcasthost</span><br><span class="line">::1             localhost</span><br><span class="line"># 0.0.0.0 account.jetbrains.com</span><br><span class="line"># 0.0.0.0 www.jetbrains.com</span><br><span class="line"># Added by Docker Desktop</span><br><span class="line"># To allow the same kube context to work on the host and the container:</span><br><span class="line">127.0.0.1 kubernetes.docker.internal</span><br><span class="line"># End of section</span><br></pre></td></tr></table></figure><h2 id="dns"><a class="markdownIt-Anchor" href="#dns"></a> DNS</h2><p>overcomes both major weaknesses of the host table:<br>• DNSscales well. It doesn’t rely on a single large table; it is a distributed database<br>system that doesn’t bog down as the database grows. DNScurrently provides<br>information on approximately 100,000,000 hosts, while fewer than 10,000<br>were listed in the host table.<br>• DNSguarantees that new host information will be disseminated to the rest of the<br>network as it is needed.<br>DNSis a distributed hierarchical system for resolving hostnames into IP addresses.<br>Under DNS, there is no central database with all of the Internet host information.<br>The information is distributed among thousands of name servers organized into a<br>hierarchy similar to the hierarchy of the Unix filesystem. DNShas a root domain at<br>the top of the domain hierarchy that is served by a group of name servers called the<br>root servers.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;On a Linux system, use the route command with the -n option to display the routing&lt;br&gt;
table.* The -n option prevents route from converti
      
    
    </summary>
    
      <category term="network" scheme="https://dreamerjonson.com/categories/network/"/>
    
    
      <category term="network" scheme="https://dreamerjonson.com/tags/network/"/>
    
  </entry>
  
  <entry>
    <title>golang[88]-互斥锁与通道锁哪个更快</title>
    <link href="https://dreamerjonson.com/2019/09/06/golang-88-%E4%BA%92%E6%96%A5%E9%94%81%E4%B8%8E%E9%80%9A%E9%81%93%E9%94%81%E5%93%AA%E4%B8%AA%E6%9B%B4%E5%BF%AB/"/>
    <id>https://dreamerjonson.com/2019/09/06/golang-88-互斥锁与通道锁哪个更快/</id>
    <published>2019-09-06T02:22:14.000Z</published>
    <updated>2019-09-06T02:23:15.517Z</updated>
    
    <content type="html"><![CDATA[<p>下面的程序来证明，极端情况下，互斥锁要比通道锁更快。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"sync"</span></span><br><span class="line"><span class="string">"testing"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> center <span class="keyword">struct</span> &#123;</span><br><span class="line">workers []*worker</span><br><span class="line">ch <span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line">ch2 <span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line">sema <span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> worker <span class="keyword">struct</span> &#123;</span><br><span class="line">sync.Mutex</span><br><span class="line">count <span class="keyword">int64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">c.ch = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;,<span class="number">10</span>)</span><br><span class="line">c.ch2 = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;,<span class="number">10</span>)</span><br><span class="line">c.sema = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;,<span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++&#123;</span><br><span class="line">w:= <span class="built_in">new</span>(worker)</span><br><span class="line">c.workers = <span class="built_in">append</span>(c.workers,w)</span><br><span class="line"><span class="keyword">go</span> w.do()</span><br><span class="line"><span class="keyword">go</span> w.do2()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span><span class="params">(w *worker)</span> <span class="title">do</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> &lt;-c.ch:</span><br><span class="line">w.Lock()</span><br><span class="line">time.Sleep(<span class="number">1</span>*time.Millisecond)</span><br><span class="line">w.Unlock()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span><span class="params">(w *worker)</span> <span class="title">do2</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> &lt;-c.ch2:</span><br><span class="line">c.sema&lt;- <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">time.Sleep(<span class="number">1</span>*time.Millisecond)</span><br><span class="line">&lt;-c.sema</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c center</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Benchmark1</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; b.N; i++ &#123;</span><br><span class="line">c.ch&lt;- <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Benchmark2</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; b.N; i++ &#123;</span><br><span class="line">c.ch2&lt;- <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;下面的程序来证明，极端情况下，互斥锁要比通道锁更快。&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
      <category term="go" scheme="https://dreamerjonson.com/categories/go/"/>
    
    
      <category term="go" scheme="https://dreamerjonson.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>golang[87]-git commit提交的模版写法</title>
    <link href="https://dreamerjonson.com/2019/09/05/golang-87-git%E6%8F%90%E4%BA%A4%E7%9A%84%E6%A8%A1%E7%89%88%E5%86%99%E6%B3%95/"/>
    <id>https://dreamerjonson.com/2019/09/05/golang-87-git提交的模版写法/</id>
    <published>2019-09-05T14:11:46.000Z</published>
    <updated>2019-09-05T14:12:51.416Z</updated>
    
    <content type="html"><![CDATA[<p>被大哥教训了，提交的git commit 要规范</p><h2 id="git-commit提交的模版"><a class="markdownIt-Anchor" href="#git-commit提交的模版"></a> git commit提交的模版</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">cat ~/.git-commit-template.txt                                                                                                                                                              </span><br><span class="line"># &lt;type&gt;: (If applied, this commit will...) &lt;subject&gt; (Max 50 char)</span><br><span class="line"># |&lt;----  Using a Maximum Of 50 Characters  ----&gt;|</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Explain why this change is being made</span><br><span class="line"># |&lt;----   Try To Limit Each Line to a Maximum Of 72 Characters   ----&gt;|</span><br><span class="line"></span><br><span class="line"># Provide links or keys to any relevant tickets, articles or other resources</span><br><span class="line"># Example: Github issue #23</span><br><span class="line"></span><br><span class="line"># --- COMMIT END ---</span><br><span class="line"># Type can be</span><br><span class="line">#    feat     (new feature)</span><br><span class="line">#    fix      (bug fix)</span><br><span class="line">#    refactor (refactoring production code)</span><br><span class="line">#    style    (formatting, missing semi colons, etc; no code change)</span><br><span class="line">#    docs     (changes to documentation)</span><br><span class="line">#    test     (adding or refactoring tests; no production code change)</span><br><span class="line">#    chore    (updating grunt tasks etc; no production code change)</span><br><span class="line"># --------------------</span><br><span class="line"># Remember to</span><br><span class="line">#    Capitalize the subject line</span><br><span class="line">#    Use the imperative mood in the subject line</span><br><span class="line">#    Do not end the subject line with a period</span><br><span class="line">#    Separate subject from body with a blank line</span><br><span class="line">#    Use the body to explain what and why vs. how</span><br><span class="line">#    Can use multiple lines with &quot;-&quot; for bullet points in body</span><br><span class="line"># --------------------</span><br><span class="line"># For more information about this template, check out</span><br><span class="line"># https://gist.github.com/adeekshith/cd4c95a064977cdc6c50</span><br><span class="line">### ### %</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;被大哥教训了，提交的git commit 要规范&lt;/p&gt;
&lt;h2 id=&quot;git-commit提交的模版&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#git-commit提交的模版&quot;&gt;&lt;/a&gt; git commit提交的模版&lt;/h2&gt;
&lt;fig
      
    
    </summary>
    
      <category term="go" scheme="https://dreamerjonson.com/categories/go/"/>
    
    
      <category term="go" scheme="https://dreamerjonson.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>golang[86]-go-micro版本差异带来的问题f</title>
    <link href="https://dreamerjonson.com/2019/08/27/golang-86-go-micro%E7%89%88%E6%9C%AC%E5%B7%AE%E5%BC%82%E5%B8%A6%E6%9D%A5%E7%9A%84%E9%97%AE%E9%A2%98f/"/>
    <id>https://dreamerjonson.com/2019/08/27/golang-86-go-micro版本差异带来的问题f/</id>
    <published>2019-08-27T12:03:54.000Z</published>
    <updated>2019-08-28T02:16:10.912Z</updated>
    
    <content type="html"><![CDATA[<h2 id="起因"><a class="markdownIt-Anchor" href="#起因"></a> 起因</h2><p>问题的起因在我的新项目中使用最新microv1.9.1版本调用发送邮件的follow.srv.push服务出现问题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;id&quot;:&quot;go.micro.client&quot;,&quot;code&quot;:500,&quot;detail&quot;:&quot;&quot;,&quot;status&quot;:&quot;Internal Server Error&quot;&#125;</span><br></pre></td></tr></table></figure><p>经过排查发现 go-micro 1.7以上含1.7   client发送给服务器端的fullmethod发生了改变。<br>从 /push.PushSrv/Push =&gt; /followme.srv.push.PushSrv/Push<br>从 /followme.trade-engine.TradeEngine/Close  到 /tradeengine.TradeEngine/Close</p><h2 id="问题追踪"><a class="markdownIt-Anchor" href="#问题追踪"></a> 问题追踪</h2><p>具体出现在<br>122行  <a href="http://github.com/micro/go-plugins1.0/client/grpc/grpc.go" target="_blank" rel="noopener">github.com/micro/go-plugins1.0/client/grpc/grpc.go</a><br>//method：/PushSrv.Push</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">err := cc.Invoke(ctx, methodToGRPC(req.Endpoint(), req.Body()), req.Body(), rsp, grpc.CallContentSubtype(cf.String()))</span><br></pre></td></tr></table></figure><p>变为了：<br>go-micro@1.9/client/grpc/grpc.go<br>//method：/followme.srv.push.PushSrv/Push</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">err := cc.Invoke(ctx, methodToGRPC(req.Service(), req.Endpoint()), req.Body(), rsp, grpc.CallContentSubtype(cf.Name()))</span><br></pre></td></tr></table></figure><p>导致访问出现问题。</p><p>go-micro代码改变commit地址：<a href="https://github.com/micro/go-micro/commit/d3a6297b17cb78602875440b62d88971346a0f05" target="_blank" rel="noopener">https://github.com/micro/go-micro/commit/d3a6297b17cb78602875440b62d88971346a0f05</a></p><h2 id="解决办法"><a class="markdownIt-Anchor" href="#解决办法"></a> 解决办法</h2><p>由于新版本的micro，req.Service()其实是注册的microName，那么是否可以将其变为Push？这样传递到服务器的fullmethod就变为了/push.PushSrv/Push。<br>但是，由于在micro的代码中，registery又需要microName从consul中拿到服务地址，因此可以从这里下手hook去consul中访问的服务名。</p><p>下面给出一段micro1.9 调用push的代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"context"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"github.com/micro/go-micro"</span></span><br><span class="line"><span class="string">"github.com/micro/go-micro/client/selector"</span></span><br><span class="line"><span class="string">"github.com/micro/go-micro/registry"</span></span><br><span class="line"><span class="string">"github.com/micro/go-micro/registry/consul"</span></span><br><span class="line"><span class="string">"github.com/micro/go-micro/service/grpc"</span></span><br><span class="line"><span class="string">"gitlab.followme.com/CopyTradingGo/proto/src/push"</span></span><br><span class="line"><span class="string">"strconv"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> NewRegistry <span class="keyword">struct</span> &#123;</span><br><span class="line">C  registry.Registry</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c NewRegistry)</span> <span class="title">Init</span><span class="params">(opts...registry.Option)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> c.C.Init(opts...)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c NewRegistry)</span> <span class="title">Options</span><span class="params">()</span> <span class="title">registry</span>.<span class="title">Options</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> c.C.Options()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c NewRegistry)</span> <span class="title">Register</span><span class="params">(srv *registry.Service,opts ...registry.RegisterOption)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> c.C.Register(srv,opts...)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c NewRegistry)</span> <span class="title">Deregister</span><span class="params">(srv*registry.Service)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> c.C.Deregister(srv)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c NewRegistry)</span> <span class="title">GetService</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="params">([]*registry.Service, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> c.C.GetService(<span class="string">"followme.srv.push"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c NewRegistry)</span> <span class="title">ListServices</span><span class="params">()</span> <span class="params">([]*registry.Service, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> c.C.ListServices()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c NewRegistry)</span> <span class="title">Watch</span><span class="params">(opts...registry.WatchOption)</span> <span class="params">(registry.Watcher, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> c.C.Watch(opts...)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c NewRegistry)</span> <span class="title">String</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> c.C.String()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">reg := consul.NewRegistry(<span class="function"><span class="keyword">func</span><span class="params">(op *registry.Options)</span></span> &#123;</span><br><span class="line">op.Addrs = []<span class="keyword">string</span>&#123;</span><br><span class="line"><span class="string">"192.168.8.6:8500"</span>,</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">service:= grpc.NewService(</span><br><span class="line">micro.Registry(reg),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">newreg:=  NewRegistry&#123;C:reg&#125;</span><br><span class="line">service.Client().Options().Selector.Init(selector.Registry(newreg))</span><br><span class="line">srv:= push.NewPushSrvService(<span class="string">"push"</span>, service.Client())</span><br><span class="line">smsParams := []<span class="keyword">string</span>&#123;</span><br><span class="line"><span class="string">"demo"</span>,</span><br><span class="line">strconv.FormatInt(<span class="keyword">int64</span>(<span class="number">1</span>), <span class="number">10</span>),</span><br><span class="line">strconv.FormatFloat(<span class="number">99.99</span>, <span class="string">'f'</span>, <span class="number">-1</span>, <span class="number">64</span>),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> req = <span class="built_in">new</span>(push.PushRequest)</span><br><span class="line">req.Type = push.PushType_SMS</span><br><span class="line">req.Sender = <span class="string">"guard"</span></span><br><span class="line">req.ToUserId = <span class="number">80</span></span><br><span class="line"><span class="keyword">var</span> sms = <span class="built_in">new</span>(push.SMSRequest)</span><br><span class="line">sms.TemplateId = <span class="number">100401</span></span><br><span class="line">sms.Params = smsParams</span><br><span class="line">req.Sms = sms</span><br><span class="line">ctx:=context.Background()</span><br><span class="line">cc,_:= context.WithTimeout(ctx,<span class="number">5</span>*time.Minute)</span><br><span class="line">result,err:= srv.Push(cc,req)</span><br><span class="line">fmt.Println(result,err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一开始以为所有高版本的micro 调用低版本的micro都会出现问题。 但是我经过多次实验发现，micro1.9调用 trade-engine micro1.1版本ok。<br>我接着怀疑是不是trade-engine做了特殊处理。查看代码未发现问题。<br>我接着自己实验了用1.9版本micro 去调用自己的1.1版本 helloworld服务，仍然OK。<br>接着查看代码发现，1.9版本传递过来的fullmethod确实是/followme.trade-engine.Say/Hello<br>但是fullmethod拆分为了servise：Say 以及method：Hello。  只用到了这两个参数。<br>也就是说不管是1.9版本传递的/followme.trade-engine.Say/Hello 还是1.1版本传递的 /tradeEngine.Say/Hello,服务器只需要最后的Say/Hello。<br>所以即便是修改了fullmethod，仍然可以用高版本调用低版本。</p><h2 id="问题为何高版本不能调用push"><a class="markdownIt-Anchor" href="#问题为何高版本不能调用push"></a> 问题：为何高版本不能调用Push？</h2><p>push是C#维护，推测是C#对传递过去的fullmethod做了处理，必须要保证匹配。</p><h2 id=""><a class="markdownIt-Anchor" href="#"></a> </h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;起因&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#起因&quot;&gt;&lt;/a&gt; 起因&lt;/h2&gt;
&lt;p&gt;问题的起因在我的新项目中使用最新microv1.9.1版本调用发送邮件的follow.srv.push服务出现问题：&lt;/p&gt;
&lt;figure c
      
    
    </summary>
    
      <category term="go" scheme="https://dreamerjonson.com/categories/go/"/>
    
    
      <category term="go" scheme="https://dreamerjonson.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>docker-push到 dockerhub-Harbor</title>
    <link href="https://dreamerjonson.com/2019/08/26/docker-push%E5%88%B0-dockerhub-Harbor/"/>
    <id>https://dreamerjonson.com/2019/08/26/docker-push到-dockerhub-Harbor/</id>
    <published>2019-08-26T09:22:34.000Z</published>
    <updated>2019-08-26T09:24:18.067Z</updated>
    
    <content type="html"><![CDATA[<h2 id="tag-版本号"><a class="markdownIt-Anchor" href="#tag-版本号"></a> tag + 版本号</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t dockerhub.followme-internal.com/deploy/go-quant-backtest:v2.2.0.1 --no-cache .</span><br></pre></td></tr></table></figure><h2 id="push"><a class="markdownIt-Anchor" href="#push"></a> push</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker push dockerhub.followme-internal.com/deploy/go-quant-backtest:v2.2.0.1</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;tag-版本号&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#tag-版本号&quot;&gt;&lt;/a&gt; tag + 版本号&lt;/h2&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutt
      
    
    </summary>
    
      <category term="docker" scheme="https://dreamerjonson.com/categories/docker/"/>
    
    
      <category term="docker" scheme="https://dreamerjonson.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>golang[85]-测试读锁的性能</title>
    <link href="https://dreamerjonson.com/2019/08/21/golang-85-%E6%B5%8B%E8%AF%95%E8%AF%BB%E9%94%81%E7%9A%84%E6%80%A7%E8%83%BD/"/>
    <id>https://dreamerjonson.com/2019/08/21/golang-85-测试读锁的性能/</id>
    <published>2019-08-21T12:45:21.000Z</published>
    <updated>2019-08-21T12:52:45.341Z</updated>
    
    <content type="html"><![CDATA[<h2 id="测试读锁的性能"><a class="markdownIt-Anchor" href="#测试读锁的性能"></a> 测试读锁的性能</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"math/rand"</span></span><br><span class="line"><span class="string">"sync"</span></span><br><span class="line"><span class="string">"testing"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> m <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">string</span></span><br><span class="line"><span class="keyword">var</span> lock  sync.RWMutex</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">rand.Seed(time.Now().Unix())</span><br><span class="line">m:=<span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">string</span>,<span class="number">100000</span>)</span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;<span class="number">100000</span>;i++&#123;</span><br><span class="line">m[i] = <span class="string">"helloworld"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Benchmark1</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; b.N; i++ &#123;</span><br><span class="line">_ = m[rand.Int()%<span class="number">100000</span>]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Benchmark2</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; b.N; i++ &#123;</span><br><span class="line">lock.RLock()</span><br><span class="line">_ = m[rand.Int()%<span class="number">100000</span>]</span><br><span class="line">lock.RUnlock()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="bench"><a class="markdownIt-Anchor" href="#bench"></a> bench</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> test . -bench .</span><br><span class="line">goos: darwin</span><br><span class="line">goarch: amd64</span><br><span class="line">pkg: gitlab.followme.com/CopyTradingGo/tools/GRPC_TEST/test3</span><br><span class="line">Benchmark1<span class="number">-12</span>           <span class="number">100000000</span>               <span class="number">18.9</span> ns/op</span><br><span class="line">Benchmark2<span class="number">-12</span>           <span class="number">50000000</span>                <span class="number">29.4</span> ns/op</span><br><span class="line">PASS</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;测试读锁的性能&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#测试读锁的性能&quot;&gt;&lt;/a&gt; 测试读锁的性能&lt;/h2&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="go" scheme="https://dreamerjonson.com/categories/go/"/>
    
    
      <category term="go" scheme="https://dreamerjonson.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>测试读锁的性能</title>
    <link href="https://dreamerjonson.com/2019/08/21/%E6%B5%8B%E8%AF%95%E8%AF%BB%E9%94%81%E7%9A%84%E6%80%A7%E8%83%BD/"/>
    <id>https://dreamerjonson.com/2019/08/21/测试读锁的性能/</id>
    <published>2019-08-21T12:44:51.000Z</published>
    <updated>2019-08-21T12:44:51.799Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="go" scheme="https://dreamerjonson.com/categories/go/"/>
    
    
      <category term="go" scheme="https://dreamerjonson.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>docker-save 到远程服务器</title>
    <link href="https://dreamerjonson.com/2019/08/16/docker-save-%E5%88%B0%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>https://dreamerjonson.com/2019/08/16/docker-save-到远程服务器/</id>
    <published>2019-08-16T02:57:42.000Z</published>
    <updated>2019-08-21T09:01:07.509Z</updated>
    
    <content type="html"><![CDATA[<p>首先有一个docker Images</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker build -t backtest --no-cache .</span><br><span class="line">docker save -o backtest.tar backtest:latest</span><br><span class="line">scp backtest.tar beta-quant:/root/deploy</span><br></pre></td></tr></table></figure><p>另一台服务器解压</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker load &lt; backtest2.tar</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h2><p><a href="https://medium.com/@sh.tsang/docker-tutorial-4-exporting-container-and-saving-image-c3a7d792cfb6" target="_blank" rel="noopener">https://medium.com/@sh.tsang/docker-tutorial-4-exporting-container-and-saving-image-c3a7d792cfb6</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;首先有一个docker Images&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;lin
      
    
    </summary>
    
      <category term="go" scheme="https://dreamerjonson.com/categories/go/"/>
    
    
      <category term="go" scheme="https://dreamerjonson.com/tags/go/"/>
    
  </entry>
  
</feed>
