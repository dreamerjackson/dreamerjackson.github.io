<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jonson</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://dreamerjonson.com/"/>
  <updated>2019-04-28T02:38:09.078Z</updated>
  <id>https://dreamerjonson.com/</id>
  
  <author>
    <name>Jonson</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MAC环境配置</title>
    <link href="https://dreamerjonson.com/2019/04/25/tmux/"/>
    <id>https://dreamerjonson.com/2019/04/25/tmux/</id>
    <published>2019-04-25T05:44:19.000Z</published>
    <updated>2019-04-28T02:38:09.078Z</updated>
    
    <content type="html"><![CDATA[<p>注意：本文内容适用于 Tmux 2.3 及以上的版本，但是绝大部分的特性低版本也都适用，鼠标支持、VI 模式、插件管理在低版本可能会与本文不兼容。</p><h2 id="tmux-快捷键-速查表"><a class="markdownIt-Anchor" href="#tmux-快捷键-速查表"></a> Tmux 快捷键 &amp; 速查表</h2><p>启动新会话：</p><pre><code>tmux [new -s 会话名 -n 窗口名]</code></pre><p>恢复会话：</p><pre><code>tmux at [-t 会话名]</code></pre><p>列出所有会话：</p><pre><code>tmux ls</code></pre><p><a name="killSessions"></a>关闭会话：</p><pre><code>tmux kill-session -t 会话名</code></pre><p><a name="killAllSessions"></a>关闭所有会话：</p><pre><code>tmux ls | grep : | cut -d. -f1 | awk '{print substr($1, 0, length($1)-1)}' | xargs kill</code></pre><h3 id="在-tmux-中按下-tmux-前缀-ctrlb然后"><a class="markdownIt-Anchor" href="#在-tmux-中按下-tmux-前缀-ctrlb然后"></a> 在 Tmux 中，按下 Tmux 前缀 <code>ctrl+b</code>，然后：</h3><h3 id="会话"><a class="markdownIt-Anchor" href="#会话"></a> 会话</h3><pre><code>:new&lt;回车&gt;  启动新会话s           列出所有会话$           重命名当前会话</code></pre><h3 id="a-namewindowstabsa窗口-标签页"><a class="markdownIt-Anchor" href="#a-namewindowstabsa窗口-标签页"></a> <a name="WindowsTabs"></a>窗口 (标签页)</h3><pre><code>c  创建新窗口w  列出所有窗口n  后一个窗口p  前一个窗口f  查找窗口,  重命名当前窗口&amp;  关闭当前窗口</code></pre><h2 id="调整窗口排序"><a class="markdownIt-Anchor" href="#调整窗口排序"></a> 调整窗口排序</h2><pre><code>swap-window -s 3 -t 1  交换 3 号和 1 号窗口swap-window -t 1       交换当前和 1 号窗口move-window -t 1       移动当前窗口到 1 号</code></pre><h3 id="a-namepanessplitsa窗格分割窗口"><a class="markdownIt-Anchor" href="#a-namepanessplitsa窗格分割窗口"></a> <a name="PanesSplits"></a>窗格（分割窗口）</h3><pre><code>%  垂直分割&quot;  水平分割o  交换窗格x  关闭窗格⍽  左边这个符号代表空格键 - 切换布局q 显示每个窗格是第几个，当数字出现的时候按数字几就选中第几个窗格{ 与上一个窗格交换位置} 与下一个窗格交换位置z 切换窗格最大化/最小化</code></pre><h3 id="a-namesyncpanesa同步窗格"><a class="markdownIt-Anchor" href="#a-namesyncpanesa同步窗格"></a> <a name="syncPanes"></a>同步窗格</h3><p>这么做可以切换到想要的窗口，输入 Tmux 前缀和一个冒号呼出命令提示行，然后输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:setw synchronize-panes</span><br></pre></td></tr></table></figure><p>你可以指定开或关，否则重复执行命令会在两者间切换。<br>这个选项值针对某个窗口有效，不会影响别的会话和窗口。<br>完事儿之后再次执行命令来关闭。<a href="http://blog.sanctum.geek.nz/sync-tmux-panes/" target="_blank" rel="noopener">帮助</a></p><h3 id="调整窗格尺寸"><a class="markdownIt-Anchor" href="#调整窗格尺寸"></a> 调整窗格尺寸</h3><p>如果你不喜欢默认布局，可以重调窗格的尺寸。虽然这很容易实现，但一般不需要这么干。这几个命令用来调整窗格：</p><pre><code>PREFIX : resize-pane -D          当前窗格向下扩大 1 格PREFIX : resize-pane -U          当前窗格向上扩大 1 格PREFIX : resize-pane -L          当前窗格向左扩大 1 格PREFIX : resize-pane -R          当前窗格向右扩大 1 格PREFIX : resize-pane -D 20       当前窗格向下扩大 20 格PREFIX : resize-pane -t 2 -L 20  编号为 2 的窗格向左扩大 20 格</code></pre><h3 id="文本复制模式"><a class="markdownIt-Anchor" href="#文本复制模式"></a> 文本复制模式：</h3><p>按下 <code>PREFIX-[</code> 进入文本复制模式。可以使用方向键在屏幕中移动光标。默认情况下，方向键是启用的。在配置文件中启用 Vim 键盘布局来切换窗口、调整窗格大小。Tmux 也支持 Vi 模式。要是想启用 Vi 模式，只需要把下面这一行添加到 .tmux.conf 中：</p><pre><code>setw -g mode-keys vi</code></pre><p>启用这条配置后，就可以使用 h、j、k、l 来移动光标了。</p><p>想要退出文本复制模式的话，按下回车键就可以了。然后按下 <code>PREFIX-]</code> 粘贴刚才复制的文本。</p><p>一次移动一格效率低下，在 Vi 模式启用的情况下，可以辅助一些别的快捷键高效工作。</p><p>例如，可以使用 w 键逐词移动，使用 b 键逐词回退。使用 f 键加上任意字符跳转到当前行第一次出现该字符的位置，使用 F 键达到相反的效果。</p><pre><code>vi             emacs        功能^              M-m          反缩进Escape         C-g          清除选定内容Enter          M-w          复制选定内容j              Down         光标下移h              Left         光标左移l              Right        光标右移L                           光标移到尾行M              M-r          光标移到中间行H              M-R          光标移到首行k              Up           光标上移d              C-u          删除整行D              C-k          删除到行末$              C-e          移到行尾:              g            前往指定行C-d            M-Down       向下滚动半屏C-u            M-Up         向上滚动半屏C-f            Page down    下一页w              M-f          下一个词p              C-y          粘贴C-b            Page up      上一页b              M-b          上一个词q              Escape       退出C-Down or J    C-Down       向下翻C-Up or K      C-Up         向下翻n              n            继续搜索?              C-r          向前搜索/              C-s          向后搜索0              C-a          移到行首Space          C-Space      开始选中               C-t          字符调序</code></pre><h3 id="杂项"><a class="markdownIt-Anchor" href="#杂项"></a> 杂项：</h3><pre><code>d  退出 tmux（tmux 仍在后台运行）t  窗口中央显示一个数字时钟?  列出所有快捷键:  命令提示符</code></pre><h3 id="配置选项"><a class="markdownIt-Anchor" href="#配置选项"></a> 配置选项：</h3><pre><code># 鼠标支持 - 设置为 on 来启用鼠标(与 2.1 之前的版本有区别，请自行查阅 man page)* set -g mouse on# 设置默认终端模式为 256colorset -g default-terminal &quot;screen-256color&quot;# 启用活动警告setw -g monitor-activity onset -g visual-activity on# 居中窗口列表set -g status-justify centre# 最大化/恢复窗格unbind Up bind Up new-window -d -n tmp \; swap-pane -s tmp.1 \; select-window -t tmpunbind Downbind Down last-window \; swap-pane -s tmp.1 \; kill-window -t tmp</code></pre><h3 id="参考配置文件~tmuxconf"><a class="markdownIt-Anchor" href="#参考配置文件~tmuxconf"></a> 参考配置文件（~/.tmux.conf）：</h3><p>下面这份配置是我使用 Tmux 几年来逐渐精简后的配置，请自取。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -----------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Tmux 基本配置 - 要求 Tmux &gt;= 2.3</span></span><br><span class="line"><span class="comment"># 如果不想使用插件，只需要将此节的内容写入 ~/.tmux.conf 即可</span></span><br><span class="line"><span class="comment"># -----------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># C-b 和 VIM 冲突，修改 Prefix 组合键为 Control-Z，按键距离近</span></span><br><span class="line"><span class="built_in">set</span> -g prefix C-z</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> -g base-index         1     <span class="comment"># 窗口编号从 1 开始计数</span></span><br><span class="line"><span class="built_in">set</span> -g display-panes-time 10000 <span class="comment"># PREFIX-Q 显示编号的驻留时长，单位 ms</span></span><br><span class="line"><span class="built_in">set</span> -g mouse              on    <span class="comment"># 开启鼠标</span></span><br><span class="line"><span class="built_in">set</span> -g pane-base-index    1     <span class="comment"># 窗格编号从 1 开始计数</span></span><br><span class="line"><span class="built_in">set</span> -g renumber-windows   on    <span class="comment"># 关掉某个窗口后，编号重排</span></span><br><span class="line"></span><br><span class="line">setw -g allow-rename      off   <span class="comment"># 禁止活动进程修改窗口名</span></span><br><span class="line">setw -g automatic-rename  off   <span class="comment"># 禁止自动命名新窗口</span></span><br><span class="line">setw -g mode-keys         vi    <span class="comment"># 进入复制模式的时候使用 vi 键位（默认是 EMACS）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -----------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># 使用插件 - via tpm</span></span><br><span class="line"><span class="comment">#   1. 执行 git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm</span></span><br><span class="line"><span class="comment">#   2. 执行 bash ~/.tmux/plugins/tpm/bin/install_plugins</span></span><br><span class="line"><span class="comment"># -----------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">setenv -g TMUX_PLUGIN_MANAGER_PATH <span class="string">'~/.tmux/plugins'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 推荐的插件（请去每个插件的仓库下读一读使用教程）</span></span><br><span class="line"><span class="built_in">set</span> -g @plugin <span class="string">'seebi/tmux-colors-solarized'</span></span><br><span class="line"><span class="built_in">set</span> -g @plugin <span class="string">'tmux-plugins/tmux-pain-control'</span></span><br><span class="line"><span class="built_in">set</span> -g @plugin <span class="string">'tmux-plugins/tmux-prefix-highlight'</span></span><br><span class="line"><span class="built_in">set</span> -g @plugin <span class="string">'tmux-plugins/tmux-resurrect'</span></span><br><span class="line"><span class="built_in">set</span> -g @plugin <span class="string">'tmux-plugins/tmux-sensible'</span></span><br><span class="line"><span class="built_in">set</span> -g @plugin <span class="string">'tmux-plugins/tmux-yank'</span></span><br><span class="line"><span class="built_in">set</span> -g @plugin <span class="string">'tmux-plugins/tpm'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># tmux-resurrect</span></span><br><span class="line"><span class="built_in">set</span> -g @resurrect-dir <span class="string">'~/.tmux/resurrect'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># tmux-prefix-highlight</span></span><br><span class="line"><span class="built_in">set</span> -g status-right <span class="string">'#&#123;prefix_highlight&#125; #H | %a %Y-%m-%d %H:%M'</span></span><br><span class="line"><span class="built_in">set</span> -g @prefix_highlight_show_copy_mode <span class="string">'on'</span></span><br><span class="line"><span class="built_in">set</span> -g @prefix_highlight_copy_mode_attr <span class="string">'fg=white,bg=blue'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化 TPM 插件管理器 (放在配置文件的最后)</span></span><br><span class="line">run <span class="string">'~/.tmux/plugins/tpm/tpm'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -----------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># 结束</span></span><br><span class="line"><span class="comment"># -----------------------------------------------------------------------------</span></span><br></pre></td></tr></table></figure><h2 id="fzf"><a class="markdownIt-Anchor" href="#fzf"></a> fzf</h2><p>官方文档给的基本操作是 cd<code>**</code>+Tab生成列表+Enter生成命令+Enter执行 快捷键可以把4步变成两步 还是很Nice<br>ctrl+R<br>ctrl+T</p><p>特别介绍一下Preview 功能</p><p>我们知道在Unix环境下 我们要看文件的时候 必须一个个打开 当文件数量较大的场景</p><p>比如说 我们调了10个参数 做了20组实验 每组实验拿到30轮结果 这时候 一个个vim开 怕不是要吐了 这时候你是不是开始怀念有GUI的世界</p><p>当然 你可以写个bash脚本 把所有的文件合到一个文件 然后 只看一个file就行了</p><p>fzf给出了另外一个炫酷的解决方案</p><h1 id="set-alias"><a class="markdownIt-Anchor" href="#set-alias"></a> set alias</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ vim ~/.zshrc</span><br><span class="line">alias pp=&apos;fzf --preview &apos;&quot;&apos;&quot;&apos;[[ $(file --mime &#123;&#125;) =~ binary ]] &amp;&amp; echo &#123;&#125; is a binary file || (highlight -O ansi -l &#123;&#125; || coderay &#123;&#125; || rougify &#123;&#125; || cat &#123;&#125;) 2&gt; /dev/null | head -500&apos;&quot;&apos;&quot;</span><br><span class="line">alias oo=&apos;fzf --preview &apos;&quot;&apos;&quot;&apos;[[ $(file --mime &#123;&#125;) =~ binary ]] &amp;&amp; echo &#123;&#125; is a binary file || (highlight -O ansi -l &#123;&#125; || coderay &#123;&#125; || rougify &#123;&#125; || tac &#123;&#125;) 2&gt; /dev/null | head -500&apos;&quot;&apos;&quot;  # flashback</span><br><span class="line">$ source ~/.zshrc</span><br></pre></td></tr></table></figure><h2 id="iterm2"><a class="markdownIt-Anchor" href="#iterm2"></a> ITerm2</h2><p>可定制化Hotkey, 一键召出iTerm2 (不再需要⌘+Tab 或者 通过spotlight切换)<br>快捷的组合键<br>⌘+Shift+E 召唤时间线<br>⌘+Option+b 时光机<br>⌘+T 新Tab<br>⌘+D 水平分屏<br>⌘+← 切换Tab / ⌘+shift+← 切换分屏<br>关闭panel：⌘ + w</p><p>最大化Tab中的pane，隐藏本Tab中的其他pane：⌘+ shift +enter , 再次还原</p><p>按下 Command + T 可以新建一个 Tab，每个标签页的后面都会标记一个序号，通过 Command + 序号 就可以在多个页面之间切换了，或者用 Command + [ 和 Command + ] 来切换到左侧或者右侧的标签页。</p><p>同一个 Tab 内，还可以切分出多个 Pane，有两种切分方式：</p><p>Command + D：水平切分，切分出一左一右两个 Pane<br>Command + Shift + D：垂直切分，切分出一上一下两个 Pane<br>通过 Command + Ctrl + 方向键 可以调整每个 Pane 的大小，通过 Command + Option + 方向键 可以切换 Pane。</p><h2 id="mac系统快捷键进阶"><a class="markdownIt-Anchor" href="#mac系统快捷键进阶"></a> MAC系统快捷键进阶</h2><p>除了 Command + C/V 这种入门必备的快捷键，还有一些系统级的常用快捷键是有必要掌握一下的。</p><p>光标移动<br>这里比较推荐使用 Emacs 系的快捷键而不是传统的 Command + ←/→/Delete之类的。因为后者并不通用，比如在终端中就无法使用，而 Emacs 系的快捷键则在几乎所有系统级别的输入框内都通用。</p><p>常见的几个行级别操作有：</p><p>Ctrl + A：移动到行首<br>Ctrl + E：移动到行尾<br>Ctrl + K：删除到行尾<br>Ctrl + N：移动到下一行<br>Ctrl + P：移动到上一行<br>前三个命令在终端中非常常用，能大幅度提高工作效率。后两个命令则在 Vim 系列中很常见，多用于上下切换列表中的选项。</p><p>几个比较常见的字母级别操作有：</p><p>Ctrl + F：向右（Forward）移动一个字母，等价于方向键 →<br>Ctrl + B：向左（Backward）移动一个字母，等价于方向键 ←<br>Ctrl + D：向右删除一个字母，等价于 → + Delete这个快捷键也很常用<br>Ctrl + H：向左删除一个字母，等价于 Delete<br>使用 Option 键<br>如果觉得按字母操作太过于细粒度，按行操作又太粗粒度，那么 Option 键绝对算得上神器，因为它可以按单词操作。</p><p>Option + ←：光标向左移动一个单词<br>Option + →：光标向右移动一个单词<br>Option + Delete：删除一个单词<br>使用 Shift 键<br>Shift 键类似于可视模式，比如在某个位置点击光标并按住 shift 键不松开，再去另一个位置点击一次，就可以选中两次点击位置之间的文本内容。</p><p>注意，shift 键可视模式还可以和 Option 键一起合用，感兴趣的读者可以自行尝试。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;注意：本文内容适用于 Tmux 2.3 及以上的版本，但是绝大部分的特性低版本也都适用，鼠标支持、VI 模式、插件管理在低版本可能会与本文不兼容。&lt;/p&gt;
&lt;h2 id=&quot;tmux-快捷键-速查表&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#t
      
    
    </summary>
    
      <category term="开发配置" scheme="https://dreamerjonson.com/categories/%E5%BC%80%E5%8F%91%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="开发配置" scheme="https://dreamerjonson.com/tags/%E5%BC%80%E5%8F%91%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>git操作github-gitlab</title>
    <link href="https://dreamerjonson.com/2019/04/02/connect-github-gitlab/"/>
    <id>https://dreamerjonson.com/2019/04/02/connect-github-gitlab/</id>
    <published>2019-04-02T07:43:32.000Z</published>
    <updated>2019-04-28T02:43:51.490Z</updated>
    
    <content type="html"><![CDATA[<h2 id="克隆"><a class="markdownIt-Anchor" href="#克隆"></a> 克隆</h2><p>有两种方式，一种是通过ssh,一种是通过http</p><p>使用ssh的方式需要在本机生成ssh文件，<br>参考资料：<a href="https://gitlab.followme.com/help/ssh/README#generating-a-new-ssh-key-pair" target="_blank" rel="noopener">https://gitlab.followme.com/help/ssh/README#generating-a-new-ssh-key-pair</a></p><h3 id="产生ssh"><a class="markdownIt-Anchor" href="#产生ssh"></a> 产生SSH</h3><p>To create a new SSH key pair:<br>Open a terminal on Linux or macOS, or Git Bash / WSL on Windows.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Generate a new ED25519 SSH key pair:</span><br><span class="line">ssh-keygen -t ed25519 -C &quot;email@example.com&quot;</span><br><span class="line"></span><br><span class="line">Or, if you want to use RSA:</span><br><span class="line">ssh-keygen -o -t rsa -b 4096 -C &quot;email@example.com&quot;</span><br></pre></td></tr></table></figure><h3 id="adding-an-ssh-key-to-your-gitlab-account"><a class="markdownIt-Anchor" href="#adding-an-ssh-key-to-your-gitlab-account"></a> Adding an SSH key to your GitLab account</h3><p>Copy your public SSH key to the clipboard by using one of the commands below<br>depending on your Operating System:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">macOS:</span><br><span class="line">pbcopy &lt; ~/.ssh/id_ed25519.pub</span><br><span class="line"></span><br><span class="line">WSL / GNU/Linux (requires the xclip package):</span><br><span class="line">xclip -sel clip &lt; ~/.ssh/id_ed25519.pub</span><br><span class="line"></span><br><span class="line">Git Bash on Windows:</span><br><span class="line">cat ~/.ssh/id_ed25519.pub | clip</span><br></pre></td></tr></table></figure><h3 id="go-mod-中下载依赖包时可以使用"><a class="markdownIt-Anchor" href="#go-mod-中下载依赖包时可以使用"></a> go mod 中下载依赖包时，可以使用</h3><p>go build  .<br>但是下载有时候会出现问题，例如：<br>我运行go mod download 提示 fatal: could not read Username for ‘<a href="https://gitlab.XXX.com" target="_blank" rel="noopener">https://gitlab.XXX.com</a>’: terminal prompts disabled</p><p>这时，需要通过ssh的方式下载gitlab中的数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.gitconfig</span><br></pre></td></tr></table></figure><p>添加：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[url &quot;ssh://git@gitlab.XXX.com/&quot;]</span><br><span class="line">insteadOf = https://gitlab.XXX.com/</span><br></pre></td></tr></table></figure><h2 id="查看分支"><a class="markdownIt-Anchor" href="#查看分支"></a> 查看分支</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -a</span><br></pre></td></tr></table></figure><h2 id="将远程分支-dev-到本地dev-并切换到dev分支"><a class="markdownIt-Anchor" href="#将远程分支-dev-到本地dev-并切换到dev分支"></a> 将远程分支 dev 到本地dev 并切换到dev分支</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">git fetch origin dev  存疑</span><br><span class="line">git checkout -b dev origin/dev</span><br></pre></td></tr></table></figure><h2 id=""><a class="markdownIt-Anchor" href="#"></a> </h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git push origin dev</span><br><span class="line"></span><br><span class="line">git push -f origin dev 强制更新</span><br></pre></td></tr></table></figure><h2 id="删除文件"><a class="markdownIt-Anchor" href="#删除文件"></a> 删除文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm --cached -r .idea</span><br></pre></td></tr></table></figure><h2 id="添加远程"><a class="markdownIt-Anchor" href="#添加远程"></a> 添加远程</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git remote add camel-snipet git@gitlab.followme.com:camel/go-snipet.git</span><br><span class="line"></span><br><span class="line"> git remote -v</span><br><span class="line"></span><br><span class="line"> git push camel-snipet dev</span><br></pre></td></tr></table></figure><h2 id="回退"><a class="markdownIt-Anchor" href="#回退"></a> 回退</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reflog</span><br><span class="line">git reset --hard a7e1d279</span><br></pre></td></tr></table></figure><h2 id="mac添加环境变量"><a class="markdownIt-Anchor" href="#mac添加环境变量"></a> mac添加环境变量</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">操作步骤:</span><br><span class="line">1、打开Terminal（终端）</span><br><span class="line">2、输入：vim ~/.bash_profile</span><br><span class="line">3、设置PATH：export PATH=/usr/local/mysql/bin:$PATH</span><br><span class="line">4、输入：:wq    //保存并退出vi</span><br><span class="line">5、修改立即生效：source ~/.bash_profile</span><br><span class="line">6、查看环境变量的值：echo $PATH</span><br></pre></td></tr></table></figure><p>go run main.go --registry=consul  --registry_address=“127.0.0.1:8500”</p><p>consul：<br>自动将服务添加到consul<br>UI ：<a href="http://localhost:8500" target="_blank" rel="noopener">http://localhost:8500</a></p><p>##gitlab Runner</p><p>To install GitLab Runner using Homebrew:</p><p>Install the GitLab Runner.</p><p>brew install gitlab-runner</p><p>Install the Runner as a service and start it.</p><p>brew services start gitlab-runner</p><p>Runner is installed and running.</p><p>gitlab-runner register<br>gitlab-runner stop<br>gitlab-runner register<br>gitlab-runner unregister --all-runners</p><p>./gitlab-runner run</p><h2 id="当远程分支有冲突强制"><a class="markdownIt-Anchor" href="#当远程分支有冲突强制"></a> 当远程分支有冲突，强制</h2><p>git fetch --all<br>git reset --hard origin/master</p><h2 id="工作区回到最后一次提交的状态"><a class="markdownIt-Anchor" href="#工作区回到最后一次提交的状态"></a> 工作区回到最后一次提交的状态。</h2><p>git checkout .</p><p>git log --pretty=oneline</p><p>但最有意思的是 format，可以定制要显示的记录格式，这样的输出便于后期编程提取分析，像这样：</p><p>$ git log --pretty=format:&quot;%h - %an, %ar : %s&quot;<br>ca82a6d - Scott Chacon, 11 months ago : changed the version number<br>085bb3b - Scott Chacon, 11 months ago : removed unnecessary test code<br>a11bef0 - Scott Chacon, 11 months ago : first commit</p><h2 id="makefile-代码片段"><a class="markdownIt-Anchor" href="#makefile-代码片段"></a> makefile 代码片段</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">proto:</span><br><span class="line"><span class="keyword">for</span> d <span class="keyword">in</span> api srv; <span class="keyword">do</span> \</span><br><span class="line"><span class="keyword">for</span> f <span class="keyword">in</span> $<span class="variable">$d</span>/**/proto/*.proto; <span class="keyword">do</span> \</span><br><span class="line">protoc --proto_path=<span class="variable">$&#123;GOPATH&#125;</span>/src --micro_out=. --go_out=. $<span class="variable">$f</span>; \</span><br><span class="line"><span class="built_in">echo</span> compiled: $<span class="variable">$f</span>; \</span><br><span class="line"><span class="keyword">done</span> \</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">lint:</span><br><span class="line">./bin/lint.sh</span><br><span class="line"></span><br><span class="line">build:</span><br><span class="line">./bin/build.sh</span><br><span class="line"></span><br><span class="line">data:</span><br><span class="line">go-bindata -o data/bindata.go -pkg data data/*.json</span><br><span class="line"></span><br><span class="line">run:</span><br><span class="line">docker-compose build</span><br><span class="line">docker-compose up</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;克隆&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#克隆&quot;&gt;&lt;/a&gt; 克隆&lt;/h2&gt;
&lt;p&gt;有两种方式，一种是通过ssh,一种是通过http&lt;/p&gt;
&lt;p&gt;使用ssh的方式需要在本机生成ssh文件，&lt;br&gt;
参考资料：&lt;a href=&quot;
      
    
    </summary>
    
      <category term="git" scheme="https://dreamerjonson.com/categories/git/"/>
    
      <category term="mac环境配置" scheme="https://dreamerjonson.com/categories/git/mac%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="git" scheme="https://dreamerjonson.com/tags/git/"/>
    
      <category term="mac环境配置" scheme="https://dreamerjonson.com/tags/mac%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>golang[71]-golang操作mysql数据库</title>
    <link href="https://dreamerjonson.com/2019/04/01/golang-71-sql/"/>
    <id>https://dreamerjonson.com/2019/04/01/golang-71-sql/</id>
    <published>2019-04-01T09:38:37.000Z</published>
    <updated>2019-04-28T02:47:05.425Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h2><p><a href="https://dev.mysql.com/downloads" target="_blank" rel="noopener">https://dev.mysql.com/downloads</a></p><h2 id="installing-mysql-on-macos"><a class="markdownIt-Anchor" href="#installing-mysql-on-macos"></a> Installing MySQL on macOS</h2><p>推荐使用dmg文件安装<br><a href="https://dev.mysql.com/doc/refman/5.7/en/osx-installation.html" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/5.7/en/osx-installation.html</a><br>安装完毕有默认密码</p><h2 id="连接"><a class="markdownIt-Anchor" href="#连接"></a> 连接</h2><p>PATH=&quot;$PATH&quot;:/usr/local/mysql/bin<br>sudo su<br>mysql -u root -p 123456</p><p>create database test;<br>use test;<br>create table user_info(id int(11),username varchar(20),create_time timestamp ,primary key(id));<br>INSERT INTO user_info(id,username) VALUES(5,“jonson”);<br>select * from user_info;</p><p>create table user_info(id int(11),username varchar(20),create_time timestamp ,primary key(id));</p><h2 id="插入"><a class="markdownIt-Anchor" href="#插入"></a> 插入</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"database/sql"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line">_ <span class="string">"github.com/go-sql-driver/mysql"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">db, err := sql.Open(<span class="string">"mysql"</span>, <span class="string">"root:123456@tcp(127.0.0.1:3306)/test?charset=utf8"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">stmt, err := db.Prepare(<span class="string">`INSERT user_info (id,username) values (?,?)`</span>)</span><br><span class="line">res, err := stmt.Exec(<span class="number">88</span>,<span class="string">"olaya"</span>)</span><br><span class="line">id, err := res.LastInsertId()</span><br><span class="line">fmt.Println(id)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="删除"><a class="markdownIt-Anchor" href="#删除"></a> 删除</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"database/sql"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line">_ <span class="string">"github.com/go-sql-driver/mysql"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">db, err := sql.Open(<span class="string">"mysql"</span>, <span class="string">"root:123456@tcp(127.0.0.1:3306)/test?charset=utf8"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">stmt, err := db.Prepare(<span class="string">"delete from user_info where id=?"</span>)</span><br><span class="line"></span><br><span class="line">res, err := stmt.Exec(<span class="number">88</span>)</span><br><span class="line">id, err := res.RowsAffected()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(id)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="更新"><a class="markdownIt-Anchor" href="#更新"></a> 更新</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// mysql.go</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"database/sql"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line">_ <span class="string">"github.com/go-sql-driver/mysql"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">db, err := sql.Open(<span class="string">"mysql"</span>, <span class="string">"root:123456@tcp(127.0.0.1:3306)/test?charset=utf8"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">stmt, err := db.Prepare(<span class="string">"update user_info set id=? where id=?"</span>)</span><br><span class="line"></span><br><span class="line">res, err := stmt.Exec(<span class="number">5</span>, <span class="number">99</span>)</span><br><span class="line">id, err := res.RowsAffected()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(id)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="查询"><a class="markdownIt-Anchor" href="#查询"></a> 查询</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// mysql.go</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"database/sql"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line">_ <span class="string">"github.com/go-sql-driver/mysql"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">db, err := sql.Open(<span class="string">"mysql"</span>, <span class="string">"root:123456@tcp(127.0.0.1:3306)/test?charset=utf8"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rows, err := db.Query(<span class="string">"SELECT * FROM user_info"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> rows.Next() &#123;</span><br><span class="line"><span class="keyword">var</span> id <span class="keyword">int</span></span><br><span class="line"><span class="keyword">var</span> username <span class="keyword">string</span></span><br><span class="line"><span class="keyword">var</span> create_time <span class="keyword">string</span></span><br><span class="line">err = rows.Scan(&amp;id, &amp;username, &amp;create_time)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(id, username, create_time)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//for rows.Next() &#123;</span></span><br><span class="line"><span class="comment">//    var userId int</span></span><br><span class="line"><span class="comment">//    var userName string</span></span><br><span class="line"><span class="comment">//    var userAge int</span></span><br><span class="line"><span class="comment">//    var userSex int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    rows.Columns()</span></span><br><span class="line"><span class="comment">//    err = rows.Scan(&amp;userId, &amp;userName, &amp;userAge, &amp;userSex)</span></span><br><span class="line"><span class="comment">//    checkErr(err)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    fmt.Println(userId)</span></span><br><span class="line"><span class="comment">//    fmt.Println(userName)</span></span><br><span class="line"><span class="comment">//    fmt.Println(userAge)</span></span><br><span class="line"><span class="comment">//    fmt.Println(userSex)</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#安装&quot;&gt;&lt;/a&gt; 安装&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://dev.mysql.com/downloads&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;
      
    
    </summary>
    
      <category term="go" scheme="https://dreamerjonson.com/categories/go/"/>
    
    
      <category term="go" scheme="https://dreamerjonson.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>k8s</title>
    <link href="https://dreamerjonson.com/2019/03/14/k8s/"/>
    <id>https://dreamerjonson.com/2019/03/14/k8s/</id>
    <published>2019-03-14T03:29:49.000Z</published>
    <updated>2019-03-18T13:29:32.931Z</updated>
    
    <content type="html"><![CDATA[<p>mac平台</p><h2 id="安装brew"><a class="markdownIt-Anchor" href="#安装brew"></a> 安装brew</h2><p>。。。</p><h2 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install kubectl</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew cask install minikube</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ which minikube</span><br><span class="line">$ minikube start</span><br></pre></td></tr></table></figure><h2 id="错误提示"><a class="markdownIt-Anchor" href="#错误提示"></a> 错误提示</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stderr: failed to pull image &quot;k8s.gcr.io/kube-apiserver:v1.13.4&quot;: output: Error response from daemon: Get https://k8s.gcr.io/v2/: net/http: request canceled while waiting for connection (Client.Timeout exceeded while awaiting headers)</span><br></pre></td></tr></table></figure><p>打印日志</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">minikube logs</span><br></pre></td></tr></table></figure><h2 id="使用代理"><a class="markdownIt-Anchor" href="#使用代理"></a> 使用代理：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ minikube delete</span><br><span class="line">$ minikube start --docker-env HTTP_PROXY=http://10.0.2.2:1087 --docker-env HTTPS_PROXY=http://10.0.2.2:1087</span><br></pre></td></tr></table></figure><h2 id="代理参考资料"><a class="markdownIt-Anchor" href="#代理参考资料"></a> 代理参考资料</h2><p><a href="https://github.com/kubernetes/minikube/blob/master/docs/http_proxy.md" target="_blank" rel="noopener">https://github.com/kubernetes/minikube/blob/master/docs/http_proxy.md</a><br><a href="https://my.oschina.net/csq/blog/3014879" target="_blank" rel="noopener">https://my.oschina.net/csq/blog/3014879</a></p><h2 id="配置pod"><a class="markdownIt-Anchor" href="#配置pod"></a> 配置pod</h2><p>client-pod.yaml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">client-pod</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    component:</span> <span class="string">web</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  containers:</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">client</span></span><br><span class="line"><span class="attr">      image:</span> <span class="string">stephengrider/multi-worker</span></span><br><span class="line"><span class="attr">      ports:</span></span><br><span class="line"><span class="attr">        - containerPort:</span> <span class="number">3000</span></span><br></pre></td></tr></table></figure><h2 id="配置server"><a class="markdownIt-Anchor" href="#配置server"></a> 配置server</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">client-node-port</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">NodePort</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">    - port:</span> <span class="number">3050</span></span><br><span class="line"><span class="attr">      targetPort:</span> <span class="number">3000</span></span><br><span class="line"><span class="attr">      nodePort:</span> <span class="number">31515</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    component:</span> <span class="string">web</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl apply -f client-pod.yaml</span><br><span class="line">$ kubectl apply -f client-node-port.yaml</span><br><span class="line">$ kubectl get pods</span><br><span class="line">$ kubectl get services</span><br></pre></td></tr></table></figure><p>修改client-pod.yaml中的images,重新执行配置文件即可更新</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl apply -f client-pod.yaml</span><br></pre></td></tr></table></figure><h2 id="获取ip"><a class="markdownIt-Anchor" href="#获取ip"></a> 获取ip</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ minikube ip</span><br></pre></td></tr></table></figure><h2 id="获取pod详细描述"><a class="markdownIt-Anchor" href="#获取pod详细描述"></a> 获取pod详细描述</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl describe pod client-pod</span><br></pre></td></tr></table></figure><h2 id="删除pod"><a class="markdownIt-Anchor" href="#删除pod"></a> 删除pod</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl delete -f client-pod.yaml</span><br></pre></td></tr></table></figure><h2 id="书写deployment"><a class="markdownIt-Anchor" href="#书写deployment"></a> 书写deployment</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: client-deployment</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      component: web</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        component: web</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">        - name: client</span><br><span class="line">          image: stephengrider/multi-client</span><br><span class="line">          ports:</span><br><span class="line">            - containerPort: 3000</span><br><span class="line">```         </span><br><span class="line"></span><br><span class="line">## 应用deployment</span><br></pre></td></tr></table></figure><p>$ kubectl apply -f client-deployment.yaml<br>$ kubectl get pods<br>$ kubectl get deployments<br>NAME                DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE<br>client-deployment   1         1         1            1           30s</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">如果image有更新，可以采取下面的方式强制更新：</span><br></pre></td></tr></table></figure><p>docker  build -t stephengrider/multi-client:v5 .<br>docker push  stephengrider/multi-client:v5<br>$ kubectl set image deployment/client-deployment client=stephengrider/multi-client:v5</p><pre class="highlight"><code class="">## docker ps 得到k8s虚拟机的信息</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;mac平台&lt;/p&gt;
&lt;h2 id=&quot;安装brew&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#安装brew&quot;&gt;&lt;/a&gt; 安装brew&lt;/h2&gt;
&lt;p&gt;。。。&lt;/p&gt;
&lt;h2 id=&quot;安装&quot;&gt;&lt;a class=&quot;markdownIt-Anchor
      
    
    </summary>
    
      <category term="go" scheme="https://dreamerjonson.com/categories/go/"/>
    
    
      <category term="go" scheme="https://dreamerjonson.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>go-数据结构[15]-归并排序</title>
    <link href="https://dreamerjonson.com/2019/03/11/go-struture-15-merge-sort/"/>
    <id>https://dreamerjonson.com/2019/03/11/go-struture-15-merge-sort/</id>
    <published>2019-03-11T14:01:51.000Z</published>
    <updated>2019-03-11T14:19:02.441Z</updated>
    
    <content type="html"><![CDATA[<style>pre,code {     font-family: "Source Code Pro", Consolas, Monaco, Menlo, Consolas, monospace !important; }</style><p>归并排序（Merge Sort，台湾译作：合并排序）是建立在归并操作上的一种有效的排序算法。该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。</p><p>归并操作(Merge)，也叫归并算法，指的是将两个已经排序的序列合并成一个序列的操作。归并排序算法依赖归并操作。归并排序有多路归并排序、两路归并排序 , 可用于内排序，也可以用于外排序。这里仅对内排序的两路归并方法进行讨论。</p><p>算法思路：<br>1、把 n 个记录看成 n 个长度为 l 的有序子表<br>2、进行两两归并使记录关键字有序，得到 n/2 个长度为 2 的有序子表<br>3、重复第 2 步直到所有记录归并成一个长度为 n 的有序表为止。</p><p>实例分析<br>以数组 array = [6, 5, 3, 1, 8, 7, 2, 4] 为例，首先将数组分为长度为 2 的子数组，并使每个子数组有序：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[6, 5]  [3, 1]  [8, 7]  [2, 4]</span><br><span class="line">   ↓       ↓       ↓       ↓</span><br><span class="line">[5, 6]  [1, 3]  [7, 8]  [2, 4]</span><br></pre></td></tr></table></figure><p>然后再两两合并：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[6, 5, 3, 1]  [8, 7, 2, 4]</span><br><span class="line">      ↓             ↓</span><br><span class="line">[1, 3, 5, 6]  [2, 4, 7, 8]</span><br></pre></td></tr></table></figure><p>最后将两个子数组合并：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[6, 5, 3, 1, 8, 7, 2, 4]</span><br><span class="line">            ↓</span><br><span class="line">[1, 2, 3, 4, 5, 6, 7, 8]</span><br></pre></td></tr></table></figure><p>排序过程动画演示如下：</p><img src="/2019/03/11/go-struture-15-merge-sort/merge.gif" title="compile">]]></content>
    
    <summary type="html">
    
      
      
        &lt;style&gt;
pre,code {
     font-family: &quot;Source Code Pro&quot;, Consolas, Monaco, Menlo, Consolas, monospace !important;
 }
&lt;/style&gt;
&lt;p&gt;归并排序（Merge S
      
    
    </summary>
    
      <category term="go" scheme="https://dreamerjonson.com/categories/go/"/>
    
    
      <category term="go" scheme="https://dreamerjonson.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>go-数据结构[14]-希尔排序</title>
    <link href="https://dreamerjonson.com/2019/03/11/go-struture-14-shell-sort/"/>
    <id>https://dreamerjonson.com/2019/03/11/go-struture-14-shell-sort/</id>
    <published>2019-03-11T10:25:53.000Z</published>
    <updated>2019-03-11T14:19:14.462Z</updated>
    
    <content type="html"><![CDATA[<h2 id="希尔排序"><a class="markdownIt-Anchor" href="#希尔排序"></a> 希尔排序</h2><p>希尔排序算法是按其设计者希尔（Donald Shell）的名字命名，该算法由1959年公布，是插入排序的一种更高效的改进版本。它的作法不是每次一个元素挨一个元素的比较。而是初期选用大跨步（增量较大）间隔比较，使记录跳跃式接近它的排序位置；然后增量缩小；最后增量为 1 ，这样记录移动次数大大减少，提高了排序效率。希尔排序对增量序列的选择没有严格规定。</p><p>希尔排序是基于插入排序的以下两点性质而提出改进方法的：</p><p>1、插入排序在对几乎已经排好序的数据操作时， 效率高， 即可以达到线性排序的效率<br>2、但插入排序一般来说是低效的， 因为插入排序每次只能将数据移动一位<br>算法思路：</p><p>先取一个正整数 d1(d1 &lt; n)，把全部记录分成 d1 个组，所有距离为 d1 的倍数的记录看成一组，然后在各组内进行插入排序<br>然后取 d2(d2 &lt; d1)<br>重复上述分组和排序操作；直到取 di = 1(i &gt;= 1) 位置，即所有记录成为一个组，最后对这个组进行插入排序。一般选 d1 约为 n/2，d2 为 d1 /2， d3 为 d2/2 ，…， di = 1。</p><h2 id="实例分析"><a class="markdownIt-Anchor" href="#实例分析"></a> 实例分析</h2><img src="/2019/03/11/go-struture-14-shell-sort/shell.png" title="compile"><h2 id="go语言实现"><a class="markdownIt-Anchor" href="#go语言实现"></a> go语言实现</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="comment">//打印</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">print</span><span class="params">(arr []<span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>  _,data := <span class="keyword">range</span> arr&#123;</span><br><span class="line">fmt.Printf(<span class="string">"%d "</span>,data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//arr:= []int&#123;8, 5, 2, 6, 9, 3, 1, 4, 0, 7,6,3,10&#125;</span></span><br><span class="line">arr:=[]<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">8</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(arr)</span><br><span class="line"></span><br><span class="line">shellsort(arr)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arr)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//希尔排序</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">shellsort</span><span class="params">(arr []<span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">gap:=<span class="number">4</span></span><br><span class="line">length:= <span class="built_in">len</span>(arr)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> gap &gt;<span class="number">0</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i:=gap;i&lt;length;i+=<span class="number">1</span>&#123;</span><br><span class="line">j:= i</span><br><span class="line">temp:= arr[i]</span><br><span class="line"><span class="keyword">for</span>;j&gt;<span class="number">0</span>;j-=gap&#123;</span><br><span class="line"><span class="keyword">if</span> j-gap&gt;=<span class="number">0</span> &amp;&amp;  arr[j] &lt; arr[j-gap]&#123;</span><br><span class="line">tmp:= arr[j]</span><br><span class="line">arr[j] = arr[j-gap]</span><br><span class="line">arr[j-gap] = tmp</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">gap = gap/<span class="number">2</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="javascript实现"><a class="markdownIt-Anchor" href="#javascript实现"></a> javascript实现</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shellSort</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">swap</span>(<span class="params">array, i, k</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> temp = array[i];</span><br><span class="line">        array[i] = array[k];</span><br><span class="line">        array[k] = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> length = array.length,</span><br><span class="line">        gap = <span class="built_in">Math</span>.floor(length / <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (gap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = gap; i &lt; length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> j = i; <span class="number">0</span> &lt; j; j -= gap) &#123;</span><br><span class="line">                <span class="keyword">if</span> (array[j - gap] &gt; array[j]) &#123;</span><br><span class="line">                    swap(array, j - gap, j);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        gap = <span class="built_in">Math</span>.floor(gap / <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;希尔排序&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#希尔排序&quot;&gt;&lt;/a&gt; 希尔排序&lt;/h2&gt;
&lt;p&gt;希尔排序算法是按其设计者希尔（Donald Shell）的名字命名，该算法由1959年公布，是插入排序的一种更高效的改进版本。它的作
      
    
    </summary>
    
      <category term="go" scheme="https://dreamerjonson.com/categories/go/"/>
    
    
      <category term="go" scheme="https://dreamerjonson.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>go-数据结构[13]-二分插入排序</title>
    <link href="https://dreamerjonson.com/2019/03/11/go-struture-13-binary-sort/"/>
    <id>https://dreamerjonson.com/2019/03/11/go-struture-13-binary-sort/</id>
    <published>2019-03-11T10:14:01.000Z</published>
    <updated>2019-03-18T13:30:01.616Z</updated>
    
    <content type="html"><![CDATA[<h2 id="二分插入排序-go实现"><a class="markdownIt-Anchor" href="#二分插入排序-go实现"></a> 二分插入排序 go实现</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="comment">//打印</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">print</span><span class="params">(arr []<span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>  _,data := <span class="keyword">range</span> arr&#123;</span><br><span class="line">fmt.Printf(<span class="string">"%d "</span>,data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">arr:= []<span class="keyword">int</span>&#123;<span class="number">2</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">7</span>,<span class="number">2</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">1</span>,<span class="number">8</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">7</span>,<span class="number">2</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">7</span>,<span class="number">8</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">7</span>&#125;</span><br><span class="line"><span class="comment">//arr:=[]int&#123;1,3,2,4,9,2,6,5,4,8&#125;</span></span><br><span class="line"><span class="built_in">print</span>(arr)</span><br><span class="line"></span><br><span class="line">binarysort(arr)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arr)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入排序</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">binarysort</span><span class="params">(arr []<span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//print(arr)</span></span><br><span class="line">length := <span class="built_in">len</span>(arr)</span><br><span class="line"><span class="keyword">for</span> i:= <span class="number">1</span>;i&lt;length;i++&#123;</span><br><span class="line"></span><br><span class="line">tmp:= arr[i]</span><br><span class="line"> j:= i<span class="number">-1</span></span><br><span class="line"> <span class="keyword">if</span> arr[j] &gt; arr[i]&#123;</span><br><span class="line">  index:= binarysearch(arr,<span class="number">0</span>,i<span class="number">-1</span>,arr[i])</span><br><span class="line"></span><br><span class="line"> <span class="keyword">for</span> k:= i<span class="number">-1</span>;k&gt;=index;k--&#123;</span><br><span class="line">  arr[k+<span class="number">1</span>] =arr[k]</span><br><span class="line"> &#125;</span><br><span class="line"> arr[index] = tmp</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">binarysearch</span><span class="params">(arr []<span class="keyword">int</span>, low <span class="keyword">int</span>, high <span class="keyword">int</span>, data <span class="keyword">int</span>)</span> <span class="title">int</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> low &lt;=high&#123;</span><br><span class="line"></span><br><span class="line">mid:= low + (high-low)/<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> data &gt; arr[mid]&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>  mid+<span class="number">1</span>&lt; <span class="built_in">len</span>(arr) &amp;&amp; data &lt;=arr[mid+<span class="number">1</span>]&#123;</span><br><span class="line"><span class="keyword">return</span> mid+<span class="number">1</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">low = mid + <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span> mid == <span class="number">0</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">high = mid - <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="javascript实现"><a class="markdownIt-Anchor" href="#javascript实现"></a> JavaScript实现</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">function insertionSort2(array) &#123;</span><br><span class="line">  function binarySearch(array, start, end, temp) &#123;</span><br><span class="line">    <span class="keyword">var</span> middle;</span><br><span class="line">    while (start &lt;= end) &#123;</span><br><span class="line">      middle = Math.floor((start + end) / <span class="number">2</span>);</span><br><span class="line">      <span class="keyword">if</span> (array[middle] &lt; temp) &#123;</span><br><span class="line">        <span class="keyword">if</span> (temp &lt;= array[middle + <span class="number">1</span>]) &#123;</span><br><span class="line">          <span class="keyword">return</span> middle + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          start = middle + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (end === <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          end = middle;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  function binarySort(array) &#123;</span><br><span class="line">    <span class="keyword">var</span> length = array.length,</span><br><span class="line">        i,</span><br><span class="line">        j,</span><br><span class="line">        k,</span><br><span class="line">        temp;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; length; i++) &#123;</span><br><span class="line">      temp = array[i];</span><br><span class="line">      <span class="keyword">if</span> (array[i - <span class="number">1</span>] &lt;= temp) &#123;</span><br><span class="line">        k = i;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        k = binarySearch(array, <span class="number">0</span>, i - <span class="number">1</span>, temp);</span><br><span class="line">        <span class="keyword">for</span> (j = i; j &gt; k; j--) &#123;</span><br><span class="line">          array[j] = array[j - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      array[k] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> binarySort(array);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;二分插入排序-go实现&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#二分插入排序-go实现&quot;&gt;&lt;/a&gt; 二分插入排序 go实现&lt;/h2&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td clas
      
    
    </summary>
    
      <category term="go" scheme="https://dreamerjonson.com/categories/go/"/>
    
    
      <category term="go" scheme="https://dreamerjonson.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>kali-科学—上网</title>
    <link href="https://dreamerjonson.com/2019/03/10/kali-shadow/"/>
    <id>https://dreamerjonson.com/2019/03/10/kali-shadow/</id>
    <published>2019-03-10T13:19:38.000Z</published>
    <updated>2019-03-10T13:32:02.118Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">root@kali:# sudo rm /var/lib/dpkg/lock-frontend</span><br><span class="line">root@kali:# sudo apt-get install shadowsocks -y</span><br><span class="line">root@kali:/etc# sudo apt-get install privoxy</span><br><span class="line">root@kali:~# vim /etc/privoxy/config</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">配置Privoxy, 打开 /etc/privoxy/config,</span><br><span class="line">注释掉</span><br><span class="line">listen-address  localhost:8118</span><br><span class="line">#listen-address  localhost:8118</span><br><span class="line">在最后一行后边加上</span><br><span class="line">forward-socks5 / 127.0.0.1:1080 .</span><br><span class="line">listen-address 127.0.0.1:8118</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">root@kali:/etc# cd shadowsocks/</span><br><span class="line">root@kali:/etc/shadowsocks# cp local.json US.json</span><br><span class="line"></span><br><span class="line">配置ss服务器地址、服务器端口、密码、ss监听端口</span><br><span class="line">root@kali:/etc/shadowsocks# vim US.json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">&quot;server&quot;:&quot;&quot;,</span><br><span class="line">&quot;server_port&quot;:,</span><br><span class="line">&quot;local_address&quot;: &quot;127.0.0.1&quot;,</span><br><span class="line">&quot;local_port&quot;:9050,  </span><br><span class="line">&quot;password&quot;:&quot;&quot;,</span><br><span class="line">&quot;timeout&quot;:300,</span><br><span class="line">&quot;method&quot;:&quot;aes-256-cfb&quot;,</span><br><span class="line">&quot;fast_open&quot;: false,</span><br><span class="line">&quot;workers&quot;: 1,</span><br><span class="line">&quot;prefer_ipv6&quot;: false</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">开启</span><br><span class="line">root@kali:/etc/shadowsocks# systemctl start privoxy.service</span><br><span class="line">root@kali:/etc/shadowsocks# sslocal -c US.json</span><br></pre></td></tr></table></figure><h2 id="设置系统代理"><a class="markdownIt-Anchor" href="#设置系统代理"></a> 设置系统代理</h2><p>socket与配置&quot;local_port&quot;:9050,相同</p><img src="/2019/03/10/kali-shadow/shadow.png" title="compile">]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
      <category term="kali" scheme="https://dreamerjonson.com/categories/kali/"/>
    
    
      <category term="kali" scheme="https://dreamerjonson.com/tags/kali/"/>
    
  </entry>
  
  <entry>
    <title>go-数据结构[12]-二分查找</title>
    <link href="https://dreamerjonson.com/2019/03/10/go-struture-12-binary-search/"/>
    <id>https://dreamerjonson.com/2019/03/10/go-struture-12-binary-search/</id>
    <published>2019-03-10T10:30:27.000Z</published>
    <updated>2019-03-11T10:28:17.806Z</updated>
    
    <content type="html"><![CDATA[<img src="/2019/03/10/go-struture-12-binary-search/bsearch.png" title="compile"><h2 id="go语言实现二分查找"><a class="markdownIt-Anchor" href="#go语言实现二分查找"></a> go语言实现二分查找</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line"></span><br><span class="line">arr:= []<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">13</span>,<span class="number">14</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>  index,data:= <span class="keyword">range</span> arr&#123;</span><br><span class="line">i:= binarySearch(arr,data)</span><br><span class="line">fmt.Printf(<span class="string">"实际序号：%d,找到序号为：%d\n"</span>,index,i)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"-------------------------"</span>)</span><br><span class="line"><span class="keyword">for</span>  index,data:= <span class="keyword">range</span> arr&#123;</span><br><span class="line">i:= binarySearch2(arr,<span class="number">0</span>,<span class="built_in">len</span>(arr)<span class="number">-1</span>,data)</span><br><span class="line">fmt.Printf(<span class="string">"实际序号：%d,找到序号为：%d\n"</span>,index,i)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">binarySearch</span><span class="params">( arr []<span class="keyword">int</span>, data <span class="keyword">int</span> )</span> <span class="title">int</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">low:= <span class="number">0</span></span><br><span class="line">high:= <span class="built_in">len</span>(arr) - <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> low &lt;= high&#123;</span><br><span class="line">mid:= low + (high-low)/<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> data &gt; arr[mid]&#123;</span><br><span class="line">low= mid+<span class="number">1</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> data &lt; arr[mid]&#123;</span><br><span class="line">high= mid - <span class="number">1</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> mid</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">binarySearch2</span><span class="params">( arr []<span class="keyword">int</span>,low,high, data <span class="keyword">int</span> )</span> <span class="title">int</span></span>&#123;</span><br><span class="line"></span><br><span class="line">ret:= <span class="number">-1</span></span><br><span class="line"><span class="keyword">if</span> low &lt;= high&#123;</span><br><span class="line">mid := low + (high-low)/<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> data &gt; arr[mid]&#123;</span><br><span class="line">ret = binarySearch2(arr,mid+<span class="number">1</span>,high,data)</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> data &lt; arr[mid]&#123;</span><br><span class="line">ret = binarySearch2(arr,low,mid<span class="number">-1</span>,data)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> mid</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2019/03/10/go-struture-12-binary-search/bsearch.png&quot; title=&quot;compile&quot;&gt;
&lt;h2 id=&quot;go语言实现二分查找&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#go语
      
    
    </summary>
    
      <category term="go" scheme="https://dreamerjonson.com/categories/go/"/>
    
    
      <category term="go" scheme="https://dreamerjonson.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>go-数据结构[11]-直接插入排序</title>
    <link href="https://dreamerjonson.com/2019/03/10/go-struture-11-Insertion-Sort/"/>
    <id>https://dreamerjonson.com/2019/03/10/go-struture-11-Insertion-Sort/</id>
    <published>2019-03-10T06:04:58.000Z</published>
    <updated>2019-03-10T09:48:53.868Z</updated>
    
    <content type="html"><![CDATA[<style>pre,code {     font-family: "Source Code Pro", Consolas, Monaco, Menlo, Consolas, monospace !important; }</style><h2 id="具体算法描述"><a class="markdownIt-Anchor" href="#具体算法描述"></a> 具体算法描述</h2><p>设有一组关键字｛K1， K2，…， Kn｝；排序开始就认为 K1 是一个有序序列；让 K2 插入上述表长为 1 的有序序列，使之成为一个表长为 2 的有序序列；然后让 K3 插入上述表长为 2 的有序序列，使之成为一个表长为 3 的有序序列；依次类推，最后让 Kn 插入上述表长为 n-1 的有序序列，得一个表长为 n 的有序序列。</p><p>具体算法描述如下：</p><p>从第一个元素开始，该元素可以认为已经被排序<br>取出下一个元素，在已经排序的元素序列中从后向前扫描<br>如果该元素（已排序）大于新元素，将该元素移到下一位置<br>重复步骤 3，直到找到已排序的元素小于或者等于新元素的位置<br>将新元素插入到该位置后<br>重复步骤 2~5<br>如果比较操作的代价比交换操作大的话，可以采用二分查找法来减少比较操作的数目。该算法可以认为是插入排序的一个变种，称为二分查找排序。</p><p>二分查找法，是一种在有序数组中查找某一特定元素的搜索算法。搜素过程从数组的中间元素开始，如果中间元素正好是要查找的元素，则搜素过程结束；如果某一特定元素大于或者小于中间元素，则在数组大于或小于中间元素的那一半中查找，而且跟开始一样从中间元素开始比较。如果在某一步骤数组为空，则代表找不到。这种搜索算法每一次比较都使搜索范围缩小一半。</p><h2 id="实例分析"><a class="markdownIt-Anchor" href="#实例分析"></a> 实例分析</h2><p>现有一组数组 arr = [5, 6, 3, 1, 8, 7, 2, 4]，共有八个记录，排序过程如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[5]   6   3   1   8   7   2   4</span><br><span class="line">  ↑   │</span><br><span class="line">  └───┘</span><br><span class="line">[5, 6]   3   1   8   7   2   4</span><br><span class="line">↑        │</span><br><span class="line">└────────┘</span><br><span class="line">[3, 5, 6]  1   8   7   2   4</span><br><span class="line">↑          │</span><br><span class="line">└──────────┘</span><br><span class="line">[1, 3, 5, 6]  8   7   2   4</span><br><span class="line">           ↑  │</span><br><span class="line">           └──┘</span><br><span class="line">[1, 3, 5, 6, 8]  7   2   4</span><br><span class="line">            ↑    │</span><br><span class="line">            └────┘</span><br><span class="line">[1, 3, 5, 6, 7, 8]  2   4</span><br><span class="line">   ↑                │</span><br><span class="line">   └────────────────┘</span><br><span class="line">[1, 2, 3, 5, 6, 7, 8]  4</span><br><span class="line">         ↑             │</span><br><span class="line">         └─────────────┘</span><br><span class="line"></span><br><span class="line">[1, 2, 3, 4, 5, 6, 7, 8]</span><br></pre></td></tr></table></figure><h2 id="动画演示"><a class="markdownIt-Anchor" href="#动画演示"></a> 动画演示</h2><img src="/2019/03/10/go-struture-11-Insertion-Sort/insert.gif" title="compile"><h2 id="go语言实现"><a class="markdownIt-Anchor" href="#go语言实现"></a> go语言实现</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="comment">//打印</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">print</span><span class="params">(arr []<span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>  _,data := <span class="keyword">range</span> arr&#123;</span><br><span class="line">fmt.Printf(<span class="string">"%d "</span>,data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">arr:= []<span class="keyword">int</span>&#123;<span class="number">8</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">7</span>&#125;</span><br><span class="line"><span class="comment">//arr:=[]int&#123;1,3,2,4,9,2,6,5,4,8&#125;</span></span><br><span class="line"><span class="built_in">print</span>(arr)</span><br><span class="line"></span><br><span class="line">insertsort2(arr)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arr)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入排序</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">insertsort</span><span class="params">(arr []<span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//print(arr)</span></span><br><span class="line">length := <span class="built_in">len</span>(arr)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i:= <span class="number">1</span>;i&lt;length;i++&#123;</span><br><span class="line">temp := arr[i]</span><br><span class="line">index:=i</span><br><span class="line"><span class="keyword">for</span> j:= i<span class="number">-1</span>;j&gt;=<span class="number">0</span>;j--&#123;</span><br><span class="line"><span class="keyword">if</span> arr[j] &gt;temp&#123;</span><br><span class="line">arr[j+<span class="number">1</span>] = arr[j]</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">index--</span><br><span class="line">&#125;</span><br><span class="line">arr[index] = temp</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//推荐</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">insertsort2</span><span class="params">(arr []<span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//print(arr)</span></span><br><span class="line">length := <span class="built_in">len</span>(arr)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i:= <span class="number">1</span>;i&lt;length;i++&#123;</span><br><span class="line">temp := arr[i]</span><br><span class="line">j:=i<span class="number">-1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> j&gt;=<span class="number">0</span> &amp;&amp; arr[j] &gt; temp&#123;</span><br><span class="line">arr[j+<span class="number">1</span>] = arr[j]</span><br><span class="line">j--</span><br><span class="line">&#125;</span><br><span class="line">arr[j+<span class="number">1</span>] = temp</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="javascript-语言实现"><a class="markdownIt-Anchor" href="#javascript-语言实现"></a> JavaScript 语言实现</h2><p>直接插入排序 JavaScript 实现代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertionSort</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">swap</span>(<span class="params">array, i, j</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> temp = array[i];</span><br><span class="line">    array[i] = array[j];</span><br><span class="line">    array[j] = temp;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> length = array.length,</span><br><span class="line">      i,</span><br><span class="line">      j;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; length; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (j = i; j &gt; <span class="number">0</span>; j--) &#123;</span><br><span class="line">      <span class="keyword">if</span> (array[j - <span class="number">1</span>] &gt; array[j]) &#123;</span><br><span class="line">        swap(array, j - <span class="number">1</span>, j);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面这种方式可以减少交换次数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertionSort</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> length = array.length,</span><br><span class="line">    i,</span><br><span class="line">    j,</span><br><span class="line">    temp;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; length; i++) &#123;</span><br><span class="line">    temp = array[i];</span><br><span class="line">    <span class="keyword">for</span> (j = i; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">      <span class="keyword">if</span> (array[j - <span class="number">1</span>] &gt; temp) &#123;</span><br><span class="line">        array[j] = array[j - <span class="number">1</span>];</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        array[j] = temp;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用二分查找法实现的插入排序，二分查找排序：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertionSort2</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">binarySearch</span>(<span class="params">array, start, end, temp</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> middle;</span><br><span class="line">    <span class="keyword">while</span> (start &lt;= end) &#123;</span><br><span class="line">      middle = <span class="built_in">Math</span>.floor((start + end) / <span class="number">2</span>);</span><br><span class="line">      <span class="keyword">if</span> (array[middle] &lt; temp) &#123;</span><br><span class="line">        <span class="keyword">if</span> (temp &lt;= array[middle + <span class="number">1</span>]) &#123;</span><br><span class="line">          <span class="keyword">return</span> middle + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          start = middle + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (end === <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          end = middle;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">binarySort</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> length = array.length,</span><br><span class="line">        i,</span><br><span class="line">        j,</span><br><span class="line">        k,</span><br><span class="line">        temp;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; length; i++) &#123;</span><br><span class="line">      temp = array[i];</span><br><span class="line">      <span class="keyword">if</span> (array[i - <span class="number">1</span>] &lt;= temp) &#123;</span><br><span class="line">        k = i;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        k = binarySearch(array, <span class="number">0</span>, i - <span class="number">1</span>, temp);</span><br><span class="line">        <span class="keyword">for</span> (j = i; j &gt; k; j--) &#123;</span><br><span class="line">          array[j] = array[j - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      array[k] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> binarySort(array);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="资料"><a class="markdownIt-Anchor" href="#资料"></a> 资料</h2><ul><li><a href="http://en.wikipedia.org/wiki/Insertion_sort" target="_blank" rel="external">Wikipedia</a></li><li><a href="http://zh.wikipedia.org/wiki/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F" target="_blank" rel="external">维基百科 - 插入排序</a></li><li><a href="http://zh.wikipedia.org/wiki/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E6%B3%95" target="_blank" rel="external">维基百科 - 二分查找法</a></li><li><a href="http://hualang.iteye.com/blog/1187110" target="_blank" rel="external">排序算法–折半插入排序（二分查找排序）</a></li><li><a href="http://sjjg.js.zwu.edu.cn/SFXX/paixu/paixu6.2.1.html" target="_blank" rel="external">直接插入排序</a></li><li><a href="http://student.zjzk.cn/course_ware/data_structure/web/paixu/paixu8.2.1.1.htm" target="_blank" rel="external">直接插入排序基本思想</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;style&gt;
pre,code {
     font-family: &quot;Source Code Pro&quot;, Consolas, Monaco, Menlo, Consolas, monospace !important;
 }
&lt;/style&gt;
&lt;h2 id=&quot;具体算法描述&quot;
      
    
    </summary>
    
      <category term="go" scheme="https://dreamerjonson.com/categories/go/"/>
    
    
      <category term="go" scheme="https://dreamerjonson.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>go-数据结构[10]-快速排序</title>
    <link href="https://dreamerjonson.com/2019/03/10/go-struture-10-quicksort/"/>
    <id>https://dreamerjonson.com/2019/03/10/go-struture-10-quicksort/</id>
    <published>2019-03-10T04:29:02.000Z</published>
    <updated>2019-03-10T05:35:30.288Z</updated>
    
    <content type="html"><![CDATA[<style>pre,code {     font-family: "Source Code Pro", Consolas, Monaco, Menlo, Consolas, monospace !important; }</style><h2 id="快速排序"><a class="markdownIt-Anchor" href="#快速排序"></a> 快速排序</h2><p>快速排序是图灵奖得主 C. R. A. Hoare 于 1960 年提出的一种划分交换排序。它采用了一种分治的策略，通常称其为分治法(Divide-and-ConquerMethod)。</p><p>分治法的基本思想是：将原问题分解为若干个规模更小但结构与原问题相似的子问题。递归地解这些子问题，然后将这些子问题的解组合为原问题的解。</p><p>利用分治法可将快速排序的分为三步：</p><p>在数据集之中，选择一个元素作为”基准”（pivot）。<br>所有小于”基准”的元素，都移到”基准”的左边；所有大于”基准”的元素，都移到”基准”的右边。这个操作称为分区 (partition) 操作，分区操作结束后，基准元素所处的位置就是最终排序后它的位置。<br>对”基准”左边和右边的两个子集，不断重复第一步和第二步，直到所有子集只剩下一个元素为止。</p><p>分区是快速排序的主要内容，用伪代码可以表示如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function partition(a, left, right, pivotIndex)</span><br><span class="line">     pivotValue := a[pivotIndex]</span><br><span class="line">     swap(a[pivotIndex], a[right]) // 把 pivot 移到結尾</span><br><span class="line">     storeIndex := left</span><br><span class="line">     for i from left to right-1</span><br><span class="line">         if a[i] &lt; pivotValue</span><br><span class="line">             swap(a[storeIndex], a[i])</span><br><span class="line">             storeIndex := storeIndex + 1</span><br><span class="line">     swap(a[right], a[storeIndex]) // 把 pivot 移到它最後的地方</span><br><span class="line">     return storeIndex // 返回 pivot 的最终位置</span><br></pre></td></tr></table></figure><p>首先，把基准元素移到結尾（如果直接选择最后一个元素为基准元素，那就不用移动），然后从左到右（除了最后的基准元素），循环移动小于等于基准元素的元素到数组的开头，每次移动 storeIndex 自增 1，表示下一个小于基准元素将要移动到的位置。循环结束后 storeIndex 所代表的的位置就是基准元素的所有摆放的位置。所以最后将基准元素所在位置（这里是 right）与 storeIndex 所代表的的位置的元素交换位置。要注意的是，一个元素在到达它的最后位置前，可能会被交换很多次。</p><p>一旦我们有了这个分区算法，要写快速排列本身就很容易：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">procedure quicksort(a, left, right)</span><br><span class="line">    if right &gt; left</span><br><span class="line">        select a pivot value a[pivotIndex]</span><br><span class="line">        pivotNewIndex := partition(a, left, right, pivotIndex)</span><br><span class="line">        quicksort(a, left, pivotNewIndex-1)</span><br><span class="line">        quicksort(a, pivotNewIndex+1, right)</span><br></pre></td></tr></table></figure><h2 id="过程"><a class="markdownIt-Anchor" href="#过程"></a> 过程</h2><p>举例来说，现有数组 arr = [3,7,8,5,2,1,9,5,4]，分区可以分解成以下步骤：</p><p>首先选定一个基准元素，这里我们元素 5 为基准元素（基准元素可以任意选择）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">          pivot</span><br><span class="line">            ↓</span><br><span class="line">3   7   8   5   2   1   9   5   4</span><br></pre></td></tr></table></figure><p>将基准元素与数组中最后一个元素交换位置，如果选择最后一个元素为基准元素可以省略该步：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">                              pivot</span><br><span class="line">                                ↓</span><br><span class="line">3   7   8   4   2   1   9   5   5</span><br></pre></td></tr></table></figure><p>从左到右（除了最后的基准元素），循环移动小于基准元素 5 的所有元素到数组开头，留下大于等于基准元素的元素接在后面。在这个过程它也为基准元素找寻最后摆放的位置。循环流程如下：</p><p>循环 i == 0 时，storeIndex == 0，找到一个小于基准元素的元素 3，那么将其与 storeIndex 所在位置的元素交换位置，这里是 3 自身，交换后将 storeIndex 自增 1，storeIndex == 1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">                                pivot</span><br><span class="line">                                  ↓</span><br><span class="line">  3   7   8   4   2   1   9   5   5</span><br><span class="line">  ↑</span><br><span class="line">storeIndex</span><br></pre></td></tr></table></figure><p>循环 i == 3 时，storeIndex == 1，找到一个小于基准元素的元素 4：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">     ┌───────┐                 pivot</span><br><span class="line">     ↓       ↓                   ↓</span><br><span class="line"> 3   7   8   4   2   1   9   5   5</span><br><span class="line">     ↑       ↑</span><br><span class="line">storeIndex   i</span><br></pre></td></tr></table></figure><p>交换位置后，storeIndex 自增 1，storeIndex == 2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">                              pivot</span><br><span class="line">                                ↓</span><br><span class="line">3   4   8   7   2   1   9   5   5</span><br><span class="line">        ↑           </span><br><span class="line">   storeIndex</span><br></pre></td></tr></table></figure><p>循环 i == 4 时，storeIndex == 2，找到一个小于基准元素的元素 2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">        ┌───────┐             pivot</span><br><span class="line">        ↓       ↓               ↓</span><br><span class="line">3   4   8   7   2   1   9   5   5</span><br><span class="line">        ↑       ↑</span><br><span class="line">   storeIndex   i</span><br></pre></td></tr></table></figure><p>交换位置后，storeIndex 自增 1，storeIndex == 3：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">                              pivot</span><br><span class="line">                                ↓</span><br><span class="line">3   4   2   7   8   1   9   5   5</span><br><span class="line">            ↑           </span><br><span class="line">       storeIndex</span><br></pre></td></tr></table></figure><p>循环 i == 5 时，storeIndex == 3，找到一个小于基准元素的元素 1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">            ┌───────┐         pivot</span><br><span class="line">            ↓       ↓           ↓</span><br><span class="line">3   4   2   7   8   1   9   5   5</span><br><span class="line">            ↑       ↑</span><br><span class="line">       storeIndex   i</span><br></pre></td></tr></table></figure><p>交换后位置后，storeIndex 自增 1，storeIndex == 4：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">                              pivot</span><br><span class="line">                                ↓</span><br><span class="line">3   4   2   1   8   7   9   5   5</span><br><span class="line">                ↑           </span><br><span class="line">           storeIndex</span><br></pre></td></tr></table></figure><p>循环 i == 7 时，storeIndex == 4，找到一个小于等于基准元素的元素 5：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">                ┌───────────┐ pivot</span><br><span class="line">                ↓           ↓   ↓</span><br><span class="line">3   4   2   1   8   7   9   5   5</span><br><span class="line">                ↑           ↑</span><br><span class="line">           storeIndex       i</span><br></pre></td></tr></table></figure><p>交换后位置后，storeIndex 自增 1，storeIndex == 5：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">                              pivot</span><br><span class="line">                                ↓</span><br><span class="line">3   4   2   1   5   7   9   8   5</span><br><span class="line">                    ↑           </span><br><span class="line">               storeIndex</span><br></pre></td></tr></table></figure><p>循环结束后交换基准元素和 storeIndex 位置的元素的位置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">                  pivot</span><br><span class="line">                    ↓</span><br><span class="line">3   4   2   1   5   5   9   8   7</span><br><span class="line">                    ↑           </span><br><span class="line">               storeIndex</span><br></pre></td></tr></table></figure><p>那么 storeIndex 的值就是基准元素的最终位置，这样整个分区过程就完成了。</p><h2 id="go语言实现1"><a class="markdownIt-Anchor" href="#go语言实现1"></a> go语言实现1</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="comment">//打印</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">print</span><span class="params">(arr []<span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>  _,data := <span class="keyword">range</span> arr&#123;</span><br><span class="line">fmt.Printf(<span class="string">"%d "</span>,data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//arr:= []int&#123;8, 5, 2, 6, 9, 3, 1, 4, 0, 7&#125;</span></span><br><span class="line">arr:=[]<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">8</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(arr)</span><br><span class="line"></span><br><span class="line">quicksort(arr)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arr)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//快速排序</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">quicksort</span><span class="params">(arr []<span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//print(arr)</span></span><br><span class="line">length := <span class="built_in">len</span>(arr)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> length &lt;<span class="number">2</span>&#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">index:= <span class="number">0</span></span><br><span class="line">start := <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">1</span>;i&lt;length;i++&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> arr[i] &lt;= arr[start]&#123;</span><br><span class="line">index++</span><br><span class="line">temp:= arr[index]</span><br><span class="line">arr[index] = arr[i]</span><br><span class="line">arr[i] = temp</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tmp:= arr[index]</span><br><span class="line">arr[index] = arr[start]</span><br><span class="line">arr[start] = tmp</span><br><span class="line"></span><br><span class="line">quicksort(arr[start:index])</span><br><span class="line">quicksort(arr[index+<span class="number">1</span>:length])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="快速排序第二种方式"><a class="markdownIt-Anchor" href="#快速排序第二种方式"></a> 快速排序第二种方式</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Copyright © 2018 jonson</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="comment">//打印</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">show</span><span class="params">(arr []<span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;<span class="built_in">len</span>(arr);i++&#123;</span><br><span class="line">fmt.Println(arr[i])</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"----------------------------------------------"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">   k := []<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">8</span>&#125;</span><br><span class="line">show(k)</span><br><span class="line">quicksort(k)</span><br><span class="line">show(k)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">quicksort</span><span class="params">(arr []<span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(arr) &gt;<span class="number">1</span>&#123;<span class="comment">//必须要长度大于1才有意义。</span></span><br><span class="line"></span><br><span class="line">end := <span class="built_in">len</span>(arr)</span><br><span class="line">i := <span class="number">0</span></span><br><span class="line">j := <span class="built_in">len</span>(arr)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i&lt;j&#123;</span><br><span class="line"><span class="keyword">for</span> i &lt; end<span class="number">-1</span>&#123;</span><br><span class="line">i++</span><br><span class="line"><span class="keyword">if</span> arr[i] &lt;= arr[<span class="number">0</span>]&#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> j&gt;<span class="number">0</span>&#123;</span><br><span class="line">j--</span><br><span class="line"><span class="keyword">if</span> arr[j]&gt;=arr[<span class="number">0</span>]&#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果i&lt;j，说明要将这两个元素交换</span></span><br><span class="line"><span class="keyword">if</span> i &lt; j&#123;</span><br><span class="line">temp :=arr[i]</span><br><span class="line">arr[i] = arr[j]</span><br><span class="line">arr[j] = temp</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//交换start和 j  。 到此为止， j之前为小于start元素的，j之后为大于start元素的。</span></span><br><span class="line">tmp := arr[j]</span><br><span class="line">arr[j] = arr[<span class="number">0</span>]</span><br><span class="line">arr[<span class="number">0</span>] = tmp</span><br><span class="line"></span><br><span class="line"><span class="comment">//递归下去</span></span><br><span class="line"><span class="keyword">if</span> j &gt;<span class="number">0</span> &#123;</span><br><span class="line">quicksort(arr[<span class="number">0</span>:j])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> j+<span class="number">1</span> &lt; end&#123;</span><br><span class="line">quicksort(arr[j+<span class="number">1</span>:end])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="c语言实现1"><a class="markdownIt-Anchor" href="#c语言实现1"></a> c语言实现1</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="comment">//打印</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> length)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"---------------------------\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//快速排序,不仅要写出来，而且要优美</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//arr 为数组</span></span><br><span class="line"><span class="comment">//start 为开始的元素的下标</span></span><br><span class="line"><span class="comment">//end  为结束的元素的下标+1</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (start &lt; end) <span class="comment">//必须要开始的元素 &lt;结束的元素才有意义。</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//赋值</span></span><br><span class="line"><span class="keyword">int</span> i = start;</span><br><span class="line"><span class="keyword">int</span> j = end;</span><br><span class="line"></span><br><span class="line"><span class="comment">//i在++，j在--。第一个do为当i&lt;j时就继续下去。</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">do</span> <span class="comment">//此do一直让i++，直到，发现大于start的</span></span><br><span class="line">&#123;</span><br><span class="line">i++;</span><br><span class="line">&#125; <span class="keyword">while</span> (i &lt; end  &amp;&amp; arr[i] &lt; arr[start]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span><span class="comment">//此do一直让j--，直到，发现小于start的元素</span></span><br><span class="line">&#123;</span><br><span class="line">j--;</span><br><span class="line">&#125; <span class="keyword">while</span> (j&gt;start &amp;&amp; arr[j]&gt;arr[start]);</span><br><span class="line"><span class="comment">//如果i&lt;j，说明要将这两个元素交换</span></span><br><span class="line"><span class="keyword">if</span> (i &lt; j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> temp = arr[i];</span><br><span class="line">arr[i] = arr[j];</span><br><span class="line">arr[j] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">while</span> (i&lt;j);</span><br><span class="line"><span class="comment">//交换start和 j  。 到此为止， j之前为小于start元素的，j之后为大于start元素的。</span></span><br><span class="line"><span class="keyword">int</span> temp = arr[j];</span><br><span class="line">arr[j] = arr[start];</span><br><span class="line">arr[start] = temp;</span><br><span class="line"></span><br><span class="line"><span class="comment">//递归下去</span></span><br><span class="line">quick_sort(arr, start, j);</span><br><span class="line">quick_sort(arr, j + <span class="number">1</span>, end);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>] = &#123; <span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">8</span> &#125;;</span><br><span class="line">show(a, <span class="number">10</span>);</span><br><span class="line">quick_sort(a, <span class="number">0</span>,<span class="number">10</span>);</span><br><span class="line">show(a, <span class="number">10</span>);</span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="c语言实现2"><a class="markdownIt-Anchor" href="#c语言实现2"></a> c语言实现2</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="comment">//打印</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> length)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"---------------------------\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//快速排序,不仅要写出来，而且要优美</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//arr 为数组</span></span><br><span class="line"><span class="comment">//start 为开始的元素的下标</span></span><br><span class="line"><span class="comment">//end  为结束的元素的下标+1</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort2</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (start &lt; end) &#123; <span class="comment">//start &lt; end 才有进新下去的意义。</span></span><br><span class="line"><span class="comment">//i从第一个开始，记录下标。</span></span><br><span class="line"><span class="keyword">int</span>  i = start;</span><br><span class="line"><span class="comment">//从第二个元素开始，循环到末尾</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = start+<span class="number">1</span>; j &lt; end; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//一旦发现比其start小的</span></span><br><span class="line"><span class="keyword">if</span> (arr[j] &gt; arr[start])</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//i++,很重要的一步，也就是让发现的小于start的数，依次放置在第2个，第3个....位置上。</span></span><br><span class="line">i++;</span><br><span class="line"><span class="comment">//交换</span></span><br><span class="line"><span class="keyword">int</span> temp = arr[i];</span><br><span class="line">arr[i] = arr[j];</span><br><span class="line">arr[j] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">////交换start和i  。 到此为止， i之前为小于start元素的，i之后为大于start元素的。</span></span><br><span class="line"><span class="keyword">int</span> temp = arr[i];</span><br><span class="line">arr[i] = arr[start];</span><br><span class="line">arr[start] = temp;</span><br><span class="line"><span class="comment">//递归</span></span><br><span class="line">quick_sort2(arr, start, i);</span><br><span class="line">quick_sort2(arr, i+<span class="number">1</span>, end);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>] = &#123; <span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">8</span> &#125;;</span><br><span class="line">show(a, <span class="number">10</span>);</span><br><span class="line">quick_sort2(a, <span class="number">0</span>,<span class="number">10</span>);</span><br><span class="line">show(a, <span class="number">10</span>);</span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="javascript-语言实现"><a class="markdownIt-Anchor" href="#javascript-语言实现"></a> JavaScript 语言实现</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quickSort</span>(<span class="params">arr</span>) </span>&#123;　　</span><br><span class="line">    <span class="keyword">if</span> (arr.length &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;　　</span><br><span class="line">    <span class="keyword">var</span> pivotIndex = <span class="built_in">Math</span>.floor(arr.length / <span class="number">2</span>);　　</span><br><span class="line">    <span class="keyword">var</span> pivot = arr.splice(pivotIndex, <span class="number">1</span>)[<span class="number">0</span>];　　</span><br><span class="line">    <span class="keyword">var</span> left = [];　　</span><br><span class="line">    <span class="keyword">var</span> right = [];　　</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;　　　　</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &lt; pivot) &#123;　　　　　　</span><br><span class="line">            left.push(arr[i]);　　　　</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;　　　　　　</span><br><span class="line">            right.push(arr[i]);　　　　</span><br><span class="line">        &#125;　　</span><br><span class="line">    &#125;　　</span><br><span class="line">    <span class="keyword">return</span> quickSort(left).concat([pivot], quickSort(right));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="javascript-语言实现2"><a class="markdownIt-Anchor" href="#javascript-语言实现2"></a> JavaScript 语言实现2</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//上面简单版本的缺点是，它需要Ω(n)的额外存储空间，也就跟归并排序一样不好。额外需要的存储器空间配置，在实际上的实现，也会极度影响速度和高速缓存的性能。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quickSort</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line"><span class="comment">// 交换元素位置</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">swap</span>(<span class="params">array, i, k</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> temp = array[i];</span><br><span class="line">array[i] = array[k];</span><br><span class="line">array[k] = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 数组分区，左小右大</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">partition</span>(<span class="params">array, left, right</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> storeIndex = left;        </span><br><span class="line"><span class="keyword">var</span> pivot = array[right]; <span class="comment">// 直接选最右边的元素为基准元素</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = left; i &lt; right; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (array[i] &lt; pivot) &#123;</span><br><span class="line">swap(array, storeIndex, i);</span><br><span class="line">storeIndex++; <span class="comment">// 交换位置后，storeIndex 自增 1，代表下一个可能要交换的位置</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">swap(array, right, storeIndex); <span class="comment">// 将基准元素放置到最后的正确位置上</span></span><br><span class="line"><span class="keyword">return</span> storeIndex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sort</span>(<span class="params">array, left, right</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (left &gt; right) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> storeIndex = partition(array, left, right);</span><br><span class="line">sort(array, left, storeIndex - <span class="number">1</span>);</span><br><span class="line">sort(array, storeIndex + <span class="number">1</span>, right);</span><br><span class="line">&#125;</span><br><span class="line">sort(array, <span class="number">0</span>, array.length - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="javascript-语言实现3"><a class="markdownIt-Anchor" href="#javascript-语言实现3"></a> JavaScript 语言实现3</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quickSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sort(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>);</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">swap</span>(<span class="params">arr, i, k</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> temp = arr[i];</span><br><span class="line">        arr[i] = arr[k];</span><br><span class="line">        arr[k] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">sort</span>(<span class="params">arr, start, end</span>) </span>&#123;</span><br><span class="line">        sort(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">swap</span>(<span class="params">arr, i, k</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> temp = arr[i];</span><br><span class="line">            arr[i] = arr[k];</span><br><span class="line">            arr[k] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">sort</span>(<span class="params">arr, start, end</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (start &gt;= end) <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">var</span> pivot = arr[start],</span><br><span class="line">                i = start + <span class="number">1</span>,</span><br><span class="line">                k = end;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="keyword">while</span> (arr[i] &lt; pivot) &#123;</span><br><span class="line">                    i++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">while</span> (arr[k] &gt; pivot) &#123;</span><br><span class="line">                    k--;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (i &gt;= k) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                swap(arr, i, k);</span><br><span class="line">            &#125;</span><br><span class="line">            swap(arr, start, k);</span><br><span class="line">            sort(arr, start, <span class="built_in">Math</span>.max(<span class="number">0</span>, k - <span class="number">1</span>));</span><br><span class="line">            sort(arr, <span class="built_in">Math</span>.min(end, k + <span class="number">1</span>), end);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="资料"><a class="markdownIt-Anchor" href="#资料"></a> 资料</h2><ul><li><a href="http://en.wikipedia.org/wiki/Quicksort" target="_blank" rel="external">wiki Quicksort</a></li><li><a href="http://zh.wikipedia.org/wiki/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F" target="_blank" rel="external">维基百科 - 快速排序</a></li><li><a href="http://www.ruanyifeng.com/blog/2011/04/quicksort_in_javascript.html" target="_blank" rel="external">快速排序（Quicksort）的Javascript实现</a></li><li><a href="http://www.cnblogs.com/ethanzheng/archive/2013/02/20/quicksort-in-javascript.html" target="_blank" rel="external">Quicksort in JavaScript</a></li><li><a href="http://www.cnblogs.com/kkun/archive/2011/11/23/2260270.html" target="_blank" rel="external">经典排序算法 - 快速排序Quick sort</a></li><li><a href="http://student.zjzk.cn/course_ware/data_structure/web/paixu/paixu8.3.2.1.htm" target="_blank" rel="external">快速排序(QuickSort)</a></li><li><a href="http://jsdo.it/norahiko/oxIy/fullscreen" target="_blank" rel="external">ソートアルゴリズムを映像化してみた</a></li><li><a href="http://acatalept.com/blog/2008/10/28/stable-quicksort-in-javascript/" target="_blank" rel="external">Stable quicksort in Javascript</a></li><li><a href="http://www.stoimen.com/blog/2010/06/11/friday-algorithms-quicksort-difference-between-php-and-javascript/" target="_blank" rel="external">Friday Algorithms: Quicksort – Difference Between PHP and JavaScript</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;style&gt;
pre,code {
     font-family: &quot;Source Code Pro&quot;, Consolas, Monaco, Menlo, Consolas, monospace !important;
 }
&lt;/style&gt;
&lt;h2 id=&quot;快速排序&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="go" scheme="https://dreamerjonson.com/categories/go/"/>
    
    
      <category term="go" scheme="https://dreamerjonson.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>go-数据结构[9]-冒泡排序</title>
    <link href="https://dreamerjonson.com/2019/03/09/go-struture-8-select/"/>
    <id>https://dreamerjonson.com/2019/03/09/go-struture-8-select/</id>
    <published>2019-03-09T12:26:33.000Z</published>
    <updated>2019-03-10T04:30:01.608Z</updated>
    
    <content type="html"><![CDATA[<h2 id="冒泡排序"><a class="markdownIt-Anchor" href="#冒泡排序"></a> 冒泡排序</h2><p>冒泡排序（Bubble Sort，台湾译为：泡沫排序或气泡排序）是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。复杂度o(n2)<br>Bubble sort, sometimes referred to as sinking sort, is a simple sorting algorithm that repeatedly steps through the list, compares adjacent pairs and swaps them if they are in the wrong order. The pass through the list is repeated until the list is sorted. The algorithm, which is a comparison sort, is named for the way smaller or larger elements “bubble” to the top of the list. Although the algorithm is simple, it is too slow and impractical for most problems even when compared to insertion sort.[2] Bubble sort can be practical if the input is in mostly sorted order with some out-of-order elements nearly in position.<br>冒泡排序算法的流程如下：</p><p>比较相邻的元素。如果第一个比第二个大，就交换他们两个。<br>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数。<br>针对所有的元素重复以上的步骤，除了最后一个。<br>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。<br>由于它的简洁，冒泡排序通常被用来对于程序设计入门的学生介绍算法的概念。</p><p>Google CEO Eric Schmidt asked president Barack Obama once during an interview about the best way to sort one million integers – and Obama, pausing for a moment, then replied: “I think the bubble sort would be the wrong way to go.”</p><h2 id="实现过程"><a class="markdownIt-Anchor" href="#实现过程"></a> 实现过程</h2><p>以数组 arr = [5, 1, 4, 2, 8] 为例说明，加粗的数字表示每次循环要比较的两个数字：</p><p>第一次外循环</p><p>( <strong>5</strong> <strong>1</strong> 4 2 8 ) → ( <strong>1</strong> <strong>5</strong> 4 2 8 )， 5 &gt; 1 交换位置<br>( 1 <strong>5</strong> <strong>4</strong> 2 8 ) → ( 1 <strong>4</strong> <strong>5</strong> 2 8 )， 5 &gt; 4 交换位置<br>( 1 4 <strong>5</strong> <strong>2</strong> 8 ) → ( 1 4 <strong>2</strong> <strong>5</strong> 8 )， 5 &gt; 2 交换位置<br>( 1 4 2 <strong>5</strong> <strong>8</strong> ) → ( 1 4 2 <strong>5</strong> <strong>8</strong> )， 5 &lt; 8 位置不变</p><p>第二次外循环（除开最后一个元素8，对剩余的序列）</p><p>( <strong>1</strong> <strong>4</strong> 2 5 8 ) → ( <strong>1</strong> <strong>4</strong> 2 5 8 )， 1 &lt; 4 位置不变<br>( 1 <strong>4</strong> <strong>2</strong> 5 8 ) → ( 1 <strong>2</strong> <strong>4</strong> 5 8 )， 4 &gt; 2 交换位置<br>( 1 2 <strong>4</strong> <strong>5</strong> 8 ) → ( 1 2 <strong>4</strong> <strong>5</strong> 8 )， 4 &lt; 5 位置不变</p><p>第三次外循环（除开已经排序好的最后两个元素，可以注意到上面的数组其实已经排序完成，但是程序本身并不知道，所以还要进行后续的循环，直到剩余的序列为 1）</p><p>( <strong>1</strong> <strong>2</strong> 4 5 8 )  →  ( <strong>1</strong> <strong>2</strong> 4 5 8 )<br>( 1 <strong>2</strong> <strong>4</strong> 5 8 )  →  ( 1 <strong>2</strong> <strong>4</strong> 5 8 )</p><p>第四次外循环（最后一次）<br>( <strong>1</strong> <strong>2</strong> 4 5 8 )  →  ( <strong>1</strong> <strong>2</strong> 4 5 8 )</p><h2 id="go语言实现"><a class="markdownIt-Anchor" href="#go语言实现"></a> Go语言实现</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="comment">//打印</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">print</span><span class="params">(arr []<span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>  _,data := <span class="keyword">range</span> arr&#123;</span><br><span class="line">fmt.Printf(<span class="string">"%d "</span>,data)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">arr:= []<span class="keyword">int</span>&#123;<span class="number">8</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">7</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(arr)</span><br><span class="line"></span><br><span class="line">maopao2(arr)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arr)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//冒泡排序</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">maopao</span><span class="params">(arr []<span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">length:= <span class="built_in">len</span>(arr)</span><br><span class="line"><span class="comment">//循环的次数，只用循环 length-1次，即最后只用判断两个数就可以了。</span></span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;length<span class="number">-1</span>;i++&#123;</span><br><span class="line"><span class="comment">//将数冒到最后，冒完后就不管了，因此每一次需要判断的是length - 1 - i长度。</span></span><br><span class="line"><span class="keyword">for</span> j:=<span class="number">0</span>;j&lt;length<span class="number">-1</span>-i;j++&#123;</span><br><span class="line"><span class="comment">//如果前面的数大于后面的数，交换顺序。</span></span><br><span class="line"><span class="keyword">if</span> arr[j] &gt; arr[j+<span class="number">1</span>]&#123;</span><br><span class="line">temp:= arr[j]</span><br><span class="line">arr[j] = arr[j+<span class="number">1</span>]</span><br><span class="line">arr[j+<span class="number">1</span>] = temp</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//明白了冒泡的原理，就很容易写出一了倒叙的冒泡</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">maopao2</span><span class="params">(arr []<span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">length:= <span class="built_in">len</span>(arr)</span><br><span class="line"><span class="comment">//和正序一样，倒叙的第一个循环的次数必须是length -1</span></span><br><span class="line"><span class="keyword">for</span> i:=length<span class="number">-1</span>;i&gt;<span class="number">0</span>;i--&#123;</span><br><span class="line"><span class="comment">//第二个循环从最后一个元素开始，一直到只剩下最后一个元素。</span></span><br><span class="line"><span class="comment">//也就是说，最后一次判断为最后两个数之间的判断。</span></span><br><span class="line"><span class="keyword">for</span> j:= length <span class="number">-1</span>; j&gt;length <span class="number">-1</span> - i  ;j--&#123;</span><br><span class="line"><span class="comment">//判断</span></span><br><span class="line"><span class="keyword">if</span> arr[j] &gt; arr[j<span class="number">-1</span>]&#123;</span><br><span class="line">temp:= arr[j]</span><br><span class="line">arr[j] = arr[j<span class="number">-1</span>]</span><br><span class="line">arr[j<span class="number">-1</span>] = temp</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="c语言实现"><a class="markdownIt-Anchor" href="#c语言实现"></a> c语言实现</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">maopao</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> length)</span></span>;<span class="comment">//正序冒泡</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">maopao2</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> length)</span></span>;<span class="comment">//倒序冒泡</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>] = &#123; <span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">8</span> &#125;;</span><br><span class="line">show(a, <span class="number">10</span>);</span><br><span class="line">maopao2(a, <span class="number">10</span>);</span><br><span class="line">show(a, <span class="number">10</span>);</span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> length)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"---------------------------\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//冒泡排序，a为数组，length为其长度</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">maopao</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> length)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//循环的次数，只用循环 length-1次，即最后只用判断两个数就可以了。</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length<span class="number">-1</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//将数冒到最后，冒完后就不管了，因此每一次需要判断的是length - 1 - i长度。</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; length - <span class="number">1</span> - i;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//如果前面的数大于后面的数，交换顺序。</span></span><br><span class="line"><span class="keyword">if</span> (a[j] &gt; a[j + <span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> temp = a[j];</span><br><span class="line">a[j] = a[j + <span class="number">1</span>];</span><br><span class="line">a[j + <span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//明白了冒泡的原理，就很容易写出一了倒叙的冒泡</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">maopao2</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> length)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//和正序一样，倒叙的第一个循环的次数必须是length -1</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = length; i &gt; <span class="number">0</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//第二个循环从最后一个元素开始，一直到只剩下最后一个元素。</span></span><br><span class="line"><span class="comment">//也就是说，最后一次判断为最后两个数之间的判断。</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = length - <span class="number">1</span>; j &gt; length-i; j--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//判断</span></span><br><span class="line"><span class="keyword">if</span> (arr[j - <span class="number">1</span>] &gt; arr[j])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> temp = arr[j];</span><br><span class="line">arr[j] = arr[j - <span class="number">1</span>];</span><br><span class="line">arr[j - <span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="js实现"><a class="markdownIt-Anchor" href="#js实现"></a> js实现</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubbleSort</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">var</span> length = array.length,</span><br><span class="line">       i,</span><br><span class="line">       j,</span><br><span class="line">       temp;</span><br><span class="line">   <span class="keyword">for</span> (i = length - <span class="number">1</span>; <span class="number">0</span> &lt; i; i--) &#123;</span><br><span class="line">       <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">           <span class="keyword">if</span> (array[j] &gt; array[j + <span class="number">1</span>]) &#123;</span><br><span class="line">               temp = array[j];</span><br><span class="line">               array[j] = array[j + <span class="number">1</span>];</span><br><span class="line">               array[j + <span class="number">1</span>] = temp;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="资料"><a class="markdownIt-Anchor" href="#资料"></a> 资料</h2><ul><li><a href="http://en.wikipedia.org/wiki/Bubble_sort" target="_blank" rel="external">en.wikipedia.org</a></li><li><a href="http://zh.wikipedia.org/wiki/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F" target="_blank" rel="external">维基百科，自由的百科全书</a></li><li><a href="http://www.sorting-algorithms.com/bubble-sort" target="_blank" rel="external">Bubble Sort</a></li><li><a href="http://www.cnblogs.com/kkun/archive/2011/11/23/2260280.html" target="_blank" rel="external">经典排序算法 - 冒泡排序Bubble sort</a></li><li><a href="http://student.zjzk.cn/course_ware/data_structure/web/paixu/paixu8.3.1.1.htm" target="_blank" rel="external">冒泡排序</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;冒泡排序&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#冒泡排序&quot;&gt;&lt;/a&gt; 冒泡排序&lt;/h2&gt;
&lt;p&gt;冒泡排序（Bubble Sort，台湾译为：泡沫排序或气泡排序）是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，
      
    
    </summary>
    
      <category term="go 数据结构" scheme="https://dreamerjonson.com/categories/go-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="go 数据结构" scheme="https://dreamerjonson.com/tags/go-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>go-数据结构[8]-选择排序</title>
    <link href="https://dreamerjonson.com/2019/03/09/go-structure-6-Selection-Sort/"/>
    <id>https://dreamerjonson.com/2019/03/09/go-structure-6-Selection-Sort/</id>
    <published>2019-03-09T10:32:04.000Z</published>
    <updated>2019-03-10T09:05:15.558Z</updated>
    
    <content type="html"><![CDATA[<style>pre,code {     font-family: "Source Code Pro", Consolas, Monaco, Menlo, Consolas, monospace !important; }</style><h2 id="选择排序"><a class="markdownIt-Anchor" href="#选择排序"></a> 选择排序</h2><p>选择排序（Selection Sort）是一种简单直观的排序算法。它的工作原理如下，首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。</p><p>选择排序的主要优点与数据移动有关。如果某个元素位于正确的最终位置上，则它不会被移动。选择排序每次交换一对元素，它们当中至少有一个将被移到其最终位置上，因此对n个元素的序列进行排序总共进行至多n-1次交换。在所有的完全依靠交换去移动元素的排序方法中，选择排序属于非常好的一种。</p><p>In computer science, selection sort is a sorting algorithm, specifically an in-place comparison sort. It has O(n2) time complexity, making it inefficient on large lists, and generally performs worse than the similar insertion sort. Selection sort is noted for its simplicity, and it has performance advantages over more complicated algorithms in certain situations, particularly where auxiliary memory is limited.</p><p>The algorithm divides the input list into two parts: the sublist of items already sorted, which is built up from left to right at the front (left) of the list, and the sublist of items remaining to be sorted that occupy the rest of the list. Initially, the sorted sublist is empty and the unsorted sublist is the entire input list. The algorithm proceeds by finding the smallest (or largest, depending on sorting order) element in the unsorted sublist, exchanging (swapping) it with the leftmost unsorted element (putting it in sorted order), and moving the sublist boundaries one element to the right.</p><img src="/2019/03/09/go-structure-6-Selection-Sort/select.gif" title="compile"><h2 id="实例分析"><a class="markdownIt-Anchor" href="#实例分析"></a> 实例分析</h2><p>以数组 arr = [8, 5, 2, 6, 9, 3, 1, 4, 0, 7] 为例，先直观看一下每一步的变化，后面再介绍细节</p><p>第一次从数组 [8, 5, 2, 6, 9, 3, 1, 4, 0, 7] 中找到最小的数 0，放到数组的最前面（与第一个元素进行交换）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">                               min</span><br><span class="line">                                ↓</span><br><span class="line">8   5   2   6   9   3   1   4   0   7</span><br><span class="line">                                ↑</span><br><span class="line">└───────────────────────────────┘</span><br></pre></td></tr></table></figure><p>交换后：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0   5   2   6   9   3   1   4   8   7</span><br></pre></td></tr></table></figure><p>在剩余的序列中 [5, 2, 6, 9, 3, 1, 4, 8, 7] 中找到最小的数 1，与该序列的第一个个元素进行位置交换：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">                       min</span><br><span class="line">                        ↓</span><br><span class="line">0   5   2   6   9   3   1   4   8   7</span><br><span class="line">    ↑                   ↑</span><br><span class="line">    └───────────────────┘</span><br></pre></td></tr></table></figure><p>交换后：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0   1   2   6   9   3   5   4   8   7</span><br></pre></td></tr></table></figure><p>在剩余的序列中 [2, 6, 9, 3, 5, 4, 8, 7] 中找到最小的数 2，与该序列的第一个个元素进行位置交换（实际上不需要交换）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">       min</span><br><span class="line">        ↓</span><br><span class="line">0   1   2   6   9   3   5   4   8   7</span><br><span class="line">        ↑</span><br></pre></td></tr></table></figure><p>重复上述过程，直到最后一个元素就完成了排序。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">                   min</span><br><span class="line">                    ↓</span><br><span class="line">0   1   2   6   9   3   5   4   8   7</span><br><span class="line">            ↑       ↑</span><br><span class="line">            └───────┘</span><br><span class="line">                           min</span><br><span class="line">                            ↓</span><br><span class="line">0   1   2   3   9   6   5   4   8   7</span><br><span class="line">                ↑           ↑</span><br><span class="line">                └───────────┘</span><br><span class="line">                       min</span><br><span class="line">                        ↓</span><br><span class="line">0   1   2   3   4   6   5   9   8   7</span><br><span class="line">                    ↑   ↑</span><br><span class="line">                    └───┘</span><br><span class="line">                       min</span><br><span class="line">                        ↓</span><br><span class="line">0   1   2   3   4   5   6   9   8   7</span><br><span class="line">                        ↑</span><br><span class="line">                                   min</span><br><span class="line">                                    ↓</span><br><span class="line">0   1   2   3   4   5   6   9   8   7</span><br><span class="line">                            ↑       ↑</span><br><span class="line">                            └───────┘</span><br><span class="line">                               min</span><br><span class="line">                                ↓</span><br><span class="line">0   1   2   3   4   5   6   7   8   9</span><br><span class="line">                                ↑</span><br><span class="line">                                   min</span><br><span class="line">                                    ↓</span><br><span class="line">0   1   2   3   4   5   6   7   8   9</span><br><span class="line">                                    ↑</span><br></pre></td></tr></table></figure><h2 id="go语言实现"><a class="markdownIt-Anchor" href="#go语言实现"></a> go语言实现</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="comment">//打印</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">print</span><span class="params">(arr []<span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span>  _,data := <span class="keyword">range</span> arr&#123;</span><br><span class="line">   fmt.Printf(<span class="string">"%d "</span>,data)</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">   fmt.Println()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">arr:= []<span class="keyword">int</span>&#123;<span class="number">8</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">7</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(arr)</span><br><span class="line"></span><br><span class="line">selectSort(arr)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arr)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//选择排序</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">selectSort</span><span class="params">(arr []<span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">length := <span class="built_in">len</span>(arr)</span><br><span class="line"><span class="comment">//第一个循环从第一个元素到倒数第二个元素。</span></span><br><span class="line"><span class="keyword">for</span> i:= <span class="number">0</span>;i&lt;length<span class="number">-1</span>;i++&#123;</span><br><span class="line"><span class="comment">//最小的序号</span></span><br><span class="line">index:= i</span><br><span class="line"><span class="comment">//遍历其后面的节点，找到最小的节点的下标。</span></span><br><span class="line"><span class="keyword">for</span> j:= i+<span class="number">1</span>;j&lt;length;j++&#123;</span><br><span class="line"><span class="keyword">if</span> arr[index]&gt; arr[j]&#123;</span><br><span class="line"><span class="comment">//保留下标</span></span><br><span class="line">index = j</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//index != i，就将最小的数交换到a[i]的位置。</span></span><br><span class="line"><span class="keyword">if</span> index != i&#123;</span><br><span class="line">temp := arr[i]</span><br><span class="line">arr[i] = arr[index]</span><br><span class="line">arr[index] = temp</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="c语言实现"><a class="markdownIt-Anchor" href="#c语言实现"></a> c语言实现</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">select_sort</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> length)</span> </span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> length)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>] = &#123; <span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">8</span> &#125;;</span><br><span class="line">show(a, <span class="number">10</span>);</span><br><span class="line">select_sort(a, <span class="number">10</span>);</span><br><span class="line">show(a, <span class="number">10</span>);</span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> length)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"---------------------------\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//选择排序</span></span><br><span class="line"><span class="comment">//选择排序排序，a为数组，length为其长度</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">select_sort</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> length)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//最小的序号</span></span><br><span class="line"><span class="keyword">int</span> min = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//第一个循环从第一个元素到倒数第二个元素。</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length - <span class="number">1</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//保留下标</span></span><br><span class="line">min = i;</span><br><span class="line"><span class="comment">//遍历其后面的节点，找到最小的节点的下标。</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; length; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (a[j] &gt; a[min])</span><br><span class="line">&#123;</span><br><span class="line">min = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果min != i，就将最小的数交换到a[i]的位置。</span></span><br><span class="line"><span class="keyword">if</span> (min != i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> temp = a[min];</span><br><span class="line">a[min] = a[i];</span><br><span class="line">a[i] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="js实现"><a class="markdownIt-Anchor" href="#js实现"></a> js实现</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">selectionSort</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> length = array.length,</span><br><span class="line">      i,</span><br><span class="line">      j,</span><br><span class="line">      minIndex,</span><br><span class="line">      minValue,</span><br><span class="line">      temp;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    minIndex = i;</span><br><span class="line">    minValue = array[minIndex];</span><br><span class="line">    <span class="keyword">for</span> (j = i + <span class="number">1</span>; j &lt; length; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (array[j] &lt; minValue) &#123;</span><br><span class="line">        minIndex = j;</span><br><span class="line">        minValue = array[minIndex];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 交换位置</span></span><br><span class="line">    temp = array[i];</span><br><span class="line">    array[i] = minValue;</span><br><span class="line">    array[minIndex] = temp;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> array</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考文献"><a class="markdownIt-Anchor" href="#参考文献"></a> 参考文献</h2><ul><li><a href="http://en.wikipedia.org/wiki/Selection_sort" target="_blank" rel="external">en.wikipedia.org</a></li><li><a href="http://en.wikibooks.org/wiki/Algorithm_Implementation/Sorting/Selection_sort" target="_blank" rel="external">wikibooks</a></li><li><a href="http://zh.wikipedia.org/wiki/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F" target="_blank" rel="external">维基百科</a></li><li><a href="http://techblog.floorplanner.com/post/20528548241/selection-sort-in-javascript" target="_blank" rel="external">Selection sort in JavaScript</a></li><li><a href="http://student.zjzk.cn/course_ware/data_structure/web/paixu/paixu8.4.1.htm" target="_blank" rel="external">直接选择排序(Straight Selection Sort)</a></li><li><a href="http://www.cnblogs.com/kkun/archive/2011/11/23/2260281.html" target="_blank" rel="external">经典排序算法 - 选择排序 Selection Sort</a></li><li><a href="http://sjjg.js.zwu.edu.cn/SFXX/paixu/paixu6.4.1.html" target="_blank" rel="external">选择排序算法</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;style&gt;
pre,code {
     font-family: &quot;Source Code Pro&quot;, Consolas, Monaco, Menlo, Consolas, monospace !important;
 }
&lt;/style&gt;
&lt;h2 id=&quot;选择排序&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="go 数据结构" scheme="https://dreamerjonson.com/categories/go-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="go 数据结构" scheme="https://dreamerjonson.com/tags/go-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>golang[70]-web编程-未完待续....</title>
    <link href="https://dreamerjonson.com/2019/03/05/golang-70-web/"/>
    <id>https://dreamerjonson.com/2019/03/05/golang-70-web/</id>
    <published>2019-03-05T02:33:12.000Z</published>
    <updated>2019-03-09T10:59:04.473Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="go" scheme="https://dreamerjonson.com/categories/go/"/>
    
    
      <category term="go" scheme="https://dreamerjonson.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>golang[69]-goland快捷键</title>
    <link href="https://dreamerjonson.com/2019/03/05/golang-69-shortkey/"/>
    <id>https://dreamerjonson.com/2019/03/05/golang-69-shortkey/</id>
    <published>2019-03-05T02:25:56.000Z</published>
    <updated>2019-03-05T02:34:27.513Z</updated>
    
    <content type="html"><![CDATA[<h2 id="mac-键盘符号和修饰键说明"><a class="markdownIt-Anchor" href="#mac-键盘符号和修饰键说明"></a> Mac 键盘符号和修饰键说明</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">⌘ ——&gt; Command</span><br><span class="line">⇧ ——&gt; Shift</span><br><span class="line">⌥ ——&gt; Option</span><br><span class="line">⌃ ——&gt; Control</span><br><span class="line">↩︎ ——&gt; Return/Enter</span><br><span class="line">⌫ ——&gt; Delete</span><br><span class="line">⌦ ——&gt; 向前删除键(Fn + Delete)</span><br><span class="line">↑ ——&gt; 上箭头</span><br><span class="line">↓ ——&gt; 下箭头</span><br><span class="line">← ——&gt; 左箭头</span><br><span class="line">→ ——&gt; 右箭头</span><br><span class="line">⇞ ——&gt; Page Up(Fn + ↑)</span><br><span class="line">⇟ ——&gt; Page Down(Fn + ↓)</span><br><span class="line">⇥ ——&gt; 右制表符(Tab键)</span><br><span class="line">⇤ ——&gt; 左制表符(Shift + Tab)</span><br><span class="line">⎋ ——&gt; Escape(Esc)</span><br><span class="line">End ——&gt; Fn + →</span><br><span class="line">Home ——&gt; Fn + ←</span><br></pre></td></tr></table></figure><h2 id="part-1editing编辑"><a class="markdownIt-Anchor" href="#part-1editing编辑"></a> Part 1：Editing（编辑）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">快捷键作用</span><br><span class="line">Control + Space基本的代码补全（补全任何类、方法、变量）</span><br><span class="line">Control + Shift + Space智能代码补全（过滤器方法列表和变量的预期类型）</span><br><span class="line">Command + Shift + Enter自动结束代码，行末自动添加分号</span><br><span class="line">Command + P显示方法的参数信息</span><br><span class="line">Control + J快速查看文档</span><br><span class="line">Shift + F1查看外部文档（在某些代码上会触发打开浏览器显示相关文档）</span><br><span class="line">Command + 鼠标放在代码上显示代码简要信息</span><br><span class="line">Command + F1在错误或警告处显示具体描述信息</span><br><span class="line">Command + N, Control + Enter, Control + N生成代码（getter、setter、hashCode、equals、toString、构造函数等）</span><br><span class="line">Control + O覆盖方法（重写父类方法）</span><br><span class="line">Control + I实现方法（实现接口中的方法）</span><br><span class="line">Command + Option + T包围代码（使用if...else、try...catch、for、synchronized等包围选中的代码）</span><br><span class="line">Command + /注释 / 取消注释与行注释</span><br><span class="line">Command + Option + /注释 / 取消注释与块注释</span><br><span class="line">Option + 方向键上连续选中代码块</span><br><span class="line">Option + 方向键下减少当前选中的代码块</span><br><span class="line">Control + Shift + Q显示上下文信息</span><br><span class="line">Option + Enter显示意向动作和快速修复代码</span><br><span class="line">Command + Option + L格式化代码</span><br><span class="line">Control + Option + O优化 import</span><br><span class="line">Control + Option + I自动缩进线</span><br><span class="line">Tab / Shift + Tab缩进代码 / 反缩进代码</span><br><span class="line">Command + X剪切当前行或选定的块到剪贴板</span><br><span class="line">Command + C复制当前行或选定的块到剪贴板</span><br><span class="line">Command + V从剪贴板粘贴</span><br><span class="line">Command + Shift + V从最近的缓冲区粘贴</span><br><span class="line">Command + D复制当前行或选定的块</span><br><span class="line">Command + Delete删除当前行或选定的块的行</span><br><span class="line">Control + Shift + J智能的将代码拼接成一行</span><br><span class="line">Command + Enter智能的拆分拼接的行</span><br><span class="line">Shift + Enter开始新的一行</span><br><span class="line">Command + Shift + U大小写切换</span><br><span class="line">Command + Shift + ] / Command + Shift + [选择直到代码块结束 / 开始</span><br><span class="line">Option + Fn + Delete删除到单词的末尾</span><br><span class="line">Option + Delete删除到单词的开头</span><br><span class="line">Command + 加号 / Command + 减号展开 / 折叠代码块</span><br><span class="line">Command + Shift + 加号展开所以代码块</span><br><span class="line">Command + Shift + 减号折叠所有代码块</span><br><span class="line">Command + W关闭活动的编辑器选项卡</span><br></pre></td></tr></table></figure><h2 id="part-2search-replace查询替换"><a class="markdownIt-Anchor" href="#part-2search-replace查询替换"></a> Part 2：Search / Replace（查询/替换）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">快捷键作用</span><br><span class="line">Double Shift查询任何东西</span><br><span class="line">Command + F文件内查找</span><br><span class="line">Command + G查找模式下，向下查找</span><br><span class="line">Command + Shift + G查找模式下，向上查找</span><br><span class="line">Command + R文件内替换</span><br><span class="line">Command + Shift + F全局查找（根据路径）</span><br><span class="line">Command + Shift + R全局替换（根据路径）</span><br><span class="line">Command + Shift + S查询结构（Ultimate Edition 版专用，需要在 Keymap 中设置）</span><br><span class="line">Command + Shift + M替换结构（Ultimate Edition 版专用，需要在 Keymap 中设置）</span><br></pre></td></tr></table></figure><h2 id="part-3usage-search使用查询"><a class="markdownIt-Anchor" href="#part-3usage-search使用查询"></a> Part 3：Usage Search（使用查询）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">快捷键作用</span><br><span class="line">Option + F7 / Command + F7在文件中查找用法 / 在类中查找用法</span><br><span class="line">Command + Shift + F7在文件中突出显示的用法</span><br><span class="line">Command + Option + F7显示用法</span><br></pre></td></tr></table></figure><h2 id="part-4compile-and-run编译和运行"><a class="markdownIt-Anchor" href="#part-4compile-and-run编译和运行"></a> Part 4：Compile and Run（编译和运行）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">快捷键作用</span><br><span class="line">Command + F9编译 Project</span><br><span class="line">Command + Shift + F9编译选择的文件、包或模块</span><br><span class="line">Control + Option + R弹出 Run 的可选择菜单</span><br><span class="line">Control + Option + D弹出 Debug 的可选择菜单</span><br><span class="line">Control + R运行</span><br><span class="line">Control + D调试</span><br><span class="line">Control + Shift + R, Control + Shift + D从编辑器运行上下文环境配置</span><br></pre></td></tr></table></figure><h2 id="part-5debugging调试"><a class="markdownIt-Anchor" href="#part-5debugging调试"></a> Part 5：Debugging（调试）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">快捷键作用</span><br><span class="line">F8进入下一步，如果当前行断点是一个方法，则不进入当前方法体内</span><br><span class="line">F7进入下一步，如果当前行断点是一个方法，则进入当前方法体内，如果该方法体还有方法，则不会进入该内嵌的方法中</span><br><span class="line">Shift + F7智能步入，断点所在行上有多个方法调用，会弹出进入哪个方法</span><br><span class="line">Shift + F8跳出</span><br><span class="line">Option + F9运行到光标处，如果光标前有其他断点会进入到该断点</span><br><span class="line">Option + F8计算表达式（可以更改变量值使其生效）</span><br><span class="line">Command + Option + R恢复程序运行，如果该断点下面代码还有断点则停在下一个断点上</span><br><span class="line">Command + F8切换断点（若光标当前行有断点则取消断点，没有则加上断点）</span><br><span class="line">Command + Shift + F8查看断点信息</span><br><span class="line">Part 6：Navigation（导航）</span><br><span class="line">快捷键作用</span><br><span class="line">Command + O查找类文件</span><br><span class="line">Command + Shift + O查找所有类型文件、打开文件、打开目录，打开目录需要在输入的内容前面或后面加一个反斜杠/</span><br><span class="line">Command + Option + O前往指定的变量 / 方法</span><br><span class="line">Control + 方向键左 / Control + 方向键右左右切换打开的编辑 tab 页</span><br><span class="line">F12返回到前一个工具窗口</span><br><span class="line">Esc从工具窗口进入代码文件窗口</span><br><span class="line">Shift + Esc隐藏当前或最后一个活动的窗口，且光标进入代码文件窗口</span><br><span class="line">Command + Shift + F4关闭活动 run/messages/find/... tab</span><br><span class="line">Command + L在当前文件跳转到某一行的指定处</span><br><span class="line">Command + E显示最近打开的文件记录列表</span><br><span class="line">Option + 方向键左 / Option + 方向键右光标跳转到当前单词 / 中文句的左 / 右侧开头位置</span><br><span class="line">Command + Option + 方向键左 / Command + Option + 方向键右退回 / 前进到上一个操作的地方</span><br><span class="line">Command + Shift + Delete跳转到最后一个编辑的地方</span><br><span class="line">Option + F1显示当前文件选择目标弹出层，弹出层中有很多目标可以进行选择(如在代码编辑窗口可以选择显示该文件的 Finder)</span><br><span class="line">Command + B / Command + 鼠标点击进入光标所在的方法/变量的接口或是定义处</span><br><span class="line">Command + Option + B跳转到实现处，在某个调用的方法名上使用会跳到具体的实现处，可以跳过接口</span><br><span class="line">Option + Space, Command + Y快速打开光标所在方法、类的定义</span><br><span class="line">Control + Shift + B跳转到类型声明处</span><br><span class="line">Command + U前往当前光标所在方法的父类的方法 / 接口定义</span><br><span class="line">Control + 方向键下 / Control + 方向键上当前光标跳转到当前文件的前一个 / 后一个方法名位置</span><br><span class="line">Command + ] / Command + [移动光标到当前所在代码的花括号开始 / 结束位置</span><br><span class="line">Command + F12弹出当前文件结构层，可以在弹出的层上直接输入进行筛选（可用于搜索类中的方法）</span><br><span class="line">Control + H显示当前类的层次结构</span><br><span class="line">Command + Shift + H显示方法层次结构</span><br><span class="line">Control + Option + H显示调用层次结构</span><br><span class="line">F2 / Shift + F2跳转到下一个 / 上一个突出错误或警告的位置</span><br><span class="line">F4 / Command + 方向键下编辑 / 查看代码源</span><br><span class="line">Option + Home显示到当前文件的导航条</span><br><span class="line">F3选中文件 / 文件夹 / 代码行，添加 / 取消书签</span><br><span class="line">Option + F3选中文件 / 文件夹/代码行，使用助记符添加 / 取消书签</span><br><span class="line">Control + 0…Control + 9定位到对应数值的书签位置</span><br><span class="line">Command + F3显示所有书签</span><br></pre></td></tr></table></figure><h2 id="part-7refactoring重构"><a class="markdownIt-Anchor" href="#part-7refactoring重构"></a> Part 7：Refactoring（重构）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">快捷键作用</span><br><span class="line">F5复制文件到指定目录</span><br><span class="line">F6移动文件到指定目录</span><br><span class="line">Command + Delete在文件上为安全删除文件，弹出确认框</span><br><span class="line">Shift + F6重命名文件</span><br><span class="line">Command + F6更改签名</span><br><span class="line">Command + Option + N一致性</span><br><span class="line">Command + Option + M将选中的代码提取为方法</span><br><span class="line">Command + Option + V提取变量</span><br><span class="line">Command + Option + F提取字段</span><br><span class="line">Command + Option + C提取常量</span><br><span class="line">Command + Option + P提取参数</span><br></pre></td></tr></table></figure><h2 id="part-8vcs-local-history版本控制-本地历史记录"><a class="markdownIt-Anchor" href="#part-8vcs-local-history版本控制-本地历史记录"></a> Part 8：VCS / Local History（版本控制 / 本地历史记录）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">快捷键作用</span><br><span class="line">Command + K提交代码到版本控制器</span><br><span class="line">Command + T从版本控制器更新代码</span><br><span class="line">Option + Shift + C查看最近的变更记录</span><br><span class="line">Control + C快速弹出版本控制器操作面板</span><br></pre></td></tr></table></figure><h2 id="part-9live-templates动态代码模板"><a class="markdownIt-Anchor" href="#part-9live-templates动态代码模板"></a> Part 9：Live Templates（动态代码模板）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">快捷键作用</span><br><span class="line">Command + Option + J弹出模板选择窗口，将选定的代码使用动态模板包住</span><br><span class="line">Command + J插入自定义动态代码模板</span><br></pre></td></tr></table></figure><h2 id="part-10general通用"><a class="markdownIt-Anchor" href="#part-10general通用"></a> Part 10：General（通用）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">快捷键作用</span><br><span class="line">Command + 1…Command + 9打开相应编号的工具窗口</span><br><span class="line">Command + S保存所有</span><br><span class="line">Command + Option + Y同步、刷新</span><br><span class="line">Control + Command + F切换全屏模式</span><br><span class="line">Command + Shift + F12切换最大化编辑器</span><br><span class="line">Option + Shift + F添加到收藏夹</span><br><span class="line">Option + Shift + I检查当前文件与当前的配置文件</span><br><span class="line">Control + `快速切换当前的 scheme（切换主题、代码样式等）</span><br><span class="line">Command + ,打开 IDEA 系统设置</span><br><span class="line">Command + ;打开项目结构对话框</span><br><span class="line">Shift + Command + A查找动作（可设置相关选项）</span><br><span class="line">Control + Shift + Tab编辑窗口标签和工具窗口之间切换（如果在切换的过程加按上 delete，则是关闭对应选中的窗口</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;mac-键盘符号和修饰键说明&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#mac-键盘符号和修饰键说明&quot;&gt;&lt;/a&gt; Mac 键盘符号和修饰键说明&lt;/h2&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;
      
    
    </summary>
    
      <category term="go" scheme="https://dreamerjonson.com/categories/go/"/>
    
    
      <category term="go" scheme="https://dreamerjonson.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>golang[68]-正则表达式支持</title>
    <link href="https://dreamerjonson.com/2019/03/04/golang-67-regexp/"/>
    <id>https://dreamerjonson.com/2019/03/04/golang-67-regexp/</id>
    <published>2019-03-04T15:45:34.000Z</published>
    <updated>2019-03-04T15:46:39.898Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"bytes"</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"regexp"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 是否匹配</span></span><br><span class="line">    match, _ := regexp.MatchString(<span class="string">"p([a-z]+)ch"</span>, <span class="string">"peach"</span>)</span><br><span class="line">    fmt.Println(match)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 上面我们直接使用了字符串模式，但是其他的regexp的任务你需要编写一个` `</span></span><br><span class="line"><span class="comment">//` regexp `结构优化。</span></span><br><span class="line">    r, _ := regexp.Compile(<span class="string">"p([a-z]+)ch"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 此结构体有很多方法，如何上面一样的匹配</span></span><br><span class="line">    fmt.Println(r.MatchString(<span class="string">"peach"</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查找</span></span><br><span class="line">    fmt.Println(r.FindString(<span class="string">"peach punch"</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查找第一个匹配的位置</span></span><br><span class="line">    fmt.Println(r.FindStringIndex(<span class="string">"peach punch"</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 全局和括号里面的子集</span></span><br><span class="line">    <span class="comment">// for both `p([a-z]+)ch` and `([a-z]+)`.</span></span><br><span class="line">    fmt.Println(r.FindStringSubmatch(<span class="string">"peach punch"</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局和括号里面的子集的序号</span></span><br><span class="line">    fmt.Println(r.FindStringSubmatchIndex(<span class="string">"peach punch"</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发现所有匹配的</span></span><br><span class="line">    fmt.Println(r.FindAllString(<span class="string">"peach punch pinch"</span>, <span class="number">-1</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 也适用于子集</span></span><br><span class="line">    fmt.Println(r.FindAllStringSubmatchIndex(</span><br><span class="line">        <span class="string">"peach punch pinch"</span>, <span class="number">-1</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第2个参数限制匹配的数量</span></span><br><span class="line">    fmt.Println(r.FindAllString(<span class="string">"peach punch pinch"</span>, <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 字符数组也可以</span></span><br><span class="line">    fmt.Println(r.Match([]<span class="keyword">byte</span>(<span class="string">"peach"</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当用正则表达式创建常量时你可以使用mustcompile变化编译。   </span></span><br><span class="line"> r = regexp.MustCompile(<span class="string">"p([a-z]+)ch"</span>)</span><br><span class="line">    fmt.Println(r)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 替换</span></span><br><span class="line">    fmt.Println(r.ReplaceAllString(<span class="string">"a peach"</span>, <span class="string">"&lt;fruit&gt;"</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自定义替换方式</span></span><br><span class="line">    in := []<span class="keyword">byte</span>(<span class="string">"a peach"</span>)</span><br><span class="line">    out := r.ReplaceAllFunc(in, bytes.ToUpper)</span><br><span class="line">    fmt.Println(<span class="keyword">string</span>(out))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l
      
    
    </summary>
    
      <category term="go" scheme="https://dreamerjonson.com/categories/go/"/>
    
    
      <category term="go" scheme="https://dreamerjonson.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>kali-linux</title>
    <link href="https://dreamerjonson.com/2019/03/04/kali-linux/"/>
    <id>https://dreamerjonson.com/2019/03/04/kali-linux/</id>
    <published>2019-03-04T13:52:06.000Z</published>
    <updated>2019-03-04T13:55:06.935Z</updated>
    
    <content type="html"><![CDATA[<p>下载：<a href="https://www.kali.org/" target="_blank" rel="noopener">https://www.kali.org/</a><br>下载：<a href="https://www.offensive-security.com/kali-linux-vm-vmware-virtualbox-image-download/" target="_blank" rel="noopener">https://www.offensive-security.com/kali-linux-vm-vmware-virtualbox-image-download/</a></p><h2 id="john-破解md5"><a class="markdownIt-Anchor" href="#john-破解md5"></a> john 破解MD5</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; locate rockyou.txt</span><br><span class="line">&gt; gzip –d rockyou.text.gz</span><br><span class="line">&gt; john --worklist=rockyou.text.gz  --format=raw-md5 passw.txt</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;下载：&lt;a href=&quot;https://www.kali.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.kali.org/&lt;/a&gt;&lt;br&gt;
下载：&lt;a href=&quot;https://www.offensive-securit
      
    
    </summary>
    
      <category term="kali-linux" scheme="https://dreamerjonson.com/categories/kali-linux/"/>
    
    
      <category term="kali-linux" scheme="https://dreamerjonson.com/tags/kali-linux/"/>
    
  </entry>
  
  <entry>
    <title>golang[7]-数据结构-树的生成与遍历与通道遍历</title>
    <link href="https://dreamerjonson.com/2019/03/03/golang-7-structure-tree/"/>
    <id>https://dreamerjonson.com/2019/03/03/golang-7-structure-tree/</id>
    <published>2019-03-03T03:39:45.000Z</published>
    <updated>2019-03-03T04:01:37.921Z</updated>
    
    <content type="html"><![CDATA[<h2 id="nodego"><a class="markdownIt-Anchor" href="#nodego"></a> node.go</h2><p>节点的结构、打印节点、设置节点、遍历节点与通道遍历</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> tree</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Node <span class="keyword">struct</span> &#123;</span><br><span class="line">Value       <span class="keyword">int</span></span><br><span class="line">Left, Right *Node</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(node Node)</span> <span class="title">Print</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Print(node.Value, <span class="string">" "</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(node *Node)</span> <span class="title">SetValue</span><span class="params">(value <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> node == <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Setting Value to nil "</span> +</span><br><span class="line"><span class="string">"node. Ignored."</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">node.Value = value</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CreateNode</span><span class="params">(value <span class="keyword">int</span>)</span> *<span class="title">Node</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;Node&#123;Value: value&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(node *Node)</span> <span class="title">Traverse</span><span class="params">()</span></span> &#123;</span><br><span class="line">node.TraverseFunc(<span class="function"><span class="keyword">func</span><span class="params">(n *Node)</span></span> &#123;</span><br><span class="line">n.Print()</span><br><span class="line">&#125;)</span><br><span class="line">fmt.Println()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(node *Node)</span> <span class="title">TraverseFunc</span><span class="params">(f <span class="keyword">func</span>(*Node)</span>)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> node == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">node.Left.TraverseFunc(f)</span><br><span class="line">f(node)</span><br><span class="line">node.Right.TraverseFunc(f)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(node *Node)</span> <span class="title">TraverseWithChannel</span><span class="params">()</span> <span class="title">chan</span> *<span class="title">Node</span></span> &#123;</span><br><span class="line">out := <span class="built_in">make</span>(<span class="keyword">chan</span> *Node)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">node.TraverseFunc(<span class="function"><span class="keyword">func</span><span class="params">(node *Node)</span></span> &#123;</span><br><span class="line">out &lt;- node</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">close</span>(out)</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">return</span> out</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id=""><a class="markdownIt-Anchor" href="#"></a> </h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github/dreamjonson/tree"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> myTreeNode <span class="keyword">struct</span> &#123;</span><br><span class="line">node *tree.Node</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(myNode *myTreeNode)</span> <span class="title">postOrder</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> myNode == <span class="literal">nil</span> || myNode.node == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">left := myTreeNode&#123;myNode.node.Left&#125;</span><br><span class="line">right := myTreeNode&#123;myNode.node.Right&#125;</span><br><span class="line"></span><br><span class="line">left.postOrder()</span><br><span class="line">right.postOrder()</span><br><span class="line">myNode.node.Print()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="comment">//生成树</span></span><br><span class="line"><span class="keyword">var</span> root tree.Node</span><br><span class="line"></span><br><span class="line">root = tree.Node&#123;Value: <span class="number">3</span>&#125;</span><br><span class="line">root.Left = &amp;tree.Node&#123;&#125;</span><br><span class="line">root.Right = &amp;tree.Node&#123;<span class="number">5</span>, <span class="literal">nil</span>, <span class="literal">nil</span>&#125;</span><br><span class="line">root.Right.Left = <span class="built_in">new</span>(tree.Node)</span><br><span class="line">root.Left.Right = tree.CreateNode(<span class="number">2</span>)</span><br><span class="line">root.Right.Left.SetValue(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//遍历树</span></span><br><span class="line">fmt.Print(<span class="string">"In-order traversal: "</span>)</span><br><span class="line">root.Traverse()</span><br><span class="line"></span><br><span class="line">  <span class="comment">//遍历树2</span></span><br><span class="line">fmt.Print(<span class="string">"My own post-order traversal: "</span>)</span><br><span class="line">myRoot := myTreeNode&#123;&amp;root&#125;</span><br><span class="line">myRoot.postOrder()</span><br><span class="line">fmt.Println()</span><br><span class="line"></span><br><span class="line">  <span class="comment">//统计节点数量</span></span><br><span class="line">nodeCount := <span class="number">0</span></span><br><span class="line">root.TraverseFunc(<span class="function"><span class="keyword">func</span><span class="params">(node *tree.Node)</span></span> &#123;</span><br><span class="line">nodeCount++</span><br><span class="line">&#125;)</span><br><span class="line">fmt.Println(<span class="string">"Node count:"</span>, nodeCount)</span><br><span class="line"></span><br><span class="line">  <span class="comment">//通道遍历树</span></span><br><span class="line">c := root.TraverseWithChannel()</span><br><span class="line">maxNodeValue := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> node := <span class="keyword">range</span> c &#123;</span><br><span class="line"><span class="keyword">if</span> node.Value &gt; maxNodeValue &#123;</span><br><span class="line">maxNodeValue = node.Value</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"Max node value:"</span>, maxNodeValue)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;nodego&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#nodego&quot;&gt;&lt;/a&gt; node.go&lt;/h2&gt;
&lt;p&gt;节点的结构、打印节点、设置节点、遍历节点与通道遍历&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;
      
    
    </summary>
    
      <category term="go" scheme="https://dreamerjonson.com/categories/go/"/>
    
    
      <category term="go" scheme="https://dreamerjonson.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>golang[67]-go语言生成文档注释</title>
    <link href="https://dreamerjonson.com/2019/03/02/golang-67-document/"/>
    <id>https://dreamerjonson.com/2019/03/02/golang-67-document/</id>
    <published>2019-03-02T09:21:53.000Z</published>
    <updated>2019-03-02T09:25:44.434Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写文档注释"><a class="markdownIt-Anchor" href="#写文档注释"></a> 写文档注释</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> queue</span><br><span class="line"></span><br><span class="line"><span class="comment">// A FIFO queue.</span></span><br><span class="line"><span class="keyword">type</span> Queue []<span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Pushes the element into the queue.</span></span><br><span class="line"><span class="comment">// e.g. q.Push(123)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(q *Queue)</span> <span class="title">Push</span><span class="params">(v <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">*q = <span class="built_in">append</span>(*q, v)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Pops element from head.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(q *Queue)</span> <span class="title">Pop</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">head := (*q)[<span class="number">0</span>]</span><br><span class="line">*q = (*q)[<span class="number">1</span>:]</span><br><span class="line"><span class="keyword">return</span> head</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Returns if the queue is empty or not.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(q *Queue)</span> <span class="title">IsEmpty</span><span class="params">()</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">len</span>(*q) == <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="查看文档"><a class="markdownIt-Anchor" href="#查看文档"></a> 查看文档</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go doc</span><br></pre></td></tr></table></figure><h2 id="生成文档"><a class="markdownIt-Anchor" href="#生成文档"></a> 生成文档</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">godoc -http :6060</span><br></pre></td></tr></table></figure><h2 id="生成文档注释"><a class="markdownIt-Anchor" href="#生成文档注释"></a> 生成文档注释</h2><p>queue_test.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> queue</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ExampleQueue_Pop</span><span class="params">()</span></span> &#123;</span><br><span class="line">q := Queue&#123;<span class="number">1</span>&#125;</span><br><span class="line">q.Push(<span class="number">2</span>)</span><br><span class="line">q.Push(<span class="number">3</span>)</span><br><span class="line">fmt.Println(q.Pop())</span><br><span class="line">fmt.Println(q.Pop())</span><br><span class="line">fmt.Println(q.IsEmpty())</span><br><span class="line"></span><br><span class="line">fmt.Println(q.Pop())</span><br><span class="line">fmt.Println(q.IsEmpty())</span><br><span class="line"></span><br><span class="line"><span class="comment">// Output:</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// false</span></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="comment">// true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;写文档注释&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#写文档注释&quot;&gt;&lt;/a&gt; 写文档注释&lt;/h2&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;s
      
    
    </summary>
    
      <category term="go" scheme="https://dreamerjonson.com/categories/go/"/>
    
    
      <category term="go" scheme="https://dreamerjonson.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>golang[66]-test测试</title>
    <link href="https://dreamerjonson.com/2019/03/01/golang-66-test/"/>
    <id>https://dreamerjonson.com/2019/03/01/golang-66-test/</id>
    <published>2019-03-01T02:26:31.000Z</published>
    <updated>2019-03-05T03:39:00.246Z</updated>
    
    <content type="html"><![CDATA[<h2 id="go-test"><a class="markdownIt-Anchor" href="#go-test"></a> go test</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">go test是一个按照一定的约定和组织的测试代码的驱动程序.在包目录内,以_test.go为后缀名的源文件并不是go build构建包的以部分,它们是go test测试的一部分.</span><br><span class="line">早*_test.go文件中,有三种类型的函数:测试函数,基准测试函数,例子函数.一个测试函数是以Test为函数名前缀的函数,用于测试程序的一些逻辑行为是否正确; go test会调用这些测试函数并报告测试结果是PASS或FAIL.基准测试函数是以Benchmark为函数名前缀的函数,用于衡量一些函数的性能; go test会多次运行基准函数以计算一个平均的执行时间.例子函数是以Example为函数名前缀的函数,提供一个由机器检测正确性的例子文档</span><br><span class="line">go test命令会遍历所有的*_test.go文件中上述函数,然后生成一个临时的main包调用相应的测试函数,然后构建并运行,报告测试结果,最后清理临时文件.</span><br></pre></td></tr></table></figure><h2 id="测试函数"><a class="markdownIt-Anchor" href="#测试函数"></a> 测试函数</h2><p>每个测试函数必须导入testing 包. 测试函数有如下的签名:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">func TestName(t *testing.T) &#123;</span><br><span class="line">    // ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试函数的名字必须以Test开头, 可选的后缀名必须以大写字母开头:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">func TestSin(t *testing.T) &#123; /* ... */ &#125;</span><br><span class="line">func TestCos(t *testing.T) &#123; /* ... */ &#125;</span><br><span class="line">func TestLog(t *testing.T) &#123; /* ... */ &#125;</span><br></pre></td></tr></table></figure><p>其中t 参数用于报告测试失败和附件的日志信息. <a href="http://xn--gopl-k84fa70ab65ot5bz1su00acftg96kresb.io/ch11/word1" target="_blank" rel="noopener">让我们顶一个一个实例包gopl.io/ch11/word1</a>, 只有一个函数IsPalindrome 用于检查一个字符串是否从前向后和从后向前读都一样. (这个实现对于一个字符串是否是回文字符串前后重复测试了两次; 我们稍后会再讨论这个问题.)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// Package word provides utilities for word games.</span><br><span class="line">package word</span><br><span class="line"></span><br><span class="line">// IsPalindrome reports whether s reads the same forward and backward.</span><br><span class="line">// (Our first attempt.)</span><br><span class="line">func IsPalindrome(s string) bool &#123;</span><br><span class="line">    for i := range s &#123;</span><br><span class="line">        if s[i] != s[len(s)-1-i] &#123;</span><br><span class="line">            return false</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在相同的目录下, word_test.go 文件包含了TestPalindrome 和TestNonPalindrome 两个测试函数. 每一个都是测试IsPalindrome 是否给出正确的结果, 并使用t.Error 报告失败:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">package word</span><br><span class="line"></span><br><span class="line">import &quot;testing&quot;</span><br><span class="line"></span><br><span class="line">func TestPalindrome(t *testing.T) &#123;</span><br><span class="line">    if !IsPalindrome(&quot;detartrated&quot;) &#123;</span><br><span class="line">        t.Error(`IsPalindrome(&quot;detartrated&quot;) = false`)</span><br><span class="line">    &#125;</span><br><span class="line">    if !IsPalindrome(&quot;kayak&quot;) &#123;</span><br><span class="line">        t.Error(`IsPalindrome(&quot;kayak&quot;) = false`)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func TestNonPalindrome(t *testing.T) &#123;</span><br><span class="line">    if IsPalindrome(&quot;palindrome&quot;) &#123;</span><br><span class="line">        t.Error(`IsPalindrome(&quot;palindrome&quot;) = true`)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>go test(或go build)命令如果没有参数指定包那么将默认采用当前目录对应的包.我们可以用下面的命令构建和运行测试.<br>$ cd <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>G</mi><mi>O</mi><mi>P</mi><mi>A</mi><mi>T</mi><mi>H</mi><mi mathvariant="normal">/</mi><mi>s</mi><mi>r</mi><mi>c</mi><mi mathvariant="normal">/</mi><mi>g</mi><mi>o</mi><mi>p</mi><mi>l</mi><mi mathvariant="normal">.</mi><mi>i</mi><mi>o</mi><mi mathvariant="normal">/</mi><mi>c</mi><mi>h</mi><mn>1</mn><mn>1</mn><mi mathvariant="normal">/</mi><mi>w</mi><mi>o</mi><mi>r</mi><mi>d</mi><mn>1</mn></mrow><annotation encoding="application/x-tex">GOPATH/src/gopl.io/ch11/word1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base"><span class="mord mathit">G</span><span class="mord mathit" style="margin-right:0.02778em;">O</span><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="mord mathit">A</span><span class="mord mathit" style="margin-right:0.13889em;">T</span><span class="mord mathit" style="margin-right:0.08125em;">H</span><span class="mord">/</span><span class="mord mathit">s</span><span class="mord mathit" style="margin-right:0.02778em;">r</span><span class="mord mathit">c</span><span class="mord">/</span><span class="mord mathit" style="margin-right:0.03588em;">g</span><span class="mord mathit">o</span><span class="mord mathit">p</span><span class="mord mathit" style="margin-right:0.01968em;">l</span><span class="mord">.</span><span class="mord mathit">i</span><span class="mord mathit">o</span><span class="mord">/</span><span class="mord mathit">c</span><span class="mord mathit">h</span><span class="mord">1</span><span class="mord">1</span><span class="mord">/</span><span class="mord mathit" style="margin-right:0.02691em;">w</span><span class="mord mathit">o</span><span class="mord mathit" style="margin-right:0.02778em;">r</span><span class="mord mathit">d</span><span class="mord">1</span></span></span></span> go test<br>ok   <a href="http://gopl.io/ch11/word1" target="_blank" rel="noopener">gopl.io/ch11/word1</a>  0.008s<br>还比较满意, 我们运行了这个程序, 不过没有提前退出是因为还没有遇到BUG报告. 一个法国名为Noelle Eve Elleon 的用户抱怨IsPalindrome 函数不能识别’‘été.’’. 另外一个来自美国中部用户的抱怨是不能识别’‘A man, a plan, a canal: Panama.’’. 执行特殊和小的BUG报告为我们提供了新的更自然的测试用例.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">func TestFrenchPalindrome(t *testing.T) &#123;</span><br><span class="line">    if !IsPalindrome(&quot;été&quot;) &#123;</span><br><span class="line">        t.Error(`IsPalindrome(&quot;été&quot;) = false`)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func TestCanalPalindrome(t *testing.T) &#123;</span><br><span class="line">    input := &quot;A man, a plan, a canal: Panama&quot;</span><br><span class="line">    if !IsPalindrome(input) &#123;</span><br><span class="line">        t.Errorf(`IsPalindrome(%q) = false`, input)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了避免两次输入较长的字符串, 我们使用了提供了有类似Printf 格式化功能的Errorf 函数来汇报错误结果.<br>当添加了这两个测试用例之后, go test返回了测试失败的信息.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ go test</span><br><span class="line">--- FAIL: TestFrenchPalindrome (0.00s)</span><br><span class="line">    word_test.go:28: IsPalindrome(&quot;été&quot;) = false</span><br><span class="line">--- FAIL: TestCanalPalindrome (0.00s)</span><br><span class="line">    word_test.go:35: IsPalindrome(&quot;A man, a plan, a canal: Panama&quot;) = false</span><br><span class="line">FAIL</span><br><span class="line">FAIL    gopl.io/ch11/word1  0.014s</span><br></pre></td></tr></table></figure><p>先编写测试用例并观察到测试用例触发了和用户报告的错误相同的描述是一个好的测试习惯. 只有这样, 我们才能定位我们要眞正解决的问题.<br>先写测试用例的另好处是, 运行测试通常会比手工描述报告的处理更快, 这让我们可以进行快速地迭代. 如果测试集有很多运行缓慢的测试, 我们可以通过只选择运行某些特定的测试来加快测试速度.<br>参数-v用于打印每个测试函数的名字和运行时间:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ go test -v</span><br><span class="line">=== RUN TestPalindrome</span><br><span class="line">--- PASS: TestPalindrome (0.00s)</span><br><span class="line">=== RUN TestNonPalindrome</span><br><span class="line">--- PASS: TestNonPalindrome (0.00s)</span><br><span class="line">=== RUN TestFrenchPalindrome</span><br><span class="line">--- FAIL: TestFrenchPalindrome (0.00s)</span><br><span class="line">    word_test.go:28: IsPalindrome(&quot;été&quot;) = false</span><br><span class="line">=== RUN TestCanalPalindrome</span><br><span class="line">--- FAIL: TestCanalPalindrome (0.00s)</span><br><span class="line">    word_test.go:35: IsPalindrome(&quot;A man, a plan, a canal: Panama&quot;) = false</span><br><span class="line">FAIL</span><br><span class="line">exit status 1</span><br><span class="line">FAIL    gopl.io/ch11/word1  0.017s</span><br></pre></td></tr></table></figure><p>参数-run是一个正则表达式,只有测试函数名被它正确匹配的测试函数才会被go test运行:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ go test -v -run=&quot;French|Canal&quot;</span><br><span class="line">=== RUN TestFrenchPalindrome</span><br><span class="line">--- FAIL: TestFrenchPalindrome (0.00s)</span><br><span class="line">    word_test.go:28: IsPalindrome(&quot;été&quot;) = false</span><br><span class="line">=== RUN TestCanalPalindrome</span><br><span class="line">--- FAIL: TestCanalPalindrome (0.00s)</span><br><span class="line">    word_test.go:35: IsPalindrome(&quot;A man, a plan, a canal: Panama&quot;) = false</span><br><span class="line">FAIL</span><br><span class="line">exit status 1</span><br><span class="line">FAIL    gopl.io/ch11/word1  0.014s</span><br></pre></td></tr></table></figure><p>当然,一旦我们已经修复了失败的测试用例,在我们提交代码更新之前,我们应该以不带参数的go test命令运行全部的测试用例,以确保更新没有引入新的问题.<br>我们现在的任务就是修复这些错误. 简要分析后发现第一个BUG的原因是我们采用了byte 而不是rune 序列, 所以像&quot;été&quot; 中的é 等非ASCII 字符不能正确处理. 第二个BUG是因为没有忽略空格和字母的大小写导致的.<br>针对上述两个BUG, 我们仔细重写了函数:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">gopl.io/ch11/word2</span><br><span class="line">// Package word provides utilities for word games.</span><br><span class="line">package word</span><br><span class="line"></span><br><span class="line">import &quot;unicode&quot;</span><br><span class="line"></span><br><span class="line">// IsPalindrome reports whether s reads the same forward and backward.</span><br><span class="line">// Letter case is ignored, as are non-letters.</span><br><span class="line">func IsPalindrome(s string) bool &#123;</span><br><span class="line">    var letters []rune</span><br><span class="line">    for _, r := range s &#123;</span><br><span class="line">        if unicode.IsLetter(r) &#123;</span><br><span class="line">            letters = append(letters, unicode.ToLower(r))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    for i := range letters &#123;</span><br><span class="line">        if letters[i] != letters[len(letters)-1-i] &#123;</span><br><span class="line">            return false</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时我们也将之前的所有测试数据合并到了一个测试中的表格中.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">func TestIsPalindrome(t *testing.T) &#123;</span><br><span class="line">    var tests = []struct &#123;</span><br><span class="line">        input string</span><br><span class="line">        want     bool</span><br><span class="line">    &#125;&#123;</span><br><span class="line">        &#123;&quot;&quot;, true&#125;,</span><br><span class="line">        &#123;&quot;a&quot;, true&#125;,</span><br><span class="line">        &#123;&quot;aa&quot;, true&#125;,</span><br><span class="line">        &#123;&quot;ab&quot;, false&#125;,</span><br><span class="line">        &#123;&quot;kayak&quot;, true&#125;,</span><br><span class="line">        &#123;&quot;detartrated&quot;, true&#125;,</span><br><span class="line">        &#123;&quot;A man, a plan, a canal: Panama&quot;, true&#125;,</span><br><span class="line">        &#123;&quot;Evil I did dwell; lewd did I live.&quot;, true&#125;,</span><br><span class="line">        &#123;&quot;Able was I ere I saw Elba&quot;, true&#125;,</span><br><span class="line">        &#123;&quot;été&quot;, true&#125;,</span><br><span class="line">        &#123;&quot;Et se resservir, ivresse reste.&quot;, true&#125;,</span><br><span class="line">        &#123;&quot;palindrome&quot;, false&#125;, // non-palindrome</span><br><span class="line">        &#123;&quot;desserts&quot;, false&#125;,   // semi-palindrome</span><br><span class="line">    &#125;</span><br><span class="line">    for _, test := range tests &#123;</span><br><span class="line">        if got := IsPalindrome(test.input); got != test.want &#123;</span><br><span class="line">            t.Errorf(&quot;IsPalindrome(%q) = %v&quot;, test.input, got)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们的新测试阿都通过了:<br>$ go test <a href="http://gopl.io/ch11/word2" target="_blank" rel="noopener">gopl.io/ch11/word2</a><br>ok      <a href="http://gopl.io/ch11/word2" target="_blank" rel="noopener">gopl.io/ch11/word2</a>      0.015s<br>这种表格驱动的测试在Go中很常见的. 我们很容易想表格添加新的测试数据, 并且后面的测试逻辑也没有冗余, 这样我们可以更好地完善错误信息.<br>失败的测试的输出并不包括调用t.Errorf 时刻的堆栈调用信息. 不像其他语言或测试框架的assert 断言, t.Errorf 调用也没有引起panic 或停止测试的执行. 卽使表格中前面的数据导致了测试的失败, 表格后面的测试数据依然会运行测试, 因此在一个测试中我们可能了解多个失败的信息.<br>如果我们眞的需要停止测试, 或许是因为初始化失败或可能是早先的错误导致了后续错误等原因, 我们可以使用t.Fatal 或t.Fatalf 停止测试. 它们必须在和测试函数同一个goroutine 内调用.<br>测试失败的信息一般的形式是&quot;f(x) = y, want z&quot;, f(x) 解释了失败的操作和对应的输出, y 是实际的运行结果, z 是期望的正确的结果. 就像前面检查回文字符串的例子, 实际的函数用于f(x) 部分. 如果显示x 是表格驱动型测试中比较重要的部分, 因为同一个断言可能对应不同的表格项执行多次. 要避免无用和冗余的信息. 在测试类似IsPalindrome 返回布尔类型的函数时, 可以忽略并没有额外信息的z 部分. 如果x, y 或z 是y 的长度, 输出一个相关部分的简明总结卽可. 测试的作者应该要努力帮助程序员诊断失败的测试.</p><h2 id="basicgo"><a class="markdownIt-Anchor" href="#basicgo"></a> basic.go</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">func calcTriangle(a, b int) int &#123;</span><br><span class="line">var c int</span><br><span class="line">c = int(math.Sqrt(float64(a*a + b*b)))</span><br><span class="line">return c</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="triangle_testgo"><a class="markdownIt-Anchor" href="#triangle_testgo"></a> triangle_test.go</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"testing"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestTriangle</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">tests := []<span class="keyword">struct</span>&#123; a, b, c <span class="keyword">int</span> &#125;&#123;</span><br><span class="line">&#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;,</span><br><span class="line">&#123;<span class="number">5</span>, <span class="number">12</span>, <span class="number">13</span>&#125;,</span><br><span class="line">&#123;<span class="number">8</span>, <span class="number">15</span>, <span class="number">17</span>&#125;,</span><br><span class="line">&#123;<span class="number">12</span>, <span class="number">35</span>, <span class="number">37</span>&#125;,</span><br><span class="line">&#123;<span class="number">30000</span>, <span class="number">40000</span>, <span class="number">50000</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, tt := <span class="keyword">range</span> tests &#123;</span><br><span class="line"><span class="keyword">if</span> actual := calcTriangle(tt.a, tt.b); actual != tt.c &#123;</span><br><span class="line">t.Errorf(<span class="string">"calcTriangle(%d, %d); "</span>+</span><br><span class="line"><span class="string">"got %d; expected %d"</span>,</span><br><span class="line">tt.a, tt.b, actual, tt.c)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="noreactping_testgo"><a class="markdownIt-Anchor" href="#noreactping_testgo"></a> noreactping_test.go</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"testing"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestSubstr</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">tests := []<span class="keyword">struct</span> &#123;</span><br><span class="line">s   <span class="keyword">string</span></span><br><span class="line">ans <span class="keyword">int</span></span><br><span class="line">&#125;&#123;</span><br><span class="line"><span class="comment">// Normal cases</span></span><br><span class="line">&#123;<span class="string">"abcabcbb"</span>, <span class="number">3</span>&#125;,</span><br><span class="line">&#123;<span class="string">"pwwkew"</span>, <span class="number">3</span>&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">// Edge cases</span></span><br><span class="line">&#123;<span class="string">""</span>, <span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="string">"b"</span>, <span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="string">"bbbbbbbbb"</span>, <span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="string">"abcabcabcd"</span>, <span class="number">4</span>&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">// Chinese support</span></span><br><span class="line">&#123;<span class="string">"这里是慕课网"</span>, <span class="number">6</span>&#125;,</span><br><span class="line">&#123;<span class="string">"一二三二一"</span>, <span class="number">3</span>&#125;,</span><br><span class="line">&#123;<span class="string">"黑化肥挥发发灰会花飞灰化肥挥发发黑会飞花"</span>, <span class="number">8</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, tt := <span class="keyword">range</span> tests &#123;</span><br><span class="line">actual := lengthOfNonRepeatingSubStr(tt.s)</span><br><span class="line"><span class="keyword">if</span> actual != tt.ans &#123;</span><br><span class="line">t.Errorf(<span class="string">"got %d for input %s; "</span>+</span><br><span class="line"><span class="string">"expected %d"</span>,</span><br><span class="line">actual, tt.s, tt.ans)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="随机测试"><a class="markdownIt-Anchor" href="#随机测试"></a> 随机测试</h2><p>表格驱动的测试便于构造基于精心挑选的测试数据的测试用例. 另一种测试思路是随机测试, 也就是通过构造更广泛的随机输入来测试探索函数的行为.<br>那么对于一个随机的输入, 我们如何能知道希望的输出结果呢? 这里有两种策略. 第一个是编写另一个函数, 使用简单和清晰的算法, 虽然效率较低但是行为和要测试的函数一致, 然后针对相同的随机输入检查两者的输出结果. 第二种是生成的随机输入的数据遵循特定的模式, 这样我们就可以知道期望的输出的模式.<br>下面的例子使用的是第二种方法: randomPalindrome 函数用于随机生成回文字符串.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"math/rand"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// randomPalindrome returns a palindrome whose length and contents</span></span><br><span class="line"><span class="comment">// are derived from the pseudo-random number generator rng.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">randomPalindrome</span><span class="params">(rng *rand.Rand)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    n := rng.Intn(<span class="number">25</span>) <span class="comment">// random length up to 24</span></span><br><span class="line">    runes := <span class="built_in">make</span>([]<span class="keyword">rune</span>, n)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; (n+<span class="number">1</span>)/<span class="number">2</span>; i++ &#123;</span><br><span class="line">        r := <span class="keyword">rune</span>(rng.Intn(<span class="number">0x1000</span>)) <span class="comment">// random rune up to '\u0999'</span></span><br><span class="line">        runes[i] = r</span><br><span class="line">        runes[n<span class="number">-1</span>-i] = r</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">string</span>(runes)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestRandomPalindromes</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">    <span class="comment">// Initialize a pseudo-random number generator.</span></span><br><span class="line">    seed := time.Now().UTC().UnixNano()</span><br><span class="line">    t.Logf(<span class="string">"Random seed: %d"</span>, seed)</span><br><span class="line">    rng := rand.New(rand.NewSource(seed))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++ &#123;</span><br><span class="line">        p := randomPalindrome(rng)</span><br><span class="line">        <span class="keyword">if</span> !IsPalindrome(p) &#123;</span><br><span class="line">            t.Errorf(<span class="string">"IsPalindrome(%q) = false"</span>, p)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然随机测试有不确定因素, 但是它也是至关重要的, 我们可以从失败测试的日志获取足够的信息. 在我们的例子中, 输入IsPalindrome 的p 参数将告诉我们眞实的数据, 但是对于函数将接受更复杂的输入, 不需要保存所有的输入, 只要日志中简单地记录随机数种子卽可(像上面的方式). 有了这些随机数初始化种子, 我们可以很容易修改测试代码以重现失败的随机测试.<br>通过使用当前时间作为随机种子, 在整个过程中的每次运行测试命令时都将探索新的随机数据. 如果你使用的是定期运行的自动化测试集成系统, 随机测试将特别有价值.</p><h2 id="测试代码覆盖率"><a class="markdownIt-Anchor" href="#测试代码覆盖率"></a> 测试代码覆盖率</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">go test  -coverprofile=c.out</span><br><span class="line">go tool cover -html=c.out</span><br></pre></td></tr></table></figure><h2 id="性能测试"><a class="markdownIt-Anchor" href="#性能测试"></a> 性能测试</h2><p>同一个函数执行N多次。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">func BenchmarkSubstr(b *testing.B) &#123;</span><br><span class="line">s := &quot;黑化肥挥发发灰会花飞灰化肥挥发发黑会飞花&quot;</span><br><span class="line">//for i := 0; i &lt; 13; i++ &#123;</span><br><span class="line">//s = s + s</span><br><span class="line">//&#125;</span><br><span class="line">//b.Logf(&quot;len(s) = %d&quot;, len(s))</span><br><span class="line">ans := 8</span><br><span class="line">//b.ResetTimer()</span><br><span class="line"></span><br><span class="line">for i := 0; i &lt; b.N; i++ &#123;</span><br><span class="line">actual := lengthOfNonRepeatingSubStr(s)</span><br><span class="line">if actual != ans &#123;</span><br><span class="line">b.Errorf(&quot;got %d for input %s; &quot;+</span><br><span class="line">&quot;expected %d&quot;,</span><br><span class="line">actual, s, ans)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func lengthOfNonRepeatingSubStr(s string) int &#123;</span><br><span class="line">lastOccurred := make(map[rune]int)</span><br><span class="line">start := 0</span><br><span class="line">maxLength := 0</span><br><span class="line"></span><br><span class="line">for i, ch := range []rune(s) &#123;</span><br><span class="line">if lastI, ok := lastOccurred[ch]; ok &amp;&amp; lastI &gt;= start &#123;</span><br><span class="line">start = lastI + 1</span><br><span class="line">&#125;</span><br><span class="line">if i-start+1 &gt; maxLength &#123;</span><br><span class="line">maxLength = i - start + 1</span><br><span class="line">&#125;</span><br><span class="line">lastOccurred[ch] = i</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return maxLength</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;go-test&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#go-test&quot;&gt;&lt;/a&gt; go test&lt;/h2&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter
      
    
    </summary>
    
      <category term="go" scheme="https://dreamerjonson.com/categories/go/"/>
    
    
      <category term="go" scheme="https://dreamerjonson.com/tags/go/"/>
    
  </entry>
  
</feed>
